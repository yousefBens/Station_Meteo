
Station_meteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000157a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f58  08015978  08015978  00025978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080188d0  080188d0  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080188d0  080188d0  000288d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188d8  080188d8  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080188d8  080188d8  000288d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080188dc  080188dc  000288dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080188e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  200001ec  08018acc  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000f70  08018acc  00030f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002eadb  00000000  00000000  0003025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c34  00000000  00000000  0005ed3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002678  00000000  00000000  00065970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d7d  00000000  00000000  00067fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031794  00000000  00000000  00069d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035ed9  00000000  00000000  0009b4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011298b  00000000  00000000  000d13d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b500  00000000  00000000  001e3d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001ef260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801595c 	.word	0x0801595c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0801595c 	.word	0x0801595c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a6 	b.w	800104c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9e08      	ldr	r6, [sp, #32]
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4694      	mov	ip, r2
 8000d98:	d965      	bls.n	8000e66 <__udivmoddi4+0xe2>
 8000d9a:	fab2 f382 	clz	r3, r2
 8000d9e:	b143      	cbz	r3, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	f1c3 0220 	rsb	r2, r3, #32
 8000da8:	409f      	lsls	r7, r3
 8000daa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dae:	4317      	orrs	r7, r2
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db6:	fa1f f58c 	uxth.w	r5, ip
 8000dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc8:	fb01 f005 	mul.w	r0, r1, r5
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd8:	f080 811c 	bcs.w	8001014 <__udivmoddi4+0x290>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f240 8119 	bls.w	8001014 <__udivmoddi4+0x290>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4462      	add	r2, ip
 8000de6:	1a12      	subs	r2, r2, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df6:	fb00 f505 	mul.w	r5, r0, r5
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x90>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e06:	f080 8107 	bcs.w	8001018 <__udivmoddi4+0x294>
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	f240 8104 	bls.w	8001018 <__udivmoddi4+0x294>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11e      	cbz	r6, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40dc      	lsrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	e9c6 4300 	strd	r4, r3, [r6]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0xbc>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	f000 80ed 	beq.w	800100e <__udivmoddi4+0x28a>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	fab3 f183 	clz	r1, r3
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d149      	bne.n	8000edc <__udivmoddi4+0x158>
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	d302      	bcc.n	8000e52 <__udivmoddi4+0xce>
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	f200 80f8 	bhi.w	8001042 <__udivmoddi4+0x2be>
 8000e52:	1a84      	subs	r4, r0, r2
 8000e54:	eb65 0203 	sbc.w	r2, r5, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d0e2      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	e9c6 4700 	strd	r4, r7, [r6]
 8000e64:	e7df      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xe6>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f382 	clz	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x210>
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e84:	fb07 2015 	mls	r0, r7, r5, r2
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e8e:	fb0e f005 	mul.w	r0, lr, r5
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x124>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x122>
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f200 80cb 	bhi.w	800103c <__udivmoddi4+0x2b8>
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	b2a4      	uxth	r4, r4
 8000eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x14e>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec8:	d202      	bcs.n	8000ed0 <__udivmoddi4+0x14c>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f200 80bb 	bhi.w	8001046 <__udivmoddi4+0x2c2>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	eba4 040e 	sub.w	r4, r4, lr
 8000ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eda:	e79f      	b.n	8000e1c <__udivmoddi4+0x98>
 8000edc:	f1c1 0720 	rsb	r7, r1, #32
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eea:	fa05 f401 	lsl.w	r4, r5, r1
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	40fd      	lsrs	r5, r7
 8000ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef8:	4323      	orrs	r3, r4
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fb09 5518 	mls	r5, r9, r8, r5
 8000f06:	0c1c      	lsrs	r4, r3, #16
 8000f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	fa00 f001 	lsl.w	r0, r0, r1
 8000f1a:	d90b      	bls.n	8000f34 <__udivmoddi4+0x1b0>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f24:	f080 8088 	bcs.w	8001038 <__udivmoddi4+0x2b4>
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f240 8085 	bls.w	8001038 <__udivmoddi4+0x2b4>
 8000f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f32:	4464      	add	r4, ip
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	b29d      	uxth	r5, r3
 8000f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x1da>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f54:	d26c      	bcs.n	8001030 <__udivmoddi4+0x2ac>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	d96a      	bls.n	8001030 <__udivmoddi4+0x2ac>
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f62:	fba3 9502 	umull	r9, r5, r3, r2
 8000f66:	eba4 040e 	sub.w	r4, r4, lr
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	46c8      	mov	r8, r9
 8000f6e:	46ae      	mov	lr, r5
 8000f70:	d356      	bcc.n	8001020 <__udivmoddi4+0x29c>
 8000f72:	d053      	beq.n	800101c <__udivmoddi4+0x298>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x208>
 8000f76:	ebb0 0208 	subs.w	r2, r0, r8
 8000f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	40cc      	lsrs	r4, r1
 8000f86:	4317      	orrs	r7, r2
 8000f88:	e9c6 7400 	strd	r7, r4, [r6]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	f1c3 0120 	rsb	r1, r3, #32
 8000f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	432a      	orrs	r2, r5
 8000fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000fc2:	428d      	cmp	r5, r1
 8000fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x258>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fd2:	d22f      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d92d      	bls.n	8001034 <__udivmoddi4+0x2b0>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1b49      	subs	r1, r1, r5
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x282>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffc:	d216      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d914      	bls.n	800102c <__udivmoddi4+0x2a8>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	1a52      	subs	r2, r2, r1
 8001008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800100c:	e738      	b.n	8000e80 <__udivmoddi4+0xfc>
 800100e:	4631      	mov	r1, r6
 8001010:	4630      	mov	r0, r6
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xa2>
 8001014:	4639      	mov	r1, r7
 8001016:	e6e6      	b.n	8000de6 <__udivmoddi4+0x62>
 8001018:	4610      	mov	r0, r2
 800101a:	e6fb      	b.n	8000e14 <__udivmoddi4+0x90>
 800101c:	4548      	cmp	r0, r9
 800101e:	d2a9      	bcs.n	8000f74 <__udivmoddi4+0x1f0>
 8001020:	ebb9 0802 	subs.w	r8, r9, r2
 8001024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001028:	3b01      	subs	r3, #1
 800102a:	e7a3      	b.n	8000f74 <__udivmoddi4+0x1f0>
 800102c:	4645      	mov	r5, r8
 800102e:	e7ea      	b.n	8001006 <__udivmoddi4+0x282>
 8001030:	462b      	mov	r3, r5
 8001032:	e794      	b.n	8000f5e <__udivmoddi4+0x1da>
 8001034:	4640      	mov	r0, r8
 8001036:	e7d1      	b.n	8000fdc <__udivmoddi4+0x258>
 8001038:	46d0      	mov	r8, sl
 800103a:	e77b      	b.n	8000f34 <__udivmoddi4+0x1b0>
 800103c:	3d02      	subs	r5, #2
 800103e:	4462      	add	r2, ip
 8001040:	e732      	b.n	8000ea8 <__udivmoddi4+0x124>
 8001042:	4608      	mov	r0, r1
 8001044:	e70a      	b.n	8000e5c <__udivmoddi4+0xd8>
 8001046:	4464      	add	r4, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e742      	b.n	8000ed2 <__udivmoddi4+0x14e>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <AfficherCase>:




// Fonction pour afficher une case avec titre et variable
void AfficherCase(char *titre, float valeur, uint16_t posX, uint16_t posY) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	ed87 0a02 	vstr	s0, [r7, #8]
 800105c:	460b      	mov	r3, r1
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	4613      	mov	r3, r2
 8001062:	80bb      	strh	r3, [r7, #4]
	char msg[20];
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001064:	482b      	ldr	r0, [pc, #172]	; (8001114 <AfficherCase+0xc4>)
 8001066:	f003 fe87 	bl	8004d78 <BSP_LCD_SetTextColor>
	sprintf(msg, titre);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	4618      	mov	r0, r3
 8001072:	f010 fe85 	bl	8011d80 <siprintf>
	BSP_LCD_DrawRect(posX, posY, 130, 25);
 8001076:	88b9      	ldrh	r1, [r7, #4]
 8001078:	88f8      	ldrh	r0, [r7, #6]
 800107a:	2319      	movs	r3, #25
 800107c:	2282      	movs	r2, #130	; 0x82
 800107e:	f004 f987 	bl	8005390 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(posX, posY, 130, 25);
 8001082:	88b9      	ldrh	r1, [r7, #4]
 8001084:	88f8      	ldrh	r0, [r7, #6]
 8001086:	2319      	movs	r3, #25
 8001088:	2282      	movs	r2, #130	; 0x82
 800108a:	f004 fae5 	bl	8005658 <BSP_LCD_FillRect>
	BSP_LCD_SetFont(&Font16);
 800108e:	4822      	ldr	r0, [pc, #136]	; (8001118 <AfficherCase+0xc8>)
 8001090:	f003 fea4 	bl	8004ddc <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001094:	481f      	ldr	r0, [pc, #124]	; (8001114 <AfficherCase+0xc4>)
 8001096:	f003 fe87 	bl	8004da8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800109a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800109e:	f003 fe6b 	bl	8004d78 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(posX + 10, posY + 5, (uint8_t *)msg, LEFT_MODE);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	330a      	adds	r3, #10
 80010a6:	b298      	uxth	r0, r3
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	3305      	adds	r3, #5
 80010ac:	b299      	uxth	r1, r3
 80010ae:	f107 0214 	add.w	r2, r7, #20
 80010b2:	2303      	movs	r3, #3
 80010b4:	f003 ff18 	bl	8004ee8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <AfficherCase+0xc4>)
 80010ba:	f003 fe5d 	bl	8004d78 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(posX, posY, 130, 90);
 80010be:	88b9      	ldrh	r1, [r7, #4]
 80010c0:	88f8      	ldrh	r0, [r7, #6]
 80010c2:	235a      	movs	r3, #90	; 0x5a
 80010c4:	2282      	movs	r2, #130	; 0x82
 80010c6:	f004 f963 	bl	8005390 <BSP_LCD_DrawRect>
	sprintf(msg, "%6.2f", ( float)valeur);
 80010ca:	68b8      	ldr	r0, [r7, #8]
 80010cc:	f7ff fa6c 	bl	80005a8 <__aeabi_f2d>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	f107 0014 	add.w	r0, r7, #20
 80010d8:	4910      	ldr	r1, [pc, #64]	; (800111c <AfficherCase+0xcc>)
 80010da:	f010 fe51 	bl	8011d80 <siprintf>

	BSP_LCD_SetFont(&Font16);
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <AfficherCase+0xc8>)
 80010e0:	f003 fe7c 	bl	8004ddc <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f003 fe5e 	bl	8004da8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80010ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010f0:	f003 fe42 	bl	8004d78 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(posX + 10,posY + 45, (uint8_t *)msg, LEFT_MODE);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	330a      	adds	r3, #10
 80010f8:	b298      	uxth	r0, r3
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	332d      	adds	r3, #45	; 0x2d
 80010fe:	b299      	uxth	r1, r3
 8001100:	f107 0214 	add.w	r2, r7, #20
 8001104:	2303      	movs	r3, #3
 8001106:	f003 feef 	bl	8004ee8 <BSP_LCD_DisplayStringAt>

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	ff0000ff 	.word	0xff0000ff
 8001118:	20000010 	.word	0x20000010
 800111c:	08015978 	.word	0x08015978

08001120 <AfficherCaseD>:
// Afficher variable de type char
void AfficherCaseD(char *titre, char* valeur, uint16_t posX, uint16_t posY) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	460b      	mov	r3, r1
 8001130:	80fb      	strh	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	80bb      	strh	r3, [r7, #4]

	char msg[20];
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001136:	482a      	ldr	r0, [pc, #168]	; (80011e0 <AfficherCaseD+0xc0>)
 8001138:	f003 fe1e 	bl	8004d78 <BSP_LCD_SetTextColor>
	sprintf(msg, titre);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	4618      	mov	r0, r3
 8001144:	f010 fe1c 	bl	8011d80 <siprintf>
	BSP_LCD_DrawRect(posX, posY, 130, 25);
 8001148:	88b9      	ldrh	r1, [r7, #4]
 800114a:	88f8      	ldrh	r0, [r7, #6]
 800114c:	2319      	movs	r3, #25
 800114e:	2282      	movs	r2, #130	; 0x82
 8001150:	f004 f91e 	bl	8005390 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(posX, posY, 130, 25);
 8001154:	88b9      	ldrh	r1, [r7, #4]
 8001156:	88f8      	ldrh	r0, [r7, #6]
 8001158:	2319      	movs	r3, #25
 800115a:	2282      	movs	r2, #130	; 0x82
 800115c:	f004 fa7c 	bl	8005658 <BSP_LCD_FillRect>
	BSP_LCD_SetFont(&Font16);
 8001160:	4820      	ldr	r0, [pc, #128]	; (80011e4 <AfficherCaseD+0xc4>)
 8001162:	f003 fe3b 	bl	8004ddc <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <AfficherCaseD+0xc0>)
 8001168:	f003 fe1e 	bl	8004da8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800116c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001170:	f003 fe02 	bl	8004d78 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(posX + 10, posY + 5, (uint8_t *)msg, LEFT_MODE);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	330a      	adds	r3, #10
 8001178:	b298      	uxth	r0, r3
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	3305      	adds	r3, #5
 800117e:	b299      	uxth	r1, r3
 8001180:	f107 0214 	add.w	r2, r7, #20
 8001184:	2303      	movs	r3, #3
 8001186:	f003 feaf 	bl	8004ee8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800118a:	4815      	ldr	r0, [pc, #84]	; (80011e0 <AfficherCaseD+0xc0>)
 800118c:	f003 fdf4 	bl	8004d78 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(posX, posY, 130, 90);
 8001190:	88b9      	ldrh	r1, [r7, #4]
 8001192:	88f8      	ldrh	r0, [r7, #6]
 8001194:	235a      	movs	r3, #90	; 0x5a
 8001196:	2282      	movs	r2, #130	; 0x82
 8001198:	f004 f8fa 	bl	8005390 <BSP_LCD_DrawRect>
	sprintf(msg, "%s", valeur);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	4911      	ldr	r1, [pc, #68]	; (80011e8 <AfficherCaseD+0xc8>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f010 fdeb 	bl	8011d80 <siprintf>
	//humidity_measure();
	BSP_LCD_SetFont(&Font16);
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <AfficherCaseD+0xc4>)
 80011ac:	f003 fe16 	bl	8004ddc <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f003 fdf8 	bl	8004da8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011bc:	f003 fddc 	bl	8004d78 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(posX + 10,posY + 45, (uint8_t *)msg, LEFT_MODE);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	330a      	adds	r3, #10
 80011c4:	b298      	uxth	r0, r3
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	332d      	adds	r3, #45	; 0x2d
 80011ca:	b299      	uxth	r1, r3
 80011cc:	f107 0214 	add.w	r2, r7, #20
 80011d0:	2303      	movs	r3, #3
 80011d2:	f003 fe89 	bl	8004ee8 <BSP_LCD_DisplayStringAt>

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	ff0000ff 	.word	0xff0000ff
 80011e4:	20000010 	.word	0x20000010
 80011e8:	08015980 	.word	0x08015980

080011ec <AfficherBouton>:

// Pour affichet le mot next dans la page
void AfficherBouton(char *texte, uint16_t posX, uint16_t posY) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001200:	f003 fdba 	bl	8004d78 <BSP_LCD_SetTextColor>
  //BSP_LCD_DrawRect(posX, posY, 80, 30);
  BSP_LCD_DisplayStringAt(posX + 10, posY + 10, (uint8_t *)texte, LEFT_MODE);
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	330a      	adds	r3, #10
 8001208:	b298      	uxth	r0, r3
 800120a:	883b      	ldrh	r3, [r7, #0]
 800120c:	330a      	adds	r3, #10
 800120e:	b299      	uxth	r1, r3
 8001210:	2303      	movs	r3, #3
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	f003 fe68 	bl	8004ee8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);  // Revenir à la couleur par défaut
 8001218:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800121c:	f003 fdac 	bl	8004d78 <BSP_LCD_SetTextColor>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <init_page>:

// La page initial
void init_page(float* T, float* H, float* P, char** D, float* V, float* Pl, int taille) {
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
	  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 8001236:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800123a:	2001      	movs	r0, #1
 800123c:	f003 fcee 	bl	8004c1c <BSP_LCD_LayerDefaultInit>
	  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 8001240:	2101      	movs	r1, #1
 8001242:	2001      	movs	r0, #1
 8001244:	f003 fd5a 	bl	8004cfc <BSP_LCD_SetLayerVisible>
	  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8001248:	2001      	movs	r0, #1
 800124a:	f003 fd47 	bl	8004cdc <BSP_LCD_SelectLayer>
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800124e:	f04f 30ff 	mov.w	r0, #4294967295
 8001252:	f003 fddd 	bl	8004e10 <BSP_LCD_Clear>
	  char titre[] = "Station Meteo: Accueil";
 8001256:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <init_page+0x178>)
 8001258:	f107 0410 	add.w	r4, r7, #16
 800125c:	461d      	mov	r5, r3
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001266:	6020      	str	r0, [r4, #0]
 8001268:	3404      	adds	r4, #4
 800126a:	8021      	strh	r1, [r4, #0]
 800126c:	3402      	adds	r4, #2
 800126e:	0c0b      	lsrs	r3, r1, #16
 8001270:	7023      	strb	r3, [r4, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001272:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001276:	f003 fd7f 	bl	8004d78 <BSP_LCD_SetTextColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800127a:	484a      	ldr	r0, [pc, #296]	; (80013a4 <init_page+0x17c>)
 800127c:	f003 fd7c 	bl	8004d78 <BSP_LCD_SetTextColor>
		//sprintf(msg, " MENU PRINCIPALE");
		BSP_LCD_FillRect(0, 0,480,30);
 8001280:	231e      	movs	r3, #30
 8001282:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001286:	2100      	movs	r1, #0
 8001288:	2000      	movs	r0, #0
 800128a:	f004 f9e5 	bl	8005658 <BSP_LCD_FillRect>
		BSP_LCD_SetFont(&Font16);
 800128e:	4846      	ldr	r0, [pc, #280]	; (80013a8 <init_page+0x180>)
 8001290:	f003 fda4 	bl	8004ddc <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001294:	4843      	ldr	r0, [pc, #268]	; (80013a4 <init_page+0x17c>)
 8001296:	f003 fd87 	bl	8004da8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800129a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800129e:	f003 fd6b 	bl	8004d78 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 80012a2:	f107 0210 	add.w	r2, r7, #16
 80012a6:	2301      	movs	r3, #1
 80012a8:	2105      	movs	r1, #5
 80012aa:	2000      	movs	r0, #0
 80012ac:	f003 fe1c 	bl	8004ee8 <BSP_LCD_DisplayStringAt>
	  	  AfficherCase("Tempera(C)", T[taille -1], 5, 50);
 80012b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	2232      	movs	r2, #50	; 0x32
 80012c4:	2105      	movs	r1, #5
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	4838      	ldr	r0, [pc, #224]	; (80013ac <init_page+0x184>)
 80012cc:	f7ff fec0 	bl	8001050 <AfficherCase>
	  	    AfficherCase("Humidite", H[taille -1], 180, 50);
 80012d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012d2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	2232      	movs	r2, #50	; 0x32
 80012e4:	21b4      	movs	r1, #180	; 0xb4
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	4831      	ldr	r0, [pc, #196]	; (80013b0 <init_page+0x188>)
 80012ec:	f7ff feb0 	bl	8001050 <AfficherCase>
	  	    AfficherCase("Press(hPa)", P[taille -1], 330, 50);
 80012f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012f2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	2232      	movs	r2, #50	; 0x32
 8001304:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	4829      	ldr	r0, [pc, #164]	; (80013b4 <init_page+0x18c>)
 800130e:	f7ff fe9f 	bl	8001050 <AfficherCase>
	  	    AfficherCaseD("Direction", D[taille -1], 5, 160);
 8001312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001314:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	4413      	add	r3, r2
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	23a0      	movs	r3, #160	; 0xa0
 8001324:	2205      	movs	r2, #5
 8001326:	4824      	ldr	r0, [pc, #144]	; (80013b8 <init_page+0x190>)
 8001328:	f7ff fefa 	bl	8001120 <AfficherCaseD>
	  	    AfficherCase("Vit(Km/h)", V[taille -1], 180, 160);
 800132c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800132e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001338:	4413      	add	r3, r2
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	22a0      	movs	r2, #160	; 0xa0
 8001340:	21b4      	movs	r1, #180	; 0xb4
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <init_page+0x194>)
 8001348:	f7ff fe82 	bl	8001050 <AfficherCase>
	  	    AfficherCase("Pluie(mm)", Pl[taille -1] * 100, 330, 160);
 800134c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800134e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001358:	4413      	add	r3, r2
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80013c0 <init_page+0x198>
 8001362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001366:	22a0      	movs	r2, #160	; 0xa0
 8001368:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	4814      	ldr	r0, [pc, #80]	; (80013c4 <init_page+0x19c>)
 8001372:	f7ff fe6d 	bl	8001050 <AfficherCase>

	  // Afficher le bouton de changement de page
	      AfficherBouton("Next", BSP_LCD_GetXSize() - 90, BSP_LCD_GetYSize() - 30);
 8001376:	f003 fc29 	bl	8004bcc <BSP_LCD_GetXSize>
 800137a:	4603      	mov	r3, r0
 800137c:	b29b      	uxth	r3, r3
 800137e:	3b5a      	subs	r3, #90	; 0x5a
 8001380:	b29c      	uxth	r4, r3
 8001382:	f003 fc37 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001386:	4603      	mov	r3, r0
 8001388:	b29b      	uxth	r3, r3
 800138a:	3b1e      	subs	r3, #30
 800138c:	b29b      	uxth	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	4621      	mov	r1, r4
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <init_page+0x1a0>)
 8001394:	f7ff ff2a 	bl	80011ec <AfficherBouton>

}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	; 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bdb0      	pop	{r4, r5, r7, pc}
 80013a0:	080159d4 	.word	0x080159d4
 80013a4:	ff0000ff 	.word	0xff0000ff
 80013a8:	20000010 	.word	0x20000010
 80013ac:	08015984 	.word	0x08015984
 80013b0:	08015990 	.word	0x08015990
 80013b4:	0801599c 	.word	0x0801599c
 80013b8:	080159a8 	.word	0x080159a8
 80013bc:	080159b4 	.word	0x080159b4
 80013c0:	42c80000 	.word	0x42c80000
 80013c4:	080159c0 	.word	0x080159c0
 80013c8:	080159cc 	.word	0x080159cc

080013cc <DessinerAxeX>:

// Dessiner l'axe X
void DessinerAxeX(void) {
 80013cc:	b598      	push	{r3, r4, r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  // Dessiner l'axe horizontal (X)
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013d4:	f003 fcd0 	bl	8004d78 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawHLine(10, BSP_LCD_GetYSize() -100, BSP_LCD_GetXSize() - 20);
 80013d8:	f003 fc0c 	bl	8004bf4 <BSP_LCD_GetYSize>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3b64      	subs	r3, #100	; 0x64
 80013e2:	b29c      	uxth	r4, r3
 80013e4:	f003 fbf2 	bl	8004bcc <BSP_LCD_GetXSize>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3b14      	subs	r3, #20
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	200a      	movs	r0, #10
 80013f6:	f003 fe3f 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -110, 10);
 80013fa:	f003 fbfb 	bl	8004bf4 <BSP_LCD_GetYSize>
 80013fe:	4603      	mov	r3, r0
 8001400:	b29b      	uxth	r3, r3
 8001402:	3b6e      	subs	r3, #110	; 0x6e
 8001404:	b29b      	uxth	r3, r3
 8001406:	220a      	movs	r2, #10
 8001408:	4619      	mov	r1, r3
 800140a:	205f      	movs	r0, #95	; 0x5f
 800140c:	f003 fe34 	bl	8005078 <BSP_LCD_DrawHLine>

  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -120, 10);
 8001410:	f003 fbf0 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001414:	4603      	mov	r3, r0
 8001416:	b29b      	uxth	r3, r3
 8001418:	3b78      	subs	r3, #120	; 0x78
 800141a:	b29b      	uxth	r3, r3
 800141c:	220a      	movs	r2, #10
 800141e:	4619      	mov	r1, r3
 8001420:	205f      	movs	r0, #95	; 0x5f
 8001422:	f003 fe29 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -130, 10);
 8001426:	f003 fbe5 	bl	8004bf4 <BSP_LCD_GetYSize>
 800142a:	4603      	mov	r3, r0
 800142c:	b29b      	uxth	r3, r3
 800142e:	3b82      	subs	r3, #130	; 0x82
 8001430:	b29b      	uxth	r3, r3
 8001432:	220a      	movs	r2, #10
 8001434:	4619      	mov	r1, r3
 8001436:	205f      	movs	r0, #95	; 0x5f
 8001438:	f003 fe1e 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -140, 10);
 800143c:	f003 fbda 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001440:	4603      	mov	r3, r0
 8001442:	b29b      	uxth	r3, r3
 8001444:	3b8c      	subs	r3, #140	; 0x8c
 8001446:	b29b      	uxth	r3, r3
 8001448:	220a      	movs	r2, #10
 800144a:	4619      	mov	r1, r3
 800144c:	205f      	movs	r0, #95	; 0x5f
 800144e:	f003 fe13 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -150, 10);
 8001452:	f003 fbcf 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001456:	4603      	mov	r3, r0
 8001458:	b29b      	uxth	r3, r3
 800145a:	3b96      	subs	r3, #150	; 0x96
 800145c:	b29b      	uxth	r3, r3
 800145e:	220a      	movs	r2, #10
 8001460:	4619      	mov	r1, r3
 8001462:	205f      	movs	r0, #95	; 0x5f
 8001464:	f003 fe08 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -160, 10);
 8001468:	f003 fbc4 	bl	8004bf4 <BSP_LCD_GetYSize>
 800146c:	4603      	mov	r3, r0
 800146e:	b29b      	uxth	r3, r3
 8001470:	3ba0      	subs	r3, #160	; 0xa0
 8001472:	b29b      	uxth	r3, r3
 8001474:	220a      	movs	r2, #10
 8001476:	4619      	mov	r1, r3
 8001478:	205f      	movs	r0, #95	; 0x5f
 800147a:	f003 fdfd 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -170, 10);
 800147e:	f003 fbb9 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001482:	4603      	mov	r3, r0
 8001484:	b29b      	uxth	r3, r3
 8001486:	3baa      	subs	r3, #170	; 0xaa
 8001488:	b29b      	uxth	r3, r3
 800148a:	220a      	movs	r2, #10
 800148c:	4619      	mov	r1, r3
 800148e:	205f      	movs	r0, #95	; 0x5f
 8001490:	f003 fdf2 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -180, 10);
 8001494:	f003 fbae 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001498:	4603      	mov	r3, r0
 800149a:	b29b      	uxth	r3, r3
 800149c:	3bb4      	subs	r3, #180	; 0xb4
 800149e:	b29b      	uxth	r3, r3
 80014a0:	220a      	movs	r2, #10
 80014a2:	4619      	mov	r1, r3
 80014a4:	205f      	movs	r0, #95	; 0x5f
 80014a6:	f003 fde7 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -190, 10);
 80014aa:	f003 fba3 	bl	8004bf4 <BSP_LCD_GetYSize>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3bbe      	subs	r3, #190	; 0xbe
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	220a      	movs	r2, #10
 80014b8:	4619      	mov	r1, r3
 80014ba:	205f      	movs	r0, #95	; 0x5f
 80014bc:	f003 fddc 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -200, 10);
 80014c0:	f003 fb98 	bl	8004bf4 <BSP_LCD_GetYSize>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3bc8      	subs	r3, #200	; 0xc8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	220a      	movs	r2, #10
 80014ce:	4619      	mov	r1, r3
 80014d0:	205f      	movs	r0, #95	; 0x5f
 80014d2:	f003 fdd1 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -210, 10);
 80014d6:	f003 fb8d 	bl	8004bf4 <BSP_LCD_GetYSize>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3bd2      	subs	r3, #210	; 0xd2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	220a      	movs	r2, #10
 80014e4:	4619      	mov	r1, r3
 80014e6:	205f      	movs	r0, #95	; 0x5f
 80014e8:	f003 fdc6 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -220, 10);
 80014ec:	f003 fb82 	bl	8004bf4 <BSP_LCD_GetYSize>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	3bdc      	subs	r3, #220	; 0xdc
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	220a      	movs	r2, #10
 80014fa:	4619      	mov	r1, r3
 80014fc:	205f      	movs	r0, #95	; 0x5f
 80014fe:	f003 fdbb 	bl	8005078 <BSP_LCD_DrawHLine>
}
 8001502:	bf00      	nop
 8001504:	bd98      	pop	{r3, r4, r7, pc}

08001506 <DessinerAxeXD>:

// dessiner l'axe X pour le graphe de direction de vent
void DessinerAxeXD(void) {
 8001506:	b598      	push	{r3, r4, r7, lr}
 8001508:	af00      	add	r7, sp, #0
  // Dessiner l'axe horizontal (X)
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800150a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800150e:	f003 fc33 	bl	8004d78 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawHLine(10, BSP_LCD_GetYSize() -50, BSP_LCD_GetXSize() - 20);
 8001512:	f003 fb6f 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001516:	4603      	mov	r3, r0
 8001518:	b29b      	uxth	r3, r3
 800151a:	3b32      	subs	r3, #50	; 0x32
 800151c:	b29c      	uxth	r4, r3
 800151e:	f003 fb55 	bl	8004bcc <BSP_LCD_GetXSize>
 8001522:	4603      	mov	r3, r0
 8001524:	b29b      	uxth	r3, r3
 8001526:	3b14      	subs	r3, #20
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	4621      	mov	r1, r4
 800152e:	200a      	movs	r0, #10
 8001530:	f003 fda2 	bl	8005078 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -110, 10);

  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -70, 10);
 8001534:	f003 fb5e 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001538:	4603      	mov	r3, r0
 800153a:	b29b      	uxth	r3, r3
 800153c:	3b46      	subs	r3, #70	; 0x46
 800153e:	b29b      	uxth	r3, r3
 8001540:	220a      	movs	r2, #10
 8001542:	4619      	mov	r1, r3
 8001544:	205f      	movs	r0, #95	; 0x5f
 8001546:	f003 fd97 	bl	8005078 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -130, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -90, 10);
 800154a:	f003 fb53 	bl	8004bf4 <BSP_LCD_GetYSize>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b5a      	subs	r3, #90	; 0x5a
 8001554:	b29b      	uxth	r3, r3
 8001556:	220a      	movs	r2, #10
 8001558:	4619      	mov	r1, r3
 800155a:	205f      	movs	r0, #95	; 0x5f
 800155c:	f003 fd8c 	bl	8005078 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -150, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -110, 10);
 8001560:	f003 fb48 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001564:	4603      	mov	r3, r0
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b6e      	subs	r3, #110	; 0x6e
 800156a:	b29b      	uxth	r3, r3
 800156c:	220a      	movs	r2, #10
 800156e:	4619      	mov	r1, r3
 8001570:	205f      	movs	r0, #95	; 0x5f
 8001572:	f003 fd81 	bl	8005078 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -170, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -130, 10);
 8001576:	f003 fb3d 	bl	8004bf4 <BSP_LCD_GetYSize>
 800157a:	4603      	mov	r3, r0
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b82      	subs	r3, #130	; 0x82
 8001580:	b29b      	uxth	r3, r3
 8001582:	220a      	movs	r2, #10
 8001584:	4619      	mov	r1, r3
 8001586:	205f      	movs	r0, #95	; 0x5f
 8001588:	f003 fd76 	bl	8005078 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -190, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -150, 10);
 800158c:	f003 fb32 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001590:	4603      	mov	r3, r0
 8001592:	b29b      	uxth	r3, r3
 8001594:	3b96      	subs	r3, #150	; 0x96
 8001596:	b29b      	uxth	r3, r3
 8001598:	220a      	movs	r2, #10
 800159a:	4619      	mov	r1, r3
 800159c:	205f      	movs	r0, #95	; 0x5f
 800159e:	f003 fd6b 	bl	8005078 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -210, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -170, 10);
 80015a2:	f003 fb27 	bl	8004bf4 <BSP_LCD_GetYSize>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3baa      	subs	r3, #170	; 0xaa
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	220a      	movs	r2, #10
 80015b0:	4619      	mov	r1, r3
 80015b2:	205f      	movs	r0, #95	; 0x5f
 80015b4:	f003 fd60 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -190, 10);
 80015b8:	f003 fb1c 	bl	8004bf4 <BSP_LCD_GetYSize>
 80015bc:	4603      	mov	r3, r0
 80015be:	b29b      	uxth	r3, r3
 80015c0:	3bbe      	subs	r3, #190	; 0xbe
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	220a      	movs	r2, #10
 80015c6:	4619      	mov	r1, r3
 80015c8:	205f      	movs	r0, #95	; 0x5f
 80015ca:	f003 fd55 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -210, 10);
 80015ce:	f003 fb11 	bl	8004bf4 <BSP_LCD_GetYSize>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3bd2      	subs	r3, #210	; 0xd2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	220a      	movs	r2, #10
 80015dc:	4619      	mov	r1, r3
 80015de:	205f      	movs	r0, #95	; 0x5f
 80015e0:	f003 fd4a 	bl	8005078 <BSP_LCD_DrawHLine>
}
 80015e4:	bf00      	nop
 80015e6:	bd98      	pop	{r3, r4, r7, pc}

080015e8 <DessinerAxeY>:

// Afficher l'axe Y
void DessinerAxeY(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  // Dessiner l'axe vertical (Y)
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80015ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80015f0:	f003 fbc2 	bl	8004d78 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawVLine(100, 30, BSP_LCD_GetYSize() - 20);
 80015f4:	f003 fafe 	bl	8004bf4 <BSP_LCD_GetYSize>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3b14      	subs	r3, #20
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	211e      	movs	r1, #30
 8001604:	2064      	movs	r0, #100	; 0x64
 8001606:	f003 fd95 	bl	8005134 <BSP_LCD_DrawVLine>

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <DessinerGraphePl>:

// Dessiner le graphe de pluis

void DessinerGraphePl(float* y) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b0a1      	sub	sp, #132	; 0x84
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 8001618:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <DessinerGraphePl+0x148>)
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4611      	mov	r1, r2
 8001620:	2260      	movs	r2, #96	; 0x60
 8001622:	4618      	mov	r0, r3
 8001624:	f010 fca7 	bl	8011f76 <memcpy>
  //int y[] = {100, 50, 130, 80, 160, 120};
  uint16_t pointSize = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  // Trouver le milieu de l'écran
  int midX = 100;
 800162e:	2364      	movs	r3, #100	; 0x64
 8001630:	673b      	str	r3, [r7, #112]	; 0x70
  int midY = BSP_LCD_GetYSize() -100;
 8001632:	f003 fadf 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001636:	4603      	mov	r3, r0
 8001638:	3b64      	subs	r3, #100	; 0x64
 800163a:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800163c:	4847      	ldr	r0, [pc, #284]	; (800175c <DessinerGraphePl+0x14c>)
 800163e:	f003 fb9b 	bl	8004d78 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 24; ++i) {
 8001642:	2300      	movs	r3, #0
 8001644:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001646:	e028      	b.n	800169a <DessinerGraphePl+0x8a>
    BSP_LCD_FillCircle(midX + x[i], midY - (y[i]*100), pointSize);
 8001648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	3380      	adds	r3, #128	; 0x80
 800164e:	443b      	add	r3, r7
 8001650:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001654:	b29a      	uxth	r2, r3
 8001656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001658:	b29b      	uxth	r3, r3
 800165a:	4413      	add	r3, r2
 800165c:	b298      	uxth	r0, r3
 800165e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001760 <DessinerGraphePl+0x150>
 8001678:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800167c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001684:	ee17 3a90 	vmov	r3, s15
 8001688:	b29b      	uxth	r3, r3
 800168a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800168e:	4619      	mov	r1, r3
 8001690:	f004 f85c 	bl	800574c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 8001694:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001696:	3301      	adds	r3, #1
 8001698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800169a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800169c:	2b17      	cmp	r3, #23
 800169e:	ddd3      	ble.n	8001648 <DessinerGraphePl+0x38>
  }

  // Dessiner la ligne connectant les points
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80016a0:	482e      	ldr	r0, [pc, #184]	; (800175c <DessinerGraphePl+0x14c>)
 80016a2:	f003 fb69 	bl	8004d78 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 23; ++i) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80016aa:	e049      	b.n	8001740 <DessinerGraphePl+0x130>
    BSP_LCD_DrawLine(midX + x[i], midY - (y[i]*100), midX + x[i + 1], midY - (y[i + 1]*100));
 80016ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	3380      	adds	r3, #128	; 0x80
 80016b2:	443b      	add	r3, r7
 80016b4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b298      	uxth	r0, r3
 80016c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001760 <DessinerGraphePl+0x150>
 80016dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e8:	ee17 3a90 	vmov	r3, s15
 80016ec:	b299      	uxth	r1, r3
 80016ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016f0:	3301      	adds	r3, #1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	3380      	adds	r3, #128	; 0x80
 80016f6:	443b      	add	r3, r7
 80016f8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001700:	b29b      	uxth	r3, r3
 8001702:	4413      	add	r3, r2
 8001704:	b29c      	uxth	r4, r3
 8001706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001712:	3301      	adds	r3, #1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001760 <DessinerGraphePl+0x150>
 8001722:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172e:	ee17 3a90 	vmov	r3, s15
 8001732:	b29b      	uxth	r3, r3
 8001734:	4622      	mov	r2, r4
 8001736:	f003 fd5f 	bl	80051f8 <BSP_LCD_DrawLine>
  for (int i = 0; i < 23; ++i) {
 800173a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800173c:	3301      	adds	r3, #1
 800173e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001742:	2b16      	cmp	r3, #22
 8001744:	ddb2      	ble.n	80016ac <DessinerGraphePl+0x9c>
  }

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001746:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800174a:	f003 fb15 	bl	8004d78 <BSP_LCD_SetTextColor>
}
 800174e:	bf00      	nop
 8001750:	3784      	adds	r7, #132	; 0x84
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	080159ec 	.word	0x080159ec
 800175c:	ff0000ff 	.word	0xff0000ff
 8001760:	42c80000 	.word	0x42c80000

08001764 <DessinerGraphe>:

// dessiner les graphe de temperature

void DessinerGraphe(float* y) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b0a1      	sub	sp, #132	; 0x84
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 800176c:	4a4c      	ldr	r2, [pc, #304]	; (80018a0 <DessinerGraphe+0x13c>)
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4611      	mov	r1, r2
 8001774:	2260      	movs	r2, #96	; 0x60
 8001776:	4618      	mov	r0, r3
 8001778:	f010 fbfd 	bl	8011f76 <memcpy>
  //int y[] = {100, 50, 130, 80, 160, 120};
  uint16_t pointSize = 4;
 800177c:	2304      	movs	r3, #4
 800177e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  // Trouver le milieu de l'écran
  int midX = 100;
 8001782:	2364      	movs	r3, #100	; 0x64
 8001784:	673b      	str	r3, [r7, #112]	; 0x70
  int midY = BSP_LCD_GetYSize() -100;
 8001786:	f003 fa35 	bl	8004bf4 <BSP_LCD_GetYSize>
 800178a:	4603      	mov	r3, r0
 800178c:	3b64      	subs	r3, #100	; 0x64
 800178e:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001790:	4844      	ldr	r0, [pc, #272]	; (80018a4 <DessinerGraphe+0x140>)
 8001792:	f003 faf1 	bl	8004d78 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 24; ++i) {
 8001796:	2300      	movs	r3, #0
 8001798:	67fb      	str	r3, [r7, #124]	; 0x7c
 800179a:	e026      	b.n	80017ea <DessinerGraphe+0x86>
    BSP_LCD_FillCircle(midX + x[i], midY - (y[i]*2), pointSize);
 800179c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	3380      	adds	r3, #128	; 0x80
 80017a2:	443b      	add	r3, r7
 80017a4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	b298      	uxth	r0, r3
 80017b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d4:	ee17 3a90 	vmov	r3, s15
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80017de:	4619      	mov	r1, r3
 80017e0:	f003 ffb4 	bl	800574c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 80017e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017e6:	3301      	adds	r3, #1
 80017e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017ec:	2b17      	cmp	r3, #23
 80017ee:	ddd5      	ble.n	800179c <DessinerGraphe+0x38>
  }

  // Dessiner la ligne connectant les points
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80017f0:	482c      	ldr	r0, [pc, #176]	; (80018a4 <DessinerGraphe+0x140>)
 80017f2:	f003 fac1 	bl	8004d78 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 23; ++i) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80017fa:	e045      	b.n	8001888 <DessinerGraphe+0x124>
    BSP_LCD_DrawLine(midX + x[i], midY - (y[i]*2), midX + x[i + 1], midY - (y[i + 1]*2));
 80017fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	3380      	adds	r3, #128	; 0x80
 8001802:	443b      	add	r3, r7
 8001804:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001808:	b29a      	uxth	r2, r3
 800180a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800180c:	b29b      	uxth	r3, r3
 800180e:	4413      	add	r3, r2
 8001810:	b298      	uxth	r0, r3
 8001812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800182c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001834:	ee17 3a90 	vmov	r3, s15
 8001838:	b299      	uxth	r1, r3
 800183a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800183c:	3301      	adds	r3, #1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	3380      	adds	r3, #128	; 0x80
 8001842:	443b      	add	r3, r7
 8001844:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001848:	b29a      	uxth	r2, r3
 800184a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800184c:	b29b      	uxth	r3, r3
 800184e:	4413      	add	r3, r2
 8001850:	b29c      	uxth	r4, r3
 8001852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800185c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800185e:	3301      	adds	r3, #1
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800186e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001876:	ee17 3a90 	vmov	r3, s15
 800187a:	b29b      	uxth	r3, r3
 800187c:	4622      	mov	r2, r4
 800187e:	f003 fcbb 	bl	80051f8 <BSP_LCD_DrawLine>
  for (int i = 0; i < 23; ++i) {
 8001882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001884:	3301      	adds	r3, #1
 8001886:	67bb      	str	r3, [r7, #120]	; 0x78
 8001888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800188a:	2b16      	cmp	r3, #22
 800188c:	ddb6      	ble.n	80017fc <DessinerGraphe+0x98>
  }

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800188e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001892:	f003 fa71 	bl	8004d78 <BSP_LCD_SetTextColor>
}
 8001896:	bf00      	nop
 8001898:	3784      	adds	r7, #132	; 0x84
 800189a:	46bd      	mov	sp, r7
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	bf00      	nop
 80018a0:	080159ec 	.word	0x080159ec
 80018a4:	ff0000ff 	.word	0xff0000ff

080018a8 <DessinerGrapheH>:

// dessiner le graphe d'humidité
void DessinerGrapheH(float* y) {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b0a1      	sub	sp, #132	; 0x84
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 80018b0:	4a4f      	ldr	r2, [pc, #316]	; (80019f0 <DessinerGrapheH+0x148>)
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4611      	mov	r1, r2
 80018b8:	2260      	movs	r2, #96	; 0x60
 80018ba:	4618      	mov	r0, r3
 80018bc:	f010 fb5b 	bl	8011f76 <memcpy>
  //int y[] = {100, 50, 130, 80, 160, 120};
  uint16_t pointSize = 4;
 80018c0:	2304      	movs	r3, #4
 80018c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  // Trouver le milieu de l'écran
  int midX = 100;
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	673b      	str	r3, [r7, #112]	; 0x70
  int midY = BSP_LCD_GetYSize() -100;
 80018ca:	f003 f993 	bl	8004bf4 <BSP_LCD_GetYSize>
 80018ce:	4603      	mov	r3, r0
 80018d0:	3b64      	subs	r3, #100	; 0x64
 80018d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80018d4:	4847      	ldr	r0, [pc, #284]	; (80019f4 <DessinerGrapheH+0x14c>)
 80018d6:	f003 fa4f 	bl	8004d78 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 24; ++i) {
 80018da:	2300      	movs	r3, #0
 80018dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018de:	e028      	b.n	8001932 <DessinerGrapheH+0x8a>
    BSP_LCD_FillCircle(midX + x[i], midY - (y[i]-30), pointSize);
 80018e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	3380      	adds	r3, #128	; 0x80
 80018e6:	443b      	add	r3, r7
 80018e8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	b298      	uxth	r0, r3
 80018f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001910:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191c:	ee17 3a90 	vmov	r3, s15
 8001920:	b29b      	uxth	r3, r3
 8001922:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001926:	4619      	mov	r1, r3
 8001928:	f003 ff10 	bl	800574c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 800192c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800192e:	3301      	adds	r3, #1
 8001930:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001934:	2b17      	cmp	r3, #23
 8001936:	ddd3      	ble.n	80018e0 <DessinerGrapheH+0x38>
  }

  // Dessiner la ligne connectant les points
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001938:	482e      	ldr	r0, [pc, #184]	; (80019f4 <DessinerGrapheH+0x14c>)
 800193a:	f003 fa1d 	bl	8004d78 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 23; ++i) {
 800193e:	2300      	movs	r3, #0
 8001940:	67bb      	str	r3, [r7, #120]	; 0x78
 8001942:	e049      	b.n	80019d8 <DessinerGrapheH+0x130>
    BSP_LCD_DrawLine(midX + x[i], midY - (y[i]-30), midX + x[i + 1], midY - (y[i + 1]-30));
 8001944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	3380      	adds	r3, #128	; 0x80
 800194a:	443b      	add	r3, r7
 800194c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001950:	b29a      	uxth	r2, r3
 8001952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001954:	b29b      	uxth	r3, r3
 8001956:	4413      	add	r3, r2
 8001958:	b298      	uxth	r0, r3
 800195a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001974:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001980:	ee17 3a90 	vmov	r3, s15
 8001984:	b299      	uxth	r1, r3
 8001986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001988:	3301      	adds	r3, #1
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	3380      	adds	r3, #128	; 0x80
 800198e:	443b      	add	r3, r7
 8001990:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001994:	b29a      	uxth	r2, r3
 8001996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001998:	b29b      	uxth	r3, r3
 800199a:	4413      	add	r3, r2
 800199c:	b29c      	uxth	r4, r3
 800199e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019aa:	3301      	adds	r3, #1
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80019ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c6:	ee17 3a90 	vmov	r3, s15
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4622      	mov	r2, r4
 80019ce:	f003 fc13 	bl	80051f8 <BSP_LCD_DrawLine>
  for (int i = 0; i < 23; ++i) {
 80019d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d4:	3301      	adds	r3, #1
 80019d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80019d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019da:	2b16      	cmp	r3, #22
 80019dc:	ddb2      	ble.n	8001944 <DessinerGrapheH+0x9c>
  }

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80019e2:	f003 f9c9 	bl	8004d78 <BSP_LCD_SetTextColor>
}
 80019e6:	bf00      	nop
 80019e8:	3784      	adds	r7, #132	; 0x84
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	080159ec 	.word	0x080159ec
 80019f4:	ff0000ff 	.word	0xff0000ff

080019f8 <DessinerGrapheD>:

// Dessiner le graphe de direction du vent
void DessinerGrapheD(char** y) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b09f      	sub	sp, #124	; 0x7c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 8001a00:	4aa6      	ldr	r2, [pc, #664]	; (8001c9c <DessinerGrapheD+0x2a4>)
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	4611      	mov	r1, r2
 8001a08:	2260      	movs	r2, #96	; 0x60
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f010 fab3 	bl	8011f76 <memcpy>

  uint16_t pointSize = 4;
 8001a10:	2304      	movs	r3, #4
 8001a12:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

  // Trouver le milieu de l'écran
  int midX = 100;
 8001a16:	2364      	movs	r3, #100	; 0x64
 8001a18:	66fb      	str	r3, [r7, #108]	; 0x6c
  int midY = BSP_LCD_GetYSize() -50;
 8001a1a:	f003 f8eb 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	3b32      	subs	r3, #50	; 0x32
 8001a22:	66bb      	str	r3, [r7, #104]	; 0x68

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001a24:	489e      	ldr	r0, [pc, #632]	; (8001ca0 <DessinerGrapheD+0x2a8>)
 8001a26:	f003 f9a7 	bl	8004d78 <BSP_LCD_SetTextColor>


  for (int i = 0; i < 24; ++i) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	677b      	str	r3, [r7, #116]	; 0x74
 8001a2e:	e11c      	b.n	8001c6a <DessinerGrapheD+0x272>
      if (strcmp(y[i], "Nord") == 0) {
 8001a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	499a      	ldr	r1, [pc, #616]	; (8001ca4 <DessinerGrapheD+0x2ac>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fbe7 	bl	8000210 <strcmp>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d114      	bne.n	8001a72 <DessinerGrapheD+0x7a>
          BSP_LCD_FillCircle(midX + x[i], midY - 20, pointSize);
 8001a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	3378      	adds	r3, #120	; 0x78
 8001a4e:	443b      	add	r3, r7
 8001a50:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b298      	uxth	r0, r3
 8001a5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b14      	subs	r3, #20
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f003 fe6e 	bl	800574c <BSP_LCD_FillCircle>
 8001a70:	e0f8      	b.n	8001c64 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Sud") == 0) {
 8001a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	498a      	ldr	r1, [pc, #552]	; (8001ca8 <DessinerGrapheD+0x2b0>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fbc6 	bl	8000210 <strcmp>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d114      	bne.n	8001ab4 <DessinerGrapheD+0xbc>
          BSP_LCD_FillCircle(midX + x[i], midY - 40, pointSize);
 8001a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	3378      	adds	r3, #120	; 0x78
 8001a90:	443b      	add	r3, r7
 8001a92:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b298      	uxth	r0, r3
 8001aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b28      	subs	r3, #40	; 0x28
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001aac:	4619      	mov	r1, r3
 8001aae:	f003 fe4d 	bl	800574c <BSP_LCD_FillCircle>
 8001ab2:	e0d7      	b.n	8001c64 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Est") == 0) {
 8001ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	497b      	ldr	r1, [pc, #492]	; (8001cac <DessinerGrapheD+0x2b4>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fba5 	bl	8000210 <strcmp>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d114      	bne.n	8001af6 <DessinerGrapheD+0xfe>
          BSP_LCD_FillCircle(midX + x[i], midY - 60, pointSize);
 8001acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3378      	adds	r3, #120	; 0x78
 8001ad2:	443b      	add	r3, r7
 8001ad4:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	b298      	uxth	r0, r3
 8001ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3b3c      	subs	r3, #60	; 0x3c
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001aee:	4619      	mov	r1, r3
 8001af0:	f003 fe2c 	bl	800574c <BSP_LCD_FillCircle>
 8001af4:	e0b6      	b.n	8001c64 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Ouest") == 0) {
 8001af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	496b      	ldr	r1, [pc, #428]	; (8001cb0 <DessinerGrapheD+0x2b8>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fb84 	bl	8000210 <strcmp>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d114      	bne.n	8001b38 <DessinerGrapheD+0x140>
          BSP_LCD_FillCircle(midX + x[i], midY - 80, pointSize);
 8001b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	3378      	adds	r3, #120	; 0x78
 8001b14:	443b      	add	r3, r7
 8001b16:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	b298      	uxth	r0, r3
 8001b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b50      	subs	r3, #80	; 0x50
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001b30:	4619      	mov	r1, r3
 8001b32:	f003 fe0b 	bl	800574c <BSP_LCD_FillCircle>
 8001b36:	e095      	b.n	8001c64 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Nord-Est") == 0) {
 8001b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	495c      	ldr	r1, [pc, #368]	; (8001cb4 <DessinerGrapheD+0x2bc>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fb63 	bl	8000210 <strcmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d114      	bne.n	8001b7a <DessinerGrapheD+0x182>
          BSP_LCD_FillCircle(midX + x[i], midY - 100, pointSize);
 8001b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	3378      	adds	r3, #120	; 0x78
 8001b56:	443b      	add	r3, r7
 8001b58:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b298      	uxth	r0, r3
 8001b66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b64      	subs	r3, #100	; 0x64
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001b72:	4619      	mov	r1, r3
 8001b74:	f003 fdea 	bl	800574c <BSP_LCD_FillCircle>
 8001b78:	e074      	b.n	8001c64 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Sud-Est") == 0) {
 8001b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	494c      	ldr	r1, [pc, #304]	; (8001cb8 <DessinerGrapheD+0x2c0>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fb42 	bl	8000210 <strcmp>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <DessinerGrapheD+0x1c4>
          BSP_LCD_FillCircle(midX + x[i], midY - 120, pointSize);
 8001b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	3378      	adds	r3, #120	; 0x78
 8001b98:	443b      	add	r3, r7
 8001b9a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b298      	uxth	r0, r3
 8001ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b78      	subs	r3, #120	; 0x78
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f003 fdc9 	bl	800574c <BSP_LCD_FillCircle>
 8001bba:	e053      	b.n	8001c64 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Sud-Ouest") == 0) {
 8001bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	493d      	ldr	r1, [pc, #244]	; (8001cbc <DessinerGrapheD+0x2c4>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb21 	bl	8000210 <strcmp>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d114      	bne.n	8001bfe <DessinerGrapheD+0x206>
          BSP_LCD_FillCircle(midX + x[i], midY - 140, pointSize);
 8001bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	3378      	adds	r3, #120	; 0x78
 8001bda:	443b      	add	r3, r7
 8001bdc:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	b298      	uxth	r0, r3
 8001bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b8c      	subs	r3, #140	; 0x8c
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f003 fda8 	bl	800574c <BSP_LCD_FillCircle>
 8001bfc:	e032      	b.n	8001c64 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Nord-Ouest") == 0) {
 8001bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	492d      	ldr	r1, [pc, #180]	; (8001cc0 <DessinerGrapheD+0x2c8>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fb00 	bl	8000210 <strcmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d114      	bne.n	8001c40 <DessinerGrapheD+0x248>
          BSP_LCD_FillCircle(midX + x[i], midY - 160, pointSize);
 8001c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	3378      	adds	r3, #120	; 0x78
 8001c1c:	443b      	add	r3, r7
 8001c1e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	b298      	uxth	r0, r3
 8001c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3ba0      	subs	r3, #160	; 0xa0
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f003 fd87 	bl	800574c <BSP_LCD_FillCircle>
 8001c3e:	e011      	b.n	8001c64 <DessinerGrapheD+0x26c>
      } else {
          BSP_LCD_FillCircle(midX + x[i], midY, pointSize);
 8001c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	3378      	adds	r3, #120	; 0x78
 8001c46:	443b      	add	r3, r7
 8001c48:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c58:	b291      	uxth	r1, r2
 8001c5a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fd74 	bl	800574c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 8001c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c66:	3301      	adds	r3, #1
 8001c68:	677b      	str	r3, [r7, #116]	; 0x74
 8001c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6c:	2b17      	cmp	r3, #23
 8001c6e:	f77f aedf 	ble.w	8001a30 <DessinerGrapheD+0x38>
      }
  }


  AfficherBouton("Next", BSP_LCD_GetXSize() - 90, BSP_LCD_GetYSize() - 40);
 8001c72:	f002 ffab 	bl	8004bcc <BSP_LCD_GetXSize>
 8001c76:	4603      	mov	r3, r0
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b5a      	subs	r3, #90	; 0x5a
 8001c7c:	b29c      	uxth	r4, r3
 8001c7e:	f002 ffb9 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001c82:	4603      	mov	r3, r0
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b28      	subs	r3, #40	; 0x28
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <DessinerGrapheD+0x2cc>)
 8001c90:	f7ff faac 	bl	80011ec <AfficherBouton>

}
 8001c94:	bf00      	nop
 8001c96:	377c      	adds	r7, #124	; 0x7c
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	080159ec 	.word	0x080159ec
 8001ca0:	ff0000ff 	.word	0xff0000ff
 8001ca4:	08015a4c 	.word	0x08015a4c
 8001ca8:	08015a54 	.word	0x08015a54
 8001cac:	08015a58 	.word	0x08015a58
 8001cb0:	08015a5c 	.word	0x08015a5c
 8001cb4:	08015a64 	.word	0x08015a64
 8001cb8:	08015a70 	.word	0x08015a70
 8001cbc:	08015a78 	.word	0x08015a78
 8001cc0:	08015a84 	.word	0x08015a84
 8001cc4:	080159cc 	.word	0x080159cc

08001cc8 <DessinerGrapheP>:

// dessiner le graphes de pression
void DessinerGrapheP(float* y) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b09e      	sub	sp, #120	; 0x78
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <DessinerGrapheP+0xa8>)
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	2260      	movs	r2, #96	; 0x60
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f010 f94b 	bl	8011f76 <memcpy>
  //int y[] = {100, 50, 130, 80, 160, 120};
  uint16_t pointSize = 4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

  // Trouver le milieu de l'écran
  int midX = 100;
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
  int midY = BSP_LCD_GetYSize() -100;
 8001cea:	f002 ff83 	bl	8004bf4 <BSP_LCD_GetYSize>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	3b64      	subs	r3, #100	; 0x64
 8001cf2:	66bb      	str	r3, [r7, #104]	; 0x68

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001cf4:	481f      	ldr	r0, [pc, #124]	; (8001d74 <DessinerGrapheP+0xac>)
 8001cf6:	f003 f83f 	bl	8004d78 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 24; ++i) {
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	677b      	str	r3, [r7, #116]	; 0x74
 8001cfe:	e028      	b.n	8001d52 <DessinerGrapheP+0x8a>
    BSP_LCD_FillCircle(midX + x[i], midY - (y[i]-930), pointSize);
 8001d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	3378      	adds	r3, #120	; 0x78
 8001d06:	443b      	add	r3, r7
 8001d08:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	b298      	uxth	r0, r3
 8001d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001d78 <DessinerGrapheP+0xb0>
 8001d30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d3c:	ee17 3a90 	vmov	r3, s15
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001d46:	4619      	mov	r1, r3
 8001d48:	f003 fd00 	bl	800574c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 8001d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d4e:	3301      	adds	r3, #1
 8001d50:	677b      	str	r3, [r7, #116]	; 0x74
 8001d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d54:	2b17      	cmp	r3, #23
 8001d56:	ddd3      	ble.n	8001d00 <DessinerGrapheP+0x38>
  }

  // Dessiner la ligne connectant les points
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d58:	4806      	ldr	r0, [pc, #24]	; (8001d74 <DessinerGrapheP+0xac>)
 8001d5a:	f003 f80d 	bl	8004d78 <BSP_LCD_SetTextColor>


  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001d5e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001d62:	f003 f809 	bl	8004d78 <BSP_LCD_SetTextColor>
}
 8001d66:	bf00      	nop
 8001d68:	3778      	adds	r7, #120	; 0x78
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	080159ec 	.word	0x080159ec
 8001d74:	ff0000ff 	.word	0xff0000ff
 8001d78:	44688000 	.word	0x44688000

08001d7c <ChangerDePage>:


// La fonction pour changer les pages
void ChangerDePage(float* T, float* H, float* P, char** D, float* V, float* Pl, int taille) {
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b0aa      	sub	sp, #168	; 0xa8
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  // Mettre à jour la page actuelle
  if (currentPage == PAGE_1) {
 8001d8a:	4bad      	ldr	r3, [pc, #692]	; (8002040 <ChangerDePage+0x2c4>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <ChangerDePage+0x1e>
    currentPage = PAGE_2;
 8001d92:	4bab      	ldr	r3, [pc, #684]	; (8002040 <ChangerDePage+0x2c4>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e02e      	b.n	8001df8 <ChangerDePage+0x7c>
  }else{
	  if(currentPage == PAGE_2){
 8001d9a:	4ba9      	ldr	r3, [pc, #676]	; (8002040 <ChangerDePage+0x2c4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d103      	bne.n	8001daa <ChangerDePage+0x2e>
		  	currentPage = PAGE_3;
 8001da2:	4ba7      	ldr	r3, [pc, #668]	; (8002040 <ChangerDePage+0x2c4>)
 8001da4:	2202      	movs	r2, #2
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e026      	b.n	8001df8 <ChangerDePage+0x7c>
	  }else {
		  if(currentPage == PAGE_3){
 8001daa:	4ba5      	ldr	r3, [pc, #660]	; (8002040 <ChangerDePage+0x2c4>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d103      	bne.n	8001dba <ChangerDePage+0x3e>
			  	currentPage = PAGE_4;
 8001db2:	4ba3      	ldr	r3, [pc, #652]	; (8002040 <ChangerDePage+0x2c4>)
 8001db4:	2203      	movs	r2, #3
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e01e      	b.n	8001df8 <ChangerDePage+0x7c>
		  }else{
			  if(currentPage == PAGE_4){
 8001dba:	4ba1      	ldr	r3, [pc, #644]	; (8002040 <ChangerDePage+0x2c4>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d103      	bne.n	8001dca <ChangerDePage+0x4e>
				  	currentPage = PAGE_5;
 8001dc2:	4b9f      	ldr	r3, [pc, #636]	; (8002040 <ChangerDePage+0x2c4>)
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e016      	b.n	8001df8 <ChangerDePage+0x7c>
			  }else{
				  if(currentPage == PAGE_5){
 8001dca:	4b9d      	ldr	r3, [pc, #628]	; (8002040 <ChangerDePage+0x2c4>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d103      	bne.n	8001dda <ChangerDePage+0x5e>
					  	currentPage = PAGE_6;
 8001dd2:	4b9b      	ldr	r3, [pc, #620]	; (8002040 <ChangerDePage+0x2c4>)
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e00e      	b.n	8001df8 <ChangerDePage+0x7c>
				  }else{
					  if(currentPage == PAGE_6){
 8001dda:	4b99      	ldr	r3, [pc, #612]	; (8002040 <ChangerDePage+0x2c4>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d103      	bne.n	8001dea <ChangerDePage+0x6e>
						  	currentPage = PAGE_7;
 8001de2:	4b97      	ldr	r3, [pc, #604]	; (8002040 <ChangerDePage+0x2c4>)
 8001de4:	2206      	movs	r2, #6
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e006      	b.n	8001df8 <ChangerDePage+0x7c>
					  }else{
						   if(currentPage == PAGE_7){
 8001dea:	4b95      	ldr	r3, [pc, #596]	; (8002040 <ChangerDePage+0x2c4>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d102      	bne.n	8001df8 <ChangerDePage+0x7c>
							  	currentPage = PAGE_1;
 8001df2:	4b93      	ldr	r3, [pc, #588]	; (8002040 <ChangerDePage+0x2c4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]




  // Effacer l'écran
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f003 f808 	bl	8004e10 <BSP_LCD_Clear>


  if (currentPage == PAGE_1) {
 8001e00:	4b8f      	ldr	r3, [pc, #572]	; (8002040 <ChangerDePage+0x2c4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d110      	bne.n	8001e2a <ChangerDePage+0xae>
	  // Afficher le contenu de la page 1 qui est la page d'accueil
	  init_page(T, H, Pl, D, V, Pl, taille);
 8001e08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e0c:	9302      	str	r3, [sp, #8]
 8001e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fa00 	bl	8001228 <init_page>
 8001e28:	e14b      	b.n	80020c2 <ChangerDePage+0x346>
  } else {if (currentPage == PAGE_2){
 8001e2a:	4b85      	ldr	r3, [pc, #532]	; (8002040 <ChangerDePage+0x2c4>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d131      	bne.n	8001e96 <ChangerDePage+0x11a>
	  // Afficher le contenu de la page 2
	  char titre[] = "Graphe de Temperature";
 8001e32:	4b84      	ldr	r3, [pc, #528]	; (8002044 <ChangerDePage+0x2c8>)
 8001e34:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001e38:	461d      	mov	r5, r3
 8001e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e42:	6020      	str	r0, [r4, #0]
 8001e44:	3404      	adds	r4, #4
 8001e46:	8021      	strh	r1, [r4, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001e48:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001e4c:	f002 ff94 	bl	8004d78 <BSP_LCD_SetTextColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001e50:	487d      	ldr	r0, [pc, #500]	; (8002048 <ChangerDePage+0x2cc>)
 8001e52:	f002 ff91 	bl	8004d78 <BSP_LCD_SetTextColor>

		BSP_LCD_FillRect(0, 0,480,30);
 8001e56:	231e      	movs	r3, #30
 8001e58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f003 fbfa 	bl	8005658 <BSP_LCD_FillRect>
		BSP_LCD_SetFont(&Font16);
 8001e64:	4879      	ldr	r0, [pc, #484]	; (800204c <ChangerDePage+0x2d0>)
 8001e66:	f002 ffb9 	bl	8004ddc <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001e6a:	4877      	ldr	r0, [pc, #476]	; (8002048 <ChangerDePage+0x2cc>)
 8001e6c:	f002 ff9c 	bl	8004da8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e70:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e74:	f002 ff80 	bl	8004d78 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001e78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	2105      	movs	r1, #5
 8001e80:	2000      	movs	r0, #0
 8001e82:	f003 f831 	bl	8004ee8 <BSP_LCD_DisplayStringAt>


	  //********************************

	  DessinerAxeX();
 8001e86:	f7ff faa1 	bl	80013cc <DessinerAxeX>
	  DessinerAxeY();
 8001e8a:	f7ff fbad 	bl	80015e8 <DessinerAxeY>

	  DessinerGraphe(T);
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff fc68 	bl	8001764 <DessinerGraphe>
 8001e94:	e115      	b.n	80020c2 <ChangerDePage+0x346>

  }else {if (currentPage == PAGE_3){
 8001e96:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <ChangerDePage+0x2c4>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d12e      	bne.n	8001efc <ChangerDePage+0x180>
	    // Afficher le contenu de la page 3
	  char titre[] = "Graphe d'Humidite";
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <ChangerDePage+0x2d4>)
 8001ea0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001ea4:	461d      	mov	r5, r3
 8001ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eaa:	682b      	ldr	r3, [r5, #0]
 8001eac:	8023      	strh	r3, [r4, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001eae:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001eb2:	f002 ff61 	bl	8004d78 <BSP_LCD_SetTextColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001eb6:	4864      	ldr	r0, [pc, #400]	; (8002048 <ChangerDePage+0x2cc>)
 8001eb8:	f002 ff5e 	bl	8004d78 <BSP_LCD_SetTextColor>

		BSP_LCD_FillRect(0, 0,480,30);
 8001ebc:	231e      	movs	r3, #30
 8001ebe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f003 fbc7 	bl	8005658 <BSP_LCD_FillRect>
		BSP_LCD_SetFont(&Font16);
 8001eca:	4860      	ldr	r0, [pc, #384]	; (800204c <ChangerDePage+0x2d0>)
 8001ecc:	f002 ff86 	bl	8004ddc <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001ed0:	485d      	ldr	r0, [pc, #372]	; (8002048 <ChangerDePage+0x2cc>)
 8001ed2:	f002 ff69 	bl	8004da8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ed6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001eda:	f002 ff4d 	bl	8004d78 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001ede:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f002 fffe 	bl	8004ee8 <BSP_LCD_DisplayStringAt>
		  //*********************************
		  DessinerAxeX();
 8001eec:	f7ff fa6e 	bl	80013cc <DessinerAxeX>
		  DessinerAxeY();
 8001ef0:	f7ff fb7a 	bl	80015e8 <DessinerAxeY>

		  DessinerGrapheH(H);
 8001ef4:	68b8      	ldr	r0, [r7, #8]
 8001ef6:	f7ff fcd7 	bl	80018a8 <DessinerGrapheH>
 8001efa:	e0e2      	b.n	80020c2 <ChangerDePage+0x346>
	  }else {if (currentPage == PAGE_4){
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <ChangerDePage+0x2c4>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d132      	bne.n	8001f6a <ChangerDePage+0x1ee>
		    // Afficher le contenu de la page 4
		  char titre[] = "Graphe de Pression";
 8001f04:	4b53      	ldr	r3, [pc, #332]	; (8002054 <ChangerDePage+0x2d8>)
 8001f06:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	8022      	strh	r2, [r4, #0]
 8001f16:	3402      	adds	r4, #2
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	7023      	strb	r3, [r4, #0]
		  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001f1c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001f20:	f002 ff2a 	bl	8004d78 <BSP_LCD_SetTextColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001f24:	4848      	ldr	r0, [pc, #288]	; (8002048 <ChangerDePage+0x2cc>)
 8001f26:	f002 ff27 	bl	8004d78 <BSP_LCD_SetTextColor>

			BSP_LCD_FillRect(0, 0,480,30);
 8001f2a:	231e      	movs	r3, #30
 8001f2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2000      	movs	r0, #0
 8001f34:	f003 fb90 	bl	8005658 <BSP_LCD_FillRect>
			BSP_LCD_SetFont(&Font16);
 8001f38:	4844      	ldr	r0, [pc, #272]	; (800204c <ChangerDePage+0x2d0>)
 8001f3a:	f002 ff4f 	bl	8004ddc <BSP_LCD_SetFont>
			BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001f3e:	4842      	ldr	r0, [pc, #264]	; (8002048 <ChangerDePage+0x2cc>)
 8001f40:	f002 ff32 	bl	8004da8 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f44:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f48:	f002 ff16 	bl	8004d78 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001f4c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f50:	2301      	movs	r3, #1
 8001f52:	2105      	movs	r1, #5
 8001f54:	2000      	movs	r0, #0
 8001f56:	f002 ffc7 	bl	8004ee8 <BSP_LCD_DisplayStringAt>
			  //*********************************
			  DessinerAxeX();
 8001f5a:	f7ff fa37 	bl	80013cc <DessinerAxeX>
			  DessinerAxeY();
 8001f5e:	f7ff fb43 	bl	80015e8 <DessinerAxeY>

			  DessinerGrapheP(P);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff feb0 	bl	8001cc8 <DessinerGrapheP>
 8001f68:	e0ab      	b.n	80020c2 <ChangerDePage+0x346>
		  }else {if (currentPage == PAGE_5){
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <ChangerDePage+0x2c4>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d130      	bne.n	8001fd4 <ChangerDePage+0x258>
			    // Afficher le contenu de la page 5
			  char titre[] = "Graphe de Direction de vent";
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <ChangerDePage+0x2dc>)
 8001f74:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001f78:	461d      	mov	r5, r3
 8001f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001f86:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001f8a:	f002 fef5 	bl	8004d78 <BSP_LCD_SetTextColor>
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001f8e:	482e      	ldr	r0, [pc, #184]	; (8002048 <ChangerDePage+0x2cc>)
 8001f90:	f002 fef2 	bl	8004d78 <BSP_LCD_SetTextColor>

				BSP_LCD_FillRect(0, 0,480,30);
 8001f94:	231e      	movs	r3, #30
 8001f96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f003 fb5b 	bl	8005658 <BSP_LCD_FillRect>
				BSP_LCD_SetFont(&Font16);
 8001fa2:	482a      	ldr	r0, [pc, #168]	; (800204c <ChangerDePage+0x2d0>)
 8001fa4:	f002 ff1a 	bl	8004ddc <BSP_LCD_SetFont>
				BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001fa8:	4827      	ldr	r0, [pc, #156]	; (8002048 <ChangerDePage+0x2cc>)
 8001faa:	f002 fefd 	bl	8004da8 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001fae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001fb2:	f002 fee1 	bl	8004d78 <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001fb6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f002 ff92 	bl	8004ee8 <BSP_LCD_DisplayStringAt>
				  //*****************************************
				  DessinerAxeXD();
 8001fc4:	f7ff fa9f 	bl	8001506 <DessinerAxeXD>
				  DessinerAxeY();
 8001fc8:	f7ff fb0e 	bl	80015e8 <DessinerAxeY>

				  DessinerGrapheD(D);
 8001fcc:	6838      	ldr	r0, [r7, #0]
 8001fce:	f7ff fd13 	bl	80019f8 <DessinerGrapheD>
 8001fd2:	e076      	b.n	80020c2 <ChangerDePage+0x346>
			  }else {if (currentPage == PAGE_6){
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <ChangerDePage+0x2c4>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d141      	bne.n	8002060 <ChangerDePage+0x2e4>
				    // Afficher le contenu de la page 6
				  char titre[] = "Graphe de Vitesse de vent";
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <ChangerDePage+0x2e0>)
 8001fde:	f107 0420 	add.w	r4, r7, #32
 8001fe2:	461d      	mov	r5, r3
 8001fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fec:	c403      	stmia	r4!, {r0, r1}
 8001fee:	8022      	strh	r2, [r4, #0]
				  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001ff0:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001ff4:	f002 fec0 	bl	8004d78 <BSP_LCD_SetTextColor>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001ff8:	4813      	ldr	r0, [pc, #76]	; (8002048 <ChangerDePage+0x2cc>)
 8001ffa:	f002 febd 	bl	8004d78 <BSP_LCD_SetTextColor>

					BSP_LCD_FillRect(0, 0,480,30);
 8001ffe:	231e      	movs	r3, #30
 8002000:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002004:	2100      	movs	r1, #0
 8002006:	2000      	movs	r0, #0
 8002008:	f003 fb26 	bl	8005658 <BSP_LCD_FillRect>
					BSP_LCD_SetFont(&Font16);
 800200c:	480f      	ldr	r0, [pc, #60]	; (800204c <ChangerDePage+0x2d0>)
 800200e:	f002 fee5 	bl	8004ddc <BSP_LCD_SetFont>
					BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8002012:	480d      	ldr	r0, [pc, #52]	; (8002048 <ChangerDePage+0x2cc>)
 8002014:	f002 fec8 	bl	8004da8 <BSP_LCD_SetBackColor>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002018:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800201c:	f002 feac 	bl	8004d78 <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8002020:	f107 0220 	add.w	r2, r7, #32
 8002024:	2301      	movs	r3, #1
 8002026:	2105      	movs	r1, #5
 8002028:	2000      	movs	r0, #0
 800202a:	f002 ff5d 	bl	8004ee8 <BSP_LCD_DisplayStringAt>

					  DessinerAxeX();
 800202e:	f7ff f9cd 	bl	80013cc <DessinerAxeX>
					  DessinerAxeY();
 8002032:	f7ff fad9 	bl	80015e8 <DessinerAxeY>

					  DessinerGraphe(V);
 8002036:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800203a:	f7ff fb93 	bl	8001764 <DessinerGraphe>
 800203e:	e040      	b.n	80020c2 <ChangerDePage+0x346>
 8002040:	20000208 	.word	0x20000208
 8002044:	08015a90 	.word	0x08015a90
 8002048:	ff0000ff 	.word	0xff0000ff
 800204c:	20000010 	.word	0x20000010
 8002050:	08015aa8 	.word	0x08015aa8
 8002054:	08015abc 	.word	0x08015abc
 8002058:	08015ad0 	.word	0x08015ad0
 800205c:	08015aec 	.word	0x08015aec

				  }else {if (currentPage == PAGE_7){
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <ChangerDePage+0x370>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d12c      	bne.n	80020c2 <ChangerDePage+0x346>
					    // Afficher le contenu de la page 7
					  char titre[] = "Graphe de Pluie";
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <ChangerDePage+0x374>)
 800206a:	f107 0410 	add.w	r4, r7, #16
 800206e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002074:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8002078:	f002 fe7e 	bl	8004d78 <BSP_LCD_SetTextColor>
						BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800207c:	481d      	ldr	r0, [pc, #116]	; (80020f4 <ChangerDePage+0x378>)
 800207e:	f002 fe7b 	bl	8004d78 <BSP_LCD_SetTextColor>

						BSP_LCD_FillRect(0, 0,480,30);
 8002082:	231e      	movs	r3, #30
 8002084:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002088:	2100      	movs	r1, #0
 800208a:	2000      	movs	r0, #0
 800208c:	f003 fae4 	bl	8005658 <BSP_LCD_FillRect>
						BSP_LCD_SetFont(&Font16);
 8002090:	4819      	ldr	r0, [pc, #100]	; (80020f8 <ChangerDePage+0x37c>)
 8002092:	f002 fea3 	bl	8004ddc <BSP_LCD_SetFont>
						BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8002096:	4817      	ldr	r0, [pc, #92]	; (80020f4 <ChangerDePage+0x378>)
 8002098:	f002 fe86 	bl	8004da8 <BSP_LCD_SetBackColor>
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800209c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020a0:	f002 fe6a 	bl	8004d78 <BSP_LCD_SetTextColor>
						BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 80020a4:	f107 0210 	add.w	r2, r7, #16
 80020a8:	2301      	movs	r3, #1
 80020aa:	2105      	movs	r1, #5
 80020ac:	2000      	movs	r0, #0
 80020ae:	f002 ff1b 	bl	8004ee8 <BSP_LCD_DisplayStringAt>
						  //***********************************
						  DessinerAxeX();
 80020b2:	f7ff f98b 	bl	80013cc <DessinerAxeX>
						  DessinerAxeY();
 80020b6:	f7ff fa97 	bl	80015e8 <DessinerAxeY>

						  DessinerGraphePl(Pl);
 80020ba:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80020be:	f7ff faa7 	bl	8001610 <DessinerGraphePl>
		  }
	  }
  }

  // Afficher le bouton de changement de page
  AfficherBouton("Next", BSP_LCD_GetXSize() - 90, BSP_LCD_GetYSize() - 40);
 80020c2:	f002 fd83 	bl	8004bcc <BSP_LCD_GetXSize>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b5a      	subs	r3, #90	; 0x5a
 80020cc:	b29c      	uxth	r4, r3
 80020ce:	f002 fd91 	bl	8004bf4 <BSP_LCD_GetYSize>
 80020d2:	4603      	mov	r3, r0
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b28      	subs	r3, #40	; 0x28
 80020d8:	b29b      	uxth	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	4621      	mov	r1, r4
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <ChangerDePage+0x380>)
 80020e0:	f7ff f884 	bl	80011ec <AfficherBouton>
}
 80020e4:	bf00      	nop
 80020e6:	3798      	adds	r7, #152	; 0x98
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bdb0      	pop	{r4, r5, r7, pc}
 80020ec:	20000208 	.word	0x20000208
 80020f0:	08015b08 	.word	0x08015b08
 80020f4:	ff0000ff 	.word	0xff0000ff
 80020f8:	20000010 	.word	0x20000010
 80020fc:	080159cc 	.word	0x080159cc

08002100 <platform_write>:



static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af04      	add	r7, sp, #16
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	461a      	mov	r2, r3
 800210c:	460b      	mov	r3, r1
 800210e:	72fb      	strb	r3, [r7, #11]
 8002110:	4613      	mov	r3, r2
 8002112:	813b      	strh	r3, [r7, #8]
	/* Write multiple command */
	  reg |= 0x80;
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800211a:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	b29a      	uxth	r2, r3
 8002120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002124:	9302      	str	r3, [sp, #8]
 8002126:	893b      	ldrh	r3, [r7, #8]
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	21bf      	movs	r1, #191	; 0xbf
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f006 f8fe 	bl	8008334 <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b088      	sub	sp, #32
 8002146:	af04      	add	r7, sp, #16
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	461a      	mov	r2, r3
 800214e:	460b      	mov	r3, r1
 8002150:	72fb      	strb	r3, [r7, #11]
 8002152:	4613      	mov	r3, r2
 8002154:	813b      	strh	r3, [r7, #8]
	 /* Read multiple command */
	  reg |= 0x80;
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800215c:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	b29a      	uxth	r2, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	893b      	ldrh	r3, [r7, #8]
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2301      	movs	r3, #1
 8002172:	21bf      	movs	r1, #191	; 0xbf
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f006 f9f1 	bl	800855c <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <linear_interpolation>:
  float x1;
  float y1;
} lin_t;

float linear_interpolation(lin_t *lin, int16_t x)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	ed93 7a03 	vldr	s14, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 7a01 	vldr	s15, [r3, #4]
 800219c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80021bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                     (lin->x0 * lin->y1)))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	ed93 6a00 	vldr	s12, [r3]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80021cc:	ee66 7a27 	vmul.f32	s15, s12, s15
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80021d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021d4:	ee37 7a27 	vadd.f32	s14, s14, s15
         / (lin->x1 - lin->x0);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	edd3 6a02 	vldr	s13, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80021f0:	eeb0 0a67 	vmov.f32	s0, s15
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <Humedite>:





float Humedite(){
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af00      	add	r7, sp, #0
	static uint8_t whoamI;
	  stmdev_ctx_t dev_ctx;
	  dev_ctx.write_reg = platform_write;
 8002206:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <Humedite+0x174>)
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
	  dev_ctx.read_reg = platform_read;
 800220a:	4b5b      	ldr	r3, [pc, #364]	; (8002378 <Humedite+0x178>)
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  dev_ctx.handle = &hi2c1;
 800220e:	4b5b      	ldr	r3, [pc, #364]	; (800237c <Humedite+0x17c>)
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
	   whoamI = 0;
 8002212:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <Humedite+0x180>)
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
	   hts221_device_id_get(&dev_ctx, &whoamI);
 8002218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221c:	4958      	ldr	r1, [pc, #352]	; (8002380 <Humedite+0x180>)
 800221e:	4618      	mov	r0, r3
 8002220:	f003 ffe2 	bl	80061e8 <hts221_device_id_get>

	   if ( whoamI != HTS221_ID )
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <Humedite+0x180>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2bbc      	cmp	r3, #188	; 0xbc
 800222a:	d000      	beq.n	800222e <Humedite+0x2e>
	     while (1); /*manage here device not found */
 800222c:	e7fe      	b.n	800222c <Humedite+0x2c>

	   /* Read humidity calibration coefficient */
	   lin_t lin_hum;
	   hts221_hum_adc_point_0_get(&dev_ctx, &lin_hum.x0);
 800222e:	f107 0218 	add.w	r2, r7, #24
 8002232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f004 f8bb 	bl	80063b4 <hts221_hum_adc_point_0_get>
	   hts221_hum_rh_point_0_get(&dev_ctx, &lin_hum.y0);
 800223e:	f107 0318 	add.w	r3, r7, #24
 8002242:	1d1a      	adds	r2, r3, #4
 8002244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f004 f814 	bl	8006278 <hts221_hum_rh_point_0_get>
	   hts221_hum_adc_point_1_get(&dev_ctx, &lin_hum.x1);
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	f103 0208 	add.w	r2, r3, #8
 8002258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f004 f8cc 	bl	80063fc <hts221_hum_adc_point_1_get>
	   hts221_hum_rh_point_1_get(&dev_ctx, &lin_hum.y1);
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	f103 020c 	add.w	r2, r3, #12
 800226c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f004 f81e 	bl	80062b4 <hts221_hum_rh_point_1_get>
	   /* Read temperature calibration coefficient */
	   lin_t lin_temp;
	   hts221_temp_adc_point_0_get(&dev_ctx, &lin_temp.x0);
 8002278:	f107 0208 	add.w	r2, r7, #8
 800227c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f8de 	bl	8006444 <hts221_temp_adc_point_0_get>
	   hts221_temp_deg_point_0_get(&dev_ctx, &lin_temp.y0);
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	1d1a      	adds	r2, r3, #4
 800228e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f004 f82b 	bl	80062f0 <hts221_temp_deg_point_0_get>
	   hts221_temp_adc_point_1_get(&dev_ctx, &lin_temp.x1);
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	f103 0208 	add.w	r2, r3, #8
 80022a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f004 f8ef 	bl	800648c <hts221_temp_adc_point_1_get>
	   hts221_temp_deg_point_1_get(&dev_ctx, &lin_temp.y1);
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	f103 020c 	add.w	r2, r3, #12
 80022b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 f848 	bl	8006352 <hts221_temp_deg_point_1_get>
	   /* Enable Block Data Update */
	   hts221_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80022c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 ff21 	bl	8006110 <hts221_block_data_update_set>
	   /* Set Output Data Rate */
	   hts221_data_rate_set(&dev_ctx, HTS221_ODR_1Hz);
 80022ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fef5 	bl	80060c4 <hts221_data_rate_set>
	   /* Device power on */
	   hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 80022da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022de:	2101      	movs	r1, #1
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 ff92 	bl	800620a <hts221_power_on_set>
    hts221_reg_t reg;
    hts221_status_get(&dev_ctx, &reg.status_reg);
 80022e6:	1d3a      	adds	r2, r7, #4
 80022e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 ffb1 	bl	8006256 <hts221_status_get>

    if (reg.status_reg.h_da) {
 80022f4:	793b      	ldrb	r3, [r7, #4]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d02f      	beq.n	8002360 <Humedite+0x160>
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <Humedite+0x184>)
 8002302:	2200      	movs	r2, #0
 8002304:	801a      	strh	r2, [r3, #0]
      /* Read humidity data */
      memset(&data_raw_humidity, 0x00, sizeof(int16_t));
      hts221_humidity_raw_get(&dev_ctx, &data_raw_humidity);
 8002306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800230a:	491e      	ldr	r1, [pc, #120]	; (8002384 <Humedite+0x184>)
 800230c:	4618      	mov	r0, r3
 800230e:	f003 ff25 	bl	800615c <hts221_humidity_raw_get>
      humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <Humedite+0x184>)
 8002314:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002318:	f107 0318 	add.w	r3, r7, #24
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff30 	bl	8002184 <linear_interpolation>
 8002324:	eef0 7a40 	vmov.f32	s15, s0
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <Humedite+0x188>)
 800232a:	edc3 7a00 	vstr	s15, [r3]

      if (humidity_perc < 0) {
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <Humedite+0x188>)
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	d503      	bpl.n	8002346 <Humedite+0x146>
        humidity_perc = 0;
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <Humedite+0x188>)
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
      }

      if (humidity_perc > 100) {
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <Humedite+0x188>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800238c <Humedite+0x18c>
 8002350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	dd02      	ble.n	8002360 <Humedite+0x160>
        humidity_perc = 100;
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <Humedite+0x188>)
 800235c:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <Humedite+0x190>)
 800235e:	601a      	str	r2, [r3, #0]
      }


    }
    return humidity_perc;
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <Humedite+0x188>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	ee07 3a90 	vmov	s15, r3
}
 8002368:	eeb0 0a67 	vmov.f32	s0, s15
 800236c:	3738      	adds	r7, #56	; 0x38
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	08002101 	.word	0x08002101
 8002378:	08002143 	.word	0x08002143
 800237c:	200002dc 	.word	0x200002dc
 8002380:	20000218 	.word	0x20000218
 8002384:	2000020a 	.word	0x2000020a
 8002388:	20000210 	.word	0x20000210
 800238c:	42c80000 	.word	0x42c80000
 8002390:	42c80000 	.word	0x42c80000

08002394 <Temperature>:
void affich_H(){
    sprintf((char *)tx_buffer, "Humidity [%%]:%3.2f\r\n", Humedite()); // @suppress("Float formatting support")
    printf( (char const *)tx_buffer);
}

float Temperature(){
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	; 0x38
 8002398:	af00      	add	r7, sp, #0
	static uint8_t whoamI;
	  stmdev_ctx_t dev_ctx;
	  dev_ctx.write_reg = platform_write;
 800239a:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <Temperature+0x140>)
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
	  dev_ctx.read_reg = platform_read;
 800239e:	4b4e      	ldr	r3, [pc, #312]	; (80024d8 <Temperature+0x144>)
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  dev_ctx.handle = &hi2c1;
 80023a2:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <Temperature+0x148>)
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
	   whoamI = 0;
 80023a6:	4b4e      	ldr	r3, [pc, #312]	; (80024e0 <Temperature+0x14c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
	   hts221_device_id_get(&dev_ctx, &whoamI);
 80023ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b0:	494b      	ldr	r1, [pc, #300]	; (80024e0 <Temperature+0x14c>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 ff18 	bl	80061e8 <hts221_device_id_get>

	   if ( whoamI != HTS221_ID )
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <Temperature+0x14c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2bbc      	cmp	r3, #188	; 0xbc
 80023be:	d000      	beq.n	80023c2 <Temperature+0x2e>
	     while (1); /*manage here device not found */
 80023c0:	e7fe      	b.n	80023c0 <Temperature+0x2c>

	   /* Read humidity calibration coefficient */
	   lin_t lin_hum;
	   hts221_hum_adc_point_0_get(&dev_ctx, &lin_hum.x0);
 80023c2:	f107 0218 	add.w	r2, r7, #24
 80023c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 fff1 	bl	80063b4 <hts221_hum_adc_point_0_get>
	   hts221_hum_rh_point_0_get(&dev_ctx, &lin_hum.y0);
 80023d2:	f107 0318 	add.w	r3, r7, #24
 80023d6:	1d1a      	adds	r2, r3, #4
 80023d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 ff4a 	bl	8006278 <hts221_hum_rh_point_0_get>
	   hts221_hum_adc_point_1_get(&dev_ctx, &lin_hum.x1);
 80023e4:	f107 0318 	add.w	r3, r7, #24
 80023e8:	f103 0208 	add.w	r2, r3, #8
 80023ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 f802 	bl	80063fc <hts221_hum_adc_point_1_get>
	   hts221_hum_rh_point_1_get(&dev_ctx, &lin_hum.y1);
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	f103 020c 	add.w	r2, r3, #12
 8002400:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f003 ff54 	bl	80062b4 <hts221_hum_rh_point_1_get>
	   /* Read temperature calibration coefficient */
	   lin_t lin_temp;
	   hts221_temp_adc_point_0_get(&dev_ctx, &lin_temp.x0);
 800240c:	f107 0208 	add.w	r2, r7, #8
 8002410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f004 f814 	bl	8006444 <hts221_temp_adc_point_0_get>
	   hts221_temp_deg_point_0_get(&dev_ctx, &lin_temp.y0);
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	1d1a      	adds	r2, r3, #4
 8002422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f003 ff61 	bl	80062f0 <hts221_temp_deg_point_0_get>
	   hts221_temp_adc_point_1_get(&dev_ctx, &lin_temp.x1);
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	f103 0208 	add.w	r2, r3, #8
 8002436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f004 f825 	bl	800648c <hts221_temp_adc_point_1_get>
	   hts221_temp_deg_point_1_get(&dev_ctx, &lin_temp.y1);
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	f103 020c 	add.w	r2, r3, #12
 800244a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f003 ff7e 	bl	8006352 <hts221_temp_deg_point_1_get>
	   /* Enable Block Data Update */
	   hts221_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245a:	2101      	movs	r1, #1
 800245c:	4618      	mov	r0, r3
 800245e:	f003 fe57 	bl	8006110 <hts221_block_data_update_set>
	   /* Set Output Data Rate */
	   hts221_data_rate_set(&dev_ctx, HTS221_ODR_1Hz);
 8002462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fe2b 	bl	80060c4 <hts221_data_rate_set>
	   /* Device power on */
	   hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 800246e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002472:	2101      	movs	r1, #1
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fec8 	bl	800620a <hts221_power_on_set>
    hts221_reg_t reg;
    hts221_status_get(&dev_ctx, &reg.status_reg);
 800247a:	1d3a      	adds	r2, r7, #4
 800247c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fee7 	bl	8006256 <hts221_status_get>

    if (reg.status_reg.t_da) {
 8002488:	793b      	ldrb	r3, [r7, #4]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d016      	beq.n	80024c2 <Temperature+0x12e>
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <Temperature+0x150>)
 8002496:	2200      	movs	r2, #0
 8002498:	801a      	strh	r2, [r3, #0]
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      hts221_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800249a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249e:	4911      	ldr	r1, [pc, #68]	; (80024e4 <Temperature+0x150>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fe7e 	bl	80061a2 <hts221_temperature_raw_get>
      temperature_degC = linear_interpolation(&lin_temp,
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <Temperature+0x150>)
 80024a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fe66 	bl	8002184 <linear_interpolation>
 80024b8:	eef0 7a40 	vmov.f32	s15, s0
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <Temperature+0x154>)
 80024be:	edc3 7a00 	vstr	s15, [r3]
                                              data_raw_temperature);

    }

    return temperature_degC;
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <Temperature+0x154>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	ee07 3a90 	vmov	s15, r3
}
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	3738      	adds	r7, #56	; 0x38
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08002101 	.word	0x08002101
 80024d8:	08002143 	.word	0x08002143
 80024dc:	200002dc 	.word	0x200002dc
 80024e0:	20000219 	.word	0x20000219
 80024e4:	2000020c 	.word	0x2000020c
 80024e8:	20000214 	.word	0x20000214

080024ec <__io_putchar>:
            Temperature() );
    printf((char const *)tx_buffer);
}

PUTCHAR_PROTOTYPE
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80024f4:	1d39      	adds	r1, r7, #4
 80024f6:	2364      	movs	r3, #100	; 0x64
 80024f8:	2201      	movs	r2, #1
 80024fa:	4804      	ldr	r0, [pc, #16]	; (800250c <__io_putchar+0x20>)
 80024fc:	f00a f95e 	bl	800c7bc <HAL_UART_Transmit>
return ch;
 8002500:	687b      	ldr	r3, [r7, #4]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200006ac 	.word	0x200006ac

08002510 <SaveDataToCSV>:
//static uint8_t tx_buffer[1000];
int v= 0;

/* Function to save weather data to a CSV file */
FRESULT SaveDataToCSV(char (*heures)[6], float *temperatures, float *pressions, float *humidites, char** directions_vent, float *vitesses_vent, float *pluies)
{
 8002510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002514:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
 8002518:	af0c      	add	r7, sp, #48	; 0x30
 800251a:	f507 7428 	add.w	r4, r7, #672	; 0x2a0
 800251e:	f5a4 7421 	sub.w	r4, r4, #644	; 0x284
 8002522:	6020      	str	r0, [r4, #0]
 8002524:	f507 7028 	add.w	r0, r7, #672	; 0x2a0
 8002528:	f5a0 7022 	sub.w	r0, r0, #648	; 0x288
 800252c:	6001      	str	r1, [r0, #0]
 800252e:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8002532:	f5a1 7123 	sub.w	r1, r1, #652	; 0x28c
 8002536:	600a      	str	r2, [r1, #0]
 8002538:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800253c:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8002540:	6013      	str	r3, [r2, #0]
	// au debut du stockage on met l'ecran en mode veille
	BSP_LCD_DisplayOff();
 8002542:	f003 f9c1 	bl	80058c8 <BSP_LCD_DisplayOff>
	IndicationEtatsParLedRGB(TransfertVersSD);
 8002546:	2002      	movs	r0, #2
 8002548:	f000 fa70 	bl	8002a2c <IndicationEtatsParLedRGB>
    FRESULT res; /* FatFs function common result code */
    uint32_t byteswritten; /* File write/read counts */
    uint8_t wtext[100]; /* File write buffer */


    char msg1[] = "Begin\n\r";
 800254c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002550:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8002554:	4a90      	ldr	r2, [pc, #576]	; (8002798 <SaveDataToCSV+0x288>)
 8002556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800255a:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart1, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 800255e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd feb4 	bl	80002d0 <strlen>
 8002568:	4603      	mov	r3, r0
 800256a:	b29a      	uxth	r2, r3
 800256c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
 8002574:	4889      	ldr	r0, [pc, #548]	; (800279c <SaveDataToCSV+0x28c>)
 8002576:	f00a f921 	bl	800c7bc <HAL_UART_Transmit>

    /* Mount SD Card */
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800257a:	2200      	movs	r2, #0
 800257c:	4988      	ldr	r1, [pc, #544]	; (80027a0 <SaveDataToCSV+0x290>)
 800257e:	4889      	ldr	r0, [pc, #548]	; (80027a4 <SaveDataToCSV+0x294>)
 8002580:	f00d fb68 	bl	800fc54 <f_mount>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <SaveDataToCSV+0x7e>
    {
        /* FatFs Initialization Error */
        return FR_INT_ERR;
 800258a:	2302      	movs	r3, #2
 800258c:	e0fe      	b.n	800278c <SaveDataToCSV+0x27c>
    }

    /* Create a FAT file system on the logical drive */
    if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer)) != FR_OK)
 800258e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002596:	9200      	str	r2, [sp, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	2107      	movs	r1, #7
 800259c:	4880      	ldr	r0, [pc, #512]	; (80027a0 <SaveDataToCSV+0x290>)
 800259e:	f00d ff7b 	bl	8010498 <f_mkfs>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <SaveDataToCSV+0x9c>
    {
        /* FatFs Format Error */
        return FR_INT_ERR;
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0ef      	b.n	800278c <SaveDataToCSV+0x27c>
    }

    /* Open or create a CSV file with write access */
    if(f_open(&SDFile, "Mesures.CSV", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80025ac:	220a      	movs	r2, #10
 80025ae:	497e      	ldr	r1, [pc, #504]	; (80027a8 <SaveDataToCSV+0x298>)
 80025b0:	487e      	ldr	r0, [pc, #504]	; (80027ac <SaveDataToCSV+0x29c>)
 80025b2:	f00d fb95 	bl	800fce0 <f_open>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <SaveDataToCSV+0xb0>
    {
        /* 'STM32.CSV' file Open for write Error */
        return FR_INT_ERR;
 80025bc:	2302      	movs	r3, #2
 80025be:	e0e5      	b.n	800278c <SaveDataToCSV+0x27c>
    }

    /* Write header to the CSV file */
    sprintf((char*)wtext, "Heure;Temperature(degC);Pression(hPA);Humidite(%%);Direction_vent;Vitesse_vent(m/s);Pluie(mm)\n");
 80025c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025c4:	497a      	ldr	r1, [pc, #488]	; (80027b0 <SaveDataToCSV+0x2a0>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f00f fbda 	bl	8011d80 <siprintf>
    res = f_write(&SDFile, wtext, strlen((char*)wtext), (void *)&byteswritten);
 80025cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd fe7d 	bl	80002d0 <strlen>
 80025d6:	4602      	mov	r2, r0
 80025d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80025e0:	4872      	ldr	r0, [pc, #456]	; (80027ac <SaveDataToCSV+0x29c>)
 80025e2:	f00d fd3b 	bl	801005c <f_write>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
    if((byteswritten == 0) || (res != FR_OK))
 80025ec:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80025f0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <SaveDataToCSV+0xf2>
 80025fa:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <SaveDataToCSV+0xf8>
    {
        /* 'STM32.CSV' file Write or EOF Error */
        return res;
 8002602:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8002606:	e0c1      	b.n	800278c <SaveDataToCSV+0x27c>
    }

    /* Write data to the CSV file */
    for(int i = 0; i < 24; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800260e:	e08f      	b.n	8002730 <SaveDataToCSV+0x220>
    {
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 8002610:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	461a      	mov	r2, r3
 800261e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002622:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002636:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4413      	add	r3, r2
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ffb1 	bl	80005a8 <__aeabi_f2d>
 8002646:	4604      	mov	r4, r0
 8002648:	460d      	mov	r5, r1
 800264a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002654:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4413      	add	r3, r2
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ffa2 	bl	80005a8 <__aeabi_f2d>
 8002664:	4680      	mov	r8, r0
 8002666:	4689      	mov	r9, r1
                humidites[i], directions_vent[i], vitesses_vent[i], pluies[i]);
 8002668:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002672:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	4413      	add	r3, r2
 800267a:	681b      	ldr	r3, [r3, #0]
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff93 	bl	80005a8 <__aeabi_f2d>
 8002682:	4682      	mov	sl, r0
 8002684:	468b      	mov	fp, r1
                humidites[i], directions_vent[i], vitesses_vent[i], pluies[i]);
 8002686:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8002690:	4413      	add	r3, r2
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 8002692:	681e      	ldr	r6, [r3, #0]
                humidites[i], directions_vent[i], vitesses_vent[i], pluies[i]);
 8002694:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff80 	bl	80005a8 <__aeabi_f2d>
 80026a8:	e9c7 0100 	strd	r0, r1, [r7]
                humidites[i], directions_vent[i], vitesses_vent[i], pluies[i]);
 80026ac:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80026b6:	4413      	add	r3, r2
 80026b8:	681b      	ldr	r3, [r3, #0]
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ff74 	bl	80005a8 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80026c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80026cc:	ed97 7b00 	vldr	d7, [r7]
 80026d0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80026d4:	9606      	str	r6, [sp, #24]
 80026d6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80026da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80026de:	e9cd 4500 	strd	r4, r5, [sp]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4933      	ldr	r1, [pc, #204]	; (80027b4 <SaveDataToCSV+0x2a4>)
 80026e6:	f00f fb4b 	bl	8011d80 <siprintf>
        res = f_write(&SDFile, wtext, strlen((char*)wtext), (void *)&byteswritten);
 80026ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd fdee 	bl	80002d0 <strlen>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026fa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026fe:	482b      	ldr	r0, [pc, #172]	; (80027ac <SaveDataToCSV+0x29c>)
 8002700:	f00d fcac 	bl	801005c <f_write>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
        if((byteswritten == 0) || (res != FR_OK))
 800270a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800270e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <SaveDataToCSV+0x210>
 8002718:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <SaveDataToCSV+0x216>
        {
            /* 'STM32.CSV' file Write or EOF Error */
            return res;
 8002720:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8002724:	e032      	b.n	800278c <SaveDataToCSV+0x27c>
    for(int i = 0; i < 24; i++)
 8002726:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800272a:	3301      	adds	r3, #1
 800272c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002730:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002734:	2b17      	cmp	r3, #23
 8002736:	f77f af6b 	ble.w	8002610 <SaveDataToCSV+0x100>
        }
    }
    char msg2[] = "End\n\r";
 800273a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800273e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002742:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <SaveDataToCSV+0x2a8>)
 8002744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002748:	6018      	str	r0, [r3, #0]
 800274a:	3304      	adds	r3, #4
 800274c:	8019      	strh	r1, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 800274e:	f107 0320 	add.w	r3, r7, #32
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd fdbc 	bl	80002d0 <strlen>
 8002758:	4603      	mov	r3, r0
 800275a:	b29a      	uxth	r2, r3
 800275c:	f107 0120 	add.w	r1, r7, #32
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <SaveDataToCSV+0x28c>)
 8002766:	f00a f829 	bl	800c7bc <HAL_UART_Transmit>

    /* Close the open CSV file */
    f_close(&SDFile);
 800276a:	4810      	ldr	r0, [pc, #64]	; (80027ac <SaveDataToCSV+0x29c>)
 800276c:	f00d fe69 	bl	8010442 <f_close>

    /* Unmount SD Card */
    f_mount(NULL, (TCHAR const*)SDPath, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	490b      	ldr	r1, [pc, #44]	; (80027a0 <SaveDataToCSV+0x290>)
 8002774:	2000      	movs	r0, #0
 8002776:	f00d fa6d 	bl	800fc54 <f_mount>
    IndicationEtatsParLedRGB(ExtinctionRGB);
 800277a:	2001      	movs	r0, #1
 800277c:	f000 f956 	bl	8002a2c <IndicationEtatsParLedRGB>
    //FATFS_UnLinkDriver(SDPath);


    //HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);

    IndicationEtatsParLedRGB(ExtinctionRGB);
 8002780:	2001      	movs	r0, #1
 8002782:	f000 f953 	bl	8002a2c <IndicationEtatsParLedRGB>
    // fin de mode vielle
    BSP_LCD_DisplayOn();
 8002786:	f003 f881 	bl	800588c <BSP_LCD_DisplayOn>
    return FR_OK; /* Function completed successfully */
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	f507 7729 	add.w	r7, r7, #676	; 0x2a4
 8002792:	46bd      	mov	sp, r7
 8002794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002798:	08015b9c 	.word	0x08015b9c
 800279c:	200006ac 	.word	0x200006ac
 80027a0:	20000984 	.word	0x20000984
 80027a4:	20000988 	.word	0x20000988
 80027a8:	08015b18 	.word	0x08015b18
 80027ac:	20000bb8 	.word	0x20000bb8
 80027b0:	08015b24 	.word	0x08015b24
 80027b4:	08015b84 	.word	0x08015b84
 80027b8:	08015ba4 	.word	0x08015ba4

080027bc <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027c2:	463b      	mov	r3, r7
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <MX_ADC3_Init+0x98>)
 80027d0:	4a21      	ldr	r2, [pc, #132]	; (8002858 <MX_ADC3_Init+0x9c>)
 80027d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027d4:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <MX_ADC3_Init+0x98>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <MX_ADC3_Init+0x98>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <MX_ADC3_Init+0x98>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <MX_ADC3_Init+0x98>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <MX_ADC3_Init+0x98>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <MX_ADC3_Init+0x98>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <MX_ADC3_Init+0x98>)
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <MX_ADC3_Init+0xa0>)
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <MX_ADC3_Init+0x98>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <MX_ADC3_Init+0x98>)
 8002808:	2201      	movs	r2, #1
 800280a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_ADC3_Init+0x98>)
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <MX_ADC3_Init+0x98>)
 8002816:	2201      	movs	r2, #1
 8002818:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800281a:	480e      	ldr	r0, [pc, #56]	; (8002854 <MX_ADC3_Init+0x98>)
 800281c:	f003 ffe6 	bl	80067ec <HAL_ADC_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002826:	f001 fb67 	bl	8003ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800282a:	2300      	movs	r3, #0
 800282c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800282e:	2301      	movs	r3, #1
 8002830:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002836:	463b      	mov	r3, r7
 8002838:	4619      	mov	r1, r3
 800283a:	4806      	ldr	r0, [pc, #24]	; (8002854 <MX_ADC3_Init+0x98>)
 800283c:	f004 f8f6 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002846:	f001 fb57 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000021c 	.word	0x2000021c
 8002858:	40012200 	.word	0x40012200
 800285c:	0f000001 	.word	0x0f000001

08002860 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_ADC_MspInit+0x74>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d123      	bne.n	80028ca <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_ADC_MspInit+0x78>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_ADC_MspInit+0x78>)
 8002888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_ADC_MspInit+0x78>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_ADC_MspInit+0x78>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_ADC_MspInit+0x78>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_ADC_MspInit+0x78>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028b2:	2301      	movs	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b6:	2303      	movs	r3, #3
 80028b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_ADC_MspInit+0x7c>)
 80028c6:	f005 faa3 	bl	8007e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	; 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40012200 	.word	0x40012200
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000

080028e0 <GET_Asignal_direction_sensor>:
#include <stdio.h>
#include <string.h>



uint16_t GET_Asignal_direction_sensor(){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
	uint16_t adc;
	HAL_ADC_Start(&hadc3);
 80028e6:	4806      	ldr	r0, [pc, #24]	; (8002900 <GET_Asignal_direction_sensor+0x20>)
 80028e8:	f003 ffc4 	bl	8006874 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc3);
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <GET_Asignal_direction_sensor+0x20>)
 80028ee:	f004 f88f 	bl	8006a10 <HAL_ADC_GetValue>
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
	return adc;
 80028f6:	88fb      	ldrh	r3, [r7, #6]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	2000021c 	.word	0x2000021c

08002904 <Get_direction_vent>:
		HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		return;
	}
}

char* Get_direction_vent(){
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
	uint16_t signal = GET_Asignal_direction_sensor();
 800290a:	f7ff ffe9 	bl	80028e0 <GET_Asignal_direction_sensor>
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
	char* msg;
	if((signal <= 768)&&(signal > 256)){
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002918:	d80c      	bhi.n	8002934 <Get_direction_vent+0x30>
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002920:	d908      	bls.n	8002934 <Get_direction_vent+0x30>
		strcpy((char*)msg, "Nord-Est");
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	4939      	ldr	r1, [pc, #228]	; (8002a0c <Get_direction_vent+0x108>)
 8002926:	461a      	mov	r2, r3
 8002928:	460b      	mov	r3, r1
 800292a:	cb03      	ldmia	r3!, {r0, r1}
 800292c:	6010      	str	r0, [r2, #0]
 800292e:	6051      	str	r1, [r2, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	7213      	strb	r3, [r2, #8]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);

	}
	if((signal <= 1280)&&(signal > 768)){
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800293a:	d807      	bhi.n	800294c <Get_direction_vent+0x48>
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002942:	d903      	bls.n	800294c <Get_direction_vent+0x48>
		strcpy((char*)msg, "Est");
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4a32      	ldr	r2, [pc, #200]	; (8002a10 <Get_direction_vent+0x10c>)
 8002948:	6810      	ldr	r0, [r2, #0]
 800294a:	6018      	str	r0, [r3, #0]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 1792)&&(signal > 1280)){
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002952:	d80a      	bhi.n	800296a <Get_direction_vent+0x66>
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800295a:	d906      	bls.n	800296a <Get_direction_vent+0x66>
		strcpy((char*)msg, "Sud-Est");
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	492d      	ldr	r1, [pc, #180]	; (8002a14 <Get_direction_vent+0x110>)
 8002960:	461a      	mov	r2, r3
 8002962:	460b      	mov	r3, r1
 8002964:	cb03      	ldmia	r3!, {r0, r1}
 8002966:	6010      	str	r0, [r2, #0]
 8002968:	6051      	str	r1, [r2, #4]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 2304)&&(signal > 1792)){
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002970:	d807      	bhi.n	8002982 <Get_direction_vent+0x7e>
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002978:	d903      	bls.n	8002982 <Get_direction_vent+0x7e>
		strcpy((char*)msg, "Sud");
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <Get_direction_vent+0x114>)
 800297e:	6810      	ldr	r0, [r2, #0]
 8002980:	6018      	str	r0, [r3, #0]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 2816)&&(signal > 2304)){
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002988:	d80c      	bhi.n	80029a4 <Get_direction_vent+0xa0>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002990:	d908      	bls.n	80029a4 <Get_direction_vent+0xa0>
		strcpy((char*)msg, "Sud-Ouest");
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4921      	ldr	r1, [pc, #132]	; (8002a1c <Get_direction_vent+0x118>)
 8002996:	461a      	mov	r2, r3
 8002998:	460b      	mov	r3, r1
 800299a:	cb03      	ldmia	r3!, {r0, r1}
 800299c:	6010      	str	r0, [r2, #0]
 800299e:	6051      	str	r1, [r2, #4]
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	8113      	strh	r3, [r2, #8]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 3328)&&(signal > 2816)){
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80029aa:	d809      	bhi.n	80029c0 <Get_direction_vent+0xbc>
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80029b2:	d905      	bls.n	80029c0 <Get_direction_vent+0xbc>
		strcpy((char*)msg, "Ouest");
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <Get_direction_vent+0x11c>)
 80029b8:	6810      	ldr	r0, [r2, #0]
 80029ba:	6018      	str	r0, [r3, #0]
 80029bc:	8892      	ldrh	r2, [r2, #4]
 80029be:	809a      	strh	r2, [r3, #4]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 3840)&&(signal > 3328)){
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029c6:	d809      	bhi.n	80029dc <Get_direction_vent+0xd8>
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80029ce:	d905      	bls.n	80029dc <Get_direction_vent+0xd8>
		strcpy((char*)msg, "Nord");
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <Get_direction_vent+0x120>)
 80029d4:	6810      	ldr	r0, [r2, #0]
 80029d6:	6018      	str	r0, [r3, #0]
 80029d8:	7912      	ldrb	r2, [r2, #4]
 80029da:	711a      	strb	r2, [r3, #4]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 4095)&&(signal > 3840)){
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e2:	d20e      	bcs.n	8002a02 <Get_direction_vent+0xfe>
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029ea:	d90a      	bls.n	8002a02 <Get_direction_vent+0xfe>
		strcpy((char*)msg, "Nord-Ouest");
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	490e      	ldr	r1, [pc, #56]	; (8002a28 <Get_direction_vent+0x124>)
 80029f0:	461a      	mov	r2, r3
 80029f2:	460b      	mov	r3, r1
 80029f4:	cb03      	ldmia	r3!, {r0, r1}
 80029f6:	6010      	str	r0, [r2, #0]
 80029f8:	6051      	str	r1, [r2, #4]
 80029fa:	8819      	ldrh	r1, [r3, #0]
 80029fc:	789b      	ldrb	r3, [r3, #2]
 80029fe:	8111      	strh	r1, [r2, #8]
 8002a00:	7293      	strb	r3, [r2, #10]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	return msg;
 8002a02:	683b      	ldr	r3, [r7, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	08015c00 	.word	0x08015c00
 8002a10:	08015c0c 	.word	0x08015c0c
 8002a14:	08015c10 	.word	0x08015c10
 8002a18:	08015c18 	.word	0x08015c18
 8002a1c:	08015c1c 	.word	0x08015c1c
 8002a20:	08015c28 	.word	0x08015c28
 8002a24:	08015c30 	.word	0x08015c30
 8002a28:	08015c38 	.word	0x08015c38

08002a2c <IndicationEtatsParLedRGB>:
#include "controle_led_rgb.h"


// Fonction pour gérer l'état des LEDs
void IndicationEtatsParLedRGB(EtatLed etat) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
    switch (etat) {
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d83f      	bhi.n	8002abc <IndicationEtatsParLedRGB+0x90>
 8002a3c:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <IndicationEtatsParLedRGB+0x18>)
 8002a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a42:	bf00      	nop
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a89 	.word	0x08002a89
 8002a4c:	08002a6f 	.word	0x08002a6f
 8002a50:	08002aa3 	.word	0x08002aa3
        case PriseDeMesure:
            // Allumer le blanc (Rouge + Vert, Bleu non contrôlable)
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_SET); // Vert ON
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a5a:	481b      	ldr	r0, [pc, #108]	; (8002ac8 <IndicationEtatsParLedRGB+0x9c>)
 8002a5c:	f005 fb9c 	bl	8008198 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_SET); // Rouge ON
 8002a60:	2201      	movs	r2, #1
 8002a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a66:	4818      	ldr	r0, [pc, #96]	; (8002ac8 <IndicationEtatsParLedRGB+0x9c>)
 8002a68:	f005 fb96 	bl	8008198 <HAL_GPIO_WritePin>
            break;
 8002a6c:	e027      	b.n	8002abe <IndicationEtatsParLedRGB+0x92>

        case TransfertVersSD:
            // Allumer le Magenta (Rouge, Bleu)
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_RESET); // Vert OFF
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a74:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <IndicationEtatsParLedRGB+0x9c>)
 8002a76:	f005 fb8f 	bl	8008198 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_SET); // Rouge ON
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a80:	4811      	ldr	r0, [pc, #68]	; (8002ac8 <IndicationEtatsParLedRGB+0x9c>)
 8002a82:	f005 fb89 	bl	8008198 <HAL_GPIO_WritePin>
            break;
 8002a86:	e01a      	b.n	8002abe <IndicationEtatsParLedRGB+0x92>

        case ExtinctionRGB:
            // Éteindre toutes les couleurs (sauf Bleu)
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_RESET); // Vert OFF
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a8e:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <IndicationEtatsParLedRGB+0x9c>)
 8002a90:	f005 fb82 	bl	8008198 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_RESET); // Rouge OFF
 8002a94:	2200      	movs	r2, #0
 8002a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a9a:	480b      	ldr	r0, [pc, #44]	; (8002ac8 <IndicationEtatsParLedRGB+0x9c>)
 8002a9c:	f005 fb7c 	bl	8008198 <HAL_GPIO_WritePin>
            break;
 8002aa0:	e00d      	b.n	8002abe <IndicationEtatsParLedRGB+0x92>

        case Navigation:
            // Allumer le Cyan (Vert, Bleu)
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_SET); // Vert ON
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aa8:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <IndicationEtatsParLedRGB+0x9c>)
 8002aaa:	f005 fb75 	bl	8008198 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_RESET); // Rouge OFF
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ab4:	4804      	ldr	r0, [pc, #16]	; (8002ac8 <IndicationEtatsParLedRGB+0x9c>)
 8002ab6:	f005 fb6f 	bl	8008198 <HAL_GPIO_WritePin>
            break;
 8002aba:	e000      	b.n	8002abe <IndicationEtatsParLedRGB+0x92>

        default:
            // Gestion d'état non défini
            break;
 8002abc:	bf00      	nop
    }
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40021c00 	.word	0x40021c00

08002acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <MX_DMA_Init+0x48>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <MX_DMA_Init+0x48>)
 8002ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <MX_DMA_Init+0x48>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	203b      	movs	r0, #59	; 0x3b
 8002af0:	f004 fac7 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002af4:	203b      	movs	r0, #59	; 0x3b
 8002af6:	f004 fae0 	bl	80070ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2100      	movs	r1, #0
 8002afe:	2045      	movs	r0, #69	; 0x45
 8002b00:	f004 fabf 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002b04:	2045      	movs	r0, #69	; 0x45
 8002b06:	f004 fad8 	bl	80070ba <HAL_NVIC_EnableIRQ>

}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b1e:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <MX_DMA2D_Init+0x60>)
 8002b20:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b4e:	f004 fed3 	bl	80078f8 <HAL_DMA2D_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002b58:	f001 f9ce 	bl	8003ef8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	4805      	ldr	r0, [pc, #20]	; (8002b74 <MX_DMA2D_Init+0x5c>)
 8002b60:	f005 f828 	bl	8007bb4 <HAL_DMA2D_ConfigLayer>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002b6a:	f001 f9c5 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000264 	.word	0x20000264
 8002b78:	4002b000 	.word	0x4002b000

08002b7c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_DMA2D_MspInit+0x38>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_DMA2D_MspInit+0x3c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_DMA2D_MspInit+0x3c>)
 8002b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_DMA2D_MspInit+0x3c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	4002b000 	.word	0x4002b000
 8002bb8:	40023800 	.word	0x40023800

08002bbc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
 8002bd0:	615a      	str	r2, [r3, #20]
 8002bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <MX_FMC_Init+0x94>)
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <MX_FMC_Init+0x98>)
 8002bd8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <MX_FMC_Init+0x94>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <MX_FMC_Init+0x94>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <MX_FMC_Init+0x94>)
 8002be8:	2204      	movs	r2, #4
 8002bea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002bec:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <MX_FMC_Init+0x94>)
 8002bee:	2210      	movs	r2, #16
 8002bf0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <MX_FMC_Init+0x94>)
 8002bf4:	2240      	movs	r2, #64	; 0x40
 8002bf6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <MX_FMC_Init+0x94>)
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <MX_FMC_Init+0x94>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <MX_FMC_Init+0x94>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_FMC_Init+0x94>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <MX_FMC_Init+0x94>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002c16:	2310      	movs	r3, #16
 8002c18:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8002c1e:	2310      	movs	r3, #16
 8002c20:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002c22:	2310      	movs	r3, #16
 8002c24:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002c26:	2310      	movs	r3, #16
 8002c28:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8002c2a:	2310      	movs	r3, #16
 8002c2c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8002c2e:	2310      	movs	r3, #16
 8002c30:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <MX_FMC_Init+0x94>)
 8002c38:	f008 fda6 	bl	800b788 <HAL_SDRAM_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002c42:	f001 f959 	bl	8003ef8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200002a4 	.word	0x200002a4
 8002c54:	a0000140 	.word	0xa0000140

08002c58 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002c6c:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <HAL_FMC_MspInit+0xe4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d15e      	bne.n	8002d32 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_FMC_MspInit+0xe4>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_FMC_MspInit+0xe8>)
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	4a30      	ldr	r2, [pc, #192]	; (8002d40 <HAL_FMC_MspInit+0xe8>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6393      	str	r3, [r2, #56]	; 0x38
 8002c86:	4b2e      	ldr	r3, [pc, #184]	; (8002d40 <HAL_FMC_MspInit+0xe8>)
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8002c92:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ca4:	230c      	movs	r3, #12
 8002ca6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	4619      	mov	r1, r3
 8002cac:	4825      	ldr	r0, [pc, #148]	; (8002d44 <HAL_FMC_MspInit+0xec>)
 8002cae:	f005 f8af 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8002cb2:	f248 1333 	movw	r3, #33075	; 0x8133
 8002cb6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481e      	ldr	r0, [pc, #120]	; (8002d48 <HAL_FMC_MspInit+0xf0>)
 8002cce:	f005 f89f 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002cd2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002cd6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4817      	ldr	r0, [pc, #92]	; (8002d4c <HAL_FMC_MspInit+0xf4>)
 8002cee:	f005 f88f 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002cf2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002cf6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d00:	2303      	movs	r3, #3
 8002d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d04:	230c      	movs	r3, #12
 8002d06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4810      	ldr	r0, [pc, #64]	; (8002d50 <HAL_FMC_MspInit+0xf8>)
 8002d0e:	f005 f87f 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8002d12:	232c      	movs	r3, #44	; 0x2c
 8002d14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d22:	230c      	movs	r3, #12
 8002d24:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480a      	ldr	r0, [pc, #40]	; (8002d54 <HAL_FMC_MspInit+0xfc>)
 8002d2c:	f005 f870 	bl	8007e10 <HAL_GPIO_Init>
 8002d30:	e000      	b.n	8002d34 <HAL_FMC_MspInit+0xdc>
    return;
 8002d32:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200002d8 	.word	0x200002d8
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021800 	.word	0x40021800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021400 	.word	0x40021400
 8002d54:	40021c00 	.word	0x40021c00

08002d58 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002d60:	f7ff ff7a 	bl	8002c58 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b090      	sub	sp, #64	; 0x40
 8002d70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d82:	4ba6      	ldr	r3, [pc, #664]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4aa5      	ldr	r2, [pc, #660]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002d88:	f043 0310 	orr.w	r3, r3, #16
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4ba3      	ldr	r3, [pc, #652]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d9a:	4ba0      	ldr	r3, [pc, #640]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a9f      	ldr	r2, [pc, #636]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b9d      	ldr	r3, [pc, #628]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db2:	4b9a      	ldr	r3, [pc, #616]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a99      	ldr	r2, [pc, #612]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b97      	ldr	r3, [pc, #604]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dca:	4b94      	ldr	r3, [pc, #592]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a93      	ldr	r2, [pc, #588]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b91      	ldr	r3, [pc, #580]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de2:	4b8e      	ldr	r3, [pc, #568]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a8d      	ldr	r2, [pc, #564]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b8b      	ldr	r3, [pc, #556]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	4b88      	ldr	r3, [pc, #544]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a87      	ldr	r2, [pc, #540]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b85      	ldr	r3, [pc, #532]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e12:	4b82      	ldr	r3, [pc, #520]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a81      	ldr	r2, [pc, #516]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b7f      	ldr	r3, [pc, #508]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e2a:	4b7c      	ldr	r3, [pc, #496]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a7b      	ldr	r2, [pc, #492]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b79      	ldr	r3, [pc, #484]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e42:	4b76      	ldr	r3, [pc, #472]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a75      	ldr	r2, [pc, #468]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b73      	ldr	r3, [pc, #460]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e5a:	4b70      	ldr	r3, [pc, #448]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a6f      	ldr	r2, [pc, #444]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e60:	f043 0320 	orr.w	r3, r3, #32
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b6d      	ldr	r3, [pc, #436]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e72:	4b6a      	ldr	r3, [pc, #424]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a69      	ldr	r2, [pc, #420]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002e90:	4863      	ldr	r0, [pc, #396]	; (8003020 <MX_GPIO_Init+0x2b4>)
 8002e92:	f005 f981 	bl	8008198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE3 PE2 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8002e96:	237c      	movs	r3, #124	; 0x7c
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	485e      	ldr	r0, [pc, #376]	; (8003024 <MX_GPIO_Init+0x2b8>)
 8002eaa:	f004 ffb1 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 8002eae:	f247 238c 	movw	r3, #29324	; 0x728c
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4859      	ldr	r0, [pc, #356]	; (8003028 <MX_GPIO_Init+0x2bc>)
 8002ec4:	f004 ffa4 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB3 PB6
                           PB13 PB12 PB2 PB10
                           PB1 PB0 PB11 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_6
 8002ec8:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eda:	4619      	mov	r1, r3
 8002edc:	4853      	ldr	r0, [pc, #332]	; (800302c <MX_GPIO_Init+0x2c0>)
 8002ede:	f004 ff97 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8002ee2:	f643 03f0 	movw	r3, #14576	; 0x38f0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	484e      	ldr	r0, [pc, #312]	; (8003030 <MX_GPIO_Init+0x2c4>)
 8002ef8:	f004 ff8a 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ3
                           PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8002efc:	f64f 73df 	movw	r3, #65503	; 0xffdf
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f02:	2303      	movs	r3, #3
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4848      	ldr	r0, [pc, #288]	; (8003034 <MX_GPIO_Init+0x2c8>)
 8002f12:	f004 ff7d 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 8002f16:	f64c 63ff 	movw	r3, #52991	; 0xceff
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4843      	ldr	r0, [pc, #268]	; (8003038 <MX_GPIO_Init+0x2cc>)
 8002f2c:	f004 ff70 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI2 PI7
                           PI6 PI12 PI13 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7
 8002f30:	f24b 13cc 	movw	r3, #45516	; 0xb1cc
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f36:	2303      	movs	r3, #3
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f42:	4619      	mov	r1, r3
 8002f44:	483d      	ldr	r0, [pc, #244]	; (800303c <MX_GPIO_Init+0x2d0>)
 8002f46:	f004 ff63 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f50:	2300      	movs	r3, #0
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4836      	ldr	r0, [pc, #216]	; (8003038 <MX_GPIO_Init+0x2cc>)
 8002f60:	f004 ff56 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK4 PK3 PK1 PK2
                           PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2
 8002f64:	231f      	movs	r3, #31
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f74:	4619      	mov	r1, r3
 8002f76:	4832      	ldr	r0, [pc, #200]	; (8003040 <MX_GPIO_Init+0x2d4>)
 8002f78:	f004 ff4a 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA1 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
 8002f7c:	f240 43fe 	movw	r3, #1278	; 0x4fe
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f82:	2303      	movs	r3, #3
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f8e:	4619      	mov	r1, r3
 8002f90:	482c      	ldr	r0, [pc, #176]	; (8003044 <MX_GPIO_Init+0x2d8>)
 8002f92:	f004 ff3d 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH4 PH12 PH7
                           PH6 PH8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_7
 8002f96:	f245 13d0 	movw	r3, #20944	; 0x51d0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa8:	4619      	mov	r1, r3
 8002faa:	481d      	ldr	r0, [pc, #116]	; (8003020 <MX_GPIO_Init+0x2b4>)
 8002fac:	f004 ff30 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	481d      	ldr	r0, [pc, #116]	; (800303c <MX_GPIO_Init+0x2d0>)
 8002fc8:	f004 ff22 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8002fcc:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4819      	ldr	r0, [pc, #100]	; (8003048 <MX_GPIO_Init+0x2dc>)
 8002fe2:	f004 ff15 	bl	8007e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002fe6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fec:	2301      	movs	r3, #1
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4808      	ldr	r0, [pc, #32]	; (8003020 <MX_GPIO_Init+0x2b4>)
 8003000:	f004 ff06 	bl	8007e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2101      	movs	r1, #1
 8003008:	2028      	movs	r0, #40	; 0x28
 800300a:	f004 f83a 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800300e:	2028      	movs	r0, #40	; 0x28
 8003010:	f004 f853 	bl	80070ba <HAL_NVIC_EnableIRQ>

}
 8003014:	bf00      	nop
 8003016:	3740      	adds	r7, #64	; 0x40
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40023800 	.word	0x40023800
 8003020:	40021c00 	.word	0x40021c00
 8003024:	40021000 	.word	0x40021000
 8003028:	40021800 	.word	0x40021800
 800302c:	40020400 	.word	0x40020400
 8003030:	40020c00 	.word	0x40020c00
 8003034:	40022400 	.word	0x40022400
 8003038:	40020800 	.word	0x40020800
 800303c:	40022000 	.word	0x40022000
 8003040:	40022800 	.word	0x40022800
 8003044:	40020000 	.word	0x40020000
 8003048:	40021400 	.word	0x40021400

0800304c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <MX_I2C1_Init+0x74>)
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <MX_I2C1_Init+0x78>)
 8003054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00302F47;
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <MX_I2C1_Init+0x74>)
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <MX_I2C1_Init+0x7c>)
 800305a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <MX_I2C1_Init+0x74>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <MX_I2C1_Init+0x74>)
 8003064:	2201      	movs	r2, #1
 8003066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <MX_I2C1_Init+0x74>)
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <MX_I2C1_Init+0x74>)
 8003070:	2200      	movs	r2, #0
 8003072:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <MX_I2C1_Init+0x74>)
 8003076:	2200      	movs	r2, #0
 8003078:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <MX_I2C1_Init+0x74>)
 800307c:	2200      	movs	r2, #0
 800307e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <MX_I2C1_Init+0x74>)
 8003082:	2200      	movs	r2, #0
 8003084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003086:	480e      	ldr	r0, [pc, #56]	; (80030c0 <MX_I2C1_Init+0x74>)
 8003088:	f005 f8c4 	bl	8008214 <HAL_I2C_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003092:	f000 ff31 	bl	8003ef8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003096:	2100      	movs	r1, #0
 8003098:	4809      	ldr	r0, [pc, #36]	; (80030c0 <MX_I2C1_Init+0x74>)
 800309a:	f005 fe13 	bl	8008cc4 <HAL_I2CEx_ConfigAnalogFilter>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80030a4:	f000 ff28 	bl	8003ef8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030a8:	2100      	movs	r1, #0
 80030aa:	4805      	ldr	r0, [pc, #20]	; (80030c0 <MX_I2C1_Init+0x74>)
 80030ac:	f005 fe55 	bl	8008d5a <HAL_I2CEx_ConfigDigitalFilter>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80030b6:	f000 ff1f 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200002dc 	.word	0x200002dc
 80030c4:	40005400 	.word	0x40005400
 80030c8:	00302f47 	.word	0x00302f47

080030cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b0aa      	sub	sp, #168	; 0xa8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	2284      	movs	r2, #132	; 0x84
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f00e feaa 	bl	8011e46 <memset>
  if(i2cHandle->Instance==I2C1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <HAL_I2C_MspInit+0xb4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d13c      	bne.n	8003176 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003100:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003102:	2300      	movs	r3, #0
 8003104:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003106:	f107 0310 	add.w	r3, r7, #16
 800310a:	4618      	mov	r0, r3
 800310c:	f006 fe24 	bl	8009d58 <HAL_RCCEx_PeriphCLKConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003116:	f000 feef 	bl	8003ef8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <HAL_I2C_MspInit+0xb8>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a19      	ldr	r2, [pc, #100]	; (8003184 <HAL_I2C_MspInit+0xb8>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <HAL_I2C_MspInit+0xb8>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003136:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800313a:	2312      	movs	r3, #18
 800313c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003146:	2303      	movs	r3, #3
 8003148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800314c:	2304      	movs	r3, #4
 800314e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003152:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003156:	4619      	mov	r1, r3
 8003158:	480b      	ldr	r0, [pc, #44]	; (8003188 <HAL_I2C_MspInit+0xbc>)
 800315a:	f004 fe59 	bl	8007e10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_I2C_MspInit+0xb8>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a08      	ldr	r2, [pc, #32]	; (8003184 <HAL_I2C_MspInit+0xb8>)
 8003164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_I2C_MspInit+0xb8>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003176:	bf00      	nop
 8003178:	37a8      	adds	r7, #168	; 0xa8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40005400 	.word	0x40005400
 8003184:	40023800 	.word	0x40023800
 8003188:	40020400 	.word	0x40020400

0800318c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b09a      	sub	sp, #104	; 0x68
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003196:	2234      	movs	r2, #52	; 0x34
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f00e fe53 	bl	8011e46 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80031a0:	463b      	mov	r3, r7
 80031a2:	2234      	movs	r2, #52	; 0x34
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f00e fe4d 	bl	8011e46 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80031ac:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031ae:	4a4f      	ldr	r2, [pc, #316]	; (80032ec <MX_LTDC_Init+0x160>)
 80031b0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80031b2:	4b4d      	ldr	r3, [pc, #308]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80031b8:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80031c4:	4b48      	ldr	r3, [pc, #288]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80031d0:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031d2:	2203      	movs	r2, #3
 80031d4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80031d6:	4b44      	ldr	r3, [pc, #272]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031d8:	220e      	movs	r2, #14
 80031da:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031de:	2205      	movs	r2, #5
 80031e0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80031e2:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031e4:	f240 228e 	movw	r2, #654	; 0x28e
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031ec:	f240 12e5 	movw	r2, #485	; 0x1e5
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031f4:	f44f 7225 	mov.w	r2, #660	; 0x294
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80031fc:	f240 12e7 	movw	r2, #487	; 0x1e7
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <MX_LTDC_Init+0x15c>)
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <MX_LTDC_Init+0x15c>)
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003212:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <MX_LTDC_Init+0x15c>)
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800321a:	4833      	ldr	r0, [pc, #204]	; (80032e8 <MX_LTDC_Init+0x15c>)
 800321c:	f005 fdea 	bl	8008df4 <HAL_LTDC_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003226:	f000 fe67 	bl	8003ef8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800323a:	2300      	movs	r3, #0
 800323c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800324a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800324c:	2305      	movs	r3, #5
 800324e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800326e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003272:	2200      	movs	r2, #0
 8003274:	4619      	mov	r1, r3
 8003276:	481c      	ldr	r0, [pc, #112]	; (80032e8 <MX_LTDC_Init+0x15c>)
 8003278:	f005 fe8c 	bl	8008f94 <HAL_LTDC_ConfigLayer>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003282:	f000 fe39 	bl	8003ef8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80032a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80032a8:	2305      	movs	r3, #5
 80032aa:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80032ca:	463b      	mov	r3, r7
 80032cc:	2201      	movs	r2, #1
 80032ce:	4619      	mov	r1, r3
 80032d0:	4805      	ldr	r0, [pc, #20]	; (80032e8 <MX_LTDC_Init+0x15c>)
 80032d2:	f005 fe5f 	bl	8008f94 <HAL_LTDC_ConfigLayer>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80032dc:	f000 fe0c 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80032e0:	bf00      	nop
 80032e2:	3768      	adds	r7, #104	; 0x68
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000330 	.word	0x20000330
 80032ec:	40016800 	.word	0x40016800

080032f0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b0b0      	sub	sp, #192	; 0xc0
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800330c:	2284      	movs	r2, #132	; 0x84
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f00e fd98 	bl	8011e46 <memset>
  if(ltdcHandle->Instance==LTDC)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a96      	ldr	r2, [pc, #600]	; (8003574 <HAL_LTDC_MspInit+0x284>)
 800331c:	4293      	cmp	r3, r2
 800331e:	f040 8125 	bne.w	800356c <HAL_LTDC_MspInit+0x27c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003322:	2308      	movs	r3, #8
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003326:	2332      	movs	r3, #50	; 0x32
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800332a:	2302      	movs	r3, #2
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800332e:	2302      	movs	r3, #2
 8003330:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003332:	2300      	movs	r3, #0
 8003334:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800333a:	2300      	movs	r3, #0
 800333c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800333e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003342:	4618      	mov	r0, r3
 8003344:	f006 fd08 	bl	8009d58 <HAL_RCCEx_PeriphCLKConfig>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800334e:	f000 fdd3 	bl	8003ef8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	4a88      	ldr	r2, [pc, #544]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
 800335e:	4b86      	ldr	r3, [pc, #536]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800336a:	4b83      	ldr	r3, [pc, #524]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a82      	ldr	r2, [pc, #520]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b80      	ldr	r3, [pc, #512]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a7c      	ldr	r2, [pc, #496]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b7a      	ldr	r3, [pc, #488]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800339a:	4b77      	ldr	r3, [pc, #476]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a76      	ldr	r2, [pc, #472]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b74      	ldr	r3, [pc, #464]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80033b2:	4b71      	ldr	r3, [pc, #452]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a70      	ldr	r2, [pc, #448]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b6e      	ldr	r3, [pc, #440]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ca:	4b6b      	ldr	r3, [pc, #428]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a6a      	ldr	r2, [pc, #424]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a64      	ldr	r2, [pc, #400]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b62      	ldr	r3, [pc, #392]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <HAL_LTDC_MspInit+0x288>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8003412:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8003416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800342c:	230e      	movs	r3, #14
 800342e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003432:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003436:	4619      	mov	r1, r3
 8003438:	4850      	ldr	r0, [pc, #320]	; (800357c <HAL_LTDC_MspInit+0x28c>)
 800343a:	f004 fce9 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800343e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003446:	2302      	movs	r3, #2
 8003448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003458:	230e      	movs	r3, #14
 800345a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003462:	4619      	mov	r1, r3
 8003464:	4846      	ldr	r0, [pc, #280]	; (8003580 <HAL_LTDC_MspInit+0x290>)
 8003466:	f004 fcd3 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 800346a:	f244 6333 	movw	r3, #17971	; 0x4633
 800346e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003484:	230e      	movs	r3, #14
 8003486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800348a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800348e:	4619      	mov	r1, r3
 8003490:	483c      	ldr	r0, [pc, #240]	; (8003584 <HAL_LTDC_MspInit+0x294>)
 8003492:	f004 fcbd 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003496:	23e0      	movs	r3, #224	; 0xe0
 8003498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034ae:	230e      	movs	r3, #14
 80034b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80034b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034b8:	4619      	mov	r1, r3
 80034ba:	4833      	ldr	r0, [pc, #204]	; (8003588 <HAL_LTDC_MspInit+0x298>)
 80034bc:	f004 fca8 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034da:	2309      	movs	r3, #9
 80034dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034e4:	4619      	mov	r1, r3
 80034e6:	4825      	ldr	r0, [pc, #148]	; (800357c <HAL_LTDC_MspInit+0x28c>)
 80034e8:	f004 fc92 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034ec:	2308      	movs	r3, #8
 80034ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003504:	230e      	movs	r3, #14
 8003506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800350a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800350e:	4619      	mov	r1, r3
 8003510:	481e      	ldr	r0, [pc, #120]	; (800358c <HAL_LTDC_MspInit+0x29c>)
 8003512:	f004 fc7d 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8003516:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 800351a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003530:	230e      	movs	r3, #14
 8003532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003536:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800353a:	4619      	mov	r1, r3
 800353c:	4814      	ldr	r0, [pc, #80]	; (8003590 <HAL_LTDC_MspInit+0x2a0>)
 800353e:	f004 fc67 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003542:	2320      	movs	r3, #32
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800355a:	230e      	movs	r3, #14
 800355c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003560:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003564:	4619      	mov	r1, r3
 8003566:	480b      	ldr	r0, [pc, #44]	; (8003594 <HAL_LTDC_MspInit+0x2a4>)
 8003568:	f004 fc52 	bl	8007e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800356c:	bf00      	nop
 800356e:	37c0      	adds	r7, #192	; 0xc0
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40016800 	.word	0x40016800
 8003578:	40023800 	.word	0x40023800
 800357c:	40021800 	.word	0x40021800
 8003580:	40020000 	.word	0x40020000
 8003584:	40022000 	.word	0x40022000
 8003588:	40022800 	.word	0x40022800
 800358c:	40020c00 	.word	0x40020c00
 8003590:	40021c00 	.word	0x40021c00
 8003594:	40022400 	.word	0x40022400

08003598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b0cb      	sub	sp, #300	; 0x12c
 800359c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	// La taille des tableaux initialiser par 0 si on stocker une valeur la taille va augmenter par un
	int taille = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  float* H;
	  char** D;
	  float* P;
	  float* V;
	  float* Pl;
	  char heures[24][6] = {"00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00",
 80035a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80035a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035ac:	4ac4      	ldr	r2, [pc, #784]	; (80038c0 <main+0x328>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	4611      	mov	r1, r2
 80035b2:	2390      	movs	r3, #144	; 0x90
 80035b4:	461a      	mov	r2, r3
 80035b6:	f00e fcde 	bl	8011f76 <memcpy>
	                        "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"};
	  char temp[20] = "No where";
 80035ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80035be:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 80035c2:	4ac0      	ldr	r2, [pc, #768]	; (80038c4 <main+0x32c>)
 80035c4:	4623      	mov	r3, r4
 80035c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80035c8:	c303      	stmia	r3!, {r0, r1}
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	f104 0309 	add.w	r3, r4, #9
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	f8c3 2007 	str.w	r2, [r3, #7]
	  T = (float*)malloc(24 * sizeof(float));
 80035da:	2060      	movs	r0, #96	; 0x60
 80035dc:	f00d fbe4 	bl	8010da8 <malloc>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  H = (float*)malloc(24 * sizeof(float));
 80035e6:	2060      	movs	r0, #96	; 0x60
 80035e8:	f00d fbde 	bl	8010da8 <malloc>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  D = (char**)malloc(24 * sizeof(char*));
 80035f2:	2060      	movs	r0, #96	; 0x60
 80035f4:	f00d fbd8 	bl	8010da8 <malloc>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  P = (float*)malloc(24 * sizeof(float));
 80035fe:	2060      	movs	r0, #96	; 0x60
 8003600:	f00d fbd2 	bl	8010da8 <malloc>
 8003604:	4603      	mov	r3, r0
 8003606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  V = (float*)malloc(24 * sizeof(float));
 800360a:	2060      	movs	r0, #96	; 0x60
 800360c:	f00d fbcc 	bl	8010da8 <malloc>
 8003610:	4603      	mov	r3, r0
 8003612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  Pl = (float*)malloc(24 * sizeof(float));
 8003616:	2060      	movs	r0, #96	; 0x60
 8003618:	f00d fbc6 	bl	8010da8 <malloc>
 800361c:	4603      	mov	r3, r0
 800361e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	  // Remplir le tableau avec 24 valeurs initial
      for (int i = 0; i < 24; ++i) {
 8003622:	2300      	movs	r3, #0
 8003624:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003628:	e00d      	b.n	8003646 <main+0xae>
          T[i] = 0.0;
 800362a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003634:	4413      	add	r3, r2
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 800363c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003640:	3301      	adds	r3, #1
 8003642:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003646:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800364a:	2b17      	cmp	r3, #23
 800364c:	dded      	ble.n	800362a <main+0x92>
      }
      // Remplir le tableau avec 24 valeurs initial
      for (int i = 0; i < 24; ++i) {
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003654:	e00c      	b.n	8003670 <main+0xd8>
          H[i] = 30.0;
 8003656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003660:	4413      	add	r3, r2
 8003662:	4a99      	ldr	r2, [pc, #612]	; (80038c8 <main+0x330>)
 8003664:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 8003666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366a:	3301      	adds	r3, #1
 800366c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	2b17      	cmp	r3, #23
 8003676:	ddee      	ble.n	8003656 <main+0xbe>
      }
      // Remplir le tableau avec 24 valeurs initial
      for (int i = 0; i < 24; ++i) {
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800367e:	e01b      	b.n	80036b8 <main+0x120>
    	  //char temp[20] = "No where";
          D[i] = (char*)malloc(50 * sizeof(char));
 8003680:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800368a:	18d4      	adds	r4, r2, r3
 800368c:	2032      	movs	r0, #50	; 0x32
 800368e:	f00d fb8b 	bl	8010da8 <malloc>
 8003692:	4603      	mov	r3, r0
 8003694:	6023      	str	r3, [r4, #0]
          strcpy(D[i], temp);
 8003696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80036a0:	4413      	add	r3, r2
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	463a      	mov	r2, r7
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f00e fc5c 	bl	8011f66 <strcpy>
      for (int i = 0; i < 24; ++i) {
 80036ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036b2:	3301      	adds	r3, #1
 80036b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80036b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036bc:	2b17      	cmp	r3, #23
 80036be:	dddf      	ble.n	8003680 <main+0xe8>
      }

      // Remplir le tableau avec 24 valeurs initial
      for (int i = 0; i < 24; ++i) {
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036c6:	e00d      	b.n	80036e4 <main+0x14c>
           P[i] = 0.0;
 80036c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036d2:	4413      	add	r3, r2
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 80036da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036de:	3301      	adds	r3, #1
 80036e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e8:	2b17      	cmp	r3, #23
 80036ea:	dded      	ble.n	80036c8 <main+0x130>
      }
      // Remplir le tableau avec 24 valeurs initial
      for (int i = 0; i < 24; ++i) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036f2:	e00d      	b.n	8003710 <main+0x178>
          V[i] = 0.0;
 80036f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036fe:	4413      	add	r3, r2
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 8003706:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800370a:	3301      	adds	r3, #1
 800370c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003710:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003714:	2b17      	cmp	r3, #23
 8003716:	dded      	ble.n	80036f4 <main+0x15c>
      }
      float* Va = (float*)malloc(24 * sizeof(float));
 8003718:	2060      	movs	r0, #96	; 0x60
 800371a:	f00d fb45 	bl	8010da8 <malloc>
 800371e:	4603      	mov	r3, r0
 8003720:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

      // Remplir le tableau avec 24 valeurs initial
      for (int i = 0; i < 24; ++i) {
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800372a:	e00d      	b.n	8003748 <main+0x1b0>
          Va[i] = 0.0;
 800372c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003736:	4413      	add	r3, r2
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 800373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003742:	3301      	adds	r3, #1
 8003744:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374c:	2b17      	cmp	r3, #23
 800374e:	dded      	ble.n	800372c <main+0x194>
      }
      // Remplir le tableau avec 24 valeurs initial
      for (int i = 0; i < 24; ++i) {
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003756:	e00d      	b.n	8003774 <main+0x1dc>
          Pl[i] = 0.0;
 8003758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003762:	4413      	add	r3, r2
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 800376a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800376e:	3301      	adds	r3, #1
 8003770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003774:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003778:	2b17      	cmp	r3, #23
 800377a:	dded      	ble.n	8003758 <main+0x1c0>
      }

      // Variables où nous récupérerons les mesures à chaque fois pour les stocker dans des tableaux
	  float v = 0.0;
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  float va = 0.0;
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  float Te = 5;
 800378c:	4b4f      	ldr	r3, [pc, #316]	; (80038cc <main+0x334>)
 800378e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003792:	f002 ffaa 	bl	80066ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003796:	f000 fa8d 	bl	8003cb4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800379a:	f7ff fae7 	bl	8002d6c <MX_GPIO_Init>
  MX_ADC3_Init();
 800379e:	f7ff f80d 	bl	80027bc <MX_ADC3_Init>
  MX_DMA2D_Init();
 80037a2:	f7ff f9b9 	bl	8002b18 <MX_DMA2D_Init>
  MX_FMC_Init();
 80037a6:	f7ff fa09 	bl	8002bbc <MX_FMC_Init>
  MX_I2C1_Init();
 80037aa:	f7ff fc4f 	bl	800304c <MX_I2C1_Init>
  MX_LTDC_Init();
 80037ae:	f7ff fced 	bl	800318c <MX_LTDC_Init>
  MX_SDMMC1_SD_Init();
 80037b2:	f000 fc2d 	bl	8004010 <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 80037b6:	f000 fed9 	bl	800456c <MX_TIM1_Init>
  MX_TIM6_Init();
 80037ba:	f000 ff85 	bl	80046c8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80037be:	f000 ffbb 	bl	8004738 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80037c2:	f001 f8b7 	bl	8004934 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80037c6:	f00a fab5 	bl	800dd34 <MX_FATFS_Init>
  MX_TIM2_Init();
 80037ca:	f000 ff29 	bl	8004620 <MX_TIM2_Init>
  MX_DMA_Init();
 80037ce:	f7ff f97d 	bl	8002acc <MX_DMA_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80037d2:	f001 f98b 	bl	8004aec <BSP_LCD_Init>
  MX_TIM7_Init();
 80037d6:	f000 ffaf 	bl	8004738 <MX_TIM7_Init>

  // start timer 7
  HAL_TIM_Base_Start_IT(&htim7);
 80037da:	483d      	ldr	r0, [pc, #244]	; (80038d0 <main+0x338>)
 80037dc:	f008 f8bc 	bl	800b958 <HAL_TIM_Base_Start_IT>
  // start timer 6
  HAL_TIM_Base_Start_IT(&htim6);
 80037e0:	483c      	ldr	r0, [pc, #240]	; (80038d4 <main+0x33c>)
 80037e2:	f008 f8b9 	bl	800b958 <HAL_TIM_Base_Start_IT>
  // start timer 2
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80037e6:	2100      	movs	r1, #0
 80037e8:	483b      	ldr	r0, [pc, #236]	; (80038d8 <main+0x340>)
 80037ea:	f008 f985 	bl	800baf8 <HAL_TIM_IC_Start_IT>
  // start timer 1
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80037ee:	2100      	movs	r1, #0
 80037f0:	483a      	ldr	r0, [pc, #232]	; (80038dc <main+0x344>)
 80037f2:	f008 f981 	bl	800baf8 <HAL_TIM_IC_Start_IT>


  // initialiser l'ecran
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 80037f6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80037fa:	2001      	movs	r0, #1
 80037fc:	f001 fa0e 	bl	8004c1c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 8003800:	2101      	movs	r1, #1
 8003802:	2001      	movs	r0, #1
 8003804:	f001 fa7a 	bl	8004cfc <BSP_LCD_SetLayerVisible>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8003808:	2001      	movs	r0, #1
 800380a:	f001 fa67 	bl	8004cdc <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800380e:	f04f 30ff 	mov.w	r0, #4294967295
 8003812:	f001 fafd 	bl	8004e10 <BSP_LCD_Clear>


  /* Infinite loop */

  // La taille est égale à 1 car on va afficher les valeurs initiales
  taille = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  // Afficher la page d'accueil
  init_page(T, H, P, D, V, Pl, taille);
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003820:	9302      	str	r3, [sp, #8]
 8003822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003832:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003836:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800383a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800383e:	f7fd fcf3 	bl	8001228 <init_page>
   // taille à 0 pour faire 24 mesures et les afficher dans l'accueil et dans les graphes
  taille = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  // Counter de timer 7 revient à 0
  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <main+0x338>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
	    /* USER CODE END WHILE */

	  // récupérer la mesure du vitesse
	  // On a utilisé deux variables : "va" pour la page d'accueil c'est la valeur réelle
	  // et "v" pour le graphique c'est la valeur normalisée(adapté pour l'affichage en courbe).
	  va = MesureVitesseVent();
 8003850:	f000 fa9e 	bl	8003d90 <MesureVitesseVent>
 8003854:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
	  v = MesureVitesseVent();
 8003858:	f000 fa9a 	bl	8003d90 <MesureVitesseVent>
 800385c:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4

	  // Si v est compris entre 0 et 1 alors il restera le même
	  // Sinon, il return log(v)
	  // On a fait ca car log n'est pas définie sur 0 et ilest negatif entre 0 et 1
	  if(v == 0){
 8003860:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8003864:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386c:	d104      	bne.n	8003878 <main+0x2e0>
		  v = 0;
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003876:	e034      	b.n	80038e2 <main+0x34a>
	  }else{
		  if((v<=1) && (v>0)){
 8003878:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 800387c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d806      	bhi.n	8003898 <main+0x300>
 800388a:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 800388e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	dc23      	bgt.n	80038e0 <main+0x348>
			  v = v;
		  }else{
			  v = log(v);
 8003898:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800389c:	f7fc fe84 	bl	80005a8 <__aeabi_f2d>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	ec43 2b10 	vmov	d0, r2, r3
 80038a8:	f011 fe5e 	bl	8015568 <log>
 80038ac:	ec53 2b10 	vmov	r2, r3, d0
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	f7fd f9c8 	bl	8000c48 <__aeabi_d2f>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038be:	e010      	b.n	80038e2 <main+0x34a>
 80038c0:	08015c54 	.word	0x08015c54
 80038c4:	08015ce4 	.word	0x08015ce4
 80038c8:	41f00000 	.word	0x41f00000
 80038cc:	40a00000 	.word	0x40a00000
 80038d0:	20000660 	.word	0x20000660
 80038d4:	20000614 	.word	0x20000614
 80038d8:	200005c8 	.word	0x200005c8
 80038dc:	2000057c 	.word	0x2000057c
			  v = v;
 80038e0:	bf00      	nop
	  //sprintf(AffichageVitesseVent, "Vitesse du vent: %.2f km/h\n\r", v);
	  //HAL_Delay(300);
	  //HAL_UART_Transmit(&huart1, (uint8_t*) AffichageVitesseVent, strlen(AffichageVitesseVent), HAL_MAX_DELAY);

	  // Pour detecter le nombres des impulsion envoyer par le capteur de pluie
	  if (pluieDetected == 1) {
 80038e2:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <main+0x4ec>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d10d      	bne.n	8003908 <main+0x370>


		  IndicationEtatsParLedRGB(PriseDeMesure);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7ff f89d 	bl	8002a2c <IndicationEtatsParLedRGB>

		    impulseCount++;
 80038f2:	4b65      	ldr	r3, [pc, #404]	; (8003a88 <main+0x4f0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a63      	ldr	r2, [pc, #396]	; (8003a88 <main+0x4f0>)
 80038fa:	6013      	str	r3, [r2, #0]

		    //printf("pluie detected  %d \r \n ", impulseCount  );

		    pluieDetected = 0;
 80038fc:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <main+0x4ec>)
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
			  IndicationEtatsParLedRGB(ExtinctionRGB);
 8003902:	2001      	movs	r0, #1
 8003904:	f7ff f892 	bl	8002a2c <IndicationEtatsParLedRGB>

	  }

	  // Flag de timer 6 pour récupérer et afficher les mesures

		  if(tim6_inter == 1){
 8003908:	4b60      	ldr	r3, [pc, #384]	; (8003a8c <main+0x4f4>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 8168 	bne.w	8003be2 <main+0x64a>
			  sprintf(AffichageVitesseVent, "Tim6\n\r");
 8003912:	495f      	ldr	r1, [pc, #380]	; (8003a90 <main+0x4f8>)
 8003914:	485f      	ldr	r0, [pc, #380]	; (8003a94 <main+0x4fc>)
 8003916:	f00e fa33 	bl	8011d80 <siprintf>

			  HAL_UART_Transmit(&huart1, (uint8_t*) AffichageVitesseVent, strlen(AffichageVitesseVent), HAL_MAX_DELAY);
 800391a:	485e      	ldr	r0, [pc, #376]	; (8003a94 <main+0x4fc>)
 800391c:	f7fc fcd8 	bl	80002d0 <strlen>
 8003920:	4603      	mov	r3, r0
 8003922:	b29a      	uxth	r2, r3
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
 8003928:	495a      	ldr	r1, [pc, #360]	; (8003a94 <main+0x4fc>)
 800392a:	485b      	ldr	r0, [pc, #364]	; (8003a98 <main+0x500>)
 800392c:	f008 ff46 	bl	800c7bc <HAL_UART_Transmit>
			  // Si les tableux sont plien alors on va les stocker dans la carte SD
			  // et en vba initialiser les tableaux autre fois pour met des nouvaux mesures
			  if(taille == 24){
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003934:	2b18      	cmp	r3, #24
 8003936:	f040 80c7 	bne.w	8003ac8 <main+0x530>
				  // Stockages des données
				  if(SaveDataToCSV(heures, T, P, H, D, V, Pl) !=  FR_OK ) Error_Handler();
 800393a:	f107 0014 	add.w	r0, r7, #20
 800393e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003942:	9302      	str	r3, [sp, #8]
 8003944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003954:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003958:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800395c:	f7fe fdd8 	bl	8002510 <SaveDataToCSV>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <main+0x3d2>
 8003966:	f000 fac7 	bl	8003ef8 <Error_Handler>
				  // taille revient à 0
				  taille = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

				  // initialiser les tableaux
			      for (int i = 0; i < 24; ++i) {
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003976:	e00d      	b.n	8003994 <main+0x3fc>
			          T[i] = 0.0;
 8003978:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003982:	4413      	add	r3, r2
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 800398a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800398e:	3301      	adds	r3, #1
 8003990:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003994:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003998:	2b17      	cmp	r3, #23
 800399a:	dded      	ble.n	8003978 <main+0x3e0>
			      }
			      for (int i = 0; i < 24; ++i) {
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039a2:	e00c      	b.n	80039be <main+0x426>
			          H[i] = 30.0;
 80039a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039ae:	4413      	add	r3, r2
 80039b0:	4a3a      	ldr	r2, [pc, #232]	; (8003a9c <main+0x504>)
 80039b2:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 80039b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80039b8:	3301      	adds	r3, #1
 80039ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80039c2:	2b17      	cmp	r3, #23
 80039c4:	ddee      	ble.n	80039a4 <main+0x40c>
			      }
			      for (int i = 0; i < 24; ++i) {
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039cc:	e010      	b.n	80039f0 <main+0x458>
			    	  //char tempp[20] = "No where";

			          strcpy(D[i], temp);
 80039ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80039d8:	4413      	add	r3, r2
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	463a      	mov	r2, r7
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f00e fac0 	bl	8011f66 <strcpy>
			      for (int i = 0; i < 24; ++i) {
 80039e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80039ea:	3301      	adds	r3, #1
 80039ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80039f4:	2b17      	cmp	r3, #23
 80039f6:	ddea      	ble.n	80039ce <main+0x436>
			      }
			      for (int i = 0; i < 24; ++i) {
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039fe:	e00c      	b.n	8003a1a <main+0x482>
			          P[i] = 930.0;
 8003a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <main+0x508>)
 8003a0e:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 8003a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a14:	3301      	adds	r3, #1
 8003a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	2b17      	cmp	r3, #23
 8003a20:	ddee      	ble.n	8003a00 <main+0x468>
			      }
			      for (int i = 0; i < 24; ++i) {
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a28:	e00d      	b.n	8003a46 <main+0x4ae>
			          Pl[i] = 0.0;
 8003a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a34:	4413      	add	r3, r2
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 8003a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a40:	3301      	adds	r3, #1
 8003a42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4a:	2b17      	cmp	r3, #23
 8003a4c:	dded      	ble.n	8003a2a <main+0x492>
			      }
			      for (int i = 0; i < 24; ++i) {
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a54:	e00d      	b.n	8003a72 <main+0x4da>
			          V[i] = 0.0;
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a60:	4413      	add	r3, r2
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 8003a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a76:	2b17      	cmp	r3, #23
 8003a78:	dded      	ble.n	8003a56 <main+0x4be>
			      }
			      for (int i = 0; i < 24; ++i) {
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a80:	e01e      	b.n	8003ac0 <main+0x528>
 8003a82:	bf00      	nop
 8003a84:	200003e0 	.word	0x200003e0
 8003a88:	200003dc 	.word	0x200003dc
 8003a8c:	200003d9 	.word	0x200003d9
 8003a90:	08015c44 	.word	0x08015c44
 8003a94:	200003f4 	.word	0x200003f4
 8003a98:	200006ac 	.word	0x200006ac
 8003a9c:	41f00000 	.word	0x41f00000
 8003aa0:	44688000 	.word	0x44688000
			          Va[i] = 0.0;
 8003aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003aae:	4413      	add	r3, r2
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 8003ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aba:	3301      	adds	r3, #1
 8003abc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ac4:	2b17      	cmp	r3, #23
 8003ac6:	dded      	ble.n	8003aa4 <main+0x50c>
			      }

			  }
			  // alumer RGB
			  IndicationEtatsParLedRGB(PriseDeMesure);
 8003ac8:	2000      	movs	r0, #0
 8003aca:	f7fe ffaf 	bl	8002a2c <IndicationEtatsParLedRGB>
			  // prend les mesures
			  Te = Temperature();
 8003ace:	f7fe fc61 	bl	8002394 <Temperature>
 8003ad2:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
			  Hu = Humedite();
 8003ad6:	f7fe fb93 	bl	8002200 <Humedite>
 8003ada:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
			  Pr = MesurePression();
 8003ade:	f000 fa53 	bl	8003f88 <MesurePression>
 8003ae2:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
			  De = Get_direction_vent();
 8003ae6:	f7fe ff0d 	bl	8002904 <Get_direction_vent>
 8003aea:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			  IndicationEtatsParLedRGB(ExtinctionRGB);
 8003aee:	2001      	movs	r0, #1
 8003af0:	f7fe ff9c 	bl	8002a2c <IndicationEtatsParLedRGB>
			  pluie = impulseCount * 0.279;
 8003af4:	4b66      	ldr	r3, [pc, #408]	; (8003c90 <main+0x6f8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fd33 	bl	8000564 <__aeabi_ui2d>
 8003afe:	a362      	add	r3, pc, #392	; (adr r3, 8003c88 <main+0x6f0>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f7fc fda8 	bl	8000658 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f7fd f89a 	bl	8000c48 <__aeabi_d2f>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			  // le nombre des impulsion revient à 0 pour une nouvel prochaine mesure
			  impulseCount = 0;
 8003b1a:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <main+0x6f8>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
			  // Stocker les valeurs dans Les tableaux
			  Pl[taille] = pluie;
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003b30:	601a      	str	r2, [r3, #0]
			  T[taille] = Te;
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b42:	601a      	str	r2, [r3, #0]
			  H[taille] = Hu;
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b4e:	4413      	add	r3, r2
 8003b50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b54:	601a      	str	r2, [r3, #0]
			  V[taille] = v;
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b60:	4413      	add	r3, r2
 8003b62:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003b66:	601a      	str	r2, [r3, #0]
			  Va[taille] = va;
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b72:	4413      	add	r3, r2
 8003b74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b78:	601a      	str	r2, [r3, #0]

			  strcpy(D[taille], De);
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003b84:	4413      	add	r3, r2
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f00e f9ea 	bl	8011f66 <strcpy>

			  P[taille] = Pr;
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ba2:	601a      	str	r2, [r3, #0]
			  // la taille augmenter par un
			  taille ++;
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			  // Si on est dans la pages d'accueil faire update a la page
			  if(currentPage == PAGE_1){
 8003bae:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <main+0x6fc>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d112      	bne.n	8003bdc <main+0x644>
				  init_page(T, H, P, D, Va, Pl, taille);
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	9302      	str	r3, [sp, #8]
 8003bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bcc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bd0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003bd4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003bd8:	f7fd fb26 	bl	8001228 <init_page>
			  }



			  // Flag timer 6 revient à 0
			  tim6_inter = 0;
 8003bdc:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <main+0x700>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
		  }


		  // Flag boton pour circuler dans les pages
		    if (boton == 1) {
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <main+0x704>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d11b      	bne.n	8003c22 <main+0x68a>
		    	// Si on appuyer sur le boton LCD va Display On et le timer 7 va se met a 0
		    	// Timer 7 qui gére le mode veille de l'ecran
		    	BSP_LCD_DisplayOn();
 8003bea:	f001 fe4f 	bl	800588c <BSP_LCD_DisplayOn>
		    	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <main+0x708>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24
		      // Changer de page en réponse au clic sur le bouton
		      ChangerDePage(T, H, P, D, V, Pl, taille);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	9302      	str	r3, [sp, #8]
 8003bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c0c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c10:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003c14:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003c18:	f7fe f8b0 	bl	8001d7c <ChangerDePage>

		      // Flag du boton revient à 0
		      boton = 0;
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <main+0x704>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]

		    }

		    // Flag Timer 7 qui gére le mode veille de l'ecran
		    if(tim7_inter == 1){
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <main+0x70c>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d117      	bne.n	8003c5a <main+0x6c2>
		    	// Display Off L'ecran et enrer dans le mode Sleep
				  sprintf(AffichageVitesseVent, "Tim7\n\r");
 8003c2a:	491f      	ldr	r1, [pc, #124]	; (8003ca8 <main+0x710>)
 8003c2c:	481f      	ldr	r0, [pc, #124]	; (8003cac <main+0x714>)
 8003c2e:	f00e f8a7 	bl	8011d80 <siprintf>

				  HAL_UART_Transmit(&huart1, (uint8_t*) AffichageVitesseVent, strlen(AffichageVitesseVent), HAL_MAX_DELAY);
 8003c32:	481e      	ldr	r0, [pc, #120]	; (8003cac <main+0x714>)
 8003c34:	f7fc fb4c 	bl	80002d0 <strlen>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	491a      	ldr	r1, [pc, #104]	; (8003cac <main+0x714>)
 8003c42:	481b      	ldr	r0, [pc, #108]	; (8003cb0 <main+0x718>)
 8003c44:	f008 fdba 	bl	800c7bc <HAL_UART_Transmit>
		    	BSP_LCD_DisplayOff();
 8003c48:	f001 fe3e 	bl	80058c8 <BSP_LCD_DisplayOff>
		    	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f005 fb86 	bl	8009360 <HAL_PWR_EnterSLEEPMode>

		    	// Flag timer 7 revient à 0
		    	tim7_inter = 0;
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <main+0x70c>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
		    }
		    if((tim7_inter == 0) && (boton == 0) && (tim6_inter == 0)){
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <main+0x70c>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f47f adf6 	bne.w	8003850 <main+0x2b8>
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <main+0x704>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f adf1 	bne.w	8003850 <main+0x2b8>
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <main+0x700>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f47f adec 	bne.w	8003850 <main+0x2b8>
				   //Mise en someil sinon

				  //HAL_SuspendTick();
				  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003c78:	2101      	movs	r1, #1
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f005 fb70 	bl	8009360 <HAL_PWR_EnterSLEEPMode>
	  va = MesureVitesseVent();
 8003c80:	e5e6      	b.n	8003850 <main+0x2b8>
 8003c82:	bf00      	nop
 8003c84:	f3af 8000 	nop.w
 8003c88:	d0e56042 	.word	0xd0e56042
 8003c8c:	3fd1db22 	.word	0x3fd1db22
 8003c90:	200003dc 	.word	0x200003dc
 8003c94:	20000208 	.word	0x20000208
 8003c98:	200003d9 	.word	0x200003d9
 8003c9c:	200003d8 	.word	0x200003d8
 8003ca0:	20000660 	.word	0x20000660
 8003ca4:	200003da 	.word	0x200003da
 8003ca8:	08015c4c 	.word	0x08015c4c
 8003cac:	200003f4 	.word	0x200003f4
 8003cb0:	200006ac 	.word	0x200006ac

08003cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b094      	sub	sp, #80	; 0x50
 8003cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cba:	f107 0320 	add.w	r3, r7, #32
 8003cbe:	2230      	movs	r2, #48	; 0x30
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f00e f8bf 	bl	8011e46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <SystemClock_Config+0xd0>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <SystemClock_Config+0xd0>)
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <SystemClock_Config+0xd0>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <SystemClock_Config+0xd4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <SystemClock_Config+0xd4>)
 8003cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <SystemClock_Config+0xd4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d10:	2310      	movs	r3, #16
 8003d12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d14:	2302      	movs	r3, #2
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8003d20:	23d2      	movs	r3, #210	; 0xd2
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d24:	2302      	movs	r3, #2
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d2c:	f107 0320 	add.w	r3, r7, #32
 8003d30:	4618      	mov	r0, r3
 8003d32:	f005 fb87 	bl	8009444 <HAL_RCC_OscConfig>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003d3c:	f000 f8dc 	bl	8003ef8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d40:	f005 fb30 	bl	80093a4 <HAL_PWREx_EnableOverDrive>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003d4a:	f000 f8d5 	bl	8003ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d4e:	230f      	movs	r3, #15
 8003d50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d52:	2302      	movs	r3, #2
 8003d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003d66:	f107 030c 	add.w	r3, r7, #12
 8003d6a:	2106      	movs	r1, #6
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f005 fe0d 	bl	800998c <HAL_RCC_ClockConfig>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003d78:	f000 f8be 	bl	8003ef8 <Error_Handler>
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3750      	adds	r7, #80	; 0x50
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	00000000 	.word	0x00000000

08003d90 <MesureVitesseVent>:
/* USER CODE BEGIN 4 */

// Calculer le fréquence du timer de vitesse

float MesureVitesseVent(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
	Vitesse_vent = 0;
 8003d94:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <MesureVitesseVent+0xd0>)
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

    if (captureDone)
 8003d9c:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <MesureVitesseVent+0xd4>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d04f      	beq.n	8003e46 <MesureVitesseVent+0xb6>
    {
          if(captures[1]>=captures[0])
 8003da6:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <MesureVitesseVent+0xd8>)
 8003da8:	885b      	ldrh	r3, [r3, #2]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <MesureVitesseVent+0xd8>)
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d30a      	bcc.n	8003dcc <MesureVitesseVent+0x3c>

          {
              diffCapture = (captures[1] - captures[0]);
 8003db6:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <MesureVitesseVent+0xd8>)
 8003db8:	885b      	ldrh	r3, [r3, #2]
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <MesureVitesseVent+0xd8>)
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <MesureVitesseVent+0xdc>)
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e00e      	b.n	8003dea <MesureVitesseVent+0x5a>
          }
          else
          {
              diffCapture = (TIM1->ARR + captures[0]) - captures[1];
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <MesureVitesseVent+0xe0>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <MesureVitesseVent+0xd8>)
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	4b22      	ldr	r3, [pc, #136]	; (8003e68 <MesureVitesseVent+0xd8>)
 8003dde:	885b      	ldrh	r3, [r3, #2]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <MesureVitesseVent+0xdc>)
 8003de8:	801a      	strh	r2, [r3, #0]
          }

          frequency =  (float)((2*HAL_RCC_GetPCLK1Freq()) / ((TIM1->PSC + 1) * diffCapture));
 8003dea:	f005 ff8d 	bl	8009d08 <HAL_RCC_GetPCLK1Freq>
 8003dee:	4603      	mov	r3, r0
 8003df0:	005a      	lsls	r2, r3, #1
 8003df2:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <MesureVitesseVent+0xe0>)
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	3301      	adds	r3, #1
 8003df8:	491c      	ldr	r1, [pc, #112]	; (8003e6c <MesureVitesseVent+0xdc>)
 8003dfa:	8809      	ldrh	r1, [r1, #0]
 8003dfc:	b289      	uxth	r1, r1
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <MesureVitesseVent+0xe4>)
 8003e10:	edc3 7a00 	vstr	s15, [r3]
          Vitesse_vent=frequency*2.4;
 8003e14:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <MesureVitesseVent+0xe4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc fbc5 	bl	80005a8 <__aeabi_f2d>
 8003e1e:	a30e      	add	r3, pc, #56	; (adr r3, 8003e58 <MesureVitesseVent+0xc8>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc fc18 	bl	8000658 <__aeabi_dmul>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f7fc ff0a 	bl	8000c48 <__aeabi_d2f>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <MesureVitesseVent+0xd0>)
 8003e38:	6013      	str	r3, [r2, #0]
          captureFlag=1;
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <MesureVitesseVent+0xe8>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
          captureDone=0;
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <MesureVitesseVent+0xd4>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
          //sprintf(AffichageVitesseVent, "Vitesse du vent: %.2f km/h\n\r", Vitesse_vent);
          //HAL_UART_Transmit(&huart1, (uint8_t*) AffichageVitesseVent, strlen(AffichageVitesseVent), HAL_MAX_DELAY);

    }
    return Vitesse_vent;
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <MesureVitesseVent+0xd0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	ee07 3a90 	vmov	s15, r3
}
 8003e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	f3af 8000 	nop.w
 8003e58:	33333333 	.word	0x33333333
 8003e5c:	40033333 	.word	0x40033333
 8003e60:	200003f0 	.word	0x200003f0
 8003e64:	200003e1 	.word	0x200003e1
 8003e68:	200003e4 	.word	0x200003e4
 8003e6c:	200003ec 	.word	0x200003ec
 8003e70:	40010000 	.word	0x40010000
 8003e74:	200003e8 	.word	0x200003e8
 8003e78:	20000000 	.word	0x20000000

08003e7c <HAL_TIM_IC_CaptureCallback>:

// Gérer Les flages des Timer 1 et Timer 2

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM2) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d106      	bne.n	8003e9c <HAL_TIM_IC_CaptureCallback+0x20>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	7f1b      	ldrb	r3, [r3, #28]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d102      	bne.n	8003e9c <HAL_TIM_IC_CaptureCallback+0x20>
			pluieDetected=1;
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
		}
		}

    if (captureFlag)
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_TIM_IC_CaptureCallback+0x48>
    {
        captures[1]=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4810      	ldr	r0, [pc, #64]	; (8003eec <HAL_TIM_IC_CaptureCallback+0x70>)
 8003eaa:	f008 f931 	bl	800c110 <HAL_TIM_ReadCapturedValue>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8003eb4:	805a      	strh	r2, [r3, #2]
        captureFlag = 0;
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
        captureDone = 1;
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
    {
        captures[1]=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
        captureFlag = 1;
    }

}
 8003ec2:	e00a      	b.n	8003eda <HAL_TIM_IC_CaptureCallback+0x5e>
        captures[1]=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	4809      	ldr	r0, [pc, #36]	; (8003eec <HAL_TIM_IC_CaptureCallback+0x70>)
 8003ec8:	f008 f922 	bl	800c110 <HAL_TIM_ReadCapturedValue>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8003ed2:	805a      	strh	r2, [r3, #2]
        captureFlag = 1;
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200003e0 	.word	0x200003e0
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	2000057c 	.word	0x2000057c
 8003ef0:	200003e4 	.word	0x200003e4
 8003ef4:	200003e1 	.word	0x200003e1

08003ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003efc:	b672      	cpsid	i
}
 8003efe:	bf00      	nop
  __disable_irq();
  /*while (1)
  {
  }*/
  /* USER CODE END Error_Handler_Debug */
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <platform_write>:
static float pressure_hPa;
static uint32_t data_raw_pressure;


static uint32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af04      	add	r7, sp, #16
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	607a      	str	r2, [r7, #4]
 8003f16:	461a      	mov	r2, r3
 8003f18:	460b      	mov	r3, r1
 8003f1a:	72fb      	strb	r3, [r7, #11]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(&hi2c1, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)bufp, len, 1000);
 8003f20:	7afb      	ldrb	r3, [r7, #11]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	893b      	ldrh	r3, [r7, #8]
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2301      	movs	r3, #1
 8003f34:	21bb      	movs	r1, #187	; 0xbb
 8003f36:	4804      	ldr	r0, [pc, #16]	; (8003f48 <platform_write+0x3c>)
 8003f38:	f004 f9fc 	bl	8008334 <HAL_I2C_Mem_Write>
    return 0;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200002dc 	.word	0x200002dc

08003f4c <platform_read>:

static uint32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af04      	add	r7, sp, #16
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	461a      	mov	r2, r3
 8003f58:	460b      	mov	r3, r1
 8003f5a:	72fb      	strb	r3, [r7, #11]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	893b      	ldrh	r3, [r7, #8]
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2301      	movs	r3, #1
 8003f74:	21bb      	movs	r1, #187	; 0xbb
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f004 faf0 	bl	800855c <HAL_I2C_Mem_Read>
    return 0;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <MesurePression>:

stmdev_ctx_t mesure_pression_dev_ctx;

float MesurePression(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
    lps22hh_reg_t reg;
    mesure_pression_dev_ctx.write_reg = platform_write;
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <MesurePression+0x70>)
 8003f90:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <MesurePression+0x74>)
 8003f92:	601a      	str	r2, [r3, #0]
    mesure_pression_dev_ctx.read_reg = platform_read;
 8003f94:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <MesurePression+0x70>)
 8003f96:	4a1a      	ldr	r2, [pc, #104]	; (8004000 <MesurePression+0x78>)
 8003f98:	605a      	str	r2, [r3, #4]
    mesure_pression_dev_ctx.handle = &hi2c1;
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <MesurePression+0x70>)
 8003f9c:	4a19      	ldr	r2, [pc, #100]	; (8004004 <MesurePression+0x7c>)
 8003f9e:	60da      	str	r2, [r3, #12]
    lps22hh_reset_set(&mesure_pression_dev_ctx, PROPERTY_ENABLE);
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4815      	ldr	r0, [pc, #84]	; (8003ff8 <MesurePression+0x70>)
 8003fa4:	f002 fb7b 	bl	800669e <lps22hh_reset_set>
    lps22hh_block_data_update_set(&mesure_pression_dev_ctx, PROPERTY_ENABLE);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4813      	ldr	r0, [pc, #76]	; (8003ff8 <MesurePression+0x70>)
 8003fac:	f002 fada 	bl	8006564 <lps22hh_block_data_update_set>
    lps22hh_data_rate_set(&mesure_pression_dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 8003fb0:	2112      	movs	r1, #18
 8003fb2:	4811      	ldr	r0, [pc, #68]	; (8003ff8 <MesurePression+0x70>)
 8003fb4:	f002 fafc 	bl	80065b0 <lps22hh_data_rate_set>
    lps22hh_read_reg(&mesure_pression_dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8003fb8:	1d3a      	adds	r2, r7, #4
 8003fba:	2301      	movs	r3, #1
 8003fbc:	2127      	movs	r1, #39	; 0x27
 8003fbe:	480e      	ldr	r0, [pc, #56]	; (8003ff8 <MesurePression+0x70>)
 8003fc0:	f002 fa88 	bl	80064d4 <lps22hh_read_reg>
 8003fc4:	4b10      	ldr	r3, [pc, #64]	; (8004008 <MesurePression+0x80>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
    memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
    lps22hh_pressure_raw_get(&mesure_pression_dev_ctx, &data_raw_pressure);
 8003fca:	490f      	ldr	r1, [pc, #60]	; (8004008 <MesurePression+0x80>)
 8003fcc:	480a      	ldr	r0, [pc, #40]	; (8003ff8 <MesurePression+0x70>)
 8003fce:	f002 fb3d 	bl	800664c <lps22hh_pressure_raw_get>
    pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <MesurePression+0x80>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f002 faac 	bl	8006534 <lps22hh_from_lsb_to_hpa>
 8003fdc:	eef0 7a40 	vmov.f32	s15, s0
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <MesurePression+0x84>)
 8003fe2:	edc3 7a00 	vstr	s15, [r3]
    return pressure_hPa;
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <MesurePression+0x84>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	ee07 3a90 	vmov	s15, r3
}
 8003fee:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000424 	.word	0x20000424
 8003ffc:	08003f0d 	.word	0x08003f0d
 8004000:	08003f4d 	.word	0x08003f4d
 8004004:	200002dc 	.word	0x200002dc
 8004008:	20000420 	.word	0x20000420
 800400c:	2000041c 	.word	0x2000041c

08004010 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <MX_SDMMC1_SD_Init+0x38>)
 8004016:	4a0d      	ldr	r2, [pc, #52]	; (800404c <MX_SDMMC1_SD_Init+0x3c>)
 8004018:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <MX_SDMMC1_SD_Init+0x38>)
 800401c:	2200      	movs	r2, #0
 800401e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <MX_SDMMC1_SD_Init+0x38>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <MX_SDMMC1_SD_Init+0x38>)
 8004028:	2200      	movs	r2, #0
 800402a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <MX_SDMMC1_SD_Init+0x38>)
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <MX_SDMMC1_SD_Init+0x38>)
 8004034:	2200      	movs	r2, #0
 8004036:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <MX_SDMMC1_SD_Init+0x38>)
 800403a:	2200      	movs	r2, #0
 800403c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	20000434 	.word	0x20000434
 800404c:	40012c00 	.word	0x40012c00

08004050 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b0ac      	sub	sp, #176	; 0xb0
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004068:	f107 0318 	add.w	r3, r7, #24
 800406c:	2284      	movs	r2, #132	; 0x84
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f00d fee8 	bl	8011e46 <memset>
  if(sdHandle->Instance==SDMMC1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a73      	ldr	r2, [pc, #460]	; (8004248 <HAL_SD_MspInit+0x1f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	f040 80de 	bne.w	800423e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8004082:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004086:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8004088:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800408c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004090:	f107 0318 	add.w	r3, r7, #24
 8004094:	4618      	mov	r0, r3
 8004096:	f005 fe5f 	bl	8009d58 <HAL_RCCEx_PeriphCLKConfig>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80040a0:	f7ff ff2a 	bl	8003ef8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80040a4:	4b69      	ldr	r3, [pc, #420]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	4a68      	ldr	r2, [pc, #416]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040ae:	6453      	str	r3, [r2, #68]	; 0x44
 80040b0:	4b66      	ldr	r3, [pc, #408]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040bc:	4b63      	ldr	r3, [pc, #396]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	4a62      	ldr	r2, [pc, #392]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	6313      	str	r3, [r2, #48]	; 0x30
 80040c8:	4b60      	ldr	r3, [pc, #384]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040d4:	4b5d      	ldr	r3, [pc, #372]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	4a5c      	ldr	r2, [pc, #368]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040da:	f043 0308 	orr.w	r3, r3, #8
 80040de:	6313      	str	r3, [r2, #48]	; 0x30
 80040e0:	4b5a      	ldr	r3, [pc, #360]	; (800424c <HAL_SD_MspInit+0x1fc>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80040ec:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80040f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f4:	2302      	movs	r3, #2
 80040f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004100:	2303      	movs	r3, #3
 8004102:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004106:	230c      	movs	r3, #12
 8004108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800410c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004110:	4619      	mov	r1, r3
 8004112:	484f      	ldr	r0, [pc, #316]	; (8004250 <HAL_SD_MspInit+0x200>)
 8004114:	f003 fe7c 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004118:	2304      	movs	r3, #4
 800411a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411e:	2302      	movs	r3, #2
 8004120:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800412a:	2303      	movs	r3, #3
 800412c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004130:	230c      	movs	r3, #12
 8004132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004136:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800413a:	4619      	mov	r1, r3
 800413c:	4845      	ldr	r0, [pc, #276]	; (8004254 <HAL_SD_MspInit+0x204>)
 800413e:	f003 fe67 	bl	8007e10 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8004142:	4b45      	ldr	r3, [pc, #276]	; (8004258 <HAL_SD_MspInit+0x208>)
 8004144:	4a45      	ldr	r2, [pc, #276]	; (800425c <HAL_SD_MspInit+0x20c>)
 8004146:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8004148:	4b43      	ldr	r3, [pc, #268]	; (8004258 <HAL_SD_MspInit+0x208>)
 800414a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800414e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004150:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_SD_MspInit+0x208>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004156:	4b40      	ldr	r3, [pc, #256]	; (8004258 <HAL_SD_MspInit+0x208>)
 8004158:	2200      	movs	r2, #0
 800415a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800415c:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <HAL_SD_MspInit+0x208>)
 800415e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004162:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004164:	4b3c      	ldr	r3, [pc, #240]	; (8004258 <HAL_SD_MspInit+0x208>)
 8004166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800416a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800416c:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <HAL_SD_MspInit+0x208>)
 800416e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004172:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8004174:	4b38      	ldr	r3, [pc, #224]	; (8004258 <HAL_SD_MspInit+0x208>)
 8004176:	2220      	movs	r2, #32
 8004178:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_SD_MspInit+0x208>)
 800417c:	2200      	movs	r2, #0
 800417e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004180:	4b35      	ldr	r3, [pc, #212]	; (8004258 <HAL_SD_MspInit+0x208>)
 8004182:	2204      	movs	r2, #4
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_SD_MspInit+0x208>)
 8004188:	2203      	movs	r2, #3
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_SD_MspInit+0x208>)
 800418e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004192:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004194:	4b30      	ldr	r3, [pc, #192]	; (8004258 <HAL_SD_MspInit+0x208>)
 8004196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800419c:	482e      	ldr	r0, [pc, #184]	; (8004258 <HAL_SD_MspInit+0x208>)
 800419e:	f002 ffa7 	bl	80070f0 <HAL_DMA_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80041a8:	f7ff fea6 	bl	8003ef8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <HAL_SD_MspInit+0x208>)
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
 80041b2:	4a29      	ldr	r2, [pc, #164]	; (8004258 <HAL_SD_MspInit+0x208>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041ba:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <HAL_SD_MspInit+0x214>)
 80041bc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80041be:	4b28      	ldr	r3, [pc, #160]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041c4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041c8:	2240      	movs	r2, #64	; 0x40
 80041ca:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041cc:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041d8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041e0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041e2:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041e8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041ec:	2220      	movs	r2, #32
 80041ee:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80041f6:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041f8:	2204      	movs	r2, #4
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041fc:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_SD_MspInit+0x210>)
 80041fe:	2203      	movs	r2, #3
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004202:	4b17      	ldr	r3, [pc, #92]	; (8004260 <HAL_SD_MspInit+0x210>)
 8004204:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_SD_MspInit+0x210>)
 800420c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8004212:	4813      	ldr	r0, [pc, #76]	; (8004260 <HAL_SD_MspInit+0x210>)
 8004214:	f002 ff6c 	bl	80070f0 <HAL_DMA_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800421e:	f7ff fe6b 	bl	8003ef8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_SD_MspInit+0x210>)
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <HAL_SD_MspInit+0x210>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800422e:	2200      	movs	r2, #0
 8004230:	2100      	movs	r1, #0
 8004232:	2031      	movs	r0, #49	; 0x31
 8004234:	f002 ff25 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004238:	2031      	movs	r0, #49	; 0x31
 800423a:	f002 ff3e 	bl	80070ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800423e:	bf00      	nop
 8004240:	37b0      	adds	r7, #176	; 0xb0
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40023800 	.word	0x40023800
 8004250:	40020800 	.word	0x40020800
 8004254:	40020c00 	.word	0x40020c00
 8004258:	200004b8 	.word	0x200004b8
 800425c:	40026458 	.word	0x40026458
 8004260:	20000518 	.word	0x20000518
 8004264:	400264a0 	.word	0x400264a0

08004268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_MspInit+0x44>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <HAL_MspInit+0x44>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	6413      	str	r3, [r2, #64]	; 0x40
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_MspInit+0x44>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_MspInit+0x44>)
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	4a08      	ldr	r2, [pc, #32]	; (80042ac <HAL_MspInit+0x44>)
 800428c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004290:	6453      	str	r3, [r2, #68]	; 0x44
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_MspInit+0x44>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800

080042b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042b4:	e7fe      	b.n	80042b4 <NMI_Handler+0x4>

080042b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ba:	e7fe      	b.n	80042ba <HardFault_Handler+0x4>

080042bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042c0:	e7fe      	b.n	80042c0 <MemManage_Handler+0x4>

080042c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042c6:	e7fe      	b.n	80042c6 <BusFault_Handler+0x4>

080042c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042cc:	e7fe      	b.n	80042cc <UsageFault_Handler+0x4>

080042ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ce:	b480      	push	{r7}
 80042d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042fc:	f002 fa32 	bl	8006764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}

08004304 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <TIM1_CC_IRQHandler+0x10>)
 800430a:	f007 fd45 	bl	800bd98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2000057c 	.word	0x2000057c

08004318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800431c:	4802      	ldr	r0, [pc, #8]	; (8004328 <TIM2_IRQHandler+0x10>)
 800431e:	f007 fd3b 	bl	800bd98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	200005c8 	.word	0x200005c8

0800432c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	boton = 1;
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <EXTI15_10_IRQHandler+0x18>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004336:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800433a:	f003 ff47 	bl	80081cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200003d8 	.word	0x200003d8

08004348 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <SDMMC1_IRQHandler+0x10>)
 800434e:	f006 fb73 	bl	800aa38 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000434 	.word	0x20000434

0800435c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	tim6_inter = 1;
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <TIM6_DAC_IRQHandler+0x14>)
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004366:	4803      	ldr	r0, [pc, #12]	; (8004374 <TIM6_DAC_IRQHandler+0x18>)
 8004368:	f007 fd16 	bl	800bd98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200003d9 	.word	0x200003d9
 8004374:	20000614 	.word	0x20000614

08004378 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	tim7_inter = 1;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <TIM7_IRQHandler+0x14>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004382:	4803      	ldr	r0, [pc, #12]	; (8004390 <TIM7_IRQHandler+0x18>)
 8004384:	f007 fd08 	bl	800bd98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200003da 	.word	0x200003da
 8004390:	20000660 	.word	0x20000660

08004394 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <DMA2_Stream3_IRQHandler+0x10>)
 800439a:	f003 f837 	bl	800740c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200004b8 	.word	0x200004b8

080043a8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <DMA2_Stream6_IRQHandler+0x10>)
 80043ae:	f003 f82d 	bl	800740c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000518 	.word	0x20000518

080043bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return 1;
 80043c0:	2301      	movs	r3, #1
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <_kill>:

int _kill(int pid, int sig)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043d6:	f00d fd99 	bl	8011f0c <__errno>
 80043da:	4603      	mov	r3, r0
 80043dc:	2216      	movs	r2, #22
 80043de:	601a      	str	r2, [r3, #0]
  return -1;
 80043e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_exit>:

void _exit (int status)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043f4:	f04f 31ff 	mov.w	r1, #4294967295
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ffe7 	bl	80043cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80043fe:	e7fe      	b.n	80043fe <_exit+0x12>

08004400 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e00a      	b.n	8004428 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004412:	f3af 8000 	nop.w
 8004416:	4601      	mov	r1, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	60ba      	str	r2, [r7, #8]
 800441e:	b2ca      	uxtb	r2, r1
 8004420:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3301      	adds	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	dbf0      	blt.n	8004412 <_read+0x12>
  }

  return len;
 8004430:	687b      	ldr	r3, [r7, #4]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e009      	b.n	8004460 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	60ba      	str	r2, [r7, #8]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe f849 	bl	80024ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	3301      	adds	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	dbf1      	blt.n	800444c <_write+0x12>
  }
  return len;
 8004468:	687b      	ldr	r3, [r7, #4]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <_close>:

int _close(int file)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800449a:	605a      	str	r2, [r3, #4]
  return 0;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <_isatty>:

int _isatty(int file)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044b2:	2301      	movs	r3, #1
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044e4:	4a14      	ldr	r2, [pc, #80]	; (8004538 <_sbrk+0x5c>)
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <_sbrk+0x60>)
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <_sbrk+0x64>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <_sbrk+0x64>)
 80044fa:	4a12      	ldr	r2, [pc, #72]	; (8004544 <_sbrk+0x68>)
 80044fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <_sbrk+0x64>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	429a      	cmp	r2, r3
 800450a:	d207      	bcs.n	800451c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800450c:	f00d fcfe 	bl	8011f0c <__errno>
 8004510:	4603      	mov	r3, r0
 8004512:	220c      	movs	r2, #12
 8004514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	e009      	b.n	8004530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <_sbrk+0x64>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004522:	4b07      	ldr	r3, [pc, #28]	; (8004540 <_sbrk+0x64>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	4a05      	ldr	r2, [pc, #20]	; (8004540 <_sbrk+0x64>)
 800452c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20050000 	.word	0x20050000
 800453c:	00000800 	.word	0x00000800
 8004540:	20000578 	.word	0x20000578
 8004544:	20000f70 	.word	0x20000f70

08004548 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <SystemInit+0x20>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	4a05      	ldr	r2, [pc, #20]	; (8004568 <SystemInit+0x20>)
 8004554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004572:	f107 0314 	add.w	r3, r7, #20
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	605a      	str	r2, [r3, #4]
 800457c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <MX_TIM1_Init+0xac>)
 800458c:	4a23      	ldr	r2, [pc, #140]	; (800461c <MX_TIM1_Init+0xb0>)
 800458e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8004590:	4b21      	ldr	r3, [pc, #132]	; (8004618 <MX_TIM1_Init+0xac>)
 8004592:	f242 720f 	movw	r2, #9999	; 0x270f
 8004596:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004598:	4b1f      	ldr	r3, [pc, #124]	; (8004618 <MX_TIM1_Init+0xac>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <MX_TIM1_Init+0xac>)
 80045a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a6:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <MX_TIM1_Init+0xac>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <MX_TIM1_Init+0xac>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <MX_TIM1_Init+0xac>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80045b8:	4817      	ldr	r0, [pc, #92]	; (8004618 <MX_TIM1_Init+0xac>)
 80045ba:	f007 fa45 	bl	800ba48 <HAL_TIM_IC_Init>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80045c4:	f7ff fc98 	bl	8003ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	4619      	mov	r1, r3
 80045da:	480f      	ldr	r0, [pc, #60]	; (8004618 <MX_TIM1_Init+0xac>)
 80045dc:	f007 fff4 	bl	800c5c8 <HAL_TIMEx_MasterConfigSynchronization>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80045e6:	f7ff fc87 	bl	8003ef8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80045ee:	2301      	movs	r3, #1
 80045f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	2200      	movs	r2, #0
 80045fe:	4619      	mov	r1, r3
 8004600:	4805      	ldr	r0, [pc, #20]	; (8004618 <MX_TIM1_Init+0xac>)
 8004602:	f007 fce8 	bl	800bfd6 <HAL_TIM_IC_ConfigChannel>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800460c:	f7ff fc74 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	2000057c 	.word	0x2000057c
 800461c:	40010000 	.word	0x40010000

08004620 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004626:	f107 0314 	add.w	r3, r7, #20
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	605a      	str	r2, [r3, #4]
 8004630:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004632:	1d3b      	adds	r3, r7, #4
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800463e:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <MX_TIM2_Init+0xa4>)
 8004640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004644:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <MX_TIM2_Init+0xa4>)
 8004648:	f242 720f 	movw	r2, #9999	; 0x270f
 800464c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <MX_TIM2_Init+0xa4>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <MX_TIM2_Init+0xa4>)
 8004656:	f04f 32ff 	mov.w	r2, #4294967295
 800465a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <MX_TIM2_Init+0xa4>)
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004662:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <MX_TIM2_Init+0xa4>)
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004668:	4816      	ldr	r0, [pc, #88]	; (80046c4 <MX_TIM2_Init+0xa4>)
 800466a:	f007 f9ed 	bl	800ba48 <HAL_TIM_IC_Init>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004674:	f7ff fc40 	bl	8003ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467c:	2300      	movs	r3, #0
 800467e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4619      	mov	r1, r3
 8004686:	480f      	ldr	r0, [pc, #60]	; (80046c4 <MX_TIM2_Init+0xa4>)
 8004688:	f007 ff9e 	bl	800c5c8 <HAL_TIMEx_MasterConfigSynchronization>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8004692:	f7ff fc31 	bl	8003ef8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800469a:	2301      	movs	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	2200      	movs	r2, #0
 80046aa:	4619      	mov	r1, r3
 80046ac:	4805      	ldr	r0, [pc, #20]	; (80046c4 <MX_TIM2_Init+0xa4>)
 80046ae:	f007 fc92 	bl	800bfd6 <HAL_TIM_IC_ConfigChannel>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80046b8:	f7ff fc1e 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80046bc:	bf00      	nop
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	200005c8 	.word	0x200005c8

080046c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <MX_TIM6_Init+0x68>)
 80046da:	4a16      	ldr	r2, [pc, #88]	; (8004734 <MX_TIM6_Init+0x6c>)
 80046dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1500-1;
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <MX_TIM6_Init+0x68>)
 80046e0:	f240 52db 	movw	r2, #1499	; 0x5db
 80046e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <MX_TIM6_Init+0x68>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000-1;
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <MX_TIM6_Init+0x68>)
 80046ee:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80046f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <MX_TIM6_Init+0x68>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80046fa:	480d      	ldr	r0, [pc, #52]	; (8004730 <MX_TIM6_Init+0x68>)
 80046fc:	f007 f8d5 	bl	800b8aa <HAL_TIM_Base_Init>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004706:	f7ff fbf7 	bl	8003ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4806      	ldr	r0, [pc, #24]	; (8004730 <MX_TIM6_Init+0x68>)
 8004718:	f007 ff56 	bl	800c5c8 <HAL_TIMEx_MasterConfigSynchronization>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004722:	f7ff fbe9 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000614 	.word	0x20000614
 8004734:	40001000 	.word	0x40001000

08004738 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004748:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <MX_TIM7_Init+0x68>)
 800474a:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <MX_TIM7_Init+0x6c>)
 800474c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16000-1;
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <MX_TIM7_Init+0x68>)
 8004750:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8004754:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <MX_TIM7_Init+0x68>)
 8004758:	2200      	movs	r2, #0
 800475a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000-1;
 800475c:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <MX_TIM7_Init+0x68>)
 800475e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004762:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <MX_TIM7_Init+0x68>)
 8004766:	2200      	movs	r2, #0
 8004768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800476a:	480d      	ldr	r0, [pc, #52]	; (80047a0 <MX_TIM7_Init+0x68>)
 800476c:	f007 f89d 	bl	800b8aa <HAL_TIM_Base_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004776:	f7ff fbbf 	bl	8003ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004782:	1d3b      	adds	r3, r7, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4806      	ldr	r0, [pc, #24]	; (80047a0 <MX_TIM7_Init+0x68>)
 8004788:	f007 ff1e 	bl	800c5c8 <HAL_TIMEx_MasterConfigSynchronization>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004792:	f7ff fbb1 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000660 	.word	0x20000660
 80047a4:	40001400 	.word	0x40001400

080047a8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	; 0x30
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 031c 	add.w	r3, r7, #28
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a37      	ldr	r2, [pc, #220]	; (80048a4 <HAL_TIM_IC_MspInit+0xfc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d131      	bne.n	800482e <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ca:	4b37      	ldr	r3, [pc, #220]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	4a36      	ldr	r2, [pc, #216]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6453      	str	r3, [r2, #68]	; 0x44
 80047d6:	4b34      	ldr	r3, [pc, #208]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e2:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a30      	ldr	r2, [pc, #192]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80047fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004804:	2301      	movs	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004808:	2300      	movs	r3, #0
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800480c:	2301      	movs	r3, #1
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004810:	f107 031c 	add.w	r3, r7, #28
 8004814:	4619      	mov	r1, r3
 8004816:	4825      	ldr	r0, [pc, #148]	; (80048ac <HAL_TIM_IC_MspInit+0x104>)
 8004818:	f003 fafa 	bl	8007e10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 4, 0);
 800481c:	2200      	movs	r2, #0
 800481e:	2104      	movs	r1, #4
 8004820:	201b      	movs	r0, #27
 8004822:	f002 fc2e 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004826:	201b      	movs	r0, #27
 8004828:	f002 fc47 	bl	80070ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800482c:	e035      	b.n	800489a <HAL_TIM_IC_MspInit+0xf2>
  else if(tim_icHandle->Instance==TIM2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d130      	bne.n	800489a <HAL_TIM_IC_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6413      	str	r3, [r2, #64]	; 0x40
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6313      	str	r3, [r2, #48]	; 0x30
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_TIM_IC_MspInit+0x100>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486e:	2302      	movs	r3, #2
 8004870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004872:	2301      	movs	r3, #1
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004876:	2300      	movs	r3, #0
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800487a:	2301      	movs	r3, #1
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800487e:	f107 031c 	add.w	r3, r7, #28
 8004882:	4619      	mov	r1, r3
 8004884:	4809      	ldr	r0, [pc, #36]	; (80048ac <HAL_TIM_IC_MspInit+0x104>)
 8004886:	f003 fac3 	bl	8007e10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2103      	movs	r1, #3
 800488e:	201c      	movs	r0, #28
 8004890:	f002 fbf7 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004894:	201c      	movs	r0, #28
 8004896:	f002 fc10 	bl	80070ba <HAL_NVIC_EnableIRQ>
}
 800489a:	bf00      	nop
 800489c:	3730      	adds	r7, #48	; 0x30
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40023800 	.word	0x40023800
 80048ac:	40020000 	.word	0x40020000

080048b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <HAL_TIM_Base_MspInit+0x78>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d114      	bne.n	80048ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048c2:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_TIM_Base_MspInit+0x7c>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4a19      	ldr	r2, [pc, #100]	; (800492c <HAL_TIM_Base_MspInit+0x7c>)
 80048c8:	f043 0310 	orr.w	r3, r3, #16
 80048cc:	6413      	str	r3, [r2, #64]	; 0x40
 80048ce:	4b17      	ldr	r3, [pc, #92]	; (800492c <HAL_TIM_Base_MspInit+0x7c>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80048da:	2200      	movs	r2, #0
 80048dc:	2102      	movs	r1, #2
 80048de:	2036      	movs	r0, #54	; 0x36
 80048e0:	f002 fbcf 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048e4:	2036      	movs	r0, #54	; 0x36
 80048e6:	f002 fbe8 	bl	80070ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80048ea:	e018      	b.n	800491e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <HAL_TIM_Base_MspInit+0x80>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d113      	bne.n	800491e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <HAL_TIM_Base_MspInit+0x7c>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <HAL_TIM_Base_MspInit+0x7c>)
 80048fc:	f043 0320 	orr.w	r3, r3, #32
 8004900:	6413      	str	r3, [r2, #64]	; 0x40
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <HAL_TIM_Base_MspInit+0x7c>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2105      	movs	r1, #5
 8004912:	2037      	movs	r0, #55	; 0x37
 8004914:	f002 fbb5 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004918:	2037      	movs	r0, #55	; 0x37
 800491a:	f002 fbce 	bl	80070ba <HAL_NVIC_EnableIRQ>
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40001000 	.word	0x40001000
 800492c:	40023800 	.word	0x40023800
 8004930:	40001400 	.word	0x40001400

08004934 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004938:	4b14      	ldr	r3, [pc, #80]	; (800498c <MX_USART1_UART_Init+0x58>)
 800493a:	4a15      	ldr	r2, [pc, #84]	; (8004990 <MX_USART1_UART_Init+0x5c>)
 800493c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <MX_USART1_UART_Init+0x58>)
 8004940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <MX_USART1_UART_Init+0x58>)
 8004948:	2200      	movs	r2, #0
 800494a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <MX_USART1_UART_Init+0x58>)
 800494e:	2200      	movs	r2, #0
 8004950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <MX_USART1_UART_Init+0x58>)
 8004954:	2200      	movs	r2, #0
 8004956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <MX_USART1_UART_Init+0x58>)
 800495a:	220c      	movs	r2, #12
 800495c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <MX_USART1_UART_Init+0x58>)
 8004960:	2200      	movs	r2, #0
 8004962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <MX_USART1_UART_Init+0x58>)
 8004966:	2200      	movs	r2, #0
 8004968:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <MX_USART1_UART_Init+0x58>)
 800496c:	2200      	movs	r2, #0
 800496e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <MX_USART1_UART_Init+0x58>)
 8004972:	2200      	movs	r2, #0
 8004974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004976:	4805      	ldr	r0, [pc, #20]	; (800498c <MX_USART1_UART_Init+0x58>)
 8004978:	f007 fed2 	bl	800c720 <HAL_UART_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004982:	f7ff fab9 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200006ac 	.word	0x200006ac
 8004990:	40011000 	.word	0x40011000

08004994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b0ac      	sub	sp, #176	; 0xb0
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	605a      	str	r2, [r3, #4]
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049ac:	f107 0318 	add.w	r3, r7, #24
 80049b0:	2284      	movs	r2, #132	; 0x84
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f00d fa46 	bl	8011e46 <memset>
  if(uartHandle->Instance==USART1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a32      	ldr	r2, [pc, #200]	; (8004a88 <HAL_UART_MspInit+0xf4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d15c      	bne.n	8004a7e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049c4:	2340      	movs	r3, #64	; 0x40
 80049c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80049c8:	2300      	movs	r3, #0
 80049ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049cc:	f107 0318 	add.w	r3, r7, #24
 80049d0:	4618      	mov	r0, r3
 80049d2:	f005 f9c1 	bl	8009d58 <HAL_RCCEx_PeriphCLKConfig>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80049dc:	f7ff fa8c 	bl	8003ef8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049e0:	4b2a      	ldr	r3, [pc, #168]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 80049e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e4:	4a29      	ldr	r2, [pc, #164]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 80049e6:	f043 0310 	orr.w	r3, r3, #16
 80049ea:	6453      	str	r3, [r2, #68]	; 0x44
 80049ec:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f8:	4b24      	ldr	r3, [pc, #144]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	4a23      	ldr	r2, [pc, #140]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 80049fe:	f043 0302 	orr.w	r3, r3, #2
 8004a02:	6313      	str	r3, [r2, #48]	; 0x30
 8004a04:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a10:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_UART_MspInit+0xf8>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a40:	2307      	movs	r3, #7
 8004a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4810      	ldr	r0, [pc, #64]	; (8004a90 <HAL_UART_MspInit+0xfc>)
 8004a4e:	f003 f9df 	bl	8007e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a66:	2303      	movs	r3, #3
 8004a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a6c:	2307      	movs	r3, #7
 8004a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a76:	4619      	mov	r1, r3
 8004a78:	4806      	ldr	r0, [pc, #24]	; (8004a94 <HAL_UART_MspInit+0x100>)
 8004a7a:	f003 f9c9 	bl	8007e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004a7e:	bf00      	nop
 8004a80:	37b0      	adds	r7, #176	; 0xb0
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40011000 	.word	0x40011000
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40020400 	.word	0x40020400
 8004a94:	40020000 	.word	0x40020000

08004a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a9c:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a9e:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004aa0:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004aa4:	e002      	b.n	8004aac <LoopCopyDataInit>

08004aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aaa:	3304      	adds	r3, #4

08004aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ab0:	d3f9      	bcc.n	8004aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ab2:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ab4:	4c0b      	ldr	r4, [pc, #44]	; (8004ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ab8:	e001      	b.n	8004abe <LoopFillZerobss>

08004aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004abc:	3204      	adds	r2, #4

08004abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ac0:	d3fb      	bcc.n	8004aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ac2:	f7ff fd41 	bl	8004548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ac6:	f00d fa27 	bl	8011f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aca:	f7fe fd65 	bl	8003598 <main>
  bx  lr    
 8004ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ad0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ad8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004adc:	080188e0 	.word	0x080188e0
  ldr r2, =_sbss
 8004ae0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004ae4:	20000f70 	.word	0x20000f70

08004ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ae8:	e7fe      	b.n	8004ae8 <ADC_IRQHandler>
	...

08004aec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004af0:	4b31      	ldr	r3, [pc, #196]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004af2:	2228      	movs	r2, #40	; 0x28
 8004af4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004af6:	4b30      	ldr	r3, [pc, #192]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004af8:	2209      	movs	r2, #9
 8004afa:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004afc:	4b2e      	ldr	r3, [pc, #184]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004afe:	2235      	movs	r2, #53	; 0x35
 8004b00:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004b02:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b04:	220b      	movs	r2, #11
 8004b06:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004b08:	4b2b      	ldr	r3, [pc, #172]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b0a:	f240 121b 	movw	r2, #283	; 0x11b
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004b10:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b12:	f240 2215 	movw	r2, #533	; 0x215
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004b18:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b1a:	f240 121d 	movw	r2, #285	; 0x11d
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004b20:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b22:	f240 2235 	movw	r2, #565	; 0x235
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4823      	ldr	r0, [pc, #140]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b2c:	f000 ffc4 	bl	8005ab8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b36:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004b38:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b3a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004b3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004b48:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004b58:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004b5e:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b72:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <BSP_LCD_Init+0xd0>)
 8004b74:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004b76:	4810      	ldr	r0, [pc, #64]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b78:	f004 fa4a 	bl	8009010 <HAL_LTDC_GetState>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004b82:	2100      	movs	r1, #0
 8004b84:	480c      	ldr	r0, [pc, #48]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b86:	f000 febd 	bl	8005904 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004b8a:	480b      	ldr	r0, [pc, #44]	; (8004bb8 <BSP_LCD_Init+0xcc>)
 8004b8c:	f004 f932 	bl	8008df4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004b90:	2201      	movs	r2, #1
 8004b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b96:	480a      	ldr	r0, [pc, #40]	; (8004bc0 <BSP_LCD_Init+0xd4>)
 8004b98:	f003 fafe 	bl	8008198 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	2108      	movs	r1, #8
 8004ba0:	4808      	ldr	r0, [pc, #32]	; (8004bc4 <BSP_LCD_Init+0xd8>)
 8004ba2:	f003 faf9 	bl	8008198 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004ba6:	f001 f8a7 	bl	8005cf8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004baa:	4807      	ldr	r0, [pc, #28]	; (8004bc8 <BSP_LCD_Init+0xdc>)
 8004bac:	f000 f916 	bl	8004ddc <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000734 	.word	0x20000734
 8004bbc:	40016800 	.word	0x40016800
 8004bc0:	40022000 	.word	0x40022000
 8004bc4:	40022800 	.word	0x40022800
 8004bc8:	20000008 	.word	0x20000008

08004bcc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <BSP_LCD_GetXSize+0x20>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a06      	ldr	r2, [pc, #24]	; (8004bf0 <BSP_LCD_GetXSize+0x24>)
 8004bd6:	2134      	movs	r1, #52	; 0x34
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	3360      	adds	r3, #96	; 0x60
 8004be0:	681b      	ldr	r3, [r3, #0]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	2000081c 	.word	0x2000081c
 8004bf0:	20000734 	.word	0x20000734

08004bf4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <BSP_LCD_GetYSize+0x20>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a06      	ldr	r2, [pc, #24]	; (8004c18 <BSP_LCD_GetYSize+0x24>)
 8004bfe:	2134      	movs	r1, #52	; 0x34
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3364      	adds	r3, #100	; 0x64
 8004c08:	681b      	ldr	r3, [r3, #0]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	2000081c 	.word	0x2000081c
 8004c18:	20000734 	.word	0x20000734

08004c1c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b090      	sub	sp, #64	; 0x40
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	6039      	str	r1, [r7, #0]
 8004c26:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004c2c:	f7ff ffce 	bl	8004bcc <BSP_LCD_GetXSize>
 8004c30:	4603      	mov	r3, r0
 8004c32:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004c38:	f7ff ffdc 	bl	8004bf4 <BSP_LCD_GetYSize>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004c48:	23ff      	movs	r3, #255	; 0xff
 8004c4a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004c62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004c68:	2307      	movs	r3, #7
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004c6c:	f7ff ffae 	bl	8004bcc <BSP_LCD_GetXSize>
 8004c70:	4603      	mov	r3, r0
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004c74:	f7ff ffbe 	bl	8004bf4 <BSP_LCD_GetYSize>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	f107 030c 	add.w	r3, r7, #12
 8004c82:	4619      	mov	r1, r3
 8004c84:	4812      	ldr	r0, [pc, #72]	; (8004cd0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004c86:	f004 f985 	bl	8008f94 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	4911      	ldr	r1, [pc, #68]	; (8004cd4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3304      	adds	r3, #4
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004ca0:	88fa      	ldrh	r2, [r7, #6]
 8004ca2:	490c      	ldr	r1, [pc, #48]	; (8004cd4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	3308      	adds	r3, #8
 8004cb0:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004cb2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	4907      	ldr	r1, [pc, #28]	; (8004cd4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004cb8:	4613      	mov	r3, r2
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	3740      	adds	r7, #64	; 0x40
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000734 	.word	0x20000734
 8004cd4:	20000820 	.word	0x20000820
 8004cd8:	20000008 	.word	0x20000008

08004cdc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <BSP_LCD_SelectLayer+0x1c>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6013      	str	r3, [r2, #0]
} 
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	2000081c 	.word	0x2000081c

08004cfc <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d112      	bne.n	8004d34 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <BSP_LCD_SetLayerVisible+0x78>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	01db      	lsls	r3, r3, #7
 8004d18:	4413      	add	r3, r2
 8004d1a:	3384      	adds	r3, #132	; 0x84
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <BSP_LCD_SetLayerVisible+0x78>)
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	4611      	mov	r1, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	01d2      	lsls	r2, r2, #7
 8004d28:	440a      	add	r2, r1
 8004d2a:	3284      	adds	r2, #132	; 0x84
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e011      	b.n	8004d58 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <BSP_LCD_SetLayerVisible+0x78>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	01db      	lsls	r3, r3, #7
 8004d3e:	4413      	add	r3, r2
 8004d40:	3384      	adds	r3, #132	; 0x84
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <BSP_LCD_SetLayerVisible+0x78>)
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	01d2      	lsls	r2, r2, #7
 8004d4e:	440a      	add	r2, r1
 8004d50:	3284      	adds	r2, #132	; 0x84
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <BSP_LCD_SetLayerVisible+0x78>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <BSP_LCD_SetLayerVisible+0x78>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	20000734 	.word	0x20000734

08004d78 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <BSP_LCD_SetTextColor+0x28>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4907      	ldr	r1, [pc, #28]	; (8004da4 <BSP_LCD_SetTextColor+0x2c>)
 8004d86:	4613      	mov	r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	2000081c 	.word	0x2000081c
 8004da4:	20000820 	.word	0x20000820

08004da8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004db0:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <BSP_LCD_SetBackColor+0x2c>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4908      	ldr	r1, [pc, #32]	; (8004dd8 <BSP_LCD_SetBackColor+0x30>)
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	2000081c 	.word	0x2000081c
 8004dd8:	20000820 	.word	0x20000820

08004ddc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004de4:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <BSP_LCD_SetFont+0x2c>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4908      	ldr	r1, [pc, #32]	; (8004e0c <BSP_LCD_SetFont+0x30>)
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3308      	adds	r3, #8
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	2000081c 	.word	0x2000081c
 8004e0c:	20000820 	.word	0x20000820

08004e10 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004e18:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <BSP_LCD_Clear+0x48>)
 8004e1a:	681c      	ldr	r4, [r3, #0]
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <BSP_LCD_Clear+0x48>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <BSP_LCD_Clear+0x4c>)
 8004e22:	2134      	movs	r1, #52	; 0x34
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	335c      	adds	r3, #92	; 0x5c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461e      	mov	r6, r3
 8004e30:	f7ff fecc 	bl	8004bcc <BSP_LCD_GetXSize>
 8004e34:	4605      	mov	r5, r0
 8004e36:	f7ff fedd 	bl	8004bf4 <BSP_LCD_GetYSize>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	2300      	movs	r3, #0
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	462a      	mov	r2, r5
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f000 ff08 	bl	8005c60 <LL_FillBuffer>
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e58:	2000081c 	.word	0x2000081c
 8004e5c:	20000734 	.word	0x20000734

08004e60 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	80fb      	strh	r3, [r7, #6]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	80bb      	strh	r3, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <BSP_LCD_DisplayChar+0x80>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	491b      	ldr	r1, [pc, #108]	; (8004ee4 <BSP_LCD_DisplayChar+0x84>)
 8004e78:	4613      	mov	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	3308      	adds	r3, #8
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <BSP_LCD_DisplayChar+0x80>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4c14      	ldr	r4, [pc, #80]	; (8004ee4 <BSP_LCD_DisplayChar+0x84>)
 8004e94:	4613      	mov	r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4423      	add	r3, r4
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004ea4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <BSP_LCD_DisplayChar+0x80>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4c0d      	ldr	r4, [pc, #52]	; (8004ee4 <BSP_LCD_DisplayChar+0x84>)
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4423      	add	r3, r4
 8004eb8:	3308      	adds	r3, #8
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	889b      	ldrh	r3, [r3, #4]
 8004ebe:	3307      	adds	r3, #7
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da00      	bge.n	8004ec6 <BSP_LCD_DisplayChar+0x66>
 8004ec4:	3307      	adds	r3, #7
 8004ec6:	10db      	asrs	r3, r3, #3
 8004ec8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004ecc:	18ca      	adds	r2, r1, r3
 8004ece:	88b9      	ldrh	r1, [r7, #4]
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fe0c 	bl	8005af0 <DrawChar>
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd90      	pop	{r4, r7, pc}
 8004ee0:	2000081c 	.word	0x2000081c
 8004ee4:	20000820 	.word	0x20000820

08004ee8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60ba      	str	r2, [r7, #8]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	81fb      	strh	r3, [r7, #14]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	81bb      	strh	r3, [r7, #12]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004efe:	2301      	movs	r3, #1
 8004f00:	83fb      	strh	r3, [r7, #30]
 8004f02:	2300      	movs	r3, #0
 8004f04:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004f06:	2300      	movs	r3, #0
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004f12:	e002      	b.n	8004f1a <BSP_LCD_DisplayStringAt+0x32>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	617a      	str	r2, [r7, #20]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f6      	bne.n	8004f14 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004f26:	f7ff fe51 	bl	8004bcc <BSP_LCD_GetXSize>
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4b50      	ldr	r3, [pc, #320]	; (8005070 <BSP_LCD_DisplayStringAt+0x188>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4850      	ldr	r0, [pc, #320]	; (8005074 <BSP_LCD_DisplayStringAt+0x18c>)
 8004f32:	4613      	mov	r3, r2
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4403      	add	r3, r0
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	889b      	ldrh	r3, [r3, #4]
 8004f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f46:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d01c      	beq.n	8004f88 <BSP_LCD_DisplayStringAt+0xa0>
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	dc33      	bgt.n	8004fba <BSP_LCD_DisplayStringAt+0xd2>
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d002      	beq.n	8004f5c <BSP_LCD_DisplayStringAt+0x74>
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d019      	beq.n	8004f8e <BSP_LCD_DisplayStringAt+0xa6>
 8004f5a:	e02e      	b.n	8004fba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	1ad1      	subs	r1, r2, r3
 8004f62:	4b43      	ldr	r3, [pc, #268]	; (8005070 <BSP_LCD_DisplayStringAt+0x188>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4843      	ldr	r0, [pc, #268]	; (8005074 <BSP_LCD_DisplayStringAt+0x18c>)
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4403      	add	r3, r0
 8004f72:	3308      	adds	r3, #8
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	889b      	ldrh	r3, [r3, #4]
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	89fb      	ldrh	r3, [r7, #14]
 8004f82:	4413      	add	r3, r2
 8004f84:	83fb      	strh	r3, [r7, #30]
      break;
 8004f86:	e01b      	b.n	8004fc0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004f88:	89fb      	ldrh	r3, [r7, #14]
 8004f8a:	83fb      	strh	r3, [r7, #30]
      break;
 8004f8c:	e018      	b.n	8004fc0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	b299      	uxth	r1, r3
 8004f96:	4b36      	ldr	r3, [pc, #216]	; (8005070 <BSP_LCD_DisplayStringAt+0x188>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4836      	ldr	r0, [pc, #216]	; (8005074 <BSP_LCD_DisplayStringAt+0x18c>)
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4403      	add	r3, r0
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	889b      	ldrh	r3, [r3, #4]
 8004fac:	fb11 f303 	smulbb	r3, r1, r3
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	89fb      	ldrh	r3, [r7, #14]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	83fb      	strh	r3, [r7, #30]
      break;
 8004fb8:	e002      	b.n	8004fc0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8004fba:	89fb      	ldrh	r3, [r7, #14]
 8004fbc:	83fb      	strh	r3, [r7, #30]
      break;
 8004fbe:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004fc0:	8bfb      	ldrh	r3, [r7, #30]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <BSP_LCD_DisplayStringAt+0xe6>
 8004fc6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	da1d      	bge.n	800500a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004fd2:	e01a      	b.n	800500a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	781a      	ldrb	r2, [r3, #0]
 8004fd8:	89b9      	ldrh	r1, [r7, #12]
 8004fda:	8bfb      	ldrh	r3, [r7, #30]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff ff3f 	bl	8004e60 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <BSP_LCD_DisplayStringAt+0x188>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4923      	ldr	r1, [pc, #140]	; (8005074 <BSP_LCD_DisplayStringAt+0x18c>)
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	889a      	ldrh	r2, [r3, #4]
 8004ff8:	8bfb      	ldrh	r3, [r7, #30]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3301      	adds	r3, #1
 8005002:	60bb      	str	r3, [r7, #8]
    i++;
 8005004:	8bbb      	ldrh	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	bf14      	ite	ne
 8005012:	2301      	movne	r3, #1
 8005014:	2300      	moveq	r3, #0
 8005016:	b2dc      	uxtb	r4, r3
 8005018:	f7ff fdd8 	bl	8004bcc <BSP_LCD_GetXSize>
 800501c:	8bb9      	ldrh	r1, [r7, #28]
 800501e:	4b14      	ldr	r3, [pc, #80]	; (8005070 <BSP_LCD_DisplayStringAt+0x188>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4d14      	ldr	r5, [pc, #80]	; (8005074 <BSP_LCD_DisplayStringAt+0x18c>)
 8005024:	4613      	mov	r3, r2
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	442b      	add	r3, r5
 800502e:	3308      	adds	r3, #8
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	889b      	ldrh	r3, [r3, #4]
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	1ac3      	subs	r3, r0, r3
 800503a:	b299      	uxth	r1, r3
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <BSP_LCD_DisplayStringAt+0x188>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	480c      	ldr	r0, [pc, #48]	; (8005074 <BSP_LCD_DisplayStringAt+0x18c>)
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4403      	add	r3, r0
 800504c:	3308      	adds	r3, #8
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	889b      	ldrh	r3, [r3, #4]
 8005052:	4299      	cmp	r1, r3
 8005054:	bf2c      	ite	cs
 8005056:	2301      	movcs	r3, #1
 8005058:	2300      	movcc	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	4023      	ands	r3, r4
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1b7      	bne.n	8004fd4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bdb0      	pop	{r4, r5, r7, pc}
 800506e:	bf00      	nop
 8005070:	2000081c 	.word	0x2000081c
 8005074:	20000820 	.word	0x20000820

08005078 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005078:	b5b0      	push	{r4, r5, r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	4603      	mov	r3, r0
 8005080:	80fb      	strh	r3, [r7, #6]
 8005082:	460b      	mov	r3, r1
 8005084:	80bb      	strh	r3, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800508e:	4b26      	ldr	r3, [pc, #152]	; (8005128 <BSP_LCD_DrawHLine+0xb0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a26      	ldr	r2, [pc, #152]	; (800512c <BSP_LCD_DrawHLine+0xb4>)
 8005094:	2134      	movs	r1, #52	; 0x34
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	4413      	add	r3, r2
 800509c:	3348      	adds	r3, #72	; 0x48
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d114      	bne.n	80050ce <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80050a4:	4b20      	ldr	r3, [pc, #128]	; (8005128 <BSP_LCD_DrawHLine+0xb0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a20      	ldr	r2, [pc, #128]	; (800512c <BSP_LCD_DrawHLine+0xb4>)
 80050aa:	2134      	movs	r1, #52	; 0x34
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	335c      	adds	r3, #92	; 0x5c
 80050b4:	681c      	ldr	r4, [r3, #0]
 80050b6:	f7ff fd89 	bl	8004bcc <BSP_LCD_GetXSize>
 80050ba:	4602      	mov	r2, r0
 80050bc:	88bb      	ldrh	r3, [r7, #4]
 80050be:	fb03 f202 	mul.w	r2, r3, r2
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	4413      	add	r3, r2
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4423      	add	r3, r4
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e013      	b.n	80050f6 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <BSP_LCD_DrawHLine+0xb0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <BSP_LCD_DrawHLine+0xb4>)
 80050d4:	2134      	movs	r1, #52	; 0x34
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4413      	add	r3, r2
 80050dc:	335c      	adds	r3, #92	; 0x5c
 80050de:	681c      	ldr	r4, [r3, #0]
 80050e0:	f7ff fd74 	bl	8004bcc <BSP_LCD_GetXSize>
 80050e4:	4602      	mov	r2, r0
 80050e6:	88bb      	ldrh	r3, [r7, #4]
 80050e8:	fb03 f202 	mul.w	r2, r3, r2
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4423      	add	r3, r4
 80050f4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <BSP_LCD_DrawHLine+0xb0>)
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	887c      	ldrh	r4, [r7, #2]
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <BSP_LCD_DrawHLine+0xb0>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4d0b      	ldr	r5, [pc, #44]	; (8005130 <BSP_LCD_DrawHLine+0xb8>)
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	442b      	add	r3, r5
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	2300      	movs	r3, #0
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2301      	movs	r3, #1
 8005118:	4622      	mov	r2, r4
 800511a:	f000 fda1 	bl	8005c60 <LL_FillBuffer>
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bdb0      	pop	{r4, r5, r7, pc}
 8005126:	bf00      	nop
 8005128:	2000081c 	.word	0x2000081c
 800512c:	20000734 	.word	0x20000734
 8005130:	20000820 	.word	0x20000820

08005134 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005136:	b087      	sub	sp, #28
 8005138:	af02      	add	r7, sp, #8
 800513a:	4603      	mov	r3, r0
 800513c:	80fb      	strh	r3, [r7, #6]
 800513e:	460b      	mov	r3, r1
 8005140:	80bb      	strh	r3, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800514a:	4b28      	ldr	r3, [pc, #160]	; (80051ec <BSP_LCD_DrawVLine+0xb8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <BSP_LCD_DrawVLine+0xbc>)
 8005150:	2134      	movs	r1, #52	; 0x34
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	4413      	add	r3, r2
 8005158:	3348      	adds	r3, #72	; 0x48
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d114      	bne.n	800518a <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005160:	4b22      	ldr	r3, [pc, #136]	; (80051ec <BSP_LCD_DrawVLine+0xb8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <BSP_LCD_DrawVLine+0xbc>)
 8005166:	2134      	movs	r1, #52	; 0x34
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	4413      	add	r3, r2
 800516e:	335c      	adds	r3, #92	; 0x5c
 8005170:	681c      	ldr	r4, [r3, #0]
 8005172:	f7ff fd2b 	bl	8004bcc <BSP_LCD_GetXSize>
 8005176:	4602      	mov	r2, r0
 8005178:	88bb      	ldrh	r3, [r7, #4]
 800517a:	fb03 f202 	mul.w	r2, r3, r2
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	4413      	add	r3, r2
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4423      	add	r3, r4
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e013      	b.n	80051b2 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800518a:	4b18      	ldr	r3, [pc, #96]	; (80051ec <BSP_LCD_DrawVLine+0xb8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <BSP_LCD_DrawVLine+0xbc>)
 8005190:	2134      	movs	r1, #52	; 0x34
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	335c      	adds	r3, #92	; 0x5c
 800519a:	681c      	ldr	r4, [r3, #0]
 800519c:	f7ff fd16 	bl	8004bcc <BSP_LCD_GetXSize>
 80051a0:	4602      	mov	r2, r0
 80051a2:	88bb      	ldrh	r3, [r7, #4]
 80051a4:	fb03 f202 	mul.w	r2, r3, r2
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4423      	add	r3, r4
 80051b0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80051b2:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <BSP_LCD_DrawVLine+0xb8>)
 80051b4:	681c      	ldr	r4, [r3, #0]
 80051b6:	68fd      	ldr	r5, [r7, #12]
 80051b8:	887e      	ldrh	r6, [r7, #2]
 80051ba:	f7ff fd07 	bl	8004bcc <BSP_LCD_GetXSize>
 80051be:	4603      	mov	r3, r0
 80051c0:	1e59      	subs	r1, r3, #1
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <BSP_LCD_DrawVLine+0xb8>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	480b      	ldr	r0, [pc, #44]	; (80051f4 <BSP_LCD_DrawVLine+0xc0>)
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4403      	add	r3, r0
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	9100      	str	r1, [sp, #0]
 80051d8:	4633      	mov	r3, r6
 80051da:	2201      	movs	r2, #1
 80051dc:	4629      	mov	r1, r5
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 fd3e 	bl	8005c60 <LL_FillBuffer>
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ec:	2000081c 	.word	0x2000081c
 80051f0:	20000734 	.word	0x20000734
 80051f4:	20000820 	.word	0x20000820

080051f8 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b08b      	sub	sp, #44	; 0x2c
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4604      	mov	r4, r0
 8005200:	4608      	mov	r0, r1
 8005202:	4611      	mov	r1, r2
 8005204:	461a      	mov	r2, r3
 8005206:	4623      	mov	r3, r4
 8005208:	80fb      	strh	r3, [r7, #6]
 800520a:	4603      	mov	r3, r0
 800520c:	80bb      	strh	r3, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	807b      	strh	r3, [r7, #2]
 8005212:	4613      	mov	r3, r2
 8005214:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8005216:	2300      	movs	r3, #0
 8005218:	823b      	strh	r3, [r7, #16]
 800521a:	2300      	movs	r3, #0
 800521c:	81fb      	strh	r3, [r7, #14]
 800521e:	2300      	movs	r3, #0
 8005220:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005222:	2300      	movs	r3, #0
 8005224:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005226:	2300      	movs	r3, #0
 8005228:	847b      	strh	r3, [r7, #34]	; 0x22
 800522a:	2300      	movs	r3, #0
 800522c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 800522e:	2300      	movs	r3, #0
 8005230:	83fb      	strh	r3, [r7, #30]
 8005232:	2300      	movs	r3, #0
 8005234:	83bb      	strh	r3, [r7, #28]
 8005236:	2300      	movs	r3, #0
 8005238:	837b      	strh	r3, [r7, #26]
 800523a:	2300      	movs	r3, #0
 800523c:	833b      	strh	r3, [r7, #24]
 800523e:	2300      	movs	r3, #0
 8005240:	82fb      	strh	r3, [r7, #22]
 8005242:	2300      	movs	r3, #0
 8005244:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800524a:	887a      	ldrh	r2, [r7, #2]
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	bfb8      	it	lt
 8005254:	425b      	neglt	r3, r3
 8005256:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8005258:	883a      	ldrh	r2, [r7, #0]
 800525a:	88bb      	ldrh	r3, [r7, #4]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	bfb8      	it	lt
 8005262:	425b      	neglt	r3, r3
 8005264:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800526a:	88bb      	ldrh	r3, [r7, #4]
 800526c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800526e:	887a      	ldrh	r2, [r7, #2]
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	429a      	cmp	r2, r3
 8005274:	d304      	bcc.n	8005280 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8005276:	2301      	movs	r3, #1
 8005278:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800527a:	2301      	movs	r3, #1
 800527c:	843b      	strh	r3, [r7, #32]
 800527e:	e005      	b.n	800528c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8005280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005284:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8005286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800528a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800528c:	883a      	ldrh	r2, [r7, #0]
 800528e:	88bb      	ldrh	r3, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d304      	bcc.n	800529e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8005294:	2301      	movs	r3, #1
 8005296:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8005298:	2301      	movs	r3, #1
 800529a:	83bb      	strh	r3, [r7, #28]
 800529c:	e005      	b.n	80052aa <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800529e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052a2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80052a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052a8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80052aa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80052ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	db11      	blt.n	80052da <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80052b6:	2300      	movs	r3, #0
 80052b8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80052ba:	2300      	movs	r3, #0
 80052bc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80052be:	8a3b      	ldrh	r3, [r7, #16]
 80052c0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80052c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	da00      	bge.n	80052cc <BSP_LCD_DrawLine+0xd4>
 80052ca:	3301      	adds	r3, #1
 80052cc:	105b      	asrs	r3, r3, #1
 80052ce:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80052d0:	89fb      	ldrh	r3, [r7, #14]
 80052d2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80052d4:	8a3b      	ldrh	r3, [r7, #16]
 80052d6:	82bb      	strh	r3, [r7, #20]
 80052d8:	e010      	b.n	80052fc <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80052da:	2300      	movs	r3, #0
 80052dc:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80052de:	2300      	movs	r3, #0
 80052e0:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80052e2:	89fb      	ldrh	r3, [r7, #14]
 80052e4:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80052e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da00      	bge.n	80052f0 <BSP_LCD_DrawLine+0xf8>
 80052ee:	3301      	adds	r3, #1
 80052f0:	105b      	asrs	r3, r3, #1
 80052f2:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80052f4:	8a3b      	ldrh	r3, [r7, #16]
 80052f6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80052fc:	2300      	movs	r3, #0
 80052fe:	827b      	strh	r3, [r7, #18]
 8005300:	e037      	b.n	8005372 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8005302:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8005304:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005306:	4b20      	ldr	r3, [pc, #128]	; (8005388 <BSP_LCD_DrawLine+0x190>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4c20      	ldr	r4, [pc, #128]	; (800538c <BSP_LCD_DrawLine+0x194>)
 800530c:	4613      	mov	r3, r2
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4423      	add	r3, r4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	f000 f955 	bl	80055c8 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800531e:	8b3a      	ldrh	r2, [r7, #24]
 8005320:	8afb      	ldrh	r3, [r7, #22]
 8005322:	4413      	add	r3, r2
 8005324:	b29b      	uxth	r3, r3
 8005326:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8005328:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800532c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005330:	429a      	cmp	r2, r3
 8005332:	db0e      	blt.n	8005352 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8005334:	8b3a      	ldrh	r2, [r7, #24]
 8005336:	8b7b      	ldrh	r3, [r7, #26]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800533e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005340:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005342:	4413      	add	r3, r2
 8005344:	b29b      	uxth	r3, r3
 8005346:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8005348:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800534a:	8bfb      	ldrh	r3, [r7, #30]
 800534c:	4413      	add	r3, r2
 800534e:	b29b      	uxth	r3, r3
 8005350:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8005352:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005354:	8c3b      	ldrh	r3, [r7, #32]
 8005356:	4413      	add	r3, r2
 8005358:	b29b      	uxth	r3, r3
 800535a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800535c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800535e:	8bbb      	ldrh	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	b29b      	uxth	r3, r3
 8005364:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8005366:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800536a:	b29b      	uxth	r3, r3
 800536c:	3301      	adds	r3, #1
 800536e:	b29b      	uxth	r3, r3
 8005370:	827b      	strh	r3, [r7, #18]
 8005372:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005376:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800537a:	429a      	cmp	r2, r3
 800537c:	ddc1      	ble.n	8005302 <BSP_LCD_DrawLine+0x10a>
  }
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	372c      	adds	r7, #44	; 0x2c
 8005384:	46bd      	mov	sp, r7
 8005386:	bd90      	pop	{r4, r7, pc}
 8005388:	2000081c 	.word	0x2000081c
 800538c:	20000820 	.word	0x20000820

08005390 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	80fb      	strh	r3, [r7, #6]
 80053a2:	4603      	mov	r3, r0
 80053a4:	80bb      	strh	r3, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	807b      	strh	r3, [r7, #2]
 80053aa:	4613      	mov	r3, r2
 80053ac:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80053ae:	887a      	ldrh	r2, [r7, #2]
 80053b0:	88b9      	ldrh	r1, [r7, #4]
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff fe5f 	bl	8005078 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80053ba:	88ba      	ldrh	r2, [r7, #4]
 80053bc:	883b      	ldrh	r3, [r7, #0]
 80053be:	4413      	add	r3, r2
 80053c0:	b299      	uxth	r1, r3
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fe56 	bl	8005078 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80053cc:	883a      	ldrh	r2, [r7, #0]
 80053ce:	88b9      	ldrh	r1, [r7, #4]
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff feae 	bl	8005134 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80053d8:	88fa      	ldrh	r2, [r7, #6]
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	4413      	add	r3, r2
 80053de:	b29b      	uxth	r3, r3
 80053e0:	883a      	ldrh	r2, [r7, #0]
 80053e2:	88b9      	ldrh	r1, [r7, #4]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fea5 	bl	8005134 <BSP_LCD_DrawVLine>
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}
	...

080053f4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	80fb      	strh	r3, [r7, #6]
 80053fe:	460b      	mov	r3, r1
 8005400:	80bb      	strh	r3, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8005406:	887b      	ldrh	r3, [r7, #2]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	f1c3 0303 	rsb	r3, r3, #3
 800540e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8005414:	887b      	ldrh	r3, [r7, #2]
 8005416:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8005418:	e0c7      	b.n	80055aa <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	b29a      	uxth	r2, r3
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	4413      	add	r3, r2
 8005422:	b298      	uxth	r0, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	b29b      	uxth	r3, r3
 8005428:	88ba      	ldrh	r2, [r7, #4]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	b299      	uxth	r1, r3
 800542e:	4b64      	ldr	r3, [pc, #400]	; (80055c0 <BSP_LCD_DrawCircle+0x1cc>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4c64      	ldr	r4, [pc, #400]	; (80055c4 <BSP_LCD_DrawCircle+0x1d0>)
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4423      	add	r3, r4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	f000 f8c1 	bl	80055c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	b29b      	uxth	r3, r3
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	b298      	uxth	r0, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	b29b      	uxth	r3, r3
 8005454:	88ba      	ldrh	r2, [r7, #4]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	b299      	uxth	r1, r3
 800545a:	4b59      	ldr	r3, [pc, #356]	; (80055c0 <BSP_LCD_DrawCircle+0x1cc>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4c59      	ldr	r4, [pc, #356]	; (80055c4 <BSP_LCD_DrawCircle+0x1d0>)
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4423      	add	r3, r4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	f000 f8ab 	bl	80055c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	b29a      	uxth	r2, r3
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	4413      	add	r3, r2
 800547a:	b298      	uxth	r0, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	b29b      	uxth	r3, r3
 8005480:	88ba      	ldrh	r2, [r7, #4]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	b299      	uxth	r1, r3
 8005486:	4b4e      	ldr	r3, [pc, #312]	; (80055c0 <BSP_LCD_DrawCircle+0x1cc>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4c4e      	ldr	r4, [pc, #312]	; (80055c4 <BSP_LCD_DrawCircle+0x1d0>)
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4423      	add	r3, r4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	f000 f895 	bl	80055c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	b298      	uxth	r0, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	88ba      	ldrh	r2, [r7, #4]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	b299      	uxth	r1, r3
 80054b2:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <BSP_LCD_DrawCircle+0x1cc>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4c43      	ldr	r4, [pc, #268]	; (80055c4 <BSP_LCD_DrawCircle+0x1d0>)
 80054b8:	4613      	mov	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4423      	add	r3, r4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	f000 f87f 	bl	80055c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	4413      	add	r3, r2
 80054d2:	b298      	uxth	r0, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	88bb      	ldrh	r3, [r7, #4]
 80054da:	4413      	add	r3, r2
 80054dc:	b299      	uxth	r1, r3
 80054de:	4b38      	ldr	r3, [pc, #224]	; (80055c0 <BSP_LCD_DrawCircle+0x1cc>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4c38      	ldr	r4, [pc, #224]	; (80055c4 <BSP_LCD_DrawCircle+0x1d0>)
 80054e4:	4613      	mov	r3, r2
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4423      	add	r3, r4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	f000 f869 	bl	80055c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	b298      	uxth	r0, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	b29a      	uxth	r2, r3
 8005504:	88bb      	ldrh	r3, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	b299      	uxth	r1, r3
 800550a:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <BSP_LCD_DrawCircle+0x1cc>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4c2d      	ldr	r4, [pc, #180]	; (80055c4 <BSP_LCD_DrawCircle+0x1d0>)
 8005510:	4613      	mov	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4423      	add	r3, r4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	f000 f853 	bl	80055c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	b29a      	uxth	r2, r3
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	4413      	add	r3, r2
 800552a:	b298      	uxth	r0, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	b29a      	uxth	r2, r3
 8005530:	88bb      	ldrh	r3, [r7, #4]
 8005532:	4413      	add	r3, r2
 8005534:	b299      	uxth	r1, r3
 8005536:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <BSP_LCD_DrawCircle+0x1cc>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4c22      	ldr	r4, [pc, #136]	; (80055c4 <BSP_LCD_DrawCircle+0x1d0>)
 800553c:	4613      	mov	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4423      	add	r3, r4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	f000 f83d 	bl	80055c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	b29b      	uxth	r3, r3
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	b298      	uxth	r0, r3
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	b29a      	uxth	r2, r3
 800555c:	88bb      	ldrh	r3, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	b299      	uxth	r1, r3
 8005562:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <BSP_LCD_DrawCircle+0x1cc>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4c17      	ldr	r4, [pc, #92]	; (80055c4 <BSP_LCD_DrawCircle+0x1d0>)
 8005568:	4613      	mov	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4423      	add	r3, r4
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	f000 f827 	bl	80055c8 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	da06      	bge.n	800558e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	009a      	lsls	r2, r3, #2
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	3306      	adds	r3, #6
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e00a      	b.n	80055a4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	009a      	lsls	r2, r3, #2
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	330a      	adds	r3, #10
 800559c:	617b      	str	r3, [r7, #20]
      current_y--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3301      	adds	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	f67f af33 	bls.w	800541a <BSP_LCD_DrawCircle+0x26>
  } 
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd90      	pop	{r4, r7, pc}
 80055be:	bf00      	nop
 80055c0:	2000081c 	.word	0x2000081c
 80055c4:	20000820 	.word	0x20000820

080055c8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80055c8:	b5b0      	push	{r4, r5, r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	603a      	str	r2, [r7, #0]
 80055d2:	80fb      	strh	r3, [r7, #6]
 80055d4:	460b      	mov	r3, r1
 80055d6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80055d8:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <BSP_LCD_DrawPixel+0x88>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <BSP_LCD_DrawPixel+0x8c>)
 80055de:	2134      	movs	r1, #52	; 0x34
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	4413      	add	r3, r2
 80055e6:	3348      	adds	r3, #72	; 0x48
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d116      	bne.n	800561c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <BSP_LCD_DrawPixel+0x88>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <BSP_LCD_DrawPixel+0x8c>)
 80055f4:	2134      	movs	r1, #52	; 0x34
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	4413      	add	r3, r2
 80055fc:	335c      	adds	r3, #92	; 0x5c
 80055fe:	681c      	ldr	r4, [r3, #0]
 8005600:	88bd      	ldrh	r5, [r7, #4]
 8005602:	f7ff fae3 	bl	8004bcc <BSP_LCD_GetXSize>
 8005606:	4603      	mov	r3, r0
 8005608:	fb03 f205 	mul.w	r2, r3, r5
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	4413      	add	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4423      	add	r3, r4
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	b292      	uxth	r2, r2
 8005618:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800561a:	e015      	b.n	8005648 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <BSP_LCD_DrawPixel+0x88>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <BSP_LCD_DrawPixel+0x8c>)
 8005622:	2134      	movs	r1, #52	; 0x34
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	335c      	adds	r3, #92	; 0x5c
 800562c:	681c      	ldr	r4, [r3, #0]
 800562e:	88bd      	ldrh	r5, [r7, #4]
 8005630:	f7ff facc 	bl	8004bcc <BSP_LCD_GetXSize>
 8005634:	4603      	mov	r3, r0
 8005636:	fb03 f205 	mul.w	r2, r3, r5
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4423      	add	r3, r4
 8005642:	461a      	mov	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6013      	str	r3, [r2, #0]
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bdb0      	pop	{r4, r5, r7, pc}
 8005650:	2000081c 	.word	0x2000081c
 8005654:	20000734 	.word	0x20000734

08005658 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565c:	b086      	sub	sp, #24
 800565e:	af02      	add	r7, sp, #8
 8005660:	4604      	mov	r4, r0
 8005662:	4608      	mov	r0, r1
 8005664:	4611      	mov	r1, r2
 8005666:	461a      	mov	r2, r3
 8005668:	4623      	mov	r3, r4
 800566a:	80fb      	strh	r3, [r7, #6]
 800566c:	4603      	mov	r3, r0
 800566e:	80bb      	strh	r3, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	807b      	strh	r3, [r7, #2]
 8005674:	4613      	mov	r3, r2
 8005676:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800567c:	4b30      	ldr	r3, [pc, #192]	; (8005740 <BSP_LCD_FillRect+0xe8>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4930      	ldr	r1, [pc, #192]	; (8005744 <BSP_LCD_FillRect+0xec>)
 8005682:	4613      	mov	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fb72 	bl	8004d78 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005694:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <BSP_LCD_FillRect+0xe8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2b      	ldr	r2, [pc, #172]	; (8005748 <BSP_LCD_FillRect+0xf0>)
 800569a:	2134      	movs	r1, #52	; 0x34
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	4413      	add	r3, r2
 80056a2:	3348      	adds	r3, #72	; 0x48
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d114      	bne.n	80056d4 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80056aa:	4b25      	ldr	r3, [pc, #148]	; (8005740 <BSP_LCD_FillRect+0xe8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a26      	ldr	r2, [pc, #152]	; (8005748 <BSP_LCD_FillRect+0xf0>)
 80056b0:	2134      	movs	r1, #52	; 0x34
 80056b2:	fb01 f303 	mul.w	r3, r1, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	335c      	adds	r3, #92	; 0x5c
 80056ba:	681c      	ldr	r4, [r3, #0]
 80056bc:	f7ff fa86 	bl	8004bcc <BSP_LCD_GetXSize>
 80056c0:	4602      	mov	r2, r0
 80056c2:	88bb      	ldrh	r3, [r7, #4]
 80056c4:	fb03 f202 	mul.w	r2, r3, r2
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	4413      	add	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	4423      	add	r3, r4
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e013      	b.n	80056fc <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80056d4:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <BSP_LCD_FillRect+0xe8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <BSP_LCD_FillRect+0xf0>)
 80056da:	2134      	movs	r1, #52	; 0x34
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	4413      	add	r3, r2
 80056e2:	335c      	adds	r3, #92	; 0x5c
 80056e4:	681c      	ldr	r4, [r3, #0]
 80056e6:	f7ff fa71 	bl	8004bcc <BSP_LCD_GetXSize>
 80056ea:	4602      	mov	r2, r0
 80056ec:	88bb      	ldrh	r3, [r7, #4]
 80056ee:	fb03 f202 	mul.w	r2, r3, r2
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4423      	add	r3, r4
 80056fa:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <BSP_LCD_FillRect+0xe8>)
 80056fe:	681c      	ldr	r4, [r3, #0]
 8005700:	68fd      	ldr	r5, [r7, #12]
 8005702:	887e      	ldrh	r6, [r7, #2]
 8005704:	f8b7 8000 	ldrh.w	r8, [r7]
 8005708:	f7ff fa60 	bl	8004bcc <BSP_LCD_GetXSize>
 800570c:	4602      	mov	r2, r0
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	1ad1      	subs	r1, r2, r3
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <BSP_LCD_FillRect+0xe8>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	480b      	ldr	r0, [pc, #44]	; (8005744 <BSP_LCD_FillRect+0xec>)
 8005718:	4613      	mov	r3, r2
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4403      	add	r3, r0
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	9100      	str	r1, [sp, #0]
 8005728:	4643      	mov	r3, r8
 800572a:	4632      	mov	r2, r6
 800572c:	4629      	mov	r1, r5
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fa96 	bl	8005c60 <LL_FillBuffer>
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573e:	bf00      	nop
 8005740:	2000081c 	.word	0x2000081c
 8005744:	20000820 	.word	0x20000820
 8005748:	20000734 	.word	0x20000734

0800574c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	80fb      	strh	r3, [r7, #6]
 8005756:	460b      	mov	r3, r1
 8005758:	80bb      	strh	r3, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800575e:	887b      	ldrh	r3, [r7, #2]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	f1c3 0303 	rsb	r3, r3, #3
 8005766:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800576c:	887b      	ldrh	r3, [r7, #2]
 800576e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005770:	4b44      	ldr	r3, [pc, #272]	; (8005884 <BSP_LCD_FillCircle+0x138>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4944      	ldr	r1, [pc, #272]	; (8005888 <BSP_LCD_FillCircle+0x13c>)
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff faf8 	bl	8004d78 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8005788:	e061      	b.n	800584e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d021      	beq.n	80057d4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	b29b      	uxth	r3, r3
 8005794:	88fa      	ldrh	r2, [r7, #6]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	b298      	uxth	r0, r3
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	b29a      	uxth	r2, r3
 800579e:	88bb      	ldrh	r3, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	b299      	uxth	r1, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	f7ff fc63 	bl	8005078 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b298      	uxth	r0, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	88ba      	ldrh	r2, [r7, #4]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	b299      	uxth	r1, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	f7ff fc52 	bl	8005078 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d021      	beq.n	800581e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	b298      	uxth	r0, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	88ba      	ldrh	r2, [r7, #4]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	b299      	uxth	r1, r3
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	f7ff fc3e 	bl	8005078 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	b298      	uxth	r0, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	b29a      	uxth	r2, r3
 800580a:	88bb      	ldrh	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	b299      	uxth	r1, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	b29b      	uxth	r3, r3
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	b29b      	uxth	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	f7ff fc2d 	bl	8005078 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	da06      	bge.n	8005832 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	009a      	lsls	r2, r3, #2
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4413      	add	r3, r2
 800582c:	3306      	adds	r3, #6
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e00a      	b.n	8005848 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	009a      	lsls	r2, r3, #2
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4413      	add	r3, r2
 800583e:	330a      	adds	r3, #10
 8005840:	617b      	str	r3, [r7, #20]
      current_y--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3b01      	subs	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	3301      	adds	r3, #1
 800584c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	429a      	cmp	r2, r3
 8005854:	d999      	bls.n	800578a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <BSP_LCD_FillCircle+0x138>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	490b      	ldr	r1, [pc, #44]	; (8005888 <BSP_LCD_FillCircle+0x13c>)
 800585c:	4613      	mov	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fa85 	bl	8004d78 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	88b9      	ldrh	r1, [r7, #4]
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fdbd 	bl	80053f4 <BSP_LCD_DrawCircle>
}
 800587a:	bf00      	nop
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	2000081c 	.word	0x2000081c
 8005888:	20000820 	.word	0x20000820

0800588c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <BSP_LCD_DisplayOn+0x30>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <BSP_LCD_DisplayOn+0x30>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80058a0:	2201      	movs	r2, #1
 80058a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058a6:	4806      	ldr	r0, [pc, #24]	; (80058c0 <BSP_LCD_DisplayOn+0x34>)
 80058a8:	f002 fc76 	bl	8008198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80058ac:	2201      	movs	r2, #1
 80058ae:	2108      	movs	r1, #8
 80058b0:	4804      	ldr	r0, [pc, #16]	; (80058c4 <BSP_LCD_DisplayOn+0x38>)
 80058b2:	f002 fc71 	bl	8008198 <HAL_GPIO_WritePin>
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000734 	.word	0x20000734
 80058c0:	40022000 	.word	0x40022000
 80058c4:	40022800 	.word	0x40022800

080058c8 <BSP_LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* Display Off */
  __HAL_LTDC_DISABLE(&hLtdcHandler);
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <BSP_LCD_DisplayOff+0x30>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <BSP_LCD_DisplayOff+0x30>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 80058dc:	2200      	movs	r2, #0
 80058de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058e2:	4806      	ldr	r0, [pc, #24]	; (80058fc <BSP_LCD_DisplayOff+0x34>)
 80058e4:	f002 fc58 	bl	8008198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 80058e8:	2200      	movs	r2, #0
 80058ea:	2108      	movs	r1, #8
 80058ec:	4804      	ldr	r0, [pc, #16]	; (8005900 <BSP_LCD_DisplayOff+0x38>)
 80058ee:	f002 fc53 	bl	8008198 <HAL_GPIO_WritePin>
}
 80058f2:	bf00      	nop
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000734 	.word	0x20000734
 80058fc:	40022000 	.word	0x40022000
 8005900:	40022800 	.word	0x40022800

08005904 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b090      	sub	sp, #64	; 0x40
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800590e:	4b64      	ldr	r3, [pc, #400]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	4a63      	ldr	r2, [pc, #396]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005918:	6453      	str	r3, [r2, #68]	; 0x44
 800591a:	4b61      	ldr	r3, [pc, #388]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005926:	4b5e      	ldr	r3, [pc, #376]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	4a5d      	ldr	r2, [pc, #372]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 800592c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005930:	6313      	str	r3, [r2, #48]	; 0x30
 8005932:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800593e:	4b58      	ldr	r3, [pc, #352]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	4a57      	ldr	r2, [pc, #348]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005944:	f043 0310 	orr.w	r3, r3, #16
 8005948:	6313      	str	r3, [r2, #48]	; 0x30
 800594a:	4b55      	ldr	r3, [pc, #340]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	623b      	str	r3, [r7, #32]
 8005954:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005956:	4b52      	ldr	r3, [pc, #328]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	4a51      	ldr	r2, [pc, #324]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 800595c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005960:	6313      	str	r3, [r2, #48]	; 0x30
 8005962:	4b4f      	ldr	r3, [pc, #316]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800596e:	4b4c      	ldr	r3, [pc, #304]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	4a4b      	ldr	r2, [pc, #300]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005978:	6313      	str	r3, [r2, #48]	; 0x30
 800597a:	4b49      	ldr	r3, [pc, #292]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005986:	4b46      	ldr	r3, [pc, #280]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	4a45      	ldr	r2, [pc, #276]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 800598c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005990:	6313      	str	r3, [r2, #48]	; 0x30
 8005992:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800599e:	4b40      	ldr	r3, [pc, #256]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	4a3f      	ldr	r2, [pc, #252]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059a8:	6313      	str	r3, [r2, #48]	; 0x30
 80059aa:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80059b6:	4b3a      	ldr	r3, [pc, #232]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	4a39      	ldr	r2, [pc, #228]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c0:	6313      	str	r3, [r2, #48]	; 0x30
 80059c2:	4b37      	ldr	r3, [pc, #220]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80059ce:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059d8:	6313      	str	r3, [r2, #48]	; 0x30
 80059da:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <BSP_LCD_MspInit+0x19c>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80059e6:	2310      	movs	r3, #16
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80059ea:	2302      	movs	r3, #2
 80059ec:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80059f2:	2302      	movs	r3, #2
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80059f6:	230e      	movs	r3, #14
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80059fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059fe:	4619      	mov	r1, r3
 8005a00:	4828      	ldr	r0, [pc, #160]	; (8005aa4 <BSP_LCD_MspInit+0x1a0>)
 8005a02:	f002 fa05 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005a10:	2309      	movs	r3, #9
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4823      	ldr	r0, [pc, #140]	; (8005aa8 <BSP_LCD_MspInit+0x1a4>)
 8005a1c:	f002 f9f8 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005a20:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005a26:	2302      	movs	r3, #2
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005a2a:	230e      	movs	r3, #14
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a32:	4619      	mov	r1, r3
 8005a34:	481d      	ldr	r0, [pc, #116]	; (8005aac <BSP_LCD_MspInit+0x1a8>)
 8005a36:	f002 f9eb 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8005a3a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005a40:	2302      	movs	r3, #2
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005a44:	230e      	movs	r3, #14
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4818      	ldr	r0, [pc, #96]	; (8005ab0 <BSP_LCD_MspInit+0x1ac>)
 8005a50:	f002 f9de 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8005a54:	23f7      	movs	r3, #247	; 0xf7
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005a5c:	230e      	movs	r3, #14
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a64:	4619      	mov	r1, r3
 8005a66:	4813      	ldr	r0, [pc, #76]	; (8005ab4 <BSP_LCD_MspInit+0x1b0>)
 8005a68:	f002 f9d2 	bl	8007e10 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005a72:	2301      	movs	r3, #1
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8005a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	480b      	ldr	r0, [pc, #44]	; (8005aac <BSP_LCD_MspInit+0x1a8>)
 8005a7e:	f002 f9c7 	bl	8007e10 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8005a82:	2308      	movs	r3, #8
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005a86:	2301      	movs	r3, #1
 8005a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4808      	ldr	r0, [pc, #32]	; (8005ab4 <BSP_LCD_MspInit+0x1b0>)
 8005a92:	f002 f9bd 	bl	8007e10 <HAL_GPIO_Init>
}
 8005a96:	bf00      	nop
 8005a98:	3740      	adds	r7, #64	; 0x40
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40021800 	.word	0x40021800
 8005aac:	40022000 	.word	0x40022000
 8005ab0:	40022400 	.word	0x40022400
 8005ab4:	40022800 	.word	0x40022800

08005ab8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <BSP_LCD_ClockConfig+0x34>)
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <BSP_LCD_ClockConfig+0x34>)
 8005aca:	22c0      	movs	r2, #192	; 0xc0
 8005acc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <BSP_LCD_ClockConfig+0x34>)
 8005ad0:	2205      	movs	r2, #5
 8005ad2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <BSP_LCD_ClockConfig+0x34>)
 8005ad6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005ada:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005adc:	4803      	ldr	r0, [pc, #12]	; (8005aec <BSP_LCD_ClockConfig+0x34>)
 8005ade:	f004 f93b 	bl	8009d58 <HAL_RCCEx_PeriphCLKConfig>
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000838 	.word	0x20000838

08005af0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	603a      	str	r2, [r7, #0]
 8005afa:	80fb      	strh	r3, [r7, #6]
 8005afc:	460b      	mov	r3, r1
 8005afe:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	2300      	movs	r3, #0
 8005b06:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005b08:	4b53      	ldr	r3, [pc, #332]	; (8005c58 <DrawChar+0x168>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4953      	ldr	r1, [pc, #332]	; (8005c5c <DrawChar+0x16c>)
 8005b0e:	4613      	mov	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	3308      	adds	r3, #8
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	88db      	ldrh	r3, [r3, #6]
 8005b1e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005b20:	4b4d      	ldr	r3, [pc, #308]	; (8005c58 <DrawChar+0x168>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	494d      	ldr	r1, [pc, #308]	; (8005c5c <DrawChar+0x16c>)
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3308      	adds	r3, #8
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	889b      	ldrh	r3, [r3, #4]
 8005b36:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8005b38:	8a3b      	ldrh	r3, [r7, #16]
 8005b3a:	3307      	adds	r3, #7
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	da00      	bge.n	8005b42 <DrawChar+0x52>
 8005b40:	3307      	adds	r3, #7
 8005b42:	10db      	asrs	r3, r3, #3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	8a3b      	ldrh	r3, [r7, #16]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	e076      	b.n	8005c46 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005b58:	8a3b      	ldrh	r3, [r7, #16]
 8005b5a:	3307      	adds	r3, #7
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da00      	bge.n	8005b62 <DrawChar+0x72>
 8005b60:	3307      	adds	r3, #7
 8005b62:	10db      	asrs	r3, r3, #3
 8005b64:	461a      	mov	r2, r3
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	4413      	add	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8005b72:	8a3b      	ldrh	r3, [r7, #16]
 8005b74:	3307      	adds	r3, #7
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	da00      	bge.n	8005b7c <DrawChar+0x8c>
 8005b7a:	3307      	adds	r3, #7
 8005b7c:	10db      	asrs	r3, r3, #3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d002      	beq.n	8005b88 <DrawChar+0x98>
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d004      	beq.n	8005b90 <DrawChar+0xa0>
 8005b86:	e00c      	b.n	8005ba2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	617b      	str	r3, [r7, #20]
      break;
 8005b8e:	e016      	b.n	8005bbe <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	3201      	adds	r2, #1
 8005b9a:	7812      	ldrb	r2, [r2, #0]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
      break;
 8005ba0:	e00d      	b.n	8005bbe <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	041a      	lsls	r2, r3, #16
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	3301      	adds	r3, #1
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	3202      	adds	r2, #2
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
      break;
 8005bbc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	e036      	b.n	8005c32 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005bc4:	8a3a      	ldrh	r2, [r7, #16]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	1ad2      	subs	r2, r2, r3
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	4413      	add	r3, r2
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d012      	beq.n	8005c06 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	4413      	add	r3, r2
 8005be8:	b298      	uxth	r0, r3
 8005bea:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <DrawChar+0x168>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	491b      	ldr	r1, [pc, #108]	; (8005c5c <DrawChar+0x16c>)
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	88bb      	ldrh	r3, [r7, #4]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f7ff fce2 	bl	80055c8 <BSP_LCD_DrawPixel>
 8005c04:	e012      	b.n	8005c2c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	b298      	uxth	r0, r3
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <DrawChar+0x168>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4911      	ldr	r1, [pc, #68]	; (8005c5c <DrawChar+0x16c>)
 8005c16:	4613      	mov	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3304      	adds	r3, #4
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	88bb      	ldrh	r3, [r7, #4]
 8005c26:	4619      	mov	r1, r3
 8005c28:	f7ff fcce 	bl	80055c8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	8a3b      	ldrh	r3, [r7, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d3c4      	bcc.n	8005bc4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8005c3a:	88bb      	ldrh	r3, [r7, #4]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	8a7b      	ldrh	r3, [r7, #18]
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d384      	bcc.n	8005b58 <DrawChar+0x68>
  }
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	2000081c 	.word	0x2000081c
 8005c5c:	20000820 	.word	0x20000820

08005c60 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005c6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005c70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005c74:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005c76:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <LL_FillBuffer+0x8c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <LL_FillBuffer+0x90>)
 8005c7c:	2134      	movs	r1, #52	; 0x34
 8005c7e:	fb01 f303 	mul.w	r3, r1, r3
 8005c82:	4413      	add	r3, r2
 8005c84:	3348      	adds	r3, #72	; 0x48
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d103      	bne.n	8005c94 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005c8c:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005c8e:	2202      	movs	r2, #2
 8005c90:	609a      	str	r2, [r3, #8]
 8005c92:	e002      	b.n	8005c9a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005c94:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005c9a:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005ca0:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <LL_FillBuffer+0x94>)
 8005ca4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8005ca6:	4810      	ldr	r0, [pc, #64]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005ca8:	f001 fe26 	bl	80078f8 <HAL_DMA2D_Init>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d115      	bne.n	8005cde <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005cb6:	f001 ff7d 	bl	8007bb4 <HAL_DMA2D_ConfigLayer>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10e      	bne.n	8005cde <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69f9      	ldr	r1, [r7, #28]
 8005cca:	4807      	ldr	r0, [pc, #28]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005ccc:	f001 fe5e 	bl	800798c <HAL_DMA2D_Start>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005cd6:	210a      	movs	r1, #10
 8005cd8:	4803      	ldr	r0, [pc, #12]	; (8005ce8 <LL_FillBuffer+0x88>)
 8005cda:	f001 fe82 	bl	80079e2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200007dc 	.word	0x200007dc
 8005cec:	2000081c 	.word	0x2000081c
 8005cf0:	20000734 	.word	0x20000734
 8005cf4:	4002b000 	.word	0x4002b000

08005cf8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005cfc:	4b29      	ldr	r3, [pc, #164]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005cfe:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <BSP_SDRAM_Init+0xb0>)
 8005d00:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <BSP_SDRAM_Init+0xb4>)
 8005d04:	2202      	movs	r2, #2
 8005d06:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005d08:	4b28      	ldr	r3, [pc, #160]	; (8005dac <BSP_SDRAM_Init+0xb4>)
 8005d0a:	2207      	movs	r2, #7
 8005d0c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005d0e:	4b27      	ldr	r3, [pc, #156]	; (8005dac <BSP_SDRAM_Init+0xb4>)
 8005d10:	2204      	movs	r2, #4
 8005d12:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005d14:	4b25      	ldr	r3, [pc, #148]	; (8005dac <BSP_SDRAM_Init+0xb4>)
 8005d16:	2207      	movs	r2, #7
 8005d18:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8005d1a:	4b24      	ldr	r3, [pc, #144]	; (8005dac <BSP_SDRAM_Init+0xb4>)
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005d20:	4b22      	ldr	r3, [pc, #136]	; (8005dac <BSP_SDRAM_Init+0xb4>)
 8005d22:	2202      	movs	r2, #2
 8005d24:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8005d26:	4b21      	ldr	r3, [pc, #132]	; (8005dac <BSP_SDRAM_Init+0xb4>)
 8005d28:	2202      	movs	r2, #2
 8005d2a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d40:	2210      	movs	r2, #16
 8005d42:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005d44:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d46:	2240      	movs	r2, #64	; 0x40
 8005d48:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d50:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005d58:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d5e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005d60:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005d68:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005d6e:	2100      	movs	r1, #0
 8005d70:	480c      	ldr	r0, [pc, #48]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d72:	f000 f87f 	bl	8005e74 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005d76:	490d      	ldr	r1, [pc, #52]	; (8005dac <BSP_SDRAM_Init+0xb4>)
 8005d78:	480a      	ldr	r0, [pc, #40]	; (8005da4 <BSP_SDRAM_Init+0xac>)
 8005d7a:	f005 fd05 	bl	800b788 <HAL_SDRAM_Init>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <BSP_SDRAM_Init+0xb8>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e002      	b.n	8005d92 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005d8c:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <BSP_SDRAM_Init+0xb8>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005d92:	f240 6003 	movw	r0, #1539	; 0x603
 8005d96:	f000 f80d 	bl	8005db4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <BSP_SDRAM_Init+0xb8>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	200008bc 	.word	0x200008bc
 8005da8:	a0000140 	.word	0xa0000140
 8005dac:	200008f0 	.word	0x200008f0
 8005db0:	20000018 	.word	0x20000018

08005db4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005dc0:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dc8:	2210      	movs	r2, #16
 8005dca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005dcc:	4b27      	ldr	r3, [pc, #156]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005dd2:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ddc:	4923      	ldr	r1, [pc, #140]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dde:	4824      	ldr	r0, [pc, #144]	; (8005e70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005de0:	f005 fd06 	bl	800b7f0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005de4:	2001      	movs	r0, #1
 8005de6:	f000 fcdd 	bl	80067a4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005dea:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dec:	2202      	movs	r2, #2
 8005dee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005df0:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005df2:	2210      	movs	r2, #16
 8005df4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e06:	4919      	ldr	r1, [pc, #100]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e08:	4819      	ldr	r0, [pc, #100]	; (8005e70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005e0a:	f005 fcf1 	bl	800b7f0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005e0e:	4b17      	ldr	r3, [pc, #92]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e10:	2203      	movs	r2, #3
 8005e12:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005e14:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e16:	2210      	movs	r2, #16
 8005e18:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005e20:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e2a:	4910      	ldr	r1, [pc, #64]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e2c:	4810      	ldr	r0, [pc, #64]	; (8005e70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005e2e:	f005 fcdf 	bl	800b7f0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005e32:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005e36:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005e38:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e40:	2210      	movs	r2, #16
 8005e42:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a07      	ldr	r2, [pc, #28]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e4e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e54:	4905      	ldr	r1, [pc, #20]	; (8005e6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005e56:	4806      	ldr	r0, [pc, #24]	; (8005e70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005e58:	f005 fcca 	bl	800b7f0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4804      	ldr	r0, [pc, #16]	; (8005e70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005e60:	f005 fcfb 	bl	800b85a <HAL_SDRAM_ProgramRefreshRate>
}
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000090c 	.word	0x2000090c
 8005e70:	200008bc 	.word	0x200008bc

08005e74 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b090      	sub	sp, #64	; 0x40
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e7e:	4b70      	ldr	r3, [pc, #448]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	4a6f      	ldr	r2, [pc, #444]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	6393      	str	r3, [r2, #56]	; 0x38
 8005e8a:	4b6d      	ldr	r3, [pc, #436]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005e96:	4b6a      	ldr	r3, [pc, #424]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	4a69      	ldr	r2, [pc, #420]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005e9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea2:	4b67      	ldr	r3, [pc, #412]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eae:	4b64      	ldr	r3, [pc, #400]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	4a63      	ldr	r2, [pc, #396]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eba:	4b61      	ldr	r3, [pc, #388]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ec6:	4b5e      	ldr	r3, [pc, #376]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	4a5d      	ldr	r2, [pc, #372]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005ecc:	f043 0308 	orr.w	r3, r3, #8
 8005ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ed2:	4b5b      	ldr	r3, [pc, #364]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ede:	4b58      	ldr	r3, [pc, #352]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	4a57      	ldr	r2, [pc, #348]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005ee4:	f043 0310 	orr.w	r3, r3, #16
 8005ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eea:	4b55      	ldr	r3, [pc, #340]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	4a51      	ldr	r2, [pc, #324]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005efc:	f043 0320 	orr.w	r3, r3, #32
 8005f00:	6313      	str	r3, [r2, #48]	; 0x30
 8005f02:	4b4f      	ldr	r3, [pc, #316]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f0e:	4b4c      	ldr	r3, [pc, #304]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	4a4b      	ldr	r2, [pc, #300]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f18:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1a:	4b49      	ldr	r3, [pc, #292]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f26:	4b46      	ldr	r3, [pc, #280]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	4a45      	ldr	r2, [pc, #276]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	6313      	str	r3, [r2, #48]	; 0x30
 8005f32:	4b43      	ldr	r3, [pc, #268]	; (8006040 <BSP_SDRAM_MspInit+0x1cc>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005f42:	2301      	movs	r3, #1
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005f46:	2302      	movs	r3, #2
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005f4a:	230c      	movs	r3, #12
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005f4e:	2308      	movs	r3, #8
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f56:	4619      	mov	r1, r3
 8005f58:	483a      	ldr	r0, [pc, #232]	; (8006044 <BSP_SDRAM_MspInit+0x1d0>)
 8005f5a:	f001 ff59 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005f5e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4837      	ldr	r0, [pc, #220]	; (8006048 <BSP_SDRAM_MspInit+0x1d4>)
 8005f6c:	f001 ff50 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005f70:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4833      	ldr	r0, [pc, #204]	; (800604c <BSP_SDRAM_MspInit+0x1d8>)
 8005f7e:	f001 ff47 	bl	8007e10 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005f82:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4830      	ldr	r0, [pc, #192]	; (8006050 <BSP_SDRAM_MspInit+0x1dc>)
 8005f90:	f001 ff3e 	bl	8007e10 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005f94:	f248 1333 	movw	r3, #33075	; 0x8133
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	482c      	ldr	r0, [pc, #176]	; (8006054 <BSP_SDRAM_MspInit+0x1e0>)
 8005fa2:	f001 ff35 	bl	8007e10 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005fa6:	2328      	movs	r3, #40	; 0x28
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4829      	ldr	r0, [pc, #164]	; (8006058 <BSP_SDRAM_MspInit+0x1e4>)
 8005fb2:	f001 ff2d 	bl	8007e10 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005fb6:	4b29      	ldr	r3, [pc, #164]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005fbc:	4b27      	ldr	r3, [pc, #156]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005fbe:	2280      	movs	r2, #128	; 0x80
 8005fc0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005fca:	4b24      	ldr	r3, [pc, #144]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fd0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005fd2:	4b22      	ldr	r3, [pc, #136]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fd8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005fda:	4b20      	ldr	r3, [pc, #128]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005fdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fe0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005fe2:	4b1e      	ldr	r3, [pc, #120]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fee:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005ff6:	4b19      	ldr	r3, [pc, #100]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005ffc:	4b17      	ldr	r3, [pc, #92]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006002:	4b16      	ldr	r3, [pc, #88]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006008:	4b14      	ldr	r3, [pc, #80]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 800600a:	4a15      	ldr	r2, [pc, #84]	; (8006060 <BSP_SDRAM_MspInit+0x1ec>)
 800600c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a12      	ldr	r2, [pc, #72]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
 8006014:	4a11      	ldr	r2, [pc, #68]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800601a:	4810      	ldr	r0, [pc, #64]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 800601c:	f001 f916 	bl	800724c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8006020:	480e      	ldr	r0, [pc, #56]	; (800605c <BSP_SDRAM_MspInit+0x1e8>)
 8006022:	f001 f865 	bl	80070f0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006026:	2200      	movs	r2, #0
 8006028:	210f      	movs	r1, #15
 800602a:	2038      	movs	r0, #56	; 0x38
 800602c:	f001 f829 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006030:	2038      	movs	r0, #56	; 0x38
 8006032:	f001 f842 	bl	80070ba <HAL_NVIC_EnableIRQ>
}
 8006036:	bf00      	nop
 8006038:	3740      	adds	r7, #64	; 0x40
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40023800 	.word	0x40023800
 8006044:	40020800 	.word	0x40020800
 8006048:	40020c00 	.word	0x40020c00
 800604c:	40021000 	.word	0x40021000
 8006050:	40021400 	.word	0x40021400
 8006054:	40021800 	.word	0x40021800
 8006058:	40021c00 	.word	0x40021c00
 800605c:	2000091c 	.word	0x2000091c
 8006060:	40026410 	.word	0x40026410

08006064 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	607a      	str	r2, [r7, #4]
 800606e:	461a      	mov	r2, r3
 8006070:	460b      	mov	r3, r1
 8006072:	72fb      	strb	r3, [r7, #11]
 8006074:	4613      	mov	r3, r2
 8006076:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685c      	ldr	r4, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68d8      	ldr	r0, [r3, #12]
 8006080:	893b      	ldrh	r3, [r7, #8]
 8006082:	7af9      	ldrb	r1, [r7, #11]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	47a0      	blx	r4
 8006088:	6178      	str	r0, [r7, #20]

  return ret;
 800608a:	697b      	ldr	r3, [r7, #20]
}
 800608c:	4618      	mov	r0, r3
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	bd90      	pop	{r4, r7, pc}

08006094 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006094:	b590      	push	{r4, r7, lr}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	461a      	mov	r2, r3
 80060a0:	460b      	mov	r3, r1
 80060a2:	72fb      	strb	r3, [r7, #11]
 80060a4:	4613      	mov	r3, r2
 80060a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681c      	ldr	r4, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68d8      	ldr	r0, [r3, #12]
 80060b0:	893b      	ldrh	r3, [r7, #8]
 80060b2:	7af9      	ldrb	r1, [r7, #11]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	47a0      	blx	r4
 80060b8:	6178      	str	r0, [r7, #20]

  return ret;
 80060ba:	697b      	ldr	r3, [r7, #20]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd90      	pop	{r4, r7, pc}

080060c4 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80060d0:	f107 0208 	add.w	r2, r7, #8
 80060d4:	2301      	movs	r3, #1
 80060d6:	2120      	movs	r1, #32
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff ffc3 	bl	8006064 <hts221_read_reg>
 80060de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10f      	bne.n	8006106 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	7a3b      	ldrb	r3, [r7, #8]
 80060f0:	f362 0301 	bfi	r3, r2, #0, #2
 80060f4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80060f6:	f107 0208 	add.w	r2, r7, #8
 80060fa:	2301      	movs	r3, #1
 80060fc:	2120      	movs	r1, #32
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff ffc8 	bl	8006094 <hts221_write_reg>
 8006104:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006106:	68fb      	ldr	r3, [r7, #12]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800611c:	f107 0208 	add.w	r2, r7, #8
 8006120:	2301      	movs	r3, #1
 8006122:	2120      	movs	r1, #32
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff ff9d 	bl	8006064 <hts221_read_reg>
 800612a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10f      	bne.n	8006152 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	7a3b      	ldrb	r3, [r7, #8]
 800613c:	f362 0382 	bfi	r3, r2, #2, #1
 8006140:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006142:	f107 0208 	add.w	r2, r7, #8
 8006146:	2301      	movs	r3, #1
 8006148:	2120      	movs	r1, #32
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ffa2 	bl	8006094 <hts221_write_reg>
 8006150:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8006166:	f107 0208 	add.w	r2, r7, #8
 800616a:	2302      	movs	r3, #2
 800616c:	2128      	movs	r1, #40	; 0x28
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff ff78 	bl	8006064 <hts221_read_reg>
 8006174:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8006176:	7a7b      	ldrb	r3, [r7, #9]
 8006178:	b21a      	sxth	r2, r3
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006184:	b29b      	uxth	r3, r3
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	b29a      	uxth	r2, r3
 800618a:	7a3b      	ldrb	r3, [r7, #8]
 800618c:	b29b      	uxth	r3, r3
 800618e:	4413      	add	r3, r2
 8006190:	b29b      	uxth	r3, r3
 8006192:	b21a      	sxth	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	801a      	strh	r2, [r3, #0]

  return ret;
 8006198:	68fb      	ldr	r3, [r7, #12]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80061ac:	f107 0208 	add.w	r2, r7, #8
 80061b0:	2302      	movs	r3, #2
 80061b2:	212a      	movs	r1, #42	; 0x2a
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff55 	bl	8006064 <hts221_read_reg>
 80061ba:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80061bc:	7a7b      	ldrb	r3, [r7, #9]
 80061be:	b21a      	sxth	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	7a3b      	ldrb	r3, [r7, #8]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	b21a      	sxth	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	801a      	strh	r2, [r3, #0]

  return ret;
 80061de:	68fb      	ldr	r3, [r7, #12]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80061f2:	2301      	movs	r3, #1
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	210f      	movs	r1, #15
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ff33 	bl	8006064 <hts221_read_reg>
 80061fe:	60f8      	str	r0, [r7, #12]

  return ret;
 8006200:	68fb      	ldr	r3, [r7, #12]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006216:	f107 0208 	add.w	r2, r7, #8
 800621a:	2301      	movs	r3, #1
 800621c:	2120      	movs	r1, #32
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ff20 	bl	8006064 <hts221_read_reg>
 8006224:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10f      	bne.n	800624c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	b2da      	uxtb	r2, r3
 8006234:	7a3b      	ldrb	r3, [r7, #8]
 8006236:	f362 13c7 	bfi	r3, r2, #7, #1
 800623a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800623c:	f107 0208 	add.w	r2, r7, #8
 8006240:	2301      	movs	r3, #1
 8006242:	2120      	movs	r1, #32
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff ff25 	bl	8006094 <hts221_write_reg>
 800624a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800624c:	68fb      	ldr	r3, [r7, #12]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 8006260:	2301      	movs	r3, #1
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	2127      	movs	r1, #39	; 0x27
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff fefc 	bl	8006064 <hts221_read_reg>
 800626c:	60f8      	str	r0, [r7, #12]

  return ret;
 800626e:	68fb      	ldr	r3, [r7, #12]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8006282:	f107 020b 	add.w	r2, r7, #11
 8006286:	2301      	movs	r3, #1
 8006288:	2130      	movs	r1, #48	; 0x30
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff feea 	bl	8006064 <hts221_read_reg>
 8006290:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8006292:	7afb      	ldrb	r3, [r7, #11]
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800629c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80062a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80062aa:	68fb      	ldr	r3, [r7, #12]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80062be:	f107 020b 	add.w	r2, r7, #11
 80062c2:	2301      	movs	r3, #1
 80062c4:	2131      	movs	r1, #49	; 0x31
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff fecc 	bl	8006064 <hts221_read_reg>
 80062cc:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80062ce:	7afb      	ldrb	r3, [r7, #11]
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80062dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80062e6:	68fb      	ldr	r3, [r7, #12]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80062fa:	f107 020f 	add.w	r2, r7, #15
 80062fe:	2301      	movs	r3, #1
 8006300:	2132      	movs	r1, #50	; 0x32
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff feae 	bl	8006064 <hts221_read_reg>
 8006308:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d11b      	bne.n	8006348 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006310:	f107 0210 	add.w	r2, r7, #16
 8006314:	2301      	movs	r3, #1
 8006316:	2135      	movs	r1, #53	; 0x35
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff fea3 	bl	8006064 <hts221_read_reg>
 800631e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8006320:	7c3b      	ldrb	r3, [r7, #16]
 8006322:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006326:	b2db      	uxtb	r3, r3
 8006328:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800632a:	7cfb      	ldrb	r3, [r7, #19]
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	7bfa      	ldrb	r2, [r7, #15]
 8006330:	4413      	add	r3, r2
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800633a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800633e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8006348:	697b      	ldr	r3, [r7, #20]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800635c:	f107 020f 	add.w	r2, r7, #15
 8006360:	2301      	movs	r3, #1
 8006362:	2133      	movs	r1, #51	; 0x33
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff fe7d 	bl	8006064 <hts221_read_reg>
 800636a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d11b      	bne.n	80063aa <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006372:	f107 0210 	add.w	r2, r7, #16
 8006376:	2301      	movs	r3, #1
 8006378:	2135      	movs	r1, #53	; 0x35
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff fe72 	bl	8006064 <hts221_read_reg>
 8006380:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8006382:	7c3b      	ldrb	r3, [r7, #16]
 8006384:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006388:	b2db      	uxtb	r3, r3
 800638a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800638c:	7cfb      	ldrb	r3, [r7, #19]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	4413      	add	r3, r2
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800639c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80063a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80063aa:	697b      	ldr	r3, [r7, #20]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80063be:	f107 0208 	add.w	r2, r7, #8
 80063c2:	2302      	movs	r3, #2
 80063c4:	2136      	movs	r1, #54	; 0x36
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fe4c 	bl	8006064 <hts221_read_reg>
 80063cc:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80063ce:	7a7b      	ldrb	r3, [r7, #9]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	7a3b      	ldrb	r3, [r7, #8]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	4413      	add	r3, r2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80063e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80063f2:	68fb      	ldr	r3, [r7, #12]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8006406:	f107 0208 	add.w	r2, r7, #8
 800640a:	2302      	movs	r3, #2
 800640c:	213a      	movs	r1, #58	; 0x3a
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff fe28 	bl	8006064 <hts221_read_reg>
 8006414:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006416:	7a7b      	ldrb	r3, [r7, #9]
 8006418:	b29b      	uxth	r3, r3
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	b29a      	uxth	r2, r3
 800641e:	7a3b      	ldrb	r3, [r7, #8]
 8006420:	b29b      	uxth	r3, r3
 8006422:	4413      	add	r3, r2
 8006424:	b29b      	uxth	r3, r3
 8006426:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006428:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800642c:	ee07 3a90 	vmov	s15, r3
 8006430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800643a:	68fb      	ldr	r3, [r7, #12]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800644e:	f107 0208 	add.w	r2, r7, #8
 8006452:	2302      	movs	r3, #2
 8006454:	213c      	movs	r1, #60	; 0x3c
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fe04 	bl	8006064 <hts221_read_reg>
 800645c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800645e:	7a7b      	ldrb	r3, [r7, #9]
 8006460:	b29b      	uxth	r3, r3
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	b29a      	uxth	r2, r3
 8006466:	7a3b      	ldrb	r3, [r7, #8]
 8006468:	b29b      	uxth	r3, r3
 800646a:	4413      	add	r3, r2
 800646c:	b29b      	uxth	r3, r3
 800646e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006470:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006482:	68fb      	ldr	r3, [r7, #12]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8006496:	f107 0208 	add.w	r2, r7, #8
 800649a:	2302      	movs	r3, #2
 800649c:	213e      	movs	r1, #62	; 0x3e
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fde0 	bl	8006064 <hts221_read_reg>
 80064a4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80064a6:	7a7b      	ldrb	r3, [r7, #9]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	7a3b      	ldrb	r3, [r7, #8]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	4413      	add	r3, r2
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80064b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80064bc:	ee07 3a90 	vmov	s15, r3
 80064c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80064ca:	68fb      	ldr	r3, [r7, #12]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	461a      	mov	r2, r3
 80064e0:	460b      	mov	r3, r1
 80064e2:	72fb      	strb	r3, [r7, #11]
 80064e4:	4613      	mov	r3, r2
 80064e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685c      	ldr	r4, [r3, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68d8      	ldr	r0, [r3, #12]
 80064f0:	893b      	ldrh	r3, [r7, #8]
 80064f2:	7af9      	ldrb	r1, [r7, #11]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	47a0      	blx	r4
 80064f8:	6178      	str	r0, [r7, #20]

  return ret;
 80064fa:	697b      	ldr	r3, [r7, #20]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	bd90      	pop	{r4, r7, pc}

08006504 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	607a      	str	r2, [r7, #4]
 800650e:	461a      	mov	r2, r3
 8006510:	460b      	mov	r3, r1
 8006512:	72fb      	strb	r3, [r7, #11]
 8006514:	4613      	mov	r3, r2
 8006516:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681c      	ldr	r4, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68d8      	ldr	r0, [r3, #12]
 8006520:	893b      	ldrh	r3, [r7, #8]
 8006522:	7af9      	ldrb	r1, [r7, #11]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	47a0      	blx	r4
 8006528:	6178      	str	r0, [r7, #20]

  return ret;
 800652a:	697b      	ldr	r3, [r7, #20]
}
 800652c:	4618      	mov	r0, r3
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	bd90      	pop	{r4, r7, pc}

08006534 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006560 <lps22hh_from_lsb_to_hpa+0x2c>
 800654a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800654e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006552:	eeb0 0a67 	vmov.f32	s0, s15
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	49800000 	.word	0x49800000

08006564 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006570:	f107 0208 	add.w	r2, r7, #8
 8006574:	2301      	movs	r3, #1
 8006576:	2110      	movs	r1, #16
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ffab 	bl	80064d4 <lps22hh_read_reg>
 800657e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10f      	bne.n	80065a6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	b2da      	uxtb	r2, r3
 800658e:	7a3b      	ldrb	r3, [r7, #8]
 8006590:	f362 0341 	bfi	r3, r2, #1, #1
 8006594:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006596:	f107 0208 	add.w	r2, r7, #8
 800659a:	2301      	movs	r3, #1
 800659c:	2110      	movs	r1, #16
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff ffb0 	bl	8006504 <lps22hh_write_reg>
 80065a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065a6:	68fb      	ldr	r3, [r7, #12]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80065bc:	f107 0210 	add.w	r2, r7, #16
 80065c0:	2301      	movs	r3, #1
 80065c2:	2110      	movs	r1, #16
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ff85 	bl	80064d4 <lps22hh_read_reg>
 80065ca:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d107      	bne.n	80065e2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80065d2:	f107 020c 	add.w	r2, r7, #12
 80065d6:	2301      	movs	r3, #1
 80065d8:	2111      	movs	r1, #17
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff ff7a 	bl	80064d4 <lps22hh_read_reg>
 80065e0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10f      	bne.n	8006608 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	7c3b      	ldrb	r3, [r7, #16]
 80065f2:	f362 1306 	bfi	r3, r2, #4, #3
 80065f6:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80065f8:	f107 0210 	add.w	r2, r7, #16
 80065fc:	2301      	movs	r3, #1
 80065fe:	2110      	movs	r1, #16
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ff7f 	bl	8006504 <lps22hh_write_reg>
 8006606:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d119      	bne.n	8006642 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	7b3b      	ldrb	r3, [r7, #12]
 800661a:	f362 0341 	bfi	r3, r2, #1, #1
 800661e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	7b3b      	ldrb	r3, [r7, #12]
 800662c:	f362 0300 	bfi	r3, r2, #0, #1
 8006630:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006632:	f107 020c 	add.w	r2, r7, #12
 8006636:	2301      	movs	r3, #1
 8006638:	2111      	movs	r1, #17
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff ff62 	bl	8006504 <lps22hh_write_reg>
 8006640:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006642:	697b      	ldr	r3, [r7, #20]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006656:	f107 0208 	add.w	r2, r7, #8
 800665a:	2303      	movs	r3, #3
 800665c:	2128      	movs	r1, #40	; 0x28
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff ff38 	bl	80064d4 <lps22hh_read_reg>
 8006664:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006666:	7abb      	ldrb	r3, [r7, #10]
 8006668:	461a      	mov	r2, r3
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	7a7a      	ldrb	r2, [r7, #9]
 8006676:	441a      	add	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	7a3a      	ldrb	r2, [r7, #8]
 8006684:	441a      	add	r2, r3
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	021a      	lsls	r2, r3, #8
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	601a      	str	r2, [r3, #0]

  return ret;
 8006694:	68fb      	ldr	r3, [r7, #12]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80066aa:	f107 0208 	add.w	r2, r7, #8
 80066ae:	2301      	movs	r3, #1
 80066b0:	2111      	movs	r1, #17
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff ff0e 	bl	80064d4 <lps22hh_read_reg>
 80066b8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10f      	bne.n	80066e0 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	7a3b      	ldrb	r3, [r7, #8]
 80066ca:	f362 0382 	bfi	r3, r2, #2, #1
 80066ce:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80066d0:	f107 0208 	add.w	r2, r7, #8
 80066d4:	2301      	movs	r3, #1
 80066d6:	2111      	movs	r1, #17
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff ff13 	bl	8006504 <lps22hh_write_reg>
 80066de:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066e0:	68fb      	ldr	r3, [r7, #12]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066ee:	2003      	movs	r0, #3
 80066f0:	f000 fcbc 	bl	800706c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066f4:	2000      	movs	r0, #0
 80066f6:	f000 f805 	bl	8006704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066fa:	f7fd fdb5 	bl	8004268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800670c:	4b12      	ldr	r3, [pc, #72]	; (8006758 <HAL_InitTick+0x54>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <HAL_InitTick+0x58>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800671a:	fbb3 f3f1 	udiv	r3, r3, r1
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fcd7 	bl	80070d6 <HAL_SYSTICK_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e00e      	b.n	8006750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b0f      	cmp	r3, #15
 8006736:	d80a      	bhi.n	800674e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006738:	2200      	movs	r2, #0
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	f000 fc9f 	bl	8007082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006744:	4a06      	ldr	r2, [pc, #24]	; (8006760 <HAL_InitTick+0x5c>)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	e000      	b.n	8006750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000004 	.word	0x20000004
 800675c:	20000020 	.word	0x20000020
 8006760:	2000001c 	.word	0x2000001c

08006764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006768:	4b06      	ldr	r3, [pc, #24]	; (8006784 <HAL_IncTick+0x20>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	4b06      	ldr	r3, [pc, #24]	; (8006788 <HAL_IncTick+0x24>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4413      	add	r3, r2
 8006774:	4a04      	ldr	r2, [pc, #16]	; (8006788 <HAL_IncTick+0x24>)
 8006776:	6013      	str	r3, [r2, #0]
}
 8006778:	bf00      	nop
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000020 	.word	0x20000020
 8006788:	2000097c 	.word	0x2000097c

0800678c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  return uwTick;
 8006790:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <HAL_GetTick+0x14>)
 8006792:	681b      	ldr	r3, [r3, #0]
}
 8006794:	4618      	mov	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	2000097c 	.word	0x2000097c

080067a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067ac:	f7ff ffee 	bl	800678c <HAL_GetTick>
 80067b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067bc:	d005      	beq.n	80067ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <HAL_Delay+0x44>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067ca:	bf00      	nop
 80067cc:	f7ff ffde 	bl	800678c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d8f7      	bhi.n	80067cc <HAL_Delay+0x28>
  {
  }
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000020 	.word	0x20000020

080067ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e031      	b.n	8006866 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fc f828 	bl	8002860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b00      	cmp	r3, #0
 8006828:	d116      	bne.n	8006858 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <HAL_ADC_Init+0x84>)
 8006830:	4013      	ands	r3, r2
 8006832:	f043 0202 	orr.w	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa4c 	bl	8006cd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	641a      	str	r2, [r3, #64]	; 0x40
 8006856:	e001      	b.n	800685c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	ffffeefd 	.word	0xffffeefd

08006874 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_ADC_Start+0x1a>
 800688a:	2302      	movs	r3, #2
 800688c:	e0ad      	b.n	80069ea <HAL_ADC_Start+0x176>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d018      	beq.n	80068d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80068b4:	4b50      	ldr	r3, [pc, #320]	; (80069f8 <HAL_ADC_Start+0x184>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a50      	ldr	r2, [pc, #320]	; (80069fc <HAL_ADC_Start+0x188>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	0c9a      	lsrs	r2, r3, #18
 80068c0:	4613      	mov	r3, r2
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	4413      	add	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80068c8:	e002      	b.n	80068d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f9      	bne.n	80068ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d175      	bne.n	80069d0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e8:	4b45      	ldr	r3, [pc, #276]	; (8006a00 <HAL_ADC_Start+0x18c>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d007      	beq.n	8006912 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800690a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800691a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691e:	d106      	bne.n	800692e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006924:	f023 0206 	bic.w	r2, r3, #6
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	645a      	str	r2, [r3, #68]	; 0x44
 800692c:	e002      	b.n	8006934 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006944:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006946:	4b2f      	ldr	r3, [pc, #188]	; (8006a04 <HAL_ADC_Start+0x190>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10f      	bne.n	8006972 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d143      	bne.n	80069e8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800696e:	609a      	str	r2, [r3, #8]
 8006970:	e03a      	b.n	80069e8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a24      	ldr	r2, [pc, #144]	; (8006a08 <HAL_ADC_Start+0x194>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d10e      	bne.n	800699a <HAL_ADC_Start+0x126>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d107      	bne.n	800699a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006998:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800699a:	4b1a      	ldr	r3, [pc, #104]	; (8006a04 <HAL_ADC_Start+0x190>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d120      	bne.n	80069e8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <HAL_ADC_Start+0x198>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d11b      	bne.n	80069e8 <HAL_ADC_Start+0x174>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d114      	bne.n	80069e8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069cc:	609a      	str	r2, [r3, #8]
 80069ce:	e00b      	b.n	80069e8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	f043 0210 	orr.w	r2, r3, #16
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e0:	f043 0201 	orr.w	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	20000004 	.word	0x20000004
 80069fc:	431bde83 	.word	0x431bde83
 8006a00:	fffff8fe 	.word	0xfffff8fe
 8006a04:	40012300 	.word	0x40012300
 8006a08:	40012000 	.word	0x40012000
 8006a0c:	40012200 	.word	0x40012200

08006a10 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_ADC_ConfigChannel+0x1c>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e136      	b.n	8006cb6 <HAL_ADC_ConfigChannel+0x28a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b09      	cmp	r3, #9
 8006a56:	d93a      	bls.n	8006ace <HAL_ADC_ConfigChannel+0xa2>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a60:	d035      	beq.n	8006ace <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68d9      	ldr	r1, [r3, #12]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4613      	mov	r3, r2
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	4413      	add	r3, r2
 8006a76:	3b1e      	subs	r3, #30
 8006a78:	2207      	movs	r2, #7
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	43da      	mvns	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	400a      	ands	r2, r1
 8006a86:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a8d      	ldr	r2, [pc, #564]	; (8006cc4 <HAL_ADC_ConfigChannel+0x298>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d10a      	bne.n	8006aa8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68d9      	ldr	r1, [r3, #12]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	061a      	lsls	r2, r3, #24
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006aa6:	e035      	b.n	8006b14 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68d9      	ldr	r1, [r3, #12]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	4618      	mov	r0, r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4403      	add	r3, r0
 8006ac0:	3b1e      	subs	r3, #30
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006acc:	e022      	b.n	8006b14 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6919      	ldr	r1, [r3, #16]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	4613      	mov	r3, r2
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	2207      	movs	r2, #7
 8006ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae8:	43da      	mvns	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	400a      	ands	r2, r1
 8006af0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6919      	ldr	r1, [r3, #16]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	4618      	mov	r0, r3
 8006b04:	4603      	mov	r3, r0
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4403      	add	r3, r0
 8006b0a:	409a      	lsls	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	d824      	bhi.n	8006b66 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3b05      	subs	r3, #5
 8006b2e:	221f      	movs	r2, #31
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	43da      	mvns	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	400a      	ands	r2, r1
 8006b3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	3b05      	subs	r3, #5
 8006b58:	fa00 f203 	lsl.w	r2, r0, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	635a      	str	r2, [r3, #52]	; 0x34
 8006b64:	e04c      	b.n	8006c00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b0c      	cmp	r3, #12
 8006b6c:	d824      	bhi.n	8006bb8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3b23      	subs	r3, #35	; 0x23
 8006b80:	221f      	movs	r2, #31
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43da      	mvns	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	400a      	ands	r2, r1
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3b23      	subs	r3, #35	; 0x23
 8006baa:	fa00 f203 	lsl.w	r2, r0, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8006bb6:	e023      	b.n	8006c00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3b41      	subs	r3, #65	; 0x41
 8006bca:	221f      	movs	r2, #31
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	43da      	mvns	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	400a      	ands	r2, r1
 8006bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4618      	mov	r0, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3b41      	subs	r3, #65	; 0x41
 8006bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a30      	ldr	r2, [pc, #192]	; (8006cc8 <HAL_ADC_ConfigChannel+0x29c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d10a      	bne.n	8006c20 <HAL_ADC_ConfigChannel+0x1f4>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c12:	d105      	bne.n	8006c20 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006c14:	4b2d      	ldr	r3, [pc, #180]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	4a2c      	ldr	r2, [pc, #176]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c1a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006c1e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a28      	ldr	r2, [pc, #160]	; (8006cc8 <HAL_ADC_ConfigChannel+0x29c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d10f      	bne.n	8006c4a <HAL_ADC_ConfigChannel+0x21e>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b12      	cmp	r3, #18
 8006c30:	d10b      	bne.n	8006c4a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006c32:	4b26      	ldr	r3, [pc, #152]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4a25      	ldr	r2, [pc, #148]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c3c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006c3e:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	4a22      	ldr	r2, [pc, #136]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c48:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <HAL_ADC_ConfigChannel+0x29c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d12b      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x280>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1a      	ldr	r2, [pc, #104]	; (8006cc4 <HAL_ADC_ConfigChannel+0x298>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <HAL_ADC_ConfigChannel+0x23a>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b11      	cmp	r3, #17
 8006c64:	d122      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006c66:	4b19      	ldr	r3, [pc, #100]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4a18      	ldr	r2, [pc, #96]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006c70:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006c72:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a0>)
 8006c78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c7c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a10      	ldr	r2, [pc, #64]	; (8006cc4 <HAL_ADC_ConfigChannel+0x298>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d111      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006c88:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <HAL_ADC_ConfigChannel+0x2a4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a11      	ldr	r2, [pc, #68]	; (8006cd4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c92:	0c9a      	lsrs	r2, r3, #18
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006c9e:	e002      	b.n	8006ca6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f9      	bne.n	8006ca0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	10000012 	.word	0x10000012
 8006cc8:	40012000 	.word	0x40012000
 8006ccc:	40012300 	.word	0x40012300
 8006cd0:	20000004 	.word	0x20000004
 8006cd4:	431bde83 	.word	0x431bde83

08006cd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006ce0:	4b78      	ldr	r3, [pc, #480]	; (8006ec4 <ADC_Init+0x1ec>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	4a77      	ldr	r2, [pc, #476]	; (8006ec4 <ADC_Init+0x1ec>)
 8006ce6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006cea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006cec:	4b75      	ldr	r3, [pc, #468]	; (8006ec4 <ADC_Init+0x1ec>)
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	4973      	ldr	r1, [pc, #460]	; (8006ec4 <ADC_Init+0x1ec>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	021a      	lsls	r2, r3, #8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6859      	ldr	r1, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6899      	ldr	r1, [r3, #8]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	4a58      	ldr	r2, [pc, #352]	; (8006ec8 <ADC_Init+0x1f0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d022      	beq.n	8006db2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6899      	ldr	r1, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6899      	ldr	r1, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	609a      	str	r2, [r3, #8]
 8006db0:	e00f      	b.n	8006dd2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006dd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0202 	bic.w	r2, r2, #2
 8006de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6899      	ldr	r1, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	005a      	lsls	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01b      	beq.n	8006e38 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6859      	ldr	r1, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	035a      	lsls	r2, r3, #13
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
 8006e36:	e007      	b.n	8006e48 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	051a      	lsls	r2, r3, #20
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6899      	ldr	r1, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e8a:	025a      	lsls	r2, r3, #9
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6899      	ldr	r1, [r3, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	029a      	lsls	r2, r3, #10
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	609a      	str	r2, [r3, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	40012300 	.word	0x40012300
 8006ec8:	0f000001 	.word	0x0f000001

08006ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <__NVIC_SetPriorityGrouping+0x40>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <__NVIC_SetPriorityGrouping+0x44>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <__NVIC_SetPriorityGrouping+0x40>)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	60d3      	str	r3, [r2, #12]
}
 8006f00:	bf00      	nop
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	e000ed00 	.word	0xe000ed00
 8006f10:	05fa0000 	.word	0x05fa0000

08006f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <__NVIC_GetPriorityGrouping+0x18>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	0a1b      	lsrs	r3, r3, #8
 8006f1e:	f003 0307 	and.w	r3, r3, #7
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	e000ed00 	.word	0xe000ed00

08006f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	db0b      	blt.n	8006f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	f003 021f 	and.w	r2, r3, #31
 8006f48:	4907      	ldr	r1, [pc, #28]	; (8006f68 <__NVIC_EnableIRQ+0x38>)
 8006f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	2001      	movs	r0, #1
 8006f52:	fa00 f202 	lsl.w	r2, r0, r2
 8006f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	e000e100 	.word	0xe000e100

08006f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	db0a      	blt.n	8006f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	490c      	ldr	r1, [pc, #48]	; (8006fb8 <__NVIC_SetPriority+0x4c>)
 8006f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8a:	0112      	lsls	r2, r2, #4
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	440b      	add	r3, r1
 8006f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f94:	e00a      	b.n	8006fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	4908      	ldr	r1, [pc, #32]	; (8006fbc <__NVIC_SetPriority+0x50>)
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	3b04      	subs	r3, #4
 8006fa4:	0112      	lsls	r2, r2, #4
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	440b      	add	r3, r1
 8006faa:	761a      	strb	r2, [r3, #24]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	e000e100 	.word	0xe000e100
 8006fbc:	e000ed00 	.word	0xe000ed00

08006fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	; 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f1c3 0307 	rsb	r3, r3, #7
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	bf28      	it	cs
 8006fde:	2304      	movcs	r3, #4
 8006fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d902      	bls.n	8006ff0 <NVIC_EncodePriority+0x30>
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3b03      	subs	r3, #3
 8006fee:	e000      	b.n	8006ff2 <NVIC_EncodePriority+0x32>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43da      	mvns	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	401a      	ands	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007008:	f04f 31ff 	mov.w	r1, #4294967295
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	fa01 f303 	lsl.w	r3, r1, r3
 8007012:	43d9      	mvns	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007018:	4313      	orrs	r3, r2
         );
}
 800701a:	4618      	mov	r0, r3
 800701c:	3724      	adds	r7, #36	; 0x24
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3b01      	subs	r3, #1
 8007034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007038:	d301      	bcc.n	800703e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800703a:	2301      	movs	r3, #1
 800703c:	e00f      	b.n	800705e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800703e:	4a0a      	ldr	r2, [pc, #40]	; (8007068 <SysTick_Config+0x40>)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3b01      	subs	r3, #1
 8007044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007046:	210f      	movs	r1, #15
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	f7ff ff8e 	bl	8006f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007050:	4b05      	ldr	r3, [pc, #20]	; (8007068 <SysTick_Config+0x40>)
 8007052:	2200      	movs	r2, #0
 8007054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007056:	4b04      	ldr	r3, [pc, #16]	; (8007068 <SysTick_Config+0x40>)
 8007058:	2207      	movs	r2, #7
 800705a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	e000e010 	.word	0xe000e010

0800706c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff ff29 	bl	8006ecc <__NVIC_SetPriorityGrouping>
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	4603      	mov	r3, r0
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007094:	f7ff ff3e 	bl	8006f14 <__NVIC_GetPriorityGrouping>
 8007098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	6978      	ldr	r0, [r7, #20]
 80070a0:	f7ff ff8e 	bl	8006fc0 <NVIC_EncodePriority>
 80070a4:	4602      	mov	r2, r0
 80070a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff ff5d 	bl	8006f6c <__NVIC_SetPriority>
}
 80070b2:	bf00      	nop
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	4603      	mov	r3, r0
 80070c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ff31 	bl	8006f30 <__NVIC_EnableIRQ>
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff ffa2 	bl	8007028 <SysTick_Config>
 80070e4:	4603      	mov	r3, r0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80070fc:	f7ff fb46 	bl	800678c <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e099      	b.n	8007240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800712c:	e00f      	b.n	800714e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800712e:	f7ff fb2d 	bl	800678c <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b05      	cmp	r3, #5
 800713a:	d908      	bls.n	800714e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2203      	movs	r2, #3
 8007146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e078      	b.n	8007240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e8      	bne.n	800712e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4b38      	ldr	r3, [pc, #224]	; (8007248 <HAL_DMA_Init+0x158>)
 8007168:	4013      	ands	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800717a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d107      	bne.n	80071b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	4313      	orrs	r3, r2
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d117      	bne.n	8007212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00e      	beq.n	8007212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb03 	bl	8007800 <DMA_CheckFifoParam>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2240      	movs	r2, #64	; 0x40
 8007204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800720e:	2301      	movs	r3, #1
 8007210:	e016      	b.n	8007240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 faba 	bl	8007794 <DMA_CalcBaseAndBitshift>
 8007220:	4603      	mov	r3, r0
 8007222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007228:	223f      	movs	r2, #63	; 0x3f
 800722a:	409a      	lsls	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	f010803f 	.word	0xf010803f

0800724c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e050      	b.n	8007300 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d101      	bne.n	800726e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800726a:	2302      	movs	r3, #2
 800726c:	e048      	b.n	8007300 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0201 	bic.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2200      	movs	r2, #0
 800728c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2221      	movs	r2, #33	; 0x21
 80072ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa70 	bl	8007794 <DMA_CalcBaseAndBitshift>
 80072b4:	4603      	mov	r3, r0
 80072b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	223f      	movs	r2, #63	; 0x3f
 80072be:	409a      	lsls	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_DMA_Start_IT+0x26>
 800732a:	2302      	movs	r3, #2
 800732c:	e048      	b.n	80073c0 <HAL_DMA_Start_IT+0xb8>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b01      	cmp	r3, #1
 8007340:	d137      	bne.n	80073b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2202      	movs	r2, #2
 8007346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f9ee 	bl	8007738 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007360:	223f      	movs	r2, #63	; 0x3f
 8007362:	409a      	lsls	r2, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0216 	orr.w	r2, r2, #22
 8007376:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695a      	ldr	r2, [r3, #20]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007386:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d007      	beq.n	80073a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0208 	orr.w	r2, r2, #8
 800739e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e005      	b.n	80073be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80073ba:	2302      	movs	r3, #2
 80073bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d004      	beq.n	80073e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2280      	movs	r2, #128	; 0x80
 80073e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e00c      	b.n	8007400 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2205      	movs	r2, #5
 80073ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0201 	bic.w	r2, r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007418:	4b8e      	ldr	r3, [pc, #568]	; (8007654 <HAL_DMA_IRQHandler+0x248>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a8e      	ldr	r2, [pc, #568]	; (8007658 <HAL_DMA_IRQHandler+0x24c>)
 800741e:	fba2 2303 	umull	r2, r3, r2, r3
 8007422:	0a9b      	lsrs	r3, r3, #10
 8007424:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007436:	2208      	movs	r2, #8
 8007438:	409a      	lsls	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4013      	ands	r3, r2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01a      	beq.n	8007478 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d013      	beq.n	8007478 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0204 	bic.w	r2, r2, #4
 800745e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007464:	2208      	movs	r2, #8
 8007466:	409a      	lsls	r2, r3
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007470:	f043 0201 	orr.w	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749a:	2201      	movs	r2, #1
 800749c:	409a      	lsls	r2, r3
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a6:	f043 0202 	orr.w	r2, r3, #2
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b2:	2204      	movs	r2, #4
 80074b4:	409a      	lsls	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4013      	ands	r3, r2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d012      	beq.n	80074e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d0:	2204      	movs	r2, #4
 80074d2:	409a      	lsls	r2, r3
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074dc:	f043 0204 	orr.w	r2, r3, #4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e8:	2210      	movs	r2, #16
 80074ea:	409a      	lsls	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d043      	beq.n	800757c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d03c      	beq.n	800757c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007506:	2210      	movs	r2, #16
 8007508:	409a      	lsls	r2, r3
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d018      	beq.n	800754e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d108      	bne.n	800753c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d024      	beq.n	800757c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
 800753a:	e01f      	b.n	800757c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01b      	beq.n	800757c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
 800754c:	e016      	b.n	800757c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007558:	2b00      	cmp	r3, #0
 800755a:	d107      	bne.n	800756c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0208 	bic.w	r2, r2, #8
 800756a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007580:	2220      	movs	r2, #32
 8007582:	409a      	lsls	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4013      	ands	r3, r2
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 808f 	beq.w	80076ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8087 	beq.w	80076ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a2:	2220      	movs	r2, #32
 80075a4:	409a      	lsls	r2, r3
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d136      	bne.n	8007624 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0216 	bic.w	r2, r2, #22
 80075c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	695a      	ldr	r2, [r3, #20]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d103      	bne.n	80075e6 <HAL_DMA_IRQHandler+0x1da>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0208 	bic.w	r2, r2, #8
 80075f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fa:	223f      	movs	r2, #63	; 0x3f
 80075fc:	409a      	lsls	r2, r3
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007616:	2b00      	cmp	r3, #0
 8007618:	d07e      	beq.n	8007718 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
        }
        return;
 8007622:	e079      	b.n	8007718 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01d      	beq.n	800766e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10d      	bne.n	800765c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	2b00      	cmp	r3, #0
 8007646:	d031      	beq.n	80076ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
 8007650:	e02c      	b.n	80076ac <HAL_DMA_IRQHandler+0x2a0>
 8007652:	bf00      	nop
 8007654:	20000004 	.word	0x20000004
 8007658:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d023      	beq.n	80076ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
 800766c:	e01e      	b.n	80076ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10f      	bne.n	800769c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0210 	bic.w	r2, r2, #16
 800768a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d032      	beq.n	800771a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d022      	beq.n	8007706 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2205      	movs	r2, #5
 80076c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	3301      	adds	r3, #1
 80076dc:	60bb      	str	r3, [r7, #8]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d307      	bcc.n	80076f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f2      	bne.n	80076d8 <HAL_DMA_IRQHandler+0x2cc>
 80076f2:	e000      	b.n	80076f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80076f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
 8007716:	e000      	b.n	800771a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007718:	bf00      	nop
    }
  }
}
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007754:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d108      	bne.n	8007778 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007776:	e007      	b.n	8007788 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	60da      	str	r2, [r3, #12]
}
 8007788:	bf00      	nop
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	3b10      	subs	r3, #16
 80077a4:	4a13      	ldr	r2, [pc, #76]	; (80077f4 <DMA_CalcBaseAndBitshift+0x60>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	091b      	lsrs	r3, r3, #4
 80077ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80077ae:	4a12      	ldr	r2, [pc, #72]	; (80077f8 <DMA_CalcBaseAndBitshift+0x64>)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4413      	add	r3, r2
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d908      	bls.n	80077d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <DMA_CalcBaseAndBitshift+0x68>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	1d1a      	adds	r2, r3, #4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	659a      	str	r2, [r3, #88]	; 0x58
 80077d2:	e006      	b.n	80077e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	4b08      	ldr	r3, [pc, #32]	; (80077fc <DMA_CalcBaseAndBitshift+0x68>)
 80077dc:	4013      	ands	r3, r2
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	aaaaaaab 	.word	0xaaaaaaab
 80077f8:	080183ec 	.word	0x080183ec
 80077fc:	fffffc00 	.word	0xfffffc00

08007800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d11f      	bne.n	800785a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d856      	bhi.n	80078ce <DMA_CheckFifoParam+0xce>
 8007820:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <DMA_CheckFifoParam+0x28>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	08007839 	.word	0x08007839
 800782c:	0800784b 	.word	0x0800784b
 8007830:	08007839 	.word	0x08007839
 8007834:	080078cf 	.word	0x080078cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d046      	beq.n	80078d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007848:	e043      	b.n	80078d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007852:	d140      	bne.n	80078d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007858:	e03d      	b.n	80078d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007862:	d121      	bne.n	80078a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d837      	bhi.n	80078da <DMA_CheckFifoParam+0xda>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <DMA_CheckFifoParam+0x70>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007881 	.word	0x08007881
 8007874:	08007887 	.word	0x08007887
 8007878:	08007881 	.word	0x08007881
 800787c:	08007899 	.word	0x08007899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	73fb      	strb	r3, [r7, #15]
      break;
 8007884:	e030      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d025      	beq.n	80078de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007896:	e022      	b.n	80078de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078a0:	d11f      	bne.n	80078e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80078a6:	e01c      	b.n	80078e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d903      	bls.n	80078b6 <DMA_CheckFifoParam+0xb6>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d003      	beq.n	80078bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80078b4:	e018      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ba:	e015      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00e      	beq.n	80078e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
      break;
 80078cc:	e00b      	b.n	80078e6 <DMA_CheckFifoParam+0xe6>
      break;
 80078ce:	bf00      	nop
 80078d0:	e00a      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
      break;
 80078d2:	bf00      	nop
 80078d4:	e008      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
      break;
 80078d6:	bf00      	nop
 80078d8:	e006      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
      break;
 80078da:	bf00      	nop
 80078dc:	e004      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
      break;
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <DMA_CheckFifoParam+0xe8>
      break;
 80078e6:	bf00      	nop
    }
  } 
  
  return status; 
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop

080078f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e039      	b.n	800797e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fb f92c 	bl	8002b7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007948:	f023 0107 	bic.w	r1, r3, #7
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <HAL_DMA2D_Init+0x90>)
 8007960:	4013      	ands	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68d1      	ldr	r1, [r2, #12]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	430b      	orrs	r3, r1
 800796c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	ffffc000 	.word	0xffffc000

0800798c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <HAL_DMA2D_Start+0x1c>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e018      	b.n	80079da <HAL_DMA2D_Start+0x4e>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f988 	bl	8007cd8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d056      	beq.n	8007aac <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80079fe:	f7fe fec5 	bl	800678c <HAL_GetTick>
 8007a02:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007a04:	e04b      	b.n	8007a9e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d023      	beq.n	8007a60 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a26:	f043 0202 	orr.w	r2, r3, #2
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d005      	beq.n	8007a44 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3c:	f043 0201 	orr.w	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2221      	movs	r2, #33	; 0x21
 8007a4a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2204      	movs	r2, #4
 8007a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0a5      	b.n	8007bac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d01a      	beq.n	8007a9e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a68:	f7fe fe90 	bl	800678c <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d302      	bcc.n	8007a7e <HAL_DMA2D_PollForTransfer+0x9c>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10f      	bne.n	8007a9e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	f043 0220 	orr.w	r2, r3, #32
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e086      	b.n	8007bac <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0ac      	beq.n	8007a06 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d061      	beq.n	8007b92 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ace:	f7fe fe5d 	bl	800678c <HAL_GetTick>
 8007ad2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007ad4:	e056      	b.n	8007b84 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d02e      	beq.n	8007b46 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af6:	f043 0204 	orr.w	r2, r3, #4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0c:	f043 0202 	orr.w	r2, r3, #2
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	f043 0201 	orr.w	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2229      	movs	r2, #41	; 0x29
 8007b30:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2204      	movs	r2, #4
 8007b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e032      	b.n	8007bac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d01a      	beq.n	8007b84 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b4e:	f7fe fe1d 	bl	800678c <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d302      	bcc.n	8007b64 <HAL_DMA2D_PollForTransfer+0x182>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10f      	bne.n	8007b84 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b68:	f043 0220 	orr.w	r2, r3, #32
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2203      	movs	r2, #3
 8007b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e013      	b.n	8007bac <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0a1      	beq.n	8007ad6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2212      	movs	r2, #18
 8007b98:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_DMA2D_ConfigLayer+0x20>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e079      	b.n	8007cc8 <HAL_DMA2D_ConfigLayer+0x114>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	3318      	adds	r3, #24
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	041b      	lsls	r3, r3, #16
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007bfe:	4b35      	ldr	r3, [pc, #212]	; (8007cd4 <HAL_DMA2D_ConfigLayer+0x120>)
 8007c00:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b0a      	cmp	r3, #10
 8007c08:	d003      	beq.n	8007c12 <HAL_DMA2D_ConfigLayer+0x5e>
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2b09      	cmp	r3, #9
 8007c10:	d107      	bne.n	8007c22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e005      	b.n	8007c2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	061b      	lsls	r3, r3, #24
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d120      	bne.n	8007c76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	ea02 0103 	and.w	r1, r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	6812      	ldr	r2, [r2, #0]
 8007c54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b0a      	cmp	r3, #10
 8007c5c:	d003      	beq.n	8007c66 <HAL_DMA2D_ConfigLayer+0xb2>
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b09      	cmp	r3, #9
 8007c64:	d127      	bne.n	8007cb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007c72:	629a      	str	r2, [r3, #40]	; 0x28
 8007c74:	e01f      	b.n	8007cb6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69da      	ldr	r2, [r3, #28]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	ea02 0103 	and.w	r1, r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b0a      	cmp	r3, #10
 8007c9e:	d003      	beq.n	8007ca8 <HAL_DMA2D_ConfigLayer+0xf4>
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2b09      	cmp	r3, #9
 8007ca6:	d106      	bne.n	8007cb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007cb4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	ff03000f 	.word	0xff03000f

08007cd8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b08b      	sub	sp, #44	; 0x2c
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cec:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	041a      	lsls	r2, r3, #16
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d10:	d174      	bne.n	8007dfc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d18:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d20:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d28:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d108      	bne.n	8007d4a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
 8007d48:	e053      	b.n	8007df2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d106      	bne.n	8007d60 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5e:	e048      	b.n	8007df2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d111      	bne.n	8007d8c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	0cdb      	lsrs	r3, r3, #19
 8007d6c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	0a9b      	lsrs	r3, r3, #10
 8007d72:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	08db      	lsrs	r3, r3, #3
 8007d78:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	02db      	lsls	r3, r3, #11
 8007d82:	4313      	orrs	r3, r2
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8a:	e032      	b.n	8007df2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d117      	bne.n	8007dc4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	0fdb      	lsrs	r3, r3, #31
 8007d98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	0cdb      	lsrs	r3, r3, #19
 8007d9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	0adb      	lsrs	r3, r3, #11
 8007da4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	08db      	lsrs	r3, r3, #3
 8007daa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	029b      	lsls	r3, r3, #10
 8007db4:	431a      	orrs	r2, r3
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	03db      	lsls	r3, r3, #15
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc2:	e016      	b.n	8007df2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	0f1b      	lsrs	r3, r3, #28
 8007dc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	0d1b      	lsrs	r3, r3, #20
 8007dce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	0b1b      	lsrs	r3, r3, #12
 8007dd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	011a      	lsls	r2, r3, #4
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	431a      	orrs	r2, r3
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	031b      	lsls	r3, r3, #12
 8007dea:	4313      	orrs	r3, r2
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007dfa:	e003      	b.n	8007e04 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	60da      	str	r2, [r3, #12]
}
 8007e04:	bf00      	nop
 8007e06:	372c      	adds	r7, #44	; 0x2c
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b089      	sub	sp, #36	; 0x24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
 8007e2e:	e175      	b.n	800811c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007e30:	2201      	movs	r2, #1
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4013      	ands	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	f040 8164 	bne.w	8008116 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d005      	beq.n	8007e66 <HAL_GPIO_Init+0x56>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d130      	bne.n	8007ec8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	2203      	movs	r2, #3
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	43db      	mvns	r3, r3
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	43db      	mvns	r3, r3
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	091b      	lsrs	r3, r3, #4
 8007eb2:	f003 0201 	and.w	r2, r3, #1
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d017      	beq.n	8007f04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	2203      	movs	r2, #3
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	43db      	mvns	r3, r3
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	4013      	ands	r3, r2
 8007eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d123      	bne.n	8007f58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	08da      	lsrs	r2, r3, #3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3208      	adds	r2, #8
 8007f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	220f      	movs	r2, #15
 8007f28:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	4013      	ands	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	08da      	lsrs	r2, r3, #3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3208      	adds	r2, #8
 8007f52:	69b9      	ldr	r1, [r7, #24]
 8007f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	2203      	movs	r2, #3
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	43db      	mvns	r3, r3
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f003 0203 	and.w	r2, r3, #3
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80be 	beq.w	8008116 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f9a:	4b66      	ldr	r3, [pc, #408]	; (8008134 <HAL_GPIO_Init+0x324>)
 8007f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9e:	4a65      	ldr	r2, [pc, #404]	; (8008134 <HAL_GPIO_Init+0x324>)
 8007fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8007fa6:	4b63      	ldr	r3, [pc, #396]	; (8008134 <HAL_GPIO_Init+0x324>)
 8007fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007fb2:	4a61      	ldr	r2, [pc, #388]	; (8008138 <HAL_GPIO_Init+0x328>)
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	089b      	lsrs	r3, r3, #2
 8007fb8:	3302      	adds	r3, #2
 8007fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f003 0303 	and.w	r3, r3, #3
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	220f      	movs	r2, #15
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a58      	ldr	r2, [pc, #352]	; (800813c <HAL_GPIO_Init+0x32c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d037      	beq.n	800804e <HAL_GPIO_Init+0x23e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a57      	ldr	r2, [pc, #348]	; (8008140 <HAL_GPIO_Init+0x330>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d031      	beq.n	800804a <HAL_GPIO_Init+0x23a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a56      	ldr	r2, [pc, #344]	; (8008144 <HAL_GPIO_Init+0x334>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d02b      	beq.n	8008046 <HAL_GPIO_Init+0x236>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a55      	ldr	r2, [pc, #340]	; (8008148 <HAL_GPIO_Init+0x338>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d025      	beq.n	8008042 <HAL_GPIO_Init+0x232>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a54      	ldr	r2, [pc, #336]	; (800814c <HAL_GPIO_Init+0x33c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d01f      	beq.n	800803e <HAL_GPIO_Init+0x22e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a53      	ldr	r2, [pc, #332]	; (8008150 <HAL_GPIO_Init+0x340>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d019      	beq.n	800803a <HAL_GPIO_Init+0x22a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a52      	ldr	r2, [pc, #328]	; (8008154 <HAL_GPIO_Init+0x344>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d013      	beq.n	8008036 <HAL_GPIO_Init+0x226>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a51      	ldr	r2, [pc, #324]	; (8008158 <HAL_GPIO_Init+0x348>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00d      	beq.n	8008032 <HAL_GPIO_Init+0x222>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a50      	ldr	r2, [pc, #320]	; (800815c <HAL_GPIO_Init+0x34c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <HAL_GPIO_Init+0x21e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a4f      	ldr	r2, [pc, #316]	; (8008160 <HAL_GPIO_Init+0x350>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d101      	bne.n	800802a <HAL_GPIO_Init+0x21a>
 8008026:	2309      	movs	r3, #9
 8008028:	e012      	b.n	8008050 <HAL_GPIO_Init+0x240>
 800802a:	230a      	movs	r3, #10
 800802c:	e010      	b.n	8008050 <HAL_GPIO_Init+0x240>
 800802e:	2308      	movs	r3, #8
 8008030:	e00e      	b.n	8008050 <HAL_GPIO_Init+0x240>
 8008032:	2307      	movs	r3, #7
 8008034:	e00c      	b.n	8008050 <HAL_GPIO_Init+0x240>
 8008036:	2306      	movs	r3, #6
 8008038:	e00a      	b.n	8008050 <HAL_GPIO_Init+0x240>
 800803a:	2305      	movs	r3, #5
 800803c:	e008      	b.n	8008050 <HAL_GPIO_Init+0x240>
 800803e:	2304      	movs	r3, #4
 8008040:	e006      	b.n	8008050 <HAL_GPIO_Init+0x240>
 8008042:	2303      	movs	r3, #3
 8008044:	e004      	b.n	8008050 <HAL_GPIO_Init+0x240>
 8008046:	2302      	movs	r3, #2
 8008048:	e002      	b.n	8008050 <HAL_GPIO_Init+0x240>
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <HAL_GPIO_Init+0x240>
 800804e:	2300      	movs	r3, #0
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	f002 0203 	and.w	r2, r2, #3
 8008056:	0092      	lsls	r2, r2, #2
 8008058:	4093      	lsls	r3, r2
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	4313      	orrs	r3, r2
 800805e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008060:	4935      	ldr	r1, [pc, #212]	; (8008138 <HAL_GPIO_Init+0x328>)
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	089b      	lsrs	r3, r3, #2
 8008066:	3302      	adds	r3, #2
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800806e:	4b3d      	ldr	r3, [pc, #244]	; (8008164 <HAL_GPIO_Init+0x354>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	43db      	mvns	r3, r3
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	4013      	ands	r3, r2
 800807c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008092:	4a34      	ldr	r2, [pc, #208]	; (8008164 <HAL_GPIO_Init+0x354>)
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008098:	4b32      	ldr	r3, [pc, #200]	; (8008164 <HAL_GPIO_Init+0x354>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	43db      	mvns	r3, r3
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	4013      	ands	r3, r2
 80080a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080bc:	4a29      	ldr	r2, [pc, #164]	; (8008164 <HAL_GPIO_Init+0x354>)
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080c2:	4b28      	ldr	r3, [pc, #160]	; (8008164 <HAL_GPIO_Init+0x354>)
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	43db      	mvns	r3, r3
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	4013      	ands	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080e6:	4a1f      	ldr	r2, [pc, #124]	; (8008164 <HAL_GPIO_Init+0x354>)
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080ec:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <HAL_GPIO_Init+0x354>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	4013      	ands	r3, r2
 80080fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	4313      	orrs	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008110:	4a14      	ldr	r2, [pc, #80]	; (8008164 <HAL_GPIO_Init+0x354>)
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	3301      	adds	r3, #1
 800811a:	61fb      	str	r3, [r7, #28]
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2b0f      	cmp	r3, #15
 8008120:	f67f ae86 	bls.w	8007e30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	3724      	adds	r7, #36	; 0x24
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40023800 	.word	0x40023800
 8008138:	40013800 	.word	0x40013800
 800813c:	40020000 	.word	0x40020000
 8008140:	40020400 	.word	0x40020400
 8008144:	40020800 	.word	0x40020800
 8008148:	40020c00 	.word	0x40020c00
 800814c:	40021000 	.word	0x40021000
 8008150:	40021400 	.word	0x40021400
 8008154:	40021800 	.word	0x40021800
 8008158:	40021c00 	.word	0x40021c00
 800815c:	40022000 	.word	0x40022000
 8008160:	40022400 	.word	0x40022400
 8008164:	40013c00 	.word	0x40013c00

08008168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	887b      	ldrh	r3, [r7, #2]
 800817a:	4013      	ands	r3, r2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008180:	2301      	movs	r3, #1
 8008182:	73fb      	strb	r3, [r7, #15]
 8008184:	e001      	b.n	800818a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	807b      	strh	r3, [r7, #2]
 80081a4:	4613      	mov	r3, r2
 80081a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081a8:	787b      	ldrb	r3, [r7, #1]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081ae:	887a      	ldrh	r2, [r7, #2]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80081b4:	e003      	b.n	80081be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80081b6:	887b      	ldrh	r3, [r7, #2]
 80081b8:	041a      	lsls	r2, r3, #16
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	619a      	str	r2, [r3, #24]
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
	...

080081cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80081d8:	695a      	ldr	r2, [r3, #20]
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	4013      	ands	r3, r2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d006      	beq.n	80081f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081e2:	4a05      	ldr	r2, [pc, #20]	; (80081f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 f806 	bl	80081fc <HAL_GPIO_EXTI_Callback>
  }
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	40013c00 	.word	0x40013c00

080081fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e07f      	b.n	8008326 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7fa ff46 	bl	80030cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2224      	movs	r2, #36	; 0x24
 8008244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0201 	bic.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800828a:	609a      	str	r2, [r3, #8]
 800828c:	e006      	b.n	800829c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689a      	ldr	r2, [r3, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800829a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d104      	bne.n	80082ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <HAL_I2C_Init+0x11c>)
 80082ba:	430b      	orrs	r3, r1
 80082bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	69d9      	ldr	r1, [r3, #28]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1a      	ldr	r2, [r3, #32]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0201 	orr.w	r2, r2, #1
 8008306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	02008000 	.word	0x02008000

08008334 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af02      	add	r7, sp, #8
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	4608      	mov	r0, r1
 800833e:	4611      	mov	r1, r2
 8008340:	461a      	mov	r2, r3
 8008342:	4603      	mov	r3, r0
 8008344:	817b      	strh	r3, [r7, #10]
 8008346:	460b      	mov	r3, r1
 8008348:	813b      	strh	r3, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b20      	cmp	r3, #32
 8008358:	f040 80f9 	bne.w	800854e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_I2C_Mem_Write+0x34>
 8008362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d105      	bne.n	8008374 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800836e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e0ed      	b.n	8008550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800837a:	2b01      	cmp	r3, #1
 800837c:	d101      	bne.n	8008382 <HAL_I2C_Mem_Write+0x4e>
 800837e:	2302      	movs	r3, #2
 8008380:	e0e6      	b.n	8008550 <HAL_I2C_Mem_Write+0x21c>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800838a:	f7fe f9ff 	bl	800678c <HAL_GetTick>
 800838e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	2319      	movs	r3, #25
 8008396:	2201      	movs	r2, #1
 8008398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fac3 	bl	8008928 <I2C_WaitOnFlagUntilTimeout>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0d1      	b.n	8008550 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2221      	movs	r2, #33	; 0x21
 80083b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2240      	movs	r2, #64	; 0x40
 80083b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a3a      	ldr	r2, [r7, #32]
 80083c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083d4:	88f8      	ldrh	r0, [r7, #6]
 80083d6:	893a      	ldrh	r2, [r7, #8]
 80083d8:	8979      	ldrh	r1, [r7, #10]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4603      	mov	r3, r0
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 f9d3 	bl	8008790 <I2C_RequestMemoryWrite>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e0a9      	b.n	8008550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008400:	b29b      	uxth	r3, r3
 8008402:	2bff      	cmp	r3, #255	; 0xff
 8008404:	d90e      	bls.n	8008424 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	22ff      	movs	r2, #255	; 0xff
 800840a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008410:	b2da      	uxtb	r2, r3
 8008412:	8979      	ldrh	r1, [r7, #10]
 8008414:	2300      	movs	r3, #0
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 fc1f 	bl	8008c60 <I2C_TransferConfig>
 8008422:	e00f      	b.n	8008444 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008432:	b2da      	uxtb	r2, r3
 8008434:	8979      	ldrh	r1, [r7, #10]
 8008436:	2300      	movs	r3, #0
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fc0e 	bl	8008c60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 faad 	bl	80089a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e07b      	b.n	8008550 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	781a      	ldrb	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008472:	b29b      	uxth	r3, r3
 8008474:	3b01      	subs	r3, #1
 8008476:	b29a      	uxth	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d034      	beq.n	80084fc <HAL_I2C_Mem_Write+0x1c8>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008496:	2b00      	cmp	r3, #0
 8008498:	d130      	bne.n	80084fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	2200      	movs	r2, #0
 80084a2:	2180      	movs	r1, #128	; 0x80
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fa3f 	bl	8008928 <I2C_WaitOnFlagUntilTimeout>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e04d      	b.n	8008550 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	2bff      	cmp	r3, #255	; 0xff
 80084bc:	d90e      	bls.n	80084dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	22ff      	movs	r2, #255	; 0xff
 80084c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	8979      	ldrh	r1, [r7, #10]
 80084cc:	2300      	movs	r3, #0
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 fbc3 	bl	8008c60 <I2C_TransferConfig>
 80084da:	e00f      	b.n	80084fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	8979      	ldrh	r1, [r7, #10]
 80084ee:	2300      	movs	r3, #0
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fbb2 	bl	8008c60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d19e      	bne.n	8008444 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 fa8c 	bl	8008a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e01a      	b.n	8008550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2220      	movs	r2, #32
 8008520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6859      	ldr	r1, [r3, #4]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <HAL_I2C_Mem_Write+0x224>)
 800852e:	400b      	ands	r3, r1
 8008530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2220      	movs	r2, #32
 8008536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	e000      	b.n	8008550 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800854e:	2302      	movs	r3, #2
  }
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	fe00e800 	.word	0xfe00e800

0800855c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	461a      	mov	r2, r3
 800856a:	4603      	mov	r3, r0
 800856c:	817b      	strh	r3, [r7, #10]
 800856e:	460b      	mov	r3, r1
 8008570:	813b      	strh	r3, [r7, #8]
 8008572:	4613      	mov	r3, r2
 8008574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b20      	cmp	r3, #32
 8008580:	f040 80fd 	bne.w	800877e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_I2C_Mem_Read+0x34>
 800858a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008596:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e0f1      	b.n	8008780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d101      	bne.n	80085aa <HAL_I2C_Mem_Read+0x4e>
 80085a6:	2302      	movs	r3, #2
 80085a8:	e0ea      	b.n	8008780 <HAL_I2C_Mem_Read+0x224>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085b2:	f7fe f8eb 	bl	800678c <HAL_GetTick>
 80085b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	2319      	movs	r3, #25
 80085be:	2201      	movs	r2, #1
 80085c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f9af 	bl	8008928 <I2C_WaitOnFlagUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e0d5      	b.n	8008780 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2222      	movs	r2, #34	; 0x22
 80085d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2240      	movs	r2, #64	; 0x40
 80085e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a3a      	ldr	r2, [r7, #32]
 80085ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085fc:	88f8      	ldrh	r0, [r7, #6]
 80085fe:	893a      	ldrh	r2, [r7, #8]
 8008600:	8979      	ldrh	r1, [r7, #10]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	4603      	mov	r3, r0
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 f913 	bl	8008838 <I2C_RequestMemoryRead>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e0ad      	b.n	8008780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008628:	b29b      	uxth	r3, r3
 800862a:	2bff      	cmp	r3, #255	; 0xff
 800862c:	d90e      	bls.n	800864c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	22ff      	movs	r2, #255	; 0xff
 8008632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008638:	b2da      	uxtb	r2, r3
 800863a:	8979      	ldrh	r1, [r7, #10]
 800863c:	4b52      	ldr	r3, [pc, #328]	; (8008788 <HAL_I2C_Mem_Read+0x22c>)
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 fb0b 	bl	8008c60 <I2C_TransferConfig>
 800864a:	e00f      	b.n	800866c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008650:	b29a      	uxth	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800865a:	b2da      	uxtb	r2, r3
 800865c:	8979      	ldrh	r1, [r7, #10]
 800865e:	4b4a      	ldr	r3, [pc, #296]	; (8008788 <HAL_I2C_Mem_Read+0x22c>)
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fafa 	bl	8008c60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	2200      	movs	r2, #0
 8008674:	2104      	movs	r1, #4
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f956 	bl	8008928 <I2C_WaitOnFlagUntilTimeout>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e07c      	b.n	8008780 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d034      	beq.n	800872c <HAL_I2C_Mem_Read+0x1d0>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d130      	bne.n	800872c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2200      	movs	r2, #0
 80086d2:	2180      	movs	r1, #128	; 0x80
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f927 	bl	8008928 <I2C_WaitOnFlagUntilTimeout>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e04d      	b.n	8008780 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2bff      	cmp	r3, #255	; 0xff
 80086ec:	d90e      	bls.n	800870c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	22ff      	movs	r2, #255	; 0xff
 80086f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	8979      	ldrh	r1, [r7, #10]
 80086fc:	2300      	movs	r3, #0
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 faab 	bl	8008c60 <I2C_TransferConfig>
 800870a:	e00f      	b.n	800872c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008710:	b29a      	uxth	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800871a:	b2da      	uxtb	r2, r3
 800871c:	8979      	ldrh	r1, [r7, #10]
 800871e:	2300      	movs	r3, #0
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fa9a 	bl	8008c60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d19a      	bne.n	800866c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f974 	bl	8008a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e01a      	b.n	8008780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2220      	movs	r2, #32
 8008750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6859      	ldr	r1, [r3, #4]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	4b0b      	ldr	r3, [pc, #44]	; (800878c <HAL_I2C_Mem_Read+0x230>)
 800875e:	400b      	ands	r3, r1
 8008760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2220      	movs	r2, #32
 8008766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	e000      	b.n	8008780 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800877e:	2302      	movs	r3, #2
  }
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	80002400 	.word	0x80002400
 800878c:	fe00e800 	.word	0xfe00e800

08008790 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af02      	add	r7, sp, #8
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	461a      	mov	r2, r3
 800879e:	4603      	mov	r3, r0
 80087a0:	817b      	strh	r3, [r7, #10]
 80087a2:	460b      	mov	r3, r1
 80087a4:	813b      	strh	r3, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80087aa:	88fb      	ldrh	r3, [r7, #6]
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	8979      	ldrh	r1, [r7, #10]
 80087b0:	4b20      	ldr	r3, [pc, #128]	; (8008834 <I2C_RequestMemoryWrite+0xa4>)
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fa51 	bl	8008c60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	69b9      	ldr	r1, [r7, #24]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f8f0 	bl	80089a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e02c      	b.n	800882c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d105      	bne.n	80087e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087d8:	893b      	ldrh	r3, [r7, #8]
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	629a      	str	r2, [r3, #40]	; 0x28
 80087e2:	e015      	b.n	8008810 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80087e4:	893b      	ldrh	r3, [r7, #8]
 80087e6:	0a1b      	lsrs	r3, r3, #8
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	69b9      	ldr	r1, [r7, #24]
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 f8d6 	bl	80089a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e012      	b.n	800882c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008806:	893b      	ldrh	r3, [r7, #8]
 8008808:	b2da      	uxtb	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	2200      	movs	r2, #0
 8008818:	2180      	movs	r1, #128	; 0x80
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f884 	bl	8008928 <I2C_WaitOnFlagUntilTimeout>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e000      	b.n	800882c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	80002000 	.word	0x80002000

08008838 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	461a      	mov	r2, r3
 8008846:	4603      	mov	r3, r0
 8008848:	817b      	strh	r3, [r7, #10]
 800884a:	460b      	mov	r3, r1
 800884c:	813b      	strh	r3, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008852:	88fb      	ldrh	r3, [r7, #6]
 8008854:	b2da      	uxtb	r2, r3
 8008856:	8979      	ldrh	r1, [r7, #10]
 8008858:	4b20      	ldr	r3, [pc, #128]	; (80088dc <I2C_RequestMemoryRead+0xa4>)
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	2300      	movs	r3, #0
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f9fe 	bl	8008c60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	69b9      	ldr	r1, [r7, #24]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f89d 	bl	80089a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e02c      	b.n	80088d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d105      	bne.n	800888a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800887e:	893b      	ldrh	r3, [r7, #8]
 8008880:	b2da      	uxtb	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	629a      	str	r2, [r3, #40]	; 0x28
 8008888:	e015      	b.n	80088b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800888a:	893b      	ldrh	r3, [r7, #8]
 800888c:	0a1b      	lsrs	r3, r3, #8
 800888e:	b29b      	uxth	r3, r3
 8008890:	b2da      	uxtb	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	69b9      	ldr	r1, [r7, #24]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f883 	bl	80089a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e012      	b.n	80088d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088ac:	893b      	ldrh	r3, [r7, #8]
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2200      	movs	r2, #0
 80088be:	2140      	movs	r1, #64	; 0x40
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 f831 	bl	8008928 <I2C_WaitOnFlagUntilTimeout>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e000      	b.n	80088d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	80002000 	.word	0x80002000

080088e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d103      	bne.n	80088fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2200      	movs	r2, #0
 80088fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b01      	cmp	r3, #1
 800890a:	d007      	beq.n	800891c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
 800891a:	619a      	str	r2, [r3, #24]
  }
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	4613      	mov	r3, r2
 8008936:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008938:	e022      	b.n	8008980 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d01e      	beq.n	8008980 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008942:	f7fd ff23 	bl	800678c <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d302      	bcc.n	8008958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d113      	bne.n	8008980 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895c:	f043 0220 	orr.w	r2, r3, #32
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e00f      	b.n	80089a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	4013      	ands	r3, r2
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	429a      	cmp	r2, r3
 800898e:	bf0c      	ite	eq
 8008990:	2301      	moveq	r3, #1
 8008992:	2300      	movne	r3, #0
 8008994:	b2db      	uxtb	r3, r3
 8008996:	461a      	mov	r2, r3
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	429a      	cmp	r2, r3
 800899c:	d0cd      	beq.n	800893a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80089b4:	e02c      	b.n	8008a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 f870 	bl	8008aa0 <I2C_IsErrorOccurred>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e02a      	b.n	8008a20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d0:	d01e      	beq.n	8008a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d2:	f7fd fedb 	bl	800678c <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d113      	bne.n	8008a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ec:	f043 0220 	orr.w	r2, r3, #32
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e007      	b.n	8008a20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d1cb      	bne.n	80089b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a34:	e028      	b.n	8008a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 f830 	bl	8008aa0 <I2C_IsErrorOccurred>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e026      	b.n	8008a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a4a:	f7fd fe9f 	bl	800678c <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d302      	bcc.n	8008a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d113      	bne.n	8008a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a64:	f043 0220 	orr.w	r2, r3, #32
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e007      	b.n	8008a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	f003 0320 	and.w	r3, r3, #32
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	d1cf      	bne.n	8008a36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	; 0x28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d068      	beq.n	8008b9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2210      	movs	r2, #16
 8008ad2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ad4:	e049      	b.n	8008b6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d045      	beq.n	8008b6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ade:	f7fd fe55 	bl	800678c <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d302      	bcc.n	8008af4 <I2C_IsErrorOccurred+0x54>
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d13a      	bne.n	8008b6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008afe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b16:	d121      	bne.n	8008b5c <I2C_IsErrorOccurred+0xbc>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b1e:	d01d      	beq.n	8008b5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008b20:	7cfb      	ldrb	r3, [r7, #19]
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d01a      	beq.n	8008b5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008b36:	f7fd fe29 	bl	800678c <HAL_GetTick>
 8008b3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b3c:	e00e      	b.n	8008b5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008b3e:	f7fd fe25 	bl	800678c <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	2b19      	cmp	r3, #25
 8008b4a:	d907      	bls.n	8008b5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	f043 0320 	orr.w	r3, r3, #32
 8008b52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008b5a:	e006      	b.n	8008b6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d1e9      	bne.n	8008b3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d003      	beq.n	8008b80 <I2C_IsErrorOccurred+0xe0>
 8008b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0aa      	beq.n	8008ad6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d103      	bne.n	8008b90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	f043 0304 	orr.w	r3, r3, #4
 8008b96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	f043 0301 	orr.w	r3, r3, #1
 8008bb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	f043 0308 	orr.w	r3, r3, #8
 8008bd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008be2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00b      	beq.n	8008c0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	f043 0302 	orr.w	r3, r3, #2
 8008bfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01c      	beq.n	8008c4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f7ff fe63 	bl	80088e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6859      	ldr	r1, [r3, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <I2C_IsErrorOccurred+0x1bc>)
 8008c26:	400b      	ands	r3, r1
 8008c28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	431a      	orrs	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3728      	adds	r7, #40	; 0x28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	fe00e800 	.word	0xfe00e800

08008c60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	607b      	str	r3, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	817b      	strh	r3, [r7, #10]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c72:	897b      	ldrh	r3, [r7, #10]
 8008c74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c78:	7a7b      	ldrb	r3, [r7, #9]
 8008c7a:	041b      	lsls	r3, r3, #16
 8008c7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	0d5b      	lsrs	r3, r3, #21
 8008c9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008c9e:	4b08      	ldr	r3, [pc, #32]	; (8008cc0 <I2C_TransferConfig+0x60>)
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	43db      	mvns	r3, r3
 8008ca4:	ea02 0103 	and.w	r1, r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	03ff63ff 	.word	0x03ff63ff

08008cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	d138      	bne.n	8008d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e032      	b.n	8008d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2224      	movs	r2, #36	; 0x24
 8008cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0201 	bic.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6819      	ldr	r1, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0201 	orr.w	r2, r2, #1
 8008d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	e000      	b.n	8008d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d4c:	2302      	movs	r3, #2
  }
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d139      	bne.n	8008de4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d101      	bne.n	8008d7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	e033      	b.n	8008de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2224      	movs	r2, #36	; 0x24
 8008d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f022 0201 	bic.w	r2, r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008dac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0201 	orr.w	r2, r2, #1
 8008dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	e000      	b.n	8008de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008de4:	2302      	movs	r3, #2
  }
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
	...

08008df4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e0bf      	b.n	8008f86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7fa fa68 	bl	80032f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008e36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6999      	ldr	r1, [r3, #24]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6899      	ldr	r1, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	4b4a      	ldr	r3, [pc, #296]	; (8008f90 <HAL_LTDC_Init+0x19c>)
 8008e68:	400b      	ands	r3, r1
 8008e6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	041b      	lsls	r3, r3, #16
 8008e72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6899      	ldr	r1, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	431a      	orrs	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68d9      	ldr	r1, [r3, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	4b3e      	ldr	r3, [pc, #248]	; (8008f90 <HAL_LTDC_Init+0x19c>)
 8008e96:	400b      	ands	r3, r1
 8008e98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68d9      	ldr	r1, [r3, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a1a      	ldr	r2, [r3, #32]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6919      	ldr	r1, [r3, #16]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b33      	ldr	r3, [pc, #204]	; (8008f90 <HAL_LTDC_Init+0x19c>)
 8008ec4:	400b      	ands	r3, r1
 8008ec6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	041b      	lsls	r3, r3, #16
 8008ece:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6919      	ldr	r1, [r3, #16]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6959      	ldr	r1, [r3, #20]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	4b27      	ldr	r3, [pc, #156]	; (8008f90 <HAL_LTDC_Init+0x19c>)
 8008ef2:	400b      	ands	r3, r1
 8008ef4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	041b      	lsls	r3, r3, #16
 8008efc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6959      	ldr	r1, [r3, #20]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008f24:	041b      	lsls	r3, r3, #16
 8008f26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0206 	orr.w	r2, r2, #6
 8008f62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699a      	ldr	r2, [r3, #24]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0201 	orr.w	r2, r2, #1
 8008f72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	f000f800 	.word	0xf000f800

08008f94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008f94:	b5b0      	push	{r4, r5, r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_LTDC_ConfigLayer+0x1a>
 8008faa:	2302      	movs	r3, #2
 8008fac:	e02c      	b.n	8009008 <HAL_LTDC_ConfigLayer+0x74>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2134      	movs	r1, #52	; 0x34
 8008fc4:	fb01 f303 	mul.w	r3, r1, r3
 8008fc8:	4413      	add	r3, r2
 8008fca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	461d      	mov	r5, r3
 8008fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 f81f 	bl	800902c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bdb0      	pop	{r4, r5, r7, pc}

08009010 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800901e:	b2db      	uxtb	r3, r3
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800902c:	b480      	push	{r7}
 800902e:	b089      	sub	sp, #36	; 0x24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009048:	4413      	add	r3, r2
 800904a:	041b      	lsls	r3, r3, #16
 800904c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	01db      	lsls	r3, r3, #7
 8009058:	4413      	add	r3, r2
 800905a:	3384      	adds	r3, #132	; 0x84
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	6812      	ldr	r2, [r2, #0]
 8009062:	4611      	mov	r1, r2
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	01d2      	lsls	r2, r2, #7
 8009068:	440a      	add	r2, r1
 800906a:	3284      	adds	r2, #132	; 0x84
 800906c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009070:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	0c1b      	lsrs	r3, r3, #16
 800907e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009082:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009084:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4619      	mov	r1, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	01db      	lsls	r3, r3, #7
 8009090:	440b      	add	r3, r1
 8009092:	3384      	adds	r3, #132	; 0x84
 8009094:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800909a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090aa:	4413      	add	r3, r2
 80090ac:	041b      	lsls	r3, r3, #16
 80090ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	01db      	lsls	r3, r3, #7
 80090ba:	4413      	add	r3, r2
 80090bc:	3384      	adds	r3, #132	; 0x84
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	4611      	mov	r1, r2
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	01d2      	lsls	r2, r2, #7
 80090ca:	440a      	add	r2, r1
 80090cc:	3284      	adds	r2, #132	; 0x84
 80090ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80090d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090e2:	4413      	add	r3, r2
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	01db      	lsls	r3, r3, #7
 80090f0:	440b      	add	r3, r1
 80090f2:	3384      	adds	r3, #132	; 0x84
 80090f4:	4619      	mov	r1, r3
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	01db      	lsls	r3, r3, #7
 8009106:	4413      	add	r3, r2
 8009108:	3384      	adds	r3, #132	; 0x84
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	6812      	ldr	r2, [r2, #0]
 8009110:	4611      	mov	r1, r2
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	01d2      	lsls	r2, r2, #7
 8009116:	440a      	add	r2, r1
 8009118:	3284      	adds	r2, #132	; 0x84
 800911a:	f023 0307 	bic.w	r3, r3, #7
 800911e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	461a      	mov	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	01db      	lsls	r3, r3, #7
 800912a:	4413      	add	r3, r2
 800912c:	3384      	adds	r3, #132	; 0x84
 800912e:	461a      	mov	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009146:	041b      	lsls	r3, r3, #16
 8009148:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	061b      	lsls	r3, r3, #24
 8009150:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	01db      	lsls	r3, r3, #7
 800915c:	4413      	add	r3, r2
 800915e:	3384      	adds	r3, #132	; 0x84
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	01db      	lsls	r3, r3, #7
 800916c:	4413      	add	r3, r2
 800916e:	3384      	adds	r3, #132	; 0x84
 8009170:	461a      	mov	r2, r3
 8009172:	2300      	movs	r3, #0
 8009174:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800917c:	461a      	mov	r2, r3
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	431a      	orrs	r2, r3
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	431a      	orrs	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4619      	mov	r1, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	01db      	lsls	r3, r3, #7
 8009190:	440b      	add	r3, r1
 8009192:	3384      	adds	r3, #132	; 0x84
 8009194:	4619      	mov	r1, r3
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	4313      	orrs	r3, r2
 800919a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	01db      	lsls	r3, r3, #7
 80091a6:	4413      	add	r3, r2
 80091a8:	3384      	adds	r3, #132	; 0x84
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	6812      	ldr	r2, [r2, #0]
 80091b0:	4611      	mov	r1, r2
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	01d2      	lsls	r2, r2, #7
 80091b6:	440a      	add	r2, r1
 80091b8:	3284      	adds	r2, #132	; 0x84
 80091ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	01db      	lsls	r3, r3, #7
 80091ca:	4413      	add	r3, r2
 80091cc:	3384      	adds	r3, #132	; 0x84
 80091ce:	461a      	mov	r2, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	01db      	lsls	r3, r3, #7
 80091e0:	4413      	add	r3, r2
 80091e2:	3384      	adds	r3, #132	; 0x84
 80091e4:	69da      	ldr	r2, [r3, #28]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4619      	mov	r1, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	01db      	lsls	r3, r3, #7
 80091f0:	440b      	add	r3, r1
 80091f2:	3384      	adds	r3, #132	; 0x84
 80091f4:	4619      	mov	r1, r3
 80091f6:	4b58      	ldr	r3, [pc, #352]	; (8009358 <LTDC_SetConfig+0x32c>)
 80091f8:	4013      	ands	r3, r2
 80091fa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	69da      	ldr	r2, [r3, #28]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	68f9      	ldr	r1, [r7, #12]
 8009206:	6809      	ldr	r1, [r1, #0]
 8009208:	4608      	mov	r0, r1
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	01c9      	lsls	r1, r1, #7
 800920e:	4401      	add	r1, r0
 8009210:	3184      	adds	r1, #132	; 0x84
 8009212:	4313      	orrs	r3, r2
 8009214:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	01db      	lsls	r3, r3, #7
 8009220:	4413      	add	r3, r2
 8009222:	3384      	adds	r3, #132	; 0x84
 8009224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	01db      	lsls	r3, r3, #7
 8009230:	4413      	add	r3, r2
 8009232:	3384      	adds	r3, #132	; 0x84
 8009234:	461a      	mov	r2, r3
 8009236:	2300      	movs	r3, #0
 8009238:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	01db      	lsls	r3, r3, #7
 8009244:	4413      	add	r3, r2
 8009246:	3384      	adds	r3, #132	; 0x84
 8009248:	461a      	mov	r2, r3
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009258:	2304      	movs	r3, #4
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	e01b      	b.n	8009296 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d102      	bne.n	800926c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009266:	2303      	movs	r3, #3
 8009268:	61fb      	str	r3, [r7, #28]
 800926a:	e014      	b.n	8009296 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	2b04      	cmp	r3, #4
 8009272:	d00b      	beq.n	800928c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009278:	2b02      	cmp	r3, #2
 800927a:	d007      	beq.n	800928c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009280:	2b03      	cmp	r3, #3
 8009282:	d003      	beq.n	800928c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009288:	2b07      	cmp	r3, #7
 800928a:	d102      	bne.n	8009292 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800928c:	2302      	movs	r3, #2
 800928e:	61fb      	str	r3, [r7, #28]
 8009290:	e001      	b.n	8009296 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009292:	2301      	movs	r3, #1
 8009294:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	01db      	lsls	r3, r3, #7
 80092a0:	4413      	add	r3, r2
 80092a2:	3384      	adds	r3, #132	; 0x84
 80092a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	6812      	ldr	r2, [r2, #0]
 80092aa:	4611      	mov	r1, r2
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	01d2      	lsls	r2, r2, #7
 80092b0:	440a      	add	r2, r1
 80092b2:	3284      	adds	r2, #132	; 0x84
 80092b4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80092b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	fb02 f303 	mul.w	r3, r2, r3
 80092c4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6859      	ldr	r1, [r3, #4]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	1acb      	subs	r3, r1, r3
 80092d0:	69f9      	ldr	r1, [r7, #28]
 80092d2:	fb01 f303 	mul.w	r3, r1, r3
 80092d6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80092d8:	68f9      	ldr	r1, [r7, #12]
 80092da:	6809      	ldr	r1, [r1, #0]
 80092dc:	4608      	mov	r0, r1
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	01c9      	lsls	r1, r1, #7
 80092e2:	4401      	add	r1, r0
 80092e4:	3184      	adds	r1, #132	; 0x84
 80092e6:	4313      	orrs	r3, r2
 80092e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	01db      	lsls	r3, r3, #7
 80092f4:	4413      	add	r3, r2
 80092f6:	3384      	adds	r3, #132	; 0x84
 80092f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4619      	mov	r1, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	01db      	lsls	r3, r3, #7
 8009304:	440b      	add	r3, r1
 8009306:	3384      	adds	r3, #132	; 0x84
 8009308:	4619      	mov	r1, r3
 800930a:	4b14      	ldr	r3, [pc, #80]	; (800935c <LTDC_SetConfig+0x330>)
 800930c:	4013      	ands	r3, r2
 800930e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	01db      	lsls	r3, r3, #7
 800931a:	4413      	add	r3, r2
 800931c:	3384      	adds	r3, #132	; 0x84
 800931e:	461a      	mov	r2, r3
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	01db      	lsls	r3, r3, #7
 8009330:	4413      	add	r3, r2
 8009332:	3384      	adds	r3, #132	; 0x84
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	6812      	ldr	r2, [r2, #0]
 800933a:	4611      	mov	r1, r2
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	01d2      	lsls	r2, r2, #7
 8009340:	440a      	add	r2, r1
 8009342:	3284      	adds	r2, #132	; 0x84
 8009344:	f043 0301 	orr.w	r3, r3, #1
 8009348:	6013      	str	r3, [r2, #0]
}
 800934a:	bf00      	nop
 800934c:	3724      	adds	r7, #36	; 0x24
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	fffff8f8 	.word	0xfffff8f8
 800935c:	fffff800 	.word	0xfffff800

08009360 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800936c:	4b0c      	ldr	r3, [pc, #48]	; (80093a0 <HAL_PWR_EnterSLEEPMode+0x40>)
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	4a0b      	ldr	r2, [pc, #44]	; (80093a0 <HAL_PWR_EnterSLEEPMode+0x40>)
 8009372:	f023 0304 	bic.w	r3, r3, #4
 8009376:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009378:	f3bf 8f4f 	dsb	sy
}
 800937c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800937e:	f3bf 8f6f 	isb	sy
}
 8009382:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d101      	bne.n	800938e <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800938a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800938c:	e002      	b.n	8009394 <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800938e:	bf40      	sev
    __WFE();
 8009390:	bf20      	wfe
    __WFE();
 8009392:	bf20      	wfe
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	e000ed00 	.word	0xe000ed00

080093a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80093ae:	4b23      	ldr	r3, [pc, #140]	; (800943c <HAL_PWREx_EnableOverDrive+0x98>)
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	4a22      	ldr	r2, [pc, #136]	; (800943c <HAL_PWREx_EnableOverDrive+0x98>)
 80093b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093b8:	6413      	str	r3, [r2, #64]	; 0x40
 80093ba:	4b20      	ldr	r3, [pc, #128]	; (800943c <HAL_PWREx_EnableOverDrive+0x98>)
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80093c6:	4b1e      	ldr	r3, [pc, #120]	; (8009440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a1d      	ldr	r2, [pc, #116]	; (8009440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80093cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80093d2:	f7fd f9db 	bl	800678c <HAL_GetTick>
 80093d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80093d8:	e009      	b.n	80093ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80093da:	f7fd f9d7 	bl	800678c <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093e8:	d901      	bls.n	80093ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e022      	b.n	8009434 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80093ee:	4b14      	ldr	r3, [pc, #80]	; (8009440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fa:	d1ee      	bne.n	80093da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80093fc:	4b10      	ldr	r3, [pc, #64]	; (8009440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a0f      	ldr	r2, [pc, #60]	; (8009440 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009406:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009408:	f7fd f9c0 	bl	800678c <HAL_GetTick>
 800940c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800940e:	e009      	b.n	8009424 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009410:	f7fd f9bc 	bl	800678c <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800941e:	d901      	bls.n	8009424 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e007      	b.n	8009434 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009430:	d1ee      	bne.n	8009410 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	40023800 	.word	0x40023800
 8009440:	40007000 	.word	0x40007000

08009444 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800944c:	2300      	movs	r3, #0
 800944e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e291      	b.n	800997e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 8087 	beq.w	8009576 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009468:	4b96      	ldr	r3, [pc, #600]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f003 030c 	and.w	r3, r3, #12
 8009470:	2b04      	cmp	r3, #4
 8009472:	d00c      	beq.n	800948e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009474:	4b93      	ldr	r3, [pc, #588]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 030c 	and.w	r3, r3, #12
 800947c:	2b08      	cmp	r3, #8
 800947e:	d112      	bne.n	80094a6 <HAL_RCC_OscConfig+0x62>
 8009480:	4b90      	ldr	r3, [pc, #576]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800948c:	d10b      	bne.n	80094a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800948e:	4b8d      	ldr	r3, [pc, #564]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d06c      	beq.n	8009574 <HAL_RCC_OscConfig+0x130>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d168      	bne.n	8009574 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e26b      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ae:	d106      	bne.n	80094be <HAL_RCC_OscConfig+0x7a>
 80094b0:	4b84      	ldr	r3, [pc, #528]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a83      	ldr	r2, [pc, #524]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	e02e      	b.n	800951c <HAL_RCC_OscConfig+0xd8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10c      	bne.n	80094e0 <HAL_RCC_OscConfig+0x9c>
 80094c6:	4b7f      	ldr	r3, [pc, #508]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a7e      	ldr	r2, [pc, #504]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	4b7c      	ldr	r3, [pc, #496]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a7b      	ldr	r2, [pc, #492]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	e01d      	b.n	800951c <HAL_RCC_OscConfig+0xd8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094e8:	d10c      	bne.n	8009504 <HAL_RCC_OscConfig+0xc0>
 80094ea:	4b76      	ldr	r3, [pc, #472]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a75      	ldr	r2, [pc, #468]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	4b73      	ldr	r3, [pc, #460]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a72      	ldr	r2, [pc, #456]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80094fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	e00b      	b.n	800951c <HAL_RCC_OscConfig+0xd8>
 8009504:	4b6f      	ldr	r3, [pc, #444]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a6e      	ldr	r2, [pc, #440]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 800950a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	4b6c      	ldr	r3, [pc, #432]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a6b      	ldr	r2, [pc, #428]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800951a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d013      	beq.n	800954c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009524:	f7fd f932 	bl	800678c <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800952c:	f7fd f92e 	bl	800678c <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b64      	cmp	r3, #100	; 0x64
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e21f      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800953e:	4b61      	ldr	r3, [pc, #388]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <HAL_RCC_OscConfig+0xe8>
 800954a:	e014      	b.n	8009576 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800954c:	f7fd f91e 	bl	800678c <HAL_GetTick>
 8009550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009552:	e008      	b.n	8009566 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009554:	f7fd f91a 	bl	800678c <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b64      	cmp	r3, #100	; 0x64
 8009560:	d901      	bls.n	8009566 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e20b      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009566:	4b57      	ldr	r3, [pc, #348]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f0      	bne.n	8009554 <HAL_RCC_OscConfig+0x110>
 8009572:	e000      	b.n	8009576 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d069      	beq.n	8009656 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009582:	4b50      	ldr	r3, [pc, #320]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f003 030c 	and.w	r3, r3, #12
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00b      	beq.n	80095a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800958e:	4b4d      	ldr	r3, [pc, #308]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 030c 	and.w	r3, r3, #12
 8009596:	2b08      	cmp	r3, #8
 8009598:	d11c      	bne.n	80095d4 <HAL_RCC_OscConfig+0x190>
 800959a:	4b4a      	ldr	r3, [pc, #296]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d116      	bne.n	80095d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095a6:	4b47      	ldr	r3, [pc, #284]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_RCC_OscConfig+0x17a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d001      	beq.n	80095be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e1df      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095be:	4b41      	ldr	r3, [pc, #260]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	493d      	ldr	r1, [pc, #244]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095d2:	e040      	b.n	8009656 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d023      	beq.n	8009624 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095dc:	4b39      	ldr	r3, [pc, #228]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a38      	ldr	r2, [pc, #224]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80095e2:	f043 0301 	orr.w	r3, r3, #1
 80095e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e8:	f7fd f8d0 	bl	800678c <HAL_GetTick>
 80095ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095ee:	e008      	b.n	8009602 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095f0:	f7fd f8cc 	bl	800678c <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d901      	bls.n	8009602 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e1bd      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009602:	4b30      	ldr	r3, [pc, #192]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d0f0      	beq.n	80095f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800960e:	4b2d      	ldr	r3, [pc, #180]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4929      	ldr	r1, [pc, #164]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 800961e:	4313      	orrs	r3, r2
 8009620:	600b      	str	r3, [r1, #0]
 8009622:	e018      	b.n	8009656 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009624:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a26      	ldr	r2, [pc, #152]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 800962a:	f023 0301 	bic.w	r3, r3, #1
 800962e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009630:	f7fd f8ac 	bl	800678c <HAL_GetTick>
 8009634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009636:	e008      	b.n	800964a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009638:	f7fd f8a8 	bl	800678c <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	2b02      	cmp	r3, #2
 8009644:	d901      	bls.n	800964a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e199      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800964a:	4b1e      	ldr	r3, [pc, #120]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1f0      	bne.n	8009638 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d038      	beq.n	80096d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d019      	beq.n	800969e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800966a:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 800966c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800966e:	4a15      	ldr	r2, [pc, #84]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009670:	f043 0301 	orr.w	r3, r3, #1
 8009674:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009676:	f7fd f889 	bl	800678c <HAL_GetTick>
 800967a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800967c:	e008      	b.n	8009690 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800967e:	f7fd f885 	bl	800678c <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b02      	cmp	r3, #2
 800968a:	d901      	bls.n	8009690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e176      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009690:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 8009692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d0f0      	beq.n	800967e <HAL_RCC_OscConfig+0x23a>
 800969c:	e01a      	b.n	80096d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80096a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096a2:	4a08      	ldr	r2, [pc, #32]	; (80096c4 <HAL_RCC_OscConfig+0x280>)
 80096a4:	f023 0301 	bic.w	r3, r3, #1
 80096a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096aa:	f7fd f86f 	bl	800678c <HAL_GetTick>
 80096ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096b0:	e00a      	b.n	80096c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096b2:	f7fd f86b 	bl	800678c <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d903      	bls.n	80096c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e15c      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
 80096c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096c8:	4b91      	ldr	r3, [pc, #580]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80096ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1ee      	bne.n	80096b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80a4 	beq.w	800982a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096e2:	4b8b      	ldr	r3, [pc, #556]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10d      	bne.n	800970a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80096ee:	4b88      	ldr	r3, [pc, #544]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	4a87      	ldr	r2, [pc, #540]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80096f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096f8:	6413      	str	r3, [r2, #64]	; 0x40
 80096fa:	4b85      	ldr	r3, [pc, #532]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009702:	60bb      	str	r3, [r7, #8]
 8009704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009706:	2301      	movs	r3, #1
 8009708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800970a:	4b82      	ldr	r3, [pc, #520]	; (8009914 <HAL_RCC_OscConfig+0x4d0>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009712:	2b00      	cmp	r3, #0
 8009714:	d118      	bne.n	8009748 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009716:	4b7f      	ldr	r3, [pc, #508]	; (8009914 <HAL_RCC_OscConfig+0x4d0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a7e      	ldr	r2, [pc, #504]	; (8009914 <HAL_RCC_OscConfig+0x4d0>)
 800971c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009722:	f7fd f833 	bl	800678c <HAL_GetTick>
 8009726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009728:	e008      	b.n	800973c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800972a:	f7fd f82f 	bl	800678c <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b64      	cmp	r3, #100	; 0x64
 8009736:	d901      	bls.n	800973c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e120      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800973c:	4b75      	ldr	r3, [pc, #468]	; (8009914 <HAL_RCC_OscConfig+0x4d0>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0f0      	beq.n	800972a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d106      	bne.n	800975e <HAL_RCC_OscConfig+0x31a>
 8009750:	4b6f      	ldr	r3, [pc, #444]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009754:	4a6e      	ldr	r2, [pc, #440]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	6713      	str	r3, [r2, #112]	; 0x70
 800975c:	e02d      	b.n	80097ba <HAL_RCC_OscConfig+0x376>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10c      	bne.n	8009780 <HAL_RCC_OscConfig+0x33c>
 8009766:	4b6a      	ldr	r3, [pc, #424]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976a:	4a69      	ldr	r2, [pc, #420]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 800976c:	f023 0301 	bic.w	r3, r3, #1
 8009770:	6713      	str	r3, [r2, #112]	; 0x70
 8009772:	4b67      	ldr	r3, [pc, #412]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009776:	4a66      	ldr	r2, [pc, #408]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009778:	f023 0304 	bic.w	r3, r3, #4
 800977c:	6713      	str	r3, [r2, #112]	; 0x70
 800977e:	e01c      	b.n	80097ba <HAL_RCC_OscConfig+0x376>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	2b05      	cmp	r3, #5
 8009786:	d10c      	bne.n	80097a2 <HAL_RCC_OscConfig+0x35e>
 8009788:	4b61      	ldr	r3, [pc, #388]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 800978a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978c:	4a60      	ldr	r2, [pc, #384]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 800978e:	f043 0304 	orr.w	r3, r3, #4
 8009792:	6713      	str	r3, [r2, #112]	; 0x70
 8009794:	4b5e      	ldr	r3, [pc, #376]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009798:	4a5d      	ldr	r2, [pc, #372]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 800979a:	f043 0301 	orr.w	r3, r3, #1
 800979e:	6713      	str	r3, [r2, #112]	; 0x70
 80097a0:	e00b      	b.n	80097ba <HAL_RCC_OscConfig+0x376>
 80097a2:	4b5b      	ldr	r3, [pc, #364]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80097a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a6:	4a5a      	ldr	r2, [pc, #360]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80097a8:	f023 0301 	bic.w	r3, r3, #1
 80097ac:	6713      	str	r3, [r2, #112]	; 0x70
 80097ae:	4b58      	ldr	r3, [pc, #352]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80097b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b2:	4a57      	ldr	r2, [pc, #348]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80097b4:	f023 0304 	bic.w	r3, r3, #4
 80097b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d015      	beq.n	80097ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c2:	f7fc ffe3 	bl	800678c <HAL_GetTick>
 80097c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097c8:	e00a      	b.n	80097e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ca:	f7fc ffdf 	bl	800678c <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d8:	4293      	cmp	r3, r2
 80097da:	d901      	bls.n	80097e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e0ce      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e0:	4b4b      	ldr	r3, [pc, #300]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80097e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0ee      	beq.n	80097ca <HAL_RCC_OscConfig+0x386>
 80097ec:	e014      	b.n	8009818 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ee:	f7fc ffcd 	bl	800678c <HAL_GetTick>
 80097f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097f4:	e00a      	b.n	800980c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097f6:	f7fc ffc9 	bl	800678c <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	f241 3288 	movw	r2, #5000	; 0x1388
 8009804:	4293      	cmp	r3, r2
 8009806:	d901      	bls.n	800980c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e0b8      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800980c:	4b40      	ldr	r3, [pc, #256]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 800980e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009810:	f003 0302 	and.w	r3, r3, #2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1ee      	bne.n	80097f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009818:	7dfb      	ldrb	r3, [r7, #23]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d105      	bne.n	800982a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800981e:	4b3c      	ldr	r3, [pc, #240]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	4a3b      	ldr	r2, [pc, #236]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009828:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 80a4 	beq.w	800997c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009834:	4b36      	ldr	r3, [pc, #216]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f003 030c 	and.w	r3, r3, #12
 800983c:	2b08      	cmp	r3, #8
 800983e:	d06b      	beq.n	8009918 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	2b02      	cmp	r3, #2
 8009846:	d149      	bne.n	80098dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009848:	4b31      	ldr	r3, [pc, #196]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a30      	ldr	r2, [pc, #192]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 800984e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009854:	f7fc ff9a 	bl	800678c <HAL_GetTick>
 8009858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800985a:	e008      	b.n	800986e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800985c:	f7fc ff96 	bl	800678c <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	2b02      	cmp	r3, #2
 8009868:	d901      	bls.n	800986e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e087      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800986e:	4b28      	ldr	r3, [pc, #160]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f0      	bne.n	800985c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	69da      	ldr	r2, [r3, #28]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	019b      	lsls	r3, r3, #6
 800988a:	431a      	orrs	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	085b      	lsrs	r3, r3, #1
 8009892:	3b01      	subs	r3, #1
 8009894:	041b      	lsls	r3, r3, #16
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	061b      	lsls	r3, r3, #24
 800989e:	4313      	orrs	r3, r2
 80098a0:	4a1b      	ldr	r2, [pc, #108]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80098a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098a8:	4b19      	ldr	r3, [pc, #100]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a18      	ldr	r2, [pc, #96]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80098ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b4:	f7fc ff6a 	bl	800678c <HAL_GetTick>
 80098b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098ba:	e008      	b.n	80098ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098bc:	f7fc ff66 	bl	800678c <HAL_GetTick>
 80098c0:	4602      	mov	r2, r0
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d901      	bls.n	80098ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e057      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098ce:	4b10      	ldr	r3, [pc, #64]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0f0      	beq.n	80098bc <HAL_RCC_OscConfig+0x478>
 80098da:	e04f      	b.n	800997c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098dc:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a0b      	ldr	r2, [pc, #44]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 80098e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e8:	f7fc ff50 	bl	800678c <HAL_GetTick>
 80098ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ee:	e008      	b.n	8009902 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098f0:	f7fc ff4c 	bl	800678c <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d901      	bls.n	8009902 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e03d      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009902:	4b03      	ldr	r3, [pc, #12]	; (8009910 <HAL_RCC_OscConfig+0x4cc>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f0      	bne.n	80098f0 <HAL_RCC_OscConfig+0x4ac>
 800990e:	e035      	b.n	800997c <HAL_RCC_OscConfig+0x538>
 8009910:	40023800 	.word	0x40023800
 8009914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009918:	4b1b      	ldr	r3, [pc, #108]	; (8009988 <HAL_RCC_OscConfig+0x544>)
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d028      	beq.n	8009978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009930:	429a      	cmp	r2, r3
 8009932:	d121      	bne.n	8009978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800993e:	429a      	cmp	r2, r3
 8009940:	d11a      	bne.n	8009978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009948:	4013      	ands	r3, r2
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800994e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009950:	4293      	cmp	r3, r2
 8009952:	d111      	bne.n	8009978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	3b01      	subs	r3, #1
 8009962:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009964:	429a      	cmp	r2, r3
 8009966:	d107      	bne.n	8009978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009974:	429a      	cmp	r2, r3
 8009976:	d001      	beq.n	800997c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e000      	b.n	800997e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	40023800 	.word	0x40023800

0800998c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e0d0      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099a4:	4b6a      	ldr	r3, [pc, #424]	; (8009b50 <HAL_RCC_ClockConfig+0x1c4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 030f 	and.w	r3, r3, #15
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d910      	bls.n	80099d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099b2:	4b67      	ldr	r3, [pc, #412]	; (8009b50 <HAL_RCC_ClockConfig+0x1c4>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f023 020f 	bic.w	r2, r3, #15
 80099ba:	4965      	ldr	r1, [pc, #404]	; (8009b50 <HAL_RCC_ClockConfig+0x1c4>)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	4313      	orrs	r3, r2
 80099c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099c2:	4b63      	ldr	r3, [pc, #396]	; (8009b50 <HAL_RCC_ClockConfig+0x1c4>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d001      	beq.n	80099d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e0b8      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d020      	beq.n	8009a22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099ec:	4b59      	ldr	r3, [pc, #356]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	4a58      	ldr	r2, [pc, #352]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 80099f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80099f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0308 	and.w	r3, r3, #8
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d005      	beq.n	8009a10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a04:	4b53      	ldr	r3, [pc, #332]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	4a52      	ldr	r2, [pc, #328]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009a0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a10:	4b50      	ldr	r3, [pc, #320]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	494d      	ldr	r1, [pc, #308]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d040      	beq.n	8009ab0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d107      	bne.n	8009a46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a36:	4b47      	ldr	r3, [pc, #284]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d115      	bne.n	8009a6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e07f      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d107      	bne.n	8009a5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a4e:	4b41      	ldr	r3, [pc, #260]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d109      	bne.n	8009a6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e073      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a5e:	4b3d      	ldr	r3, [pc, #244]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0302 	and.w	r3, r3, #2
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e06b      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a6e:	4b39      	ldr	r3, [pc, #228]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f023 0203 	bic.w	r2, r3, #3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	4936      	ldr	r1, [pc, #216]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a80:	f7fc fe84 	bl	800678c <HAL_GetTick>
 8009a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a86:	e00a      	b.n	8009a9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a88:	f7fc fe80 	bl	800678c <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d901      	bls.n	8009a9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e053      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a9e:	4b2d      	ldr	r3, [pc, #180]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 020c 	and.w	r2, r3, #12
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d1eb      	bne.n	8009a88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ab0:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <HAL_RCC_ClockConfig+0x1c4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d210      	bcs.n	8009ae0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009abe:	4b24      	ldr	r3, [pc, #144]	; (8009b50 <HAL_RCC_ClockConfig+0x1c4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f023 020f 	bic.w	r2, r3, #15
 8009ac6:	4922      	ldr	r1, [pc, #136]	; (8009b50 <HAL_RCC_ClockConfig+0x1c4>)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ace:	4b20      	ldr	r3, [pc, #128]	; (8009b50 <HAL_RCC_ClockConfig+0x1c4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d001      	beq.n	8009ae0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e032      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d008      	beq.n	8009afe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009aec:	4b19      	ldr	r3, [pc, #100]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	4916      	ldr	r1, [pc, #88]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009b0a:	4b12      	ldr	r3, [pc, #72]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	490e      	ldr	r1, [pc, #56]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009b1e:	f000 f821 	bl	8009b64 <HAL_RCC_GetSysClockFreq>
 8009b22:	4602      	mov	r2, r0
 8009b24:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <HAL_RCC_ClockConfig+0x1c8>)
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	091b      	lsrs	r3, r3, #4
 8009b2a:	f003 030f 	and.w	r3, r3, #15
 8009b2e:	490a      	ldr	r1, [pc, #40]	; (8009b58 <HAL_RCC_ClockConfig+0x1cc>)
 8009b30:	5ccb      	ldrb	r3, [r1, r3]
 8009b32:	fa22 f303 	lsr.w	r3, r2, r3
 8009b36:	4a09      	ldr	r2, [pc, #36]	; (8009b5c <HAL_RCC_ClockConfig+0x1d0>)
 8009b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <HAL_RCC_ClockConfig+0x1d4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fc fde0 	bl	8006704 <HAL_InitTick>

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40023c00 	.word	0x40023c00
 8009b54:	40023800 	.word	0x40023800
 8009b58:	08015d3c 	.word	0x08015d3c
 8009b5c:	20000004 	.word	0x20000004
 8009b60:	2000001c 	.word	0x2000001c

08009b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b68:	b090      	sub	sp, #64	; 0x40
 8009b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b70:	2300      	movs	r3, #0
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b74:	2300      	movs	r3, #0
 8009b76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b7c:	4b59      	ldr	r3, [pc, #356]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 030c 	and.w	r3, r3, #12
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d00d      	beq.n	8009ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	f200 80a1 	bhi.w	8009cd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <HAL_RCC_GetSysClockFreq+0x34>
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	d003      	beq.n	8009b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8009b96:	e09b      	b.n	8009cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b98:	4b53      	ldr	r3, [pc, #332]	; (8009ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009b9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009b9c:	e09b      	b.n	8009cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b9e:	4b53      	ldr	r3, [pc, #332]	; (8009cec <HAL_RCC_GetSysClockFreq+0x188>)
 8009ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009ba2:	e098      	b.n	8009cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ba4:	4b4f      	ldr	r3, [pc, #316]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009bae:	4b4d      	ldr	r3, [pc, #308]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d028      	beq.n	8009c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bba:	4b4a      	ldr	r3, [pc, #296]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	099b      	lsrs	r3, r3, #6
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	623b      	str	r3, [r7, #32]
 8009bc4:	627a      	str	r2, [r7, #36]	; 0x24
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4b47      	ldr	r3, [pc, #284]	; (8009cec <HAL_RCC_GetSysClockFreq+0x188>)
 8009bd0:	fb03 f201 	mul.w	r2, r3, r1
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	fb00 f303 	mul.w	r3, r0, r3
 8009bda:	4413      	add	r3, r2
 8009bdc:	4a43      	ldr	r2, [pc, #268]	; (8009cec <HAL_RCC_GetSysClockFreq+0x188>)
 8009bde:	fba0 1202 	umull	r1, r2, r0, r2
 8009be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009be4:	460a      	mov	r2, r1
 8009be6:	62ba      	str	r2, [r7, #40]	; 0x28
 8009be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bea:	4413      	add	r3, r2
 8009bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	61bb      	str	r3, [r7, #24]
 8009bf4:	61fa      	str	r2, [r7, #28]
 8009bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009bfe:	f7f7 f873 	bl	8000ce8 <__aeabi_uldivmod>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4613      	mov	r3, r2
 8009c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c0a:	e053      	b.n	8009cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c0c:	4b35      	ldr	r3, [pc, #212]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	099b      	lsrs	r3, r3, #6
 8009c12:	2200      	movs	r2, #0
 8009c14:	613b      	str	r3, [r7, #16]
 8009c16:	617a      	str	r2, [r7, #20]
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009c1e:	f04f 0b00 	mov.w	fp, #0
 8009c22:	4652      	mov	r2, sl
 8009c24:	465b      	mov	r3, fp
 8009c26:	f04f 0000 	mov.w	r0, #0
 8009c2a:	f04f 0100 	mov.w	r1, #0
 8009c2e:	0159      	lsls	r1, r3, #5
 8009c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c34:	0150      	lsls	r0, r2, #5
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	ebb2 080a 	subs.w	r8, r2, sl
 8009c3e:	eb63 090b 	sbc.w	r9, r3, fp
 8009c42:	f04f 0200 	mov.w	r2, #0
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009c56:	ebb2 0408 	subs.w	r4, r2, r8
 8009c5a:	eb63 0509 	sbc.w	r5, r3, r9
 8009c5e:	f04f 0200 	mov.w	r2, #0
 8009c62:	f04f 0300 	mov.w	r3, #0
 8009c66:	00eb      	lsls	r3, r5, #3
 8009c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c6c:	00e2      	lsls	r2, r4, #3
 8009c6e:	4614      	mov	r4, r2
 8009c70:	461d      	mov	r5, r3
 8009c72:	eb14 030a 	adds.w	r3, r4, sl
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	eb45 030b 	adc.w	r3, r5, fp
 8009c7c:	607b      	str	r3, [r7, #4]
 8009c7e:	f04f 0200 	mov.w	r2, #0
 8009c82:	f04f 0300 	mov.w	r3, #0
 8009c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	028b      	lsls	r3, r1, #10
 8009c8e:	4621      	mov	r1, r4
 8009c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009c94:	4621      	mov	r1, r4
 8009c96:	028a      	lsls	r2, r1, #10
 8009c98:	4610      	mov	r0, r2
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	60bb      	str	r3, [r7, #8]
 8009ca2:	60fa      	str	r2, [r7, #12]
 8009ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ca8:	f7f7 f81e 	bl	8000ce8 <__aeabi_uldivmod>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009cb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	0c1b      	lsrs	r3, r3, #16
 8009cba:	f003 0303 	and.w	r3, r3, #3
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8009cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009cce:	e002      	b.n	8009cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009cd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3740      	adds	r7, #64	; 0x40
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ce2:	bf00      	nop
 8009ce4:	40023800 	.word	0x40023800
 8009ce8:	00f42400 	.word	0x00f42400
 8009cec:	017d7840 	.word	0x017d7840

08009cf0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009cf4:	4b03      	ldr	r3, [pc, #12]	; (8009d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20000004 	.word	0x20000004

08009d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009d0c:	f7ff fff0 	bl	8009cf0 <HAL_RCC_GetHCLKFreq>
 8009d10:	4602      	mov	r2, r0
 8009d12:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	0a9b      	lsrs	r3, r3, #10
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	4903      	ldr	r1, [pc, #12]	; (8009d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d1e:	5ccb      	ldrb	r3, [r1, r3]
 8009d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	40023800 	.word	0x40023800
 8009d2c:	08015d4c 	.word	0x08015d4c

08009d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d34:	f7ff ffdc 	bl	8009cf0 <HAL_RCC_GetHCLKFreq>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	0b5b      	lsrs	r3, r3, #13
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	4903      	ldr	r1, [pc, #12]	; (8009d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d46:	5ccb      	ldrb	r3, [r1, r3]
 8009d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	40023800 	.word	0x40023800
 8009d54:	08015d4c 	.word	0x08015d4c

08009d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d012      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009d80:	4b69      	ldr	r3, [pc, #420]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	4a68      	ldr	r2, [pc, #416]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009d8a:	6093      	str	r3, [r2, #8]
 8009d8c:	4b66      	ldr	r3, [pc, #408]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d94:	4964      	ldr	r1, [pc, #400]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009da2:	2301      	movs	r3, #1
 8009da4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d017      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009db2:	4b5d      	ldr	r3, [pc, #372]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc0:	4959      	ldr	r1, [pc, #356]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dd0:	d101      	bne.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009dde:	2301      	movs	r3, #1
 8009de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d017      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009dee:	4b4e      	ldr	r3, [pc, #312]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009df4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	494a      	ldr	r1, [pc, #296]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e0c:	d101      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 808b 	beq.w	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e3c:	4b3a      	ldr	r3, [pc, #232]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	4a39      	ldr	r2, [pc, #228]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e46:	6413      	str	r3, [r2, #64]	; 0x40
 8009e48:	4b37      	ldr	r3, [pc, #220]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e50:	60bb      	str	r3, [r7, #8]
 8009e52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e54:	4b35      	ldr	r3, [pc, #212]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a34      	ldr	r2, [pc, #208]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e60:	f7fc fc94 	bl	800678c <HAL_GetTick>
 8009e64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009e66:	e008      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e68:	f7fc fc90 	bl	800678c <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b64      	cmp	r3, #100	; 0x64
 8009e74:	d901      	bls.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e357      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009e7a:	4b2c      	ldr	r3, [pc, #176]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0f0      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009e86:	4b28      	ldr	r3, [pc, #160]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d035      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d02e      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ea4:	4b20      	ldr	r3, [pc, #128]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009eae:	4b1e      	ldr	r3, [pc, #120]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb2:	4a1d      	ldr	r2, [pc, #116]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009eba:	4b1b      	ldr	r3, [pc, #108]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ebe:	4a1a      	ldr	r2, [pc, #104]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ec4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009ec6:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009ecc:	4b16      	ldr	r3, [pc, #88]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d114      	bne.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed8:	f7fc fc58 	bl	800678c <HAL_GetTick>
 8009edc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ede:	e00a      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ee0:	f7fc fc54 	bl	800678c <HAL_GetTick>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d901      	bls.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e319      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ef6:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0ee      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f0e:	d111      	bne.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009f1c:	4b04      	ldr	r3, [pc, #16]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009f1e:	400b      	ands	r3, r1
 8009f20:	4901      	ldr	r1, [pc, #4]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	608b      	str	r3, [r1, #8]
 8009f26:	e00b      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009f28:	40023800 	.word	0x40023800
 8009f2c:	40007000 	.word	0x40007000
 8009f30:	0ffffcff 	.word	0x0ffffcff
 8009f34:	4baa      	ldr	r3, [pc, #680]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	4aa9      	ldr	r2, [pc, #676]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009f3e:	6093      	str	r3, [r2, #8]
 8009f40:	4ba7      	ldr	r3, [pc, #668]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f4c:	49a4      	ldr	r1, [pc, #656]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0310 	and.w	r3, r3, #16
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d010      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f5e:	4ba0      	ldr	r3, [pc, #640]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f64:	4a9e      	ldr	r2, [pc, #632]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009f6e:	4b9c      	ldr	r3, [pc, #624]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f78:	4999      	ldr	r1, [pc, #612]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00a      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f8c:	4b94      	ldr	r3, [pc, #592]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f9a:	4991      	ldr	r1, [pc, #580]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009fae:	4b8c      	ldr	r3, [pc, #560]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fbc:	4988      	ldr	r1, [pc, #544]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00a      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009fd0:	4b83      	ldr	r3, [pc, #524]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fde:	4980      	ldr	r1, [pc, #512]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ff2:	4b7b      	ldr	r3, [pc, #492]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a000:	4977      	ldr	r1, [pc, #476]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a002:	4313      	orrs	r3, r2
 800a004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00a      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a014:	4b72      	ldr	r3, [pc, #456]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01a:	f023 0203 	bic.w	r2, r3, #3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a022:	496f      	ldr	r1, [pc, #444]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a024:	4313      	orrs	r3, r2
 800a026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a036:	4b6a      	ldr	r3, [pc, #424]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a03c:	f023 020c 	bic.w	r2, r3, #12
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a044:	4966      	ldr	r1, [pc, #408]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a046:	4313      	orrs	r3, r2
 800a048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00a      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a058:	4b61      	ldr	r3, [pc, #388]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a05e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a066:	495e      	ldr	r1, [pc, #376]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00a      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a07a:	4b59      	ldr	r3, [pc, #356]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a080:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a088:	4955      	ldr	r1, [pc, #340]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00a      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a09c:	4b50      	ldr	r3, [pc, #320]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0aa:	494d      	ldr	r1, [pc, #308]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00a      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a0be:	4b48      	ldr	r3, [pc, #288]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0cc:	4944      	ldr	r1, [pc, #272]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00a      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a0e0:	4b3f      	ldr	r3, [pc, #252]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ee:	493c      	ldr	r1, [pc, #240]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a102:	4b37      	ldr	r3, [pc, #220]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a110:	4933      	ldr	r1, [pc, #204]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a112:	4313      	orrs	r3, r2
 800a114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00a      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a124:	4b2e      	ldr	r3, [pc, #184]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a12a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a132:	492b      	ldr	r1, [pc, #172]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a134:	4313      	orrs	r3, r2
 800a136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d011      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a146:	4b26      	ldr	r3, [pc, #152]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a14c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a154:	4922      	ldr	r1, [pc, #136]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a156:	4313      	orrs	r3, r2
 800a158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a164:	d101      	bne.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a166:	2301      	movs	r3, #1
 800a168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a176:	2301      	movs	r3, #1
 800a178:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a186:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a18c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a194:	4912      	ldr	r1, [pc, #72]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a196:	4313      	orrs	r3, r2
 800a198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00b      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1b8:	4909      	ldr	r1, [pc, #36]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d006      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 80d9 	beq.w	800a386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a1d4:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a01      	ldr	r2, [pc, #4]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1de:	e001      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a1e0:	40023800 	.word	0x40023800
 800a1e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1e6:	f7fc fad1 	bl	800678c <HAL_GetTick>
 800a1ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a1ec:	e008      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a1ee:	f7fc facd 	bl	800678c <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b64      	cmp	r3, #100	; 0x64
 800a1fa:	d901      	bls.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e194      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a200:	4b6c      	ldr	r3, [pc, #432]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1f0      	bne.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	d021      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d11d      	bne.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a220:	4b64      	ldr	r3, [pc, #400]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	f003 0303 	and.w	r3, r3, #3
 800a22c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a22e:	4b61      	ldr	r3, [pc, #388]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a234:	0e1b      	lsrs	r3, r3, #24
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	019a      	lsls	r2, r3, #6
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	041b      	lsls	r3, r3, #16
 800a246:	431a      	orrs	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	061b      	lsls	r3, r3, #24
 800a24c:	431a      	orrs	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	071b      	lsls	r3, r3, #28
 800a254:	4957      	ldr	r1, [pc, #348]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a256:	4313      	orrs	r3, r2
 800a258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a270:	d00a      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d02e      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a286:	d129      	bne.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a288:	4b4a      	ldr	r3, [pc, #296]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a28e:	0c1b      	lsrs	r3, r3, #16
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a296:	4b47      	ldr	r3, [pc, #284]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a29c:	0f1b      	lsrs	r3, r3, #28
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	019a      	lsls	r2, r3, #6
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	041b      	lsls	r3, r3, #16
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	061b      	lsls	r3, r3, #24
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	071b      	lsls	r3, r3, #28
 800a2bc:	493d      	ldr	r1, [pc, #244]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a2c4:	4b3b      	ldr	r3, [pc, #236]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2ca:	f023 021f 	bic.w	r2, r3, #31
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	4937      	ldr	r1, [pc, #220]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01d      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a2e8:	4b32      	ldr	r3, [pc, #200]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2ee:	0e1b      	lsrs	r3, r3, #24
 800a2f0:	f003 030f 	and.w	r3, r3, #15
 800a2f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a2f6:	4b2f      	ldr	r3, [pc, #188]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2fc:	0f1b      	lsrs	r3, r3, #28
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	019a      	lsls	r2, r3, #6
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	041b      	lsls	r3, r3, #16
 800a310:	431a      	orrs	r2, r3
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	061b      	lsls	r3, r3, #24
 800a316:	431a      	orrs	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	071b      	lsls	r3, r3, #28
 800a31c:	4925      	ldr	r1, [pc, #148]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d011      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	019a      	lsls	r2, r3, #6
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	041b      	lsls	r3, r3, #16
 800a33c:	431a      	orrs	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	061b      	lsls	r3, r3, #24
 800a344:	431a      	orrs	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	071b      	lsls	r3, r3, #28
 800a34c:	4919      	ldr	r1, [pc, #100]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a354:	4b17      	ldr	r3, [pc, #92]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a16      	ldr	r2, [pc, #88]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a35a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a35e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a360:	f7fc fa14 	bl	800678c <HAL_GetTick>
 800a364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a366:	e008      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a368:	f7fc fa10 	bl	800678c <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b64      	cmp	r3, #100	; 0x64
 800a374:	d901      	bls.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e0d7      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a37a:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0f0      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	f040 80cd 	bne.w	800a528 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a38e:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a08      	ldr	r2, [pc, #32]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a39a:	f7fc f9f7 	bl	800678c <HAL_GetTick>
 800a39e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a3a0:	e00a      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a3a2:	f7fc f9f3 	bl	800678c <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b64      	cmp	r3, #100	; 0x64
 800a3ae:	d903      	bls.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e0ba      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a3b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a3b8:	4b5e      	ldr	r3, [pc, #376]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3c4:	d0ed      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d009      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d02e      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d12a      	bne.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a3ee:	4b51      	ldr	r3, [pc, #324]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f4:	0c1b      	lsrs	r3, r3, #16
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a3fc:	4b4d      	ldr	r3, [pc, #308]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a402:	0f1b      	lsrs	r3, r3, #28
 800a404:	f003 0307 	and.w	r3, r3, #7
 800a408:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	019a      	lsls	r2, r3, #6
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	041b      	lsls	r3, r3, #16
 800a414:	431a      	orrs	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	061b      	lsls	r3, r3, #24
 800a41c:	431a      	orrs	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	071b      	lsls	r3, r3, #28
 800a422:	4944      	ldr	r1, [pc, #272]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a424:	4313      	orrs	r3, r2
 800a426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a42a:	4b42      	ldr	r3, [pc, #264]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a42c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a438:	3b01      	subs	r3, #1
 800a43a:	021b      	lsls	r3, r3, #8
 800a43c:	493d      	ldr	r1, [pc, #244]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d022      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a458:	d11d      	bne.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a45a:	4b36      	ldr	r3, [pc, #216]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a460:	0e1b      	lsrs	r3, r3, #24
 800a462:	f003 030f 	and.w	r3, r3, #15
 800a466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a468:	4b32      	ldr	r3, [pc, #200]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46e:	0f1b      	lsrs	r3, r3, #28
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	019a      	lsls	r2, r3, #6
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	041b      	lsls	r3, r3, #16
 800a482:	431a      	orrs	r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	061b      	lsls	r3, r3, #24
 800a488:	431a      	orrs	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	071b      	lsls	r3, r3, #28
 800a48e:	4929      	ldr	r1, [pc, #164]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a490:	4313      	orrs	r3, r2
 800a492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 0308 	and.w	r3, r3, #8
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d028      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a4a2:	4b24      	ldr	r3, [pc, #144]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a8:	0e1b      	lsrs	r3, r3, #24
 800a4aa:	f003 030f 	and.w	r3, r3, #15
 800a4ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a4b0:	4b20      	ldr	r3, [pc, #128]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	019a      	lsls	r2, r3, #6
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	041b      	lsls	r3, r3, #16
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	061b      	lsls	r3, r3, #24
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	69db      	ldr	r3, [r3, #28]
 800a4d4:	071b      	lsls	r3, r3, #28
 800a4d6:	4917      	ldr	r1, [pc, #92]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a4de:	4b15      	ldr	r3, [pc, #84]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	4911      	ldr	r1, [pc, #68]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a0e      	ldr	r2, [pc, #56]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a500:	f7fc f944 	bl	800678c <HAL_GetTick>
 800a504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a506:	e008      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a508:	f7fc f940 	bl	800678c <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b64      	cmp	r3, #100	; 0x64
 800a514:	d901      	bls.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e007      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a51a:	4b06      	ldr	r3, [pc, #24]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a526:	d1ef      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3720      	adds	r7, #32
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	40023800 	.word	0x40023800

0800a538 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e022      	b.n	800a590 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d105      	bne.n	800a562 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7f9 fd77 	bl	8004050 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2203      	movs	r2, #3
 800a566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f814 	bl	800a598 <HAL_SD_InitCard>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e00a      	b.n	800a590 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a598:	b5b0      	push	{r4, r5, r7, lr}
 800a59a:	b08e      	sub	sp, #56	; 0x38
 800a59c:	af04      	add	r7, sp, #16
 800a59e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a5b4:	2376      	movs	r3, #118	; 0x76
 800a5b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681d      	ldr	r5, [r3, #0]
 800a5bc:	466c      	mov	r4, sp
 800a5be:	f107 0314 	add.w	r3, r7, #20
 800a5c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a5c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5ca:	f107 0308 	add.w	r3, r7, #8
 800a5ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f002 fe7d 	bl	800d2d0 <SDMMC_Init>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e059      	b.n	800a69c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5f6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f002 feb1 	bl	800d364 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a610:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a612:	2002      	movs	r0, #2
 800a614:	f7fc f8c6 	bl	80067a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 ff59 	bl	800b4d0 <SD_PowerON>
 800a61e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	431a      	orrs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e02e      	b.n	800a69c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fe78 	bl	800b334 <SD_InitCard>
 800a644:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	431a      	orrs	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e01b      	b.n	800a69c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a66c:	4618      	mov	r0, r3
 800a66e:	f002 ff0b 	bl	800d488 <SDMMC_CmdBlockLength>
 800a672:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00f      	beq.n	800a69a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <HAL_SD_InitCard+0x10c>)
 800a680:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	431a      	orrs	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3728      	adds	r7, #40	; 0x28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bdb0      	pop	{r4, r5, r7, pc}
 800a6a4:	004005ff 	.word	0x004005ff

0800a6a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08c      	sub	sp, #48	; 0x30
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d107      	bne.n	800a6d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e0c3      	b.n	800a858 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	f040 80bc 	bne.w	800a856 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	441a      	add	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d907      	bls.n	800a702 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e0aa      	b.n	800a858 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2203      	movs	r2, #3
 800a706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2200      	movs	r2, #0
 800a710:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	4a4e      	ldr	r2, [pc, #312]	; (800a860 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a728:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72e:	4a4d      	ldr	r2, [pc, #308]	; (800a864 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a730:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	2200      	movs	r2, #0
 800a738:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73e:	2200      	movs	r2, #0
 800a740:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3380      	adds	r3, #128	; 0x80
 800a768:	4619      	mov	r1, r3
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	025b      	lsls	r3, r3, #9
 800a770:	089b      	lsrs	r3, r3, #2
 800a772:	f7fc fdc9 	bl	8007308 <HAL_DMA_Start_IT>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d017      	beq.n	800a7ac <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a78a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a35      	ldr	r2, [pc, #212]	; (800a868 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a792:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a798:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e055      	b.n	800a858 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f042 0208 	orr.w	r2, r2, #8
 800a7ba:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d002      	beq.n	800a7ca <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	025b      	lsls	r3, r3, #9
 800a7c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	025b      	lsls	r3, r3, #9
 800a7d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a7d6:	2390      	movs	r3, #144	; 0x90
 800a7d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a7da:	2302      	movs	r3, #2
 800a7dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f107 0210 	add.w	r2, r7, #16
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f002 fe1d 	bl	800d430 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d90a      	bls.n	800a812 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2282      	movs	r2, #130	; 0x82
 800a800:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a808:	4618      	mov	r0, r3
 800a80a:	f002 fe81 	bl	800d510 <SDMMC_CmdReadMultiBlock>
 800a80e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a810:	e009      	b.n	800a826 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2281      	movs	r2, #129	; 0x81
 800a816:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a81e:	4618      	mov	r0, r3
 800a820:	f002 fe54 	bl	800d4cc <SDMMC_CmdReadSingleBlock>
 800a824:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d012      	beq.n	800a852 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a0d      	ldr	r2, [pc, #52]	; (800a868 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a832:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	431a      	orrs	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e002      	b.n	800a858 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	e000      	b.n	800a858 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a856:	2302      	movs	r3, #2
  }
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3730      	adds	r7, #48	; 0x30
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	0800b143 	.word	0x0800b143
 800a864:	0800b1b5 	.word	0x0800b1b5
 800a868:	004005ff 	.word	0x004005ff

0800a86c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08c      	sub	sp, #48	; 0x30
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d107      	bne.n	800a894 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a888:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e0c6      	b.n	800aa22 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	f040 80bf 	bne.w	800aa20 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	441a      	add	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d907      	bls.n	800a8c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e0ad      	b.n	800aa22 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2203      	movs	r2, #3
 800a8ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f042 021a 	orr.w	r2, r2, #26
 800a8e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ea:	4a50      	ldr	r2, [pc, #320]	; (800aa2c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a8ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8f2:	4a4f      	ldr	r2, [pc, #316]	; (800aa30 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a8f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a902:	2b01      	cmp	r3, #1
 800a904:	d002      	beq.n	800a90c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	025b      	lsls	r3, r3, #9
 800a90a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d90a      	bls.n	800a928 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	22a0      	movs	r2, #160	; 0xa0
 800a916:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a91e:	4618      	mov	r0, r3
 800a920:	f002 fe3a 	bl	800d598 <SDMMC_CmdWriteMultiBlock>
 800a924:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a926:	e009      	b.n	800a93c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2290      	movs	r2, #144	; 0x90
 800a92c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a934:	4618      	mov	r0, r3
 800a936:	f002 fe0d 	bl	800d554 <SDMMC_CmdWriteSingleBlock>
 800a93a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d012      	beq.n	800a968 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a3b      	ldr	r2, [pc, #236]	; (800aa34 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a948:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	431a      	orrs	r2, r3
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e05c      	b.n	800aa22 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f042 0208 	orr.w	r2, r2, #8
 800a976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97c:	2240      	movs	r2, #64	; 0x40
 800a97e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a990:	689a      	ldr	r2, [r3, #8]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3380      	adds	r3, #128	; 0x80
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	025b      	lsls	r3, r3, #9
 800a9ae:	089b      	lsrs	r3, r3, #2
 800a9b0:	f7fc fcaa 	bl	8007308 <HAL_DMA_Start_IT>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d01a      	beq.n	800a9f0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 021a 	bic.w	r2, r2, #26
 800a9c8:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a19      	ldr	r2, [pc, #100]	; (800aa34 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a9d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e018      	b.n	800aa22 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	025b      	lsls	r3, r3, #9
 800a9fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a9fc:	2390      	movs	r3, #144	; 0x90
 800a9fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800aa00:	2300      	movs	r3, #0
 800aa02:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f107 0210 	add.w	r2, r7, #16
 800aa14:	4611      	mov	r1, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f002 fd0a 	bl	800d430 <SDMMC_ConfigData>

      return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e000      	b.n	800aa22 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800aa20:	2302      	movs	r3, #2
  }
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3730      	adds	r7, #48	; 0x30
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	0800b119 	.word	0x0800b119
 800aa30:	0800b1b5 	.word	0x0800b1b5
 800aa34:	004005ff 	.word	0x004005ff

0800aa38 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa44:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d008      	beq.n	800aa66 <HAL_SD_IRQHandler+0x2e>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f003 0308 	and.w	r3, r3, #8
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fdec 	bl	800b63c <SD_Read_IT>
 800aa64:	e15a      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 808d 	beq.w	800ab90 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa7e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	4b9a      	ldr	r3, [pc, #616]	; (800acf4 <HAL_SD_IRQHandler+0x2bc>)
 800aa8c:	400b      	ands	r3, r1
 800aa8e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f022 0201 	bic.w	r2, r2, #1
 800aa9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f003 0308 	and.w	r3, r3, #8
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d039      	beq.n	800ab1e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d104      	bne.n	800aabe <HAL_SD_IRQHandler+0x86>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d011      	beq.n	800aae2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f002 fd8a 	bl	800d5dc <SDMMC_CmdStopTransfer>
 800aac8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d008      	beq.n	800aae2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	431a      	orrs	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f921 	bl	800ad24 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f240 523a 	movw	r2, #1338	; 0x53a
 800aaea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d104      	bne.n	800ab0e <HAL_SD_IRQHandler+0xd6>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f003 f9a8 	bl	800de64 <HAL_SD_RxCpltCallback>
 800ab14:	e102      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f003 f99a 	bl	800de50 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ab1c:	e0fe      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 80f9 	beq.w	800ad1c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f003 0320 	and.w	r3, r3, #32
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d011      	beq.n	800ab58 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f002 fd4f 	bl	800d5dc <SDMMC_CmdStopTransfer>
 800ab3e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d008      	beq.n	800ab58 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f8e6 	bl	800ad24 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f040 80dc 	bne.w	800ad1c <HAL_SD_IRQHandler+0x2e4>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f003 0302 	and.w	r3, r3, #2
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f040 80d6 	bne.w	800ad1c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f022 0208 	bic.w	r2, r2, #8
 800ab7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f003 f961 	bl	800de50 <HAL_SD_TxCpltCallback>
}
 800ab8e:	e0c5      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d008      	beq.n	800abb0 <HAL_SD_IRQHandler+0x178>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f003 0308 	and.w	r3, r3, #8
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fd98 	bl	800b6de <SD_Write_IT>
 800abae:	e0b5      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f000 80ae 	beq.w	800ad1c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d005      	beq.n	800abda <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	f043 0202 	orr.w	r2, r3, #2
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe0:	f003 0308 	and.w	r3, r3, #8
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abec:	f043 0208 	orr.w	r2, r3, #8
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d005      	beq.n	800ac0e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac06:	f043 0220 	orr.w	r2, r3, #32
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac14:	f003 0310 	and.w	r3, r3, #16
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	f043 0210 	orr.w	r2, r3, #16
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ac40:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f002 fcc8 	bl	800d5dc <SDMMC_CmdStopTransfer>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f003 0308 	and.w	r3, r3, #8
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00a      	beq.n	800ac78 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f857 	bl	800ad24 <HAL_SD_ErrorCallback>
}
 800ac76:	e051      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d04c      	beq.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f003 0310 	and.w	r3, r3, #16
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d104      	bne.n	800ac96 <HAL_SD_IRQHandler+0x25e>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f003 0320 	and.w	r3, r3, #32
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d011      	beq.n	800acba <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9a:	4a17      	ldr	r2, [pc, #92]	; (800acf8 <HAL_SD_IRQHandler+0x2c0>)
 800ac9c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fc fb90 	bl	80073c8 <HAL_DMA_Abort_IT>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d036      	beq.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fad0 	bl	800b258 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800acb8:	e030      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d104      	bne.n	800acce <HAL_SD_IRQHandler+0x296>
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	2b00      	cmp	r3, #0
 800accc:	d018      	beq.n	800ad00 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	4a0a      	ldr	r2, [pc, #40]	; (800acfc <HAL_SD_IRQHandler+0x2c4>)
 800acd4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fc fb74 	bl	80073c8 <HAL_DMA_Abort_IT>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01a      	beq.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acea:	4618      	mov	r0, r3
 800acec:	f000 faeb 	bl	800b2c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800acf0:	e014      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
 800acf2:	bf00      	nop
 800acf4:	ffff3ec5 	.word	0xffff3ec5
 800acf8:	0800b259 	.word	0x0800b259
 800acfc:	0800b2c7 	.word	0x0800b2c7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f003 f891 	bl	800de3c <HAL_SD_AbortCallback>
}
 800ad1a:	e7ff      	b.n	800ad1c <HAL_SD_IRQHandler+0x2e4>
 800ad1c:	bf00      	nop
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad46:	0f9b      	lsrs	r3, r3, #30
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad52:	0e9b      	lsrs	r3, r3, #26
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	f003 030f 	and.w	r3, r3, #15
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad64:	0e1b      	lsrs	r3, r3, #24
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f003 0303 	and.w	r3, r3, #3
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad76:	0c1b      	lsrs	r3, r3, #16
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad82:	0a1b      	lsrs	r3, r3, #8
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad98:	0d1b      	lsrs	r3, r3, #20
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ada4:	0c1b      	lsrs	r3, r3, #16
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	f003 030f 	and.w	r3, r3, #15
 800adac:	b2da      	uxtb	r2, r3
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adb6:	0bdb      	lsrs	r3, r3, #15
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adc8:	0b9b      	lsrs	r3, r3, #14
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	b2da      	uxtb	r2, r3
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adda:	0b5b      	lsrs	r3, r3, #13
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adec:	0b1b      	lsrs	r3, r3, #12
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	2200      	movs	r2, #0
 800adfe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d163      	bne.n	800aed0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae0c:	009a      	lsls	r2, r3, #2
 800ae0e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ae12:	4013      	ands	r3, r2
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ae18:	0f92      	lsrs	r2, r2, #30
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae24:	0edb      	lsrs	r3, r3, #27
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae36:	0e1b      	lsrs	r3, r3, #24
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae48:	0d5b      	lsrs	r3, r3, #21
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	f003 0307 	and.w	r3, r3, #7
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5a:	0c9b      	lsrs	r3, r3, #18
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6c:	0bdb      	lsrs	r3, r3, #15
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	7e1b      	ldrb	r3, [r3, #24]
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	3302      	adds	r3, #2
 800ae90:	2201      	movs	r2, #1
 800ae92:	fa02 f303 	lsl.w	r3, r2, r3
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ae9a:	fb03 f202 	mul.w	r2, r3, r2
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	7a1b      	ldrb	r3, [r3, #8]
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	f003 030f 	and.w	r3, r3, #15
 800aeac:	2201      	movs	r2, #1
 800aeae:	409a      	lsls	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800aebc:	0a52      	lsrs	r2, r2, #9
 800aebe:	fb03 f202 	mul.w	r2, r3, r2
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aecc:	661a      	str	r2, [r3, #96]	; 0x60
 800aece:	e031      	b.n	800af34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d11d      	bne.n	800af14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aedc:	041b      	lsls	r3, r3, #16
 800aede:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee6:	0c1b      	lsrs	r3, r3, #16
 800aee8:	431a      	orrs	r2, r3
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	3301      	adds	r3, #1
 800aef4:	029a      	lsls	r2, r3, #10
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	661a      	str	r2, [r3, #96]	; 0x60
 800af12:	e00f      	b.n	800af34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a58      	ldr	r2, [pc, #352]	; (800b07c <HAL_SD_GetCardCSD+0x344>)
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e09d      	b.n	800b070 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af38:	0b9b      	lsrs	r3, r3, #14
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	b2da      	uxtb	r2, r3
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af4a:	09db      	lsrs	r3, r3, #7
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af52:	b2da      	uxtb	r2, r3
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af62:	b2da      	uxtb	r2, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6c:	0fdb      	lsrs	r3, r3, #31
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af78:	0f5b      	lsrs	r3, r3, #29
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	b2da      	uxtb	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8a:	0e9b      	lsrs	r3, r3, #26
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	f003 0307 	and.w	r3, r3, #7
 800af92:	b2da      	uxtb	r2, r3
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9c:	0d9b      	lsrs	r3, r3, #22
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	f003 030f 	and.w	r3, r3, #15
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afae:	0d5b      	lsrs	r3, r3, #21
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	0c1b      	lsrs	r3, r3, #16
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	b2da      	uxtb	r2, r3
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afde:	0bdb      	lsrs	r3, r3, #15
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	f003 0301 	and.w	r3, r3, #1
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	0b9b      	lsrs	r3, r3, #14
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	b2da      	uxtb	r2, r3
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b006:	0b5b      	lsrs	r3, r3, #13
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01a:	0b1b      	lsrs	r3, r3, #12
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	b2da      	uxtb	r2, r3
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02e:	0a9b      	lsrs	r3, r3, #10
 800b030:	b2db      	uxtb	r3, r3
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	b2da      	uxtb	r2, r3
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b042:	0a1b      	lsrs	r3, r3, #8
 800b044:	b2db      	uxtb	r3, r3
 800b046:	f003 0303 	and.w	r3, r3, #3
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b056:	085b      	lsrs	r3, r3, #1
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2201      	movs	r2, #1
 800b06a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	004005ff 	.word	0x004005ff

0800b080 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b0e4:	f107 030c 	add.w	r3, r7, #12
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fa7e 	bl	800b5ec <SD_SendStatus>
 800b0f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d005      	beq.n	800b104 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	431a      	orrs	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	0a5b      	lsrs	r3, r3, #9
 800b108:	f003 030f 	and.w	r3, r3, #15
 800b10c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b10e:	693b      	ldr	r3, [r7, #16]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3718      	adds	r7, #24
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b124:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b134:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b136:	bf00      	nop
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b154:	2b82      	cmp	r3, #130	; 0x82
 800b156:	d111      	bne.n	800b17c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f002 fa3d 	bl	800d5dc <SDMMC_CmdStopTransfer>
 800b162:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d008      	beq.n	800b17c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	431a      	orrs	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f7ff fdd4 	bl	800ad24 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f022 0208 	bic.w	r2, r2, #8
 800b18a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f240 523a 	movw	r2, #1338	; 0x53a
 800b194:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f002 fe5d 	bl	800de64 <HAL_SD_RxCpltCallback>
#endif
}
 800b1aa:	bf00      	nop
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
	...

0800b1b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7fc faac 	bl	8007720 <HAL_DMA_GetError>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d03e      	beq.n	800b24c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1d4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1dc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d002      	beq.n	800b1ea <SD_DMAError+0x36>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d12d      	bne.n	800b246 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a19      	ldr	r2, [pc, #100]	; (800b254 <SD_DMAError+0xa0>)
 800b1f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b200:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b206:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b20e:	6978      	ldr	r0, [r7, #20]
 800b210:	f7ff ff62 	bl	800b0d8 <HAL_SD_GetCardState>
 800b214:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b06      	cmp	r3, #6
 800b21a:	d002      	beq.n	800b222 <SD_DMAError+0x6e>
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2b05      	cmp	r3, #5
 800b220:	d10a      	bne.n	800b238 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4618      	mov	r0, r3
 800b228:	f002 f9d8 	bl	800d5dc <SDMMC_CmdStopTransfer>
 800b22c:	4602      	mov	r2, r0
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b232:	431a      	orrs	r2, r3
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	2200      	movs	r2, #0
 800b244:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b246:	6978      	ldr	r0, [r7, #20]
 800b248:	f7ff fd6c 	bl	800ad24 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b24c:	bf00      	nop
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	004005ff 	.word	0x004005ff

0800b258 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b264:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b26e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7ff ff31 	bl	800b0d8 <HAL_SD_GetCardState>
 800b276:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b06      	cmp	r3, #6
 800b28a:	d002      	beq.n	800b292 <SD_DMATxAbort+0x3a>
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2b05      	cmp	r3, #5
 800b290:	d10a      	bne.n	800b2a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f002 f9a0 	bl	800d5dc <SDMMC_CmdStopTransfer>
 800b29c:	4602      	mov	r2, r0
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a2:	431a      	orrs	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d103      	bne.n	800b2b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f002 fdc3 	bl	800de3c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b2b6:	e002      	b.n	800b2be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f7ff fd33 	bl	800ad24 <HAL_SD_ErrorCallback>
}
 800b2be:	bf00      	nop
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2dc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7ff fefa 	bl	800b0d8 <HAL_SD_GetCardState>
 800b2e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2b06      	cmp	r3, #6
 800b2f8:	d002      	beq.n	800b300 <SD_DMARxAbort+0x3a>
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2b05      	cmp	r3, #5
 800b2fe:	d10a      	bne.n	800b316 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f002 f969 	bl	800d5dc <SDMMC_CmdStopTransfer>
 800b30a:	4602      	mov	r2, r0
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b310:	431a      	orrs	r2, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d103      	bne.n	800b326 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f002 fd8c 	bl	800de3c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b324:	e002      	b.n	800b32c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7ff fcfc 	bl	800ad24 <HAL_SD_ErrorCallback>
}
 800b32c:	bf00      	nop
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b334:	b5b0      	push	{r4, r5, r7, lr}
 800b336:	b094      	sub	sp, #80	; 0x50
 800b338:	af04      	add	r7, sp, #16
 800b33a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b33c:	2301      	movs	r3, #1
 800b33e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f002 f81b 	bl	800d380 <SDMMC_GetPowerState>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d102      	bne.n	800b356 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b350:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b354:	e0b8      	b.n	800b4c8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d02f      	beq.n	800b3be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f002 fa02 	bl	800d76c <SDMMC_CmdSendCID>
 800b368:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <SD_InitCard+0x40>
    {
      return errorstate;
 800b370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b372:	e0a9      	b.n	800b4c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2100      	movs	r1, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f002 f845 	bl	800d40a <SDMMC_GetResponse>
 800b380:	4602      	mov	r2, r0
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2104      	movs	r1, #4
 800b38c:	4618      	mov	r0, r3
 800b38e:	f002 f83c 	bl	800d40a <SDMMC_GetResponse>
 800b392:	4602      	mov	r2, r0
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2108      	movs	r1, #8
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f002 f833 	bl	800d40a <SDMMC_GetResponse>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	210c      	movs	r1, #12
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f002 f82a 	bl	800d40a <SDMMC_GetResponse>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d00d      	beq.n	800b3e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f107 020e 	add.w	r2, r7, #14
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f002 fa08 	bl	800d7e6 <SDMMC_CmdSetRelAdd>
 800b3d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e0:	e072      	b.n	800b4c8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3e6:	2b03      	cmp	r3, #3
 800b3e8:	d036      	beq.n	800b458 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b3ea:	89fb      	ldrh	r3, [r7, #14]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3fa:	041b      	lsls	r3, r3, #16
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f002 f9d2 	bl	800d7a8 <SDMMC_CmdSendCSD>
 800b404:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40e:	e05b      	b.n	800b4c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2100      	movs	r1, #0
 800b416:	4618      	mov	r0, r3
 800b418:	f001 fff7 	bl	800d40a <SDMMC_GetResponse>
 800b41c:	4602      	mov	r2, r0
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2104      	movs	r1, #4
 800b428:	4618      	mov	r0, r3
 800b42a:	f001 ffee 	bl	800d40a <SDMMC_GetResponse>
 800b42e:	4602      	mov	r2, r0
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2108      	movs	r1, #8
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 ffe5 	bl	800d40a <SDMMC_GetResponse>
 800b440:	4602      	mov	r2, r0
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	210c      	movs	r1, #12
 800b44c:	4618      	mov	r0, r3
 800b44e:	f001 ffdc 	bl	800d40a <SDMMC_GetResponse>
 800b452:	4602      	mov	r2, r0
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2104      	movs	r1, #4
 800b45e:	4618      	mov	r0, r3
 800b460:	f001 ffd3 	bl	800d40a <SDMMC_GetResponse>
 800b464:	4603      	mov	r3, r0
 800b466:	0d1a      	lsrs	r2, r3, #20
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b46c:	f107 0310 	add.w	r3, r7, #16
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fc60 	bl	800ad38 <HAL_SD_GetCardCSD>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b47e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b482:	e021      	b.n	800b4c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6819      	ldr	r1, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b48c:	041b      	lsls	r3, r3, #16
 800b48e:	2200      	movs	r2, #0
 800b490:	461c      	mov	r4, r3
 800b492:	4615      	mov	r5, r2
 800b494:	4622      	mov	r2, r4
 800b496:	462b      	mov	r3, r5
 800b498:	4608      	mov	r0, r1
 800b49a:	f002 f8c1 	bl	800d620 <SDMMC_CmdSelDesel>
 800b49e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <SD_InitCard+0x176>
  {
    return errorstate;
 800b4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4a8:	e00e      	b.n	800b4c8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681d      	ldr	r5, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	466c      	mov	r4, sp
 800b4b2:	f103 0210 	add.w	r2, r3, #16
 800b4b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4bc:	3304      	adds	r3, #4
 800b4be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	f001 ff05 	bl	800d2d0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3740      	adds	r7, #64	; 0x40
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bdb0      	pop	{r4, r5, r7, pc}

0800b4d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f002 f8bc 	bl	800d666 <SDMMC_CmdGoIdleState>
 800b4ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <SD_PowerON+0x2a>
  {
    return errorstate;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	e072      	b.n	800b5e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f002 f8cf 	bl	800d6a2 <SDMMC_CmdOperCond>
 800b504:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00d      	beq.n	800b528 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4618      	mov	r0, r3
 800b518:	f002 f8a5 	bl	800d666 <SDMMC_CmdGoIdleState>
 800b51c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	e05b      	b.n	800b5e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b532:	2b01      	cmp	r3, #1
 800b534:	d137      	bne.n	800b5a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f002 f8cf 	bl	800d6e0 <SDMMC_CmdAppCommand>
 800b542:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d02d      	beq.n	800b5a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b54a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b54e:	e047      	b.n	800b5e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2100      	movs	r1, #0
 800b556:	4618      	mov	r0, r3
 800b558:	f002 f8c2 	bl	800d6e0 <SDMMC_CmdAppCommand>
 800b55c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <SD_PowerON+0x98>
    {
      return errorstate;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	e03b      	b.n	800b5e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	491e      	ldr	r1, [pc, #120]	; (800b5e8 <SD_PowerON+0x118>)
 800b56e:	4618      	mov	r0, r3
 800b570:	f002 f8d8 	bl	800d724 <SDMMC_CmdAppOperCommand>
 800b574:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d002      	beq.n	800b582 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b57c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b580:	e02e      	b.n	800b5e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2100      	movs	r1, #0
 800b588:	4618      	mov	r0, r3
 800b58a:	f001 ff3e 	bl	800d40a <SDMMC_GetResponse>
 800b58e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	0fdb      	lsrs	r3, r3, #31
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <SD_PowerON+0xcc>
 800b598:	2301      	movs	r3, #1
 800b59a:	e000      	b.n	800b59e <SD_PowerON+0xce>
 800b59c:	2300      	movs	r3, #0
 800b59e:	613b      	str	r3, [r7, #16]

    count++;
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d802      	bhi.n	800b5b6 <SD_PowerON+0xe6>
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0cc      	beq.n	800b550 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d902      	bls.n	800b5c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b5c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5c4:	e00c      	b.n	800b5e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	645a      	str	r2, [r3, #68]	; 0x44
 800b5d6:	e002      	b.n	800b5de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	c1100000 	.word	0xc1100000

0800b5ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d102      	bne.n	800b602 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b5fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b600:	e018      	b.n	800b634 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60a:	041b      	lsls	r3, r3, #16
 800b60c:	4619      	mov	r1, r3
 800b60e:	4610      	mov	r0, r2
 800b610:	f002 f90a 	bl	800d828 <SDMMC_CmdSendStatus>
 800b614:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	e009      	b.n	800b634 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2100      	movs	r1, #0
 800b626:	4618      	mov	r0, r3
 800b628:	f001 feef 	bl	800d40a <SDMMC_GetResponse>
 800b62c:	4602      	mov	r2, r0
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b648:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d03f      	beq.n	800b6d6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
 800b65a:	e033      	b.n	800b6c4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f001 fe61 	bl	800d328 <SDMMC_ReadFIFO>
 800b666:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3301      	adds	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	3b01      	subs	r3, #1
 800b67a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	0a1b      	lsrs	r3, r3, #8
 800b680:	b2da      	uxtb	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3301      	adds	r3, #1
 800b68a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	3b01      	subs	r3, #1
 800b690:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	0c1b      	lsrs	r3, r3, #16
 800b696:	b2da      	uxtb	r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	0e1b      	lsrs	r3, r3, #24
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	617b      	str	r3, [r7, #20]
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2b07      	cmp	r3, #7
 800b6c8:	d9c8      	bls.n	800b65c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b6d6:	bf00      	nop
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b086      	sub	sp, #24
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
 800b6ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d043      	beq.n	800b780 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e037      	b.n	800b76e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	3301      	adds	r3, #1
 800b708:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	3b01      	subs	r3, #1
 800b70e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	021a      	lsls	r2, r3, #8
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	4313      	orrs	r3, r2
 800b71a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	3301      	adds	r3, #1
 800b720:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	3b01      	subs	r3, #1
 800b726:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	041a      	lsls	r2, r3, #16
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	4313      	orrs	r3, r2
 800b732:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3301      	adds	r3, #1
 800b738:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	061a      	lsls	r2, r3, #24
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3301      	adds	r3, #1
 800b750:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	3b01      	subs	r3, #1
 800b756:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f107 0208 	add.w	r2, r7, #8
 800b760:	4611      	mov	r1, r2
 800b762:	4618      	mov	r0, r3
 800b764:	f001 fded 	bl	800d342 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	3301      	adds	r3, #1
 800b76c:	617b      	str	r3, [r7, #20]
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2b07      	cmp	r3, #7
 800b772:	d9c4      	bls.n	800b6fe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b780:	bf00      	nop
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	e025      	b.n	800b7e8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d106      	bne.n	800b7b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7f7 fad1 	bl	8002d58 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	f001 fc7f 	bl	800d0cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6818      	ldr	r0, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	f001 fcd3 	bl	800d184 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b802:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	2b02      	cmp	r3, #2
 800b808:	d101      	bne.n	800b80e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b80a:	2302      	movs	r3, #2
 800b80c:	e021      	b.n	800b852 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d002      	beq.n	800b81a <HAL_SDRAM_SendCommand+0x2a>
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	2b05      	cmp	r3, #5
 800b818:	d118      	bne.n	800b84c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2202      	movs	r2, #2
 800b81e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	68b9      	ldr	r1, [r7, #8]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 fd14 	bl	800d258 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b02      	cmp	r3, #2
 800b836:	d104      	bne.n	800b842 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2205      	movs	r2, #5
 800b83c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b840:	e006      	b.n	800b850 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b84a:	e001      	b.n	800b850 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e000      	b.n	800b852 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d101      	bne.n	800b874 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b870:	2302      	movs	r3, #2
 800b872:	e016      	b.n	800b8a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d10f      	bne.n	800b8a0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2202      	movs	r2, #2
 800b884:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	4618      	mov	r0, r3
 800b890:	f001 fd06 	bl	800d2a0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	e000      	b.n	800b8a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d101      	bne.n	800b8bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e049      	b.n	800b950 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7f8 ffed 	bl	80048b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2202      	movs	r2, #2
 800b8da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	f000 fc7d 	bl	800c1e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d001      	beq.n	800b970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e054      	b.n	800ba1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68da      	ldr	r2, [r3, #12]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0201 	orr.w	r2, r2, #1
 800b986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a26      	ldr	r2, [pc, #152]	; (800ba28 <HAL_TIM_Base_Start_IT+0xd0>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d022      	beq.n	800b9d8 <HAL_TIM_Base_Start_IT+0x80>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b99a:	d01d      	beq.n	800b9d8 <HAL_TIM_Base_Start_IT+0x80>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a22      	ldr	r2, [pc, #136]	; (800ba2c <HAL_TIM_Base_Start_IT+0xd4>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d018      	beq.n	800b9d8 <HAL_TIM_Base_Start_IT+0x80>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a21      	ldr	r2, [pc, #132]	; (800ba30 <HAL_TIM_Base_Start_IT+0xd8>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d013      	beq.n	800b9d8 <HAL_TIM_Base_Start_IT+0x80>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a1f      	ldr	r2, [pc, #124]	; (800ba34 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d00e      	beq.n	800b9d8 <HAL_TIM_Base_Start_IT+0x80>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a1e      	ldr	r2, [pc, #120]	; (800ba38 <HAL_TIM_Base_Start_IT+0xe0>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d009      	beq.n	800b9d8 <HAL_TIM_Base_Start_IT+0x80>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a1c      	ldr	r2, [pc, #112]	; (800ba3c <HAL_TIM_Base_Start_IT+0xe4>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d004      	beq.n	800b9d8 <HAL_TIM_Base_Start_IT+0x80>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a1b      	ldr	r2, [pc, #108]	; (800ba40 <HAL_TIM_Base_Start_IT+0xe8>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d115      	bne.n	800ba04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	689a      	ldr	r2, [r3, #8]
 800b9de:	4b19      	ldr	r3, [pc, #100]	; (800ba44 <HAL_TIM_Base_Start_IT+0xec>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b06      	cmp	r3, #6
 800b9e8:	d015      	beq.n	800ba16 <HAL_TIM_Base_Start_IT+0xbe>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f0:	d011      	beq.n	800ba16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f042 0201 	orr.w	r2, r2, #1
 800ba00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba02:	e008      	b.n	800ba16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f042 0201 	orr.w	r2, r2, #1
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	e000      	b.n	800ba18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	40010000 	.word	0x40010000
 800ba2c:	40000400 	.word	0x40000400
 800ba30:	40000800 	.word	0x40000800
 800ba34:	40000c00 	.word	0x40000c00
 800ba38:	40010400 	.word	0x40010400
 800ba3c:	40014000 	.word	0x40014000
 800ba40:	40001800 	.word	0x40001800
 800ba44:	00010007 	.word	0x00010007

0800ba48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e049      	b.n	800baee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d106      	bne.n	800ba74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7f8 fe9a 	bl	80047a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2202      	movs	r2, #2
 800ba78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4619      	mov	r1, r3
 800ba86:	4610      	mov	r0, r2
 800ba88:	f000 fbae 	bl	800c1e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
	...

0800baf8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d104      	bne.n	800bb16 <HAL_TIM_IC_Start_IT+0x1e>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	e023      	b.n	800bb5e <HAL_TIM_IC_Start_IT+0x66>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2b04      	cmp	r3, #4
 800bb1a:	d104      	bne.n	800bb26 <HAL_TIM_IC_Start_IT+0x2e>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	e01b      	b.n	800bb5e <HAL_TIM_IC_Start_IT+0x66>
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b08      	cmp	r3, #8
 800bb2a:	d104      	bne.n	800bb36 <HAL_TIM_IC_Start_IT+0x3e>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	e013      	b.n	800bb5e <HAL_TIM_IC_Start_IT+0x66>
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b0c      	cmp	r3, #12
 800bb3a:	d104      	bne.n	800bb46 <HAL_TIM_IC_Start_IT+0x4e>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	e00b      	b.n	800bb5e <HAL_TIM_IC_Start_IT+0x66>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b10      	cmp	r3, #16
 800bb4a:	d104      	bne.n	800bb56 <HAL_TIM_IC_Start_IT+0x5e>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	e003      	b.n	800bb5e <HAL_TIM_IC_Start_IT+0x66>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d104      	bne.n	800bb70 <HAL_TIM_IC_Start_IT+0x78>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	e013      	b.n	800bb98 <HAL_TIM_IC_Start_IT+0xa0>
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d104      	bne.n	800bb80 <HAL_TIM_IC_Start_IT+0x88>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	e00b      	b.n	800bb98 <HAL_TIM_IC_Start_IT+0xa0>
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	2b08      	cmp	r3, #8
 800bb84:	d104      	bne.n	800bb90 <HAL_TIM_IC_Start_IT+0x98>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	e003      	b.n	800bb98 <HAL_TIM_IC_Start_IT+0xa0>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d102      	bne.n	800bba6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800bba0:	7b7b      	ldrb	r3, [r7, #13]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d001      	beq.n	800bbaa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e0e2      	b.n	800bd70 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d104      	bne.n	800bbba <HAL_TIM_IC_Start_IT+0xc2>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbb8:	e023      	b.n	800bc02 <HAL_TIM_IC_Start_IT+0x10a>
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	d104      	bne.n	800bbca <HAL_TIM_IC_Start_IT+0xd2>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbc8:	e01b      	b.n	800bc02 <HAL_TIM_IC_Start_IT+0x10a>
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	2b08      	cmp	r3, #8
 800bbce:	d104      	bne.n	800bbda <HAL_TIM_IC_Start_IT+0xe2>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbd8:	e013      	b.n	800bc02 <HAL_TIM_IC_Start_IT+0x10a>
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	2b0c      	cmp	r3, #12
 800bbde:	d104      	bne.n	800bbea <HAL_TIM_IC_Start_IT+0xf2>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbe8:	e00b      	b.n	800bc02 <HAL_TIM_IC_Start_IT+0x10a>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	d104      	bne.n	800bbfa <HAL_TIM_IC_Start_IT+0x102>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbf8:	e003      	b.n	800bc02 <HAL_TIM_IC_Start_IT+0x10a>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d104      	bne.n	800bc12 <HAL_TIM_IC_Start_IT+0x11a>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc10:	e013      	b.n	800bc3a <HAL_TIM_IC_Start_IT+0x142>
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b04      	cmp	r3, #4
 800bc16:	d104      	bne.n	800bc22 <HAL_TIM_IC_Start_IT+0x12a>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc20:	e00b      	b.n	800bc3a <HAL_TIM_IC_Start_IT+0x142>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2b08      	cmp	r3, #8
 800bc26:	d104      	bne.n	800bc32 <HAL_TIM_IC_Start_IT+0x13a>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc30:	e003      	b.n	800bc3a <HAL_TIM_IC_Start_IT+0x142>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2202      	movs	r2, #2
 800bc36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2b0c      	cmp	r3, #12
 800bc3e:	d841      	bhi.n	800bcc4 <HAL_TIM_IC_Start_IT+0x1cc>
 800bc40:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <HAL_TIM_IC_Start_IT+0x150>)
 800bc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc46:	bf00      	nop
 800bc48:	0800bc7d 	.word	0x0800bc7d
 800bc4c:	0800bcc5 	.word	0x0800bcc5
 800bc50:	0800bcc5 	.word	0x0800bcc5
 800bc54:	0800bcc5 	.word	0x0800bcc5
 800bc58:	0800bc8f 	.word	0x0800bc8f
 800bc5c:	0800bcc5 	.word	0x0800bcc5
 800bc60:	0800bcc5 	.word	0x0800bcc5
 800bc64:	0800bcc5 	.word	0x0800bcc5
 800bc68:	0800bca1 	.word	0x0800bca1
 800bc6c:	0800bcc5 	.word	0x0800bcc5
 800bc70:	0800bcc5 	.word	0x0800bcc5
 800bc74:	0800bcc5 	.word	0x0800bcc5
 800bc78:	0800bcb3 	.word	0x0800bcb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68da      	ldr	r2, [r3, #12]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f042 0202 	orr.w	r2, r2, #2
 800bc8a:	60da      	str	r2, [r3, #12]
      break;
 800bc8c:	e01d      	b.n	800bcca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68da      	ldr	r2, [r3, #12]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f042 0204 	orr.w	r2, r2, #4
 800bc9c:	60da      	str	r2, [r3, #12]
      break;
 800bc9e:	e014      	b.n	800bcca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f042 0208 	orr.w	r2, r2, #8
 800bcae:	60da      	str	r2, [r3, #12]
      break;
 800bcb0:	e00b      	b.n	800bcca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f042 0210 	orr.w	r2, r2, #16
 800bcc0:	60da      	str	r2, [r3, #12]
      break;
 800bcc2:	e002      	b.n	800bcca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc8:	bf00      	nop
  }

  if (status == HAL_OK)
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d14e      	bne.n	800bd6e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 fc4f 	bl	800c57c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a25      	ldr	r2, [pc, #148]	; (800bd78 <HAL_TIM_IC_Start_IT+0x280>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d022      	beq.n	800bd2e <HAL_TIM_IC_Start_IT+0x236>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf0:	d01d      	beq.n	800bd2e <HAL_TIM_IC_Start_IT+0x236>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a21      	ldr	r2, [pc, #132]	; (800bd7c <HAL_TIM_IC_Start_IT+0x284>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d018      	beq.n	800bd2e <HAL_TIM_IC_Start_IT+0x236>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1f      	ldr	r2, [pc, #124]	; (800bd80 <HAL_TIM_IC_Start_IT+0x288>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d013      	beq.n	800bd2e <HAL_TIM_IC_Start_IT+0x236>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a1e      	ldr	r2, [pc, #120]	; (800bd84 <HAL_TIM_IC_Start_IT+0x28c>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d00e      	beq.n	800bd2e <HAL_TIM_IC_Start_IT+0x236>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a1c      	ldr	r2, [pc, #112]	; (800bd88 <HAL_TIM_IC_Start_IT+0x290>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d009      	beq.n	800bd2e <HAL_TIM_IC_Start_IT+0x236>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a1b      	ldr	r2, [pc, #108]	; (800bd8c <HAL_TIM_IC_Start_IT+0x294>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d004      	beq.n	800bd2e <HAL_TIM_IC_Start_IT+0x236>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a19      	ldr	r2, [pc, #100]	; (800bd90 <HAL_TIM_IC_Start_IT+0x298>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d115      	bne.n	800bd5a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689a      	ldr	r2, [r3, #8]
 800bd34:	4b17      	ldr	r3, [pc, #92]	; (800bd94 <HAL_TIM_IC_Start_IT+0x29c>)
 800bd36:	4013      	ands	r3, r2
 800bd38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	2b06      	cmp	r3, #6
 800bd3e:	d015      	beq.n	800bd6c <HAL_TIM_IC_Start_IT+0x274>
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd46:	d011      	beq.n	800bd6c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0201 	orr.w	r2, r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd58:	e008      	b.n	800bd6c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f042 0201 	orr.w	r2, r2, #1
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	e000      	b.n	800bd6e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd6c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	40010000 	.word	0x40010000
 800bd7c:	40000400 	.word	0x40000400
 800bd80:	40000800 	.word	0x40000800
 800bd84:	40000c00 	.word	0x40000c00
 800bd88:	40010400 	.word	0x40010400
 800bd8c:	40014000 	.word	0x40014000
 800bd90:	40001800 	.word	0x40001800
 800bd94:	00010007 	.word	0x00010007

0800bd98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	f003 0302 	and.w	r3, r3, #2
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d122      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d11b      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f06f 0202 	mvn.w	r2, #2
 800bdc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	f003 0303 	and.w	r3, r3, #3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7f8 f84e 	bl	8003e7c <HAL_TIM_IC_CaptureCallback>
 800bde0:	e005      	b.n	800bdee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f9e2 	bl	800c1ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f9e9 	bl	800c1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	f003 0304 	and.w	r3, r3, #4
 800bdfe:	2b04      	cmp	r3, #4
 800be00:	d122      	bne.n	800be48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	f003 0304 	and.w	r3, r3, #4
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	d11b      	bne.n	800be48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f06f 0204 	mvn.w	r2, #4
 800be18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2202      	movs	r2, #2
 800be1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7f8 f824 	bl	8003e7c <HAL_TIM_IC_CaptureCallback>
 800be34:	e005      	b.n	800be42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f9b8 	bl	800c1ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f9bf 	bl	800c1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	f003 0308 	and.w	r3, r3, #8
 800be52:	2b08      	cmp	r3, #8
 800be54:	d122      	bne.n	800be9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f003 0308 	and.w	r3, r3, #8
 800be60:	2b08      	cmp	r3, #8
 800be62:	d11b      	bne.n	800be9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f06f 0208 	mvn.w	r2, #8
 800be6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2204      	movs	r2, #4
 800be72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	f003 0303 	and.w	r3, r3, #3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7f7 fffa 	bl	8003e7c <HAL_TIM_IC_CaptureCallback>
 800be88:	e005      	b.n	800be96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f98e 	bl	800c1ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f995 	bl	800c1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f003 0310 	and.w	r3, r3, #16
 800bea6:	2b10      	cmp	r3, #16
 800bea8:	d122      	bne.n	800bef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f003 0310 	and.w	r3, r3, #16
 800beb4:	2b10      	cmp	r3, #16
 800beb6:	d11b      	bne.n	800bef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0210 	mvn.w	r2, #16
 800bec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2208      	movs	r2, #8
 800bec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7f7 ffd0 	bl	8003e7c <HAL_TIM_IC_CaptureCallback>
 800bedc:	e005      	b.n	800beea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f964 	bl	800c1ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f96b 	bl	800c1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b01      	cmp	r3, #1
 800befc:	d10e      	bne.n	800bf1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d107      	bne.n	800bf1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f06f 0201 	mvn.w	r2, #1
 800bf14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f93e 	bl	800c198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf26:	2b80      	cmp	r3, #128	; 0x80
 800bf28:	d10e      	bne.n	800bf48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf34:	2b80      	cmp	r3, #128	; 0x80
 800bf36:	d107      	bne.n	800bf48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fbd8 	bl	800c6f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf56:	d10e      	bne.n	800bf76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf62:	2b80      	cmp	r3, #128	; 0x80
 800bf64:	d107      	bne.n	800bf76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fbcb 	bl	800c70c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf80:	2b40      	cmp	r3, #64	; 0x40
 800bf82:	d10e      	bne.n	800bfa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf8e:	2b40      	cmp	r3, #64	; 0x40
 800bf90:	d107      	bne.n	800bfa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 f919 	bl	800c1d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	f003 0320 	and.w	r3, r3, #32
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	d10e      	bne.n	800bfce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	f003 0320 	and.w	r3, r3, #32
 800bfba:	2b20      	cmp	r3, #32
 800bfbc:	d107      	bne.n	800bfce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f06f 0220 	mvn.w	r2, #32
 800bfc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fb8b 	bl	800c6e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfce:	bf00      	nop
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b086      	sub	sp, #24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d101      	bne.n	800bff4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800bff0:	2302      	movs	r3, #2
 800bff2:	e088      	b.n	800c106 <HAL_TIM_IC_ConfigChannel+0x130>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d11b      	bne.n	800c03a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c012:	f000 f989 	bl	800c328 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	699a      	ldr	r2, [r3, #24]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f022 020c 	bic.w	r2, r2, #12
 800c024:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6999      	ldr	r1, [r3, #24]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	430a      	orrs	r2, r1
 800c036:	619a      	str	r2, [r3, #24]
 800c038:	e060      	b.n	800c0fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b04      	cmp	r3, #4
 800c03e:	d11c      	bne.n	800c07a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c050:	f000 f9de 	bl	800c410 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	699a      	ldr	r2, [r3, #24]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c062:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6999      	ldr	r1, [r3, #24]
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	021a      	lsls	r2, r3, #8
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	430a      	orrs	r2, r1
 800c076:	619a      	str	r2, [r3, #24]
 800c078:	e040      	b.n	800c0fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b08      	cmp	r3, #8
 800c07e:	d11b      	bne.n	800c0b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c090:	f000 f9fb 	bl	800c48a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	69da      	ldr	r2, [r3, #28]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f022 020c 	bic.w	r2, r2, #12
 800c0a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	69d9      	ldr	r1, [r3, #28]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	689a      	ldr	r2, [r3, #8]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	61da      	str	r2, [r3, #28]
 800c0b6:	e021      	b.n	800c0fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b0c      	cmp	r3, #12
 800c0bc:	d11c      	bne.n	800c0f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800c0ce:	f000 fa18 	bl	800c502 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	69da      	ldr	r2, [r3, #28]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c0e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	69d9      	ldr	r1, [r3, #28]
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	021a      	lsls	r2, r3, #8
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	61da      	str	r2, [r3, #28]
 800c0f6:	e001      	b.n	800c0fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c104:	7dfb      	ldrb	r3, [r7, #23]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c11a:	2300      	movs	r3, #0
 800c11c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2b0c      	cmp	r3, #12
 800c122:	d831      	bhi.n	800c188 <HAL_TIM_ReadCapturedValue+0x78>
 800c124:	a201      	add	r2, pc, #4	; (adr r2, 800c12c <HAL_TIM_ReadCapturedValue+0x1c>)
 800c126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c12a:	bf00      	nop
 800c12c:	0800c161 	.word	0x0800c161
 800c130:	0800c189 	.word	0x0800c189
 800c134:	0800c189 	.word	0x0800c189
 800c138:	0800c189 	.word	0x0800c189
 800c13c:	0800c16b 	.word	0x0800c16b
 800c140:	0800c189 	.word	0x0800c189
 800c144:	0800c189 	.word	0x0800c189
 800c148:	0800c189 	.word	0x0800c189
 800c14c:	0800c175 	.word	0x0800c175
 800c150:	0800c189 	.word	0x0800c189
 800c154:	0800c189 	.word	0x0800c189
 800c158:	0800c189 	.word	0x0800c189
 800c15c:	0800c17f 	.word	0x0800c17f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c166:	60fb      	str	r3, [r7, #12]

      break;
 800c168:	e00f      	b.n	800c18a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c170:	60fb      	str	r3, [r7, #12]

      break;
 800c172:	e00a      	b.n	800c18a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c17a:	60fb      	str	r3, [r7, #12]

      break;
 800c17c:	e005      	b.n	800c18a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c184:	60fb      	str	r3, [r7, #12]

      break;
 800c186:	e000      	b.n	800c18a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c188:	bf00      	nop
  }

  return tmpreg;
 800c18a:	68fb      	ldr	r3, [r7, #12]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1b4:	bf00      	nop
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a40      	ldr	r2, [pc, #256]	; (800c2fc <TIM_Base_SetConfig+0x114>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d013      	beq.n	800c228 <TIM_Base_SetConfig+0x40>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c206:	d00f      	beq.n	800c228 <TIM_Base_SetConfig+0x40>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a3d      	ldr	r2, [pc, #244]	; (800c300 <TIM_Base_SetConfig+0x118>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d00b      	beq.n	800c228 <TIM_Base_SetConfig+0x40>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a3c      	ldr	r2, [pc, #240]	; (800c304 <TIM_Base_SetConfig+0x11c>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d007      	beq.n	800c228 <TIM_Base_SetConfig+0x40>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a3b      	ldr	r2, [pc, #236]	; (800c308 <TIM_Base_SetConfig+0x120>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d003      	beq.n	800c228 <TIM_Base_SetConfig+0x40>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a3a      	ldr	r2, [pc, #232]	; (800c30c <TIM_Base_SetConfig+0x124>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d108      	bne.n	800c23a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c22e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	4313      	orrs	r3, r2
 800c238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a2f      	ldr	r2, [pc, #188]	; (800c2fc <TIM_Base_SetConfig+0x114>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d02b      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c248:	d027      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a2c      	ldr	r2, [pc, #176]	; (800c300 <TIM_Base_SetConfig+0x118>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d023      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a2b      	ldr	r2, [pc, #172]	; (800c304 <TIM_Base_SetConfig+0x11c>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d01f      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a2a      	ldr	r2, [pc, #168]	; (800c308 <TIM_Base_SetConfig+0x120>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d01b      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a29      	ldr	r2, [pc, #164]	; (800c30c <TIM_Base_SetConfig+0x124>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d017      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a28      	ldr	r2, [pc, #160]	; (800c310 <TIM_Base_SetConfig+0x128>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d013      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a27      	ldr	r2, [pc, #156]	; (800c314 <TIM_Base_SetConfig+0x12c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d00f      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a26      	ldr	r2, [pc, #152]	; (800c318 <TIM_Base_SetConfig+0x130>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d00b      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a25      	ldr	r2, [pc, #148]	; (800c31c <TIM_Base_SetConfig+0x134>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d007      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a24      	ldr	r2, [pc, #144]	; (800c320 <TIM_Base_SetConfig+0x138>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d003      	beq.n	800c29a <TIM_Base_SetConfig+0xb2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a23      	ldr	r2, [pc, #140]	; (800c324 <TIM_Base_SetConfig+0x13c>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d108      	bne.n	800c2ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	689a      	ldr	r2, [r3, #8]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a0a      	ldr	r2, [pc, #40]	; (800c2fc <TIM_Base_SetConfig+0x114>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d003      	beq.n	800c2e0 <TIM_Base_SetConfig+0xf8>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a0c      	ldr	r2, [pc, #48]	; (800c30c <TIM_Base_SetConfig+0x124>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d103      	bne.n	800c2e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	691a      	ldr	r2, [r3, #16]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	615a      	str	r2, [r3, #20]
}
 800c2ee:	bf00      	nop
 800c2f0:	3714      	adds	r7, #20
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	40010000 	.word	0x40010000
 800c300:	40000400 	.word	0x40000400
 800c304:	40000800 	.word	0x40000800
 800c308:	40000c00 	.word	0x40000c00
 800c30c:	40010400 	.word	0x40010400
 800c310:	40014000 	.word	0x40014000
 800c314:	40014400 	.word	0x40014400
 800c318:	40014800 	.word	0x40014800
 800c31c:	40001800 	.word	0x40001800
 800c320:	40001c00 	.word	0x40001c00
 800c324:	40002000 	.word	0x40002000

0800c328 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c328:	b480      	push	{r7}
 800c32a:	b087      	sub	sp, #28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	f023 0201 	bic.w	r2, r3, #1
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	699b      	ldr	r3, [r3, #24]
 800c346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6a1b      	ldr	r3, [r3, #32]
 800c34c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4a28      	ldr	r2, [pc, #160]	; (800c3f4 <TIM_TI1_SetConfig+0xcc>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d01b      	beq.n	800c38e <TIM_TI1_SetConfig+0x66>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c35c:	d017      	beq.n	800c38e <TIM_TI1_SetConfig+0x66>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4a25      	ldr	r2, [pc, #148]	; (800c3f8 <TIM_TI1_SetConfig+0xd0>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d013      	beq.n	800c38e <TIM_TI1_SetConfig+0x66>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	4a24      	ldr	r2, [pc, #144]	; (800c3fc <TIM_TI1_SetConfig+0xd4>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d00f      	beq.n	800c38e <TIM_TI1_SetConfig+0x66>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	4a23      	ldr	r2, [pc, #140]	; (800c400 <TIM_TI1_SetConfig+0xd8>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d00b      	beq.n	800c38e <TIM_TI1_SetConfig+0x66>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	4a22      	ldr	r2, [pc, #136]	; (800c404 <TIM_TI1_SetConfig+0xdc>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d007      	beq.n	800c38e <TIM_TI1_SetConfig+0x66>
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	4a21      	ldr	r2, [pc, #132]	; (800c408 <TIM_TI1_SetConfig+0xe0>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d003      	beq.n	800c38e <TIM_TI1_SetConfig+0x66>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4a20      	ldr	r2, [pc, #128]	; (800c40c <TIM_TI1_SetConfig+0xe4>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d101      	bne.n	800c392 <TIM_TI1_SetConfig+0x6a>
 800c38e:	2301      	movs	r3, #1
 800c390:	e000      	b.n	800c394 <TIM_TI1_SetConfig+0x6c>
 800c392:	2300      	movs	r3, #0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d008      	beq.n	800c3aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	f023 0303 	bic.w	r3, r3, #3
 800c39e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	617b      	str	r3, [r7, #20]
 800c3a8:	e003      	b.n	800c3b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f043 0301 	orr.w	r3, r3, #1
 800c3b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f023 030a 	bic.w	r3, r3, #10
 800c3cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f003 030a 	and.w	r3, r3, #10
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	621a      	str	r2, [r3, #32]
}
 800c3e6:	bf00      	nop
 800c3e8:	371c      	adds	r7, #28
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	40010000 	.word	0x40010000
 800c3f8:	40000400 	.word	0x40000400
 800c3fc:	40000800 	.word	0x40000800
 800c400:	40000c00 	.word	0x40000c00
 800c404:	40010400 	.word	0x40010400
 800c408:	40014000 	.word	0x40014000
 800c40c:	40001800 	.word	0x40001800

0800c410 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c410:	b480      	push	{r7}
 800c412:	b087      	sub	sp, #28
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6a1b      	ldr	r3, [r3, #32]
 800c422:	f023 0210 	bic.w	r2, r3, #16
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6a1b      	ldr	r3, [r3, #32]
 800c434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c43c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	021b      	lsls	r3, r3, #8
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	4313      	orrs	r3, r2
 800c446:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c44e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	031b      	lsls	r3, r3, #12
 800c454:	b29b      	uxth	r3, r3
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c462:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	011b      	lsls	r3, r3, #4
 800c468:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	4313      	orrs	r3, r2
 800c470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	621a      	str	r2, [r3, #32]
}
 800c47e:	bf00      	nop
 800c480:	371c      	adds	r7, #28
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c48a:	b480      	push	{r7}
 800c48c:	b087      	sub	sp, #28
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	607a      	str	r2, [r7, #4]
 800c496:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6a1b      	ldr	r3, [r3, #32]
 800c49c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	69db      	ldr	r3, [r3, #28]
 800c4a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	f023 0303 	bic.w	r3, r3, #3
 800c4b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	011b      	lsls	r3, r3, #4
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c4da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	021b      	lsls	r3, r3, #8
 800c4e0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	621a      	str	r2, [r3, #32]
}
 800c4f6:	bf00      	nop
 800c4f8:	371c      	adds	r7, #28
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c502:	b480      	push	{r7}
 800c504:	b087      	sub	sp, #28
 800c506:	af00      	add	r7, sp, #0
 800c508:	60f8      	str	r0, [r7, #12]
 800c50a:	60b9      	str	r1, [r7, #8]
 800c50c:	607a      	str	r2, [r7, #4]
 800c50e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c52e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	021b      	lsls	r3, r3, #8
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	4313      	orrs	r3, r2
 800c538:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	031b      	lsls	r3, r3, #12
 800c546:	b29b      	uxth	r3, r3
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c554:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	031b      	lsls	r3, r3, #12
 800c55a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	4313      	orrs	r3, r2
 800c562:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	621a      	str	r2, [r3, #32]
}
 800c570:	bf00      	nop
 800c572:	371c      	adds	r7, #28
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b087      	sub	sp, #28
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	f003 031f 	and.w	r3, r3, #31
 800c58e:	2201      	movs	r2, #1
 800c590:	fa02 f303 	lsl.w	r3, r2, r3
 800c594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6a1a      	ldr	r2, [r3, #32]
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	43db      	mvns	r3, r3
 800c59e:	401a      	ands	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6a1a      	ldr	r2, [r3, #32]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f003 031f 	and.w	r3, r3, #31
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5b4:	431a      	orrs	r2, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	621a      	str	r2, [r3, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
	...

0800c5c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d101      	bne.n	800c5e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	e06d      	b.n	800c6bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a30      	ldr	r2, [pc, #192]	; (800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d004      	beq.n	800c614 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a2f      	ldr	r2, [pc, #188]	; (800c6cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d108      	bne.n	800c626 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c61a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	4313      	orrs	r3, r2
 800c624:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c62c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	4313      	orrs	r3, r2
 800c636:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a20      	ldr	r2, [pc, #128]	; (800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d022      	beq.n	800c690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c652:	d01d      	beq.n	800c690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a1d      	ldr	r2, [pc, #116]	; (800c6d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d018      	beq.n	800c690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a1c      	ldr	r2, [pc, #112]	; (800c6d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d013      	beq.n	800c690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a1a      	ldr	r2, [pc, #104]	; (800c6d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d00e      	beq.n	800c690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a15      	ldr	r2, [pc, #84]	; (800c6cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d009      	beq.n	800c690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a16      	ldr	r2, [pc, #88]	; (800c6dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d004      	beq.n	800c690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a15      	ldr	r2, [pc, #84]	; (800c6e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d10c      	bne.n	800c6aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c696:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	40010000 	.word	0x40010000
 800c6cc:	40010400 	.word	0x40010400
 800c6d0:	40000400 	.word	0x40000400
 800c6d4:	40000800 	.word	0x40000800
 800c6d8:	40000c00 	.word	0x40000c00
 800c6dc:	40014000 	.word	0x40014000
 800c6e0:	40001800 	.word	0x40001800

0800c6e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d101      	bne.n	800c732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e040      	b.n	800c7b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c736:	2b00      	cmp	r3, #0
 800c738:	d106      	bne.n	800c748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7f8 f926 	bl	8004994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2224      	movs	r2, #36	; 0x24
 800c74c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f022 0201 	bic.w	r2, r2, #1
 800c75c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f8b0 	bl	800c8c4 <UART_SetConfig>
 800c764:	4603      	mov	r3, r0
 800c766:	2b01      	cmp	r3, #1
 800c768:	d101      	bne.n	800c76e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	e022      	b.n	800c7b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fb08 	bl	800cd8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	685a      	ldr	r2, [r3, #4]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c78a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	689a      	ldr	r2, [r3, #8]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c79a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f042 0201 	orr.w	r2, r2, #1
 800c7aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fb8f 	bl	800ced0 <UART_CheckIdleState>
 800c7b2:	4603      	mov	r3, r0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08a      	sub	sp, #40	; 0x28
 800c7c0:	af02      	add	r7, sp, #8
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	603b      	str	r3, [r7, #0]
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d0:	2b20      	cmp	r3, #32
 800c7d2:	d171      	bne.n	800c8b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <HAL_UART_Transmit+0x24>
 800c7da:	88fb      	ldrh	r3, [r7, #6]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e06a      	b.n	800c8ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2221      	movs	r2, #33	; 0x21
 800c7f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c7f2:	f7f9 ffcb 	bl	800678c <HAL_GetTick>
 800c7f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	88fa      	ldrh	r2, [r7, #6]
 800c7fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	88fa      	ldrh	r2, [r7, #6]
 800c804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c810:	d108      	bne.n	800c824 <HAL_UART_Transmit+0x68>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d104      	bne.n	800c824 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	61bb      	str	r3, [r7, #24]
 800c822:	e003      	b.n	800c82c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c828:	2300      	movs	r3, #0
 800c82a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c82c:	e02c      	b.n	800c888 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	2200      	movs	r2, #0
 800c836:	2180      	movs	r1, #128	; 0x80
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f000 fb80 	bl	800cf3e <UART_WaitOnFlagUntilTimeout>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800c844:	2303      	movs	r3, #3
 800c846:	e038      	b.n	800c8ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10b      	bne.n	800c866 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	881b      	ldrh	r3, [r3, #0]
 800c852:	461a      	mov	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c85c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	3302      	adds	r3, #2
 800c862:	61bb      	str	r3, [r7, #24]
 800c864:	e007      	b.n	800c876 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	781a      	ldrb	r2, [r3, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	3301      	adds	r3, #1
 800c874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	3b01      	subs	r3, #1
 800c880:	b29a      	uxth	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c88e:	b29b      	uxth	r3, r3
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1cc      	bne.n	800c82e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	2200      	movs	r2, #0
 800c89c:	2140      	movs	r1, #64	; 0x40
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 fb4d 	bl	800cf3e <UART_WaitOnFlagUntilTimeout>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d001      	beq.n	800c8ae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e005      	b.n	800c8ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2220      	movs	r2, #32
 800c8b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	e000      	b.n	800c8ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800c8b8:	2302      	movs	r3, #2
  }
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3720      	adds	r7, #32
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
	...

0800c8c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	689a      	ldr	r2, [r3, #8]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	431a      	orrs	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	69db      	ldr	r3, [r3, #28]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	4ba6      	ldr	r3, [pc, #664]	; (800cb88 <UART_SetConfig+0x2c4>)
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	6812      	ldr	r2, [r2, #0]
 800c8f6:	6979      	ldr	r1, [r7, #20]
 800c8f8:	430b      	orrs	r3, r1
 800c8fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	68da      	ldr	r2, [r3, #12]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	430a      	orrs	r2, r1
 800c910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	697a      	ldr	r2, [r7, #20]
 800c91e:	4313      	orrs	r3, r2
 800c920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	430a      	orrs	r2, r1
 800c934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a94      	ldr	r2, [pc, #592]	; (800cb8c <UART_SetConfig+0x2c8>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d120      	bne.n	800c982 <UART_SetConfig+0xbe>
 800c940:	4b93      	ldr	r3, [pc, #588]	; (800cb90 <UART_SetConfig+0x2cc>)
 800c942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c946:	f003 0303 	and.w	r3, r3, #3
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d816      	bhi.n	800c97c <UART_SetConfig+0xb8>
 800c94e:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <UART_SetConfig+0x90>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800c965 	.word	0x0800c965
 800c958:	0800c971 	.word	0x0800c971
 800c95c:	0800c96b 	.word	0x0800c96b
 800c960:	0800c977 	.word	0x0800c977
 800c964:	2301      	movs	r3, #1
 800c966:	77fb      	strb	r3, [r7, #31]
 800c968:	e150      	b.n	800cc0c <UART_SetConfig+0x348>
 800c96a:	2302      	movs	r3, #2
 800c96c:	77fb      	strb	r3, [r7, #31]
 800c96e:	e14d      	b.n	800cc0c <UART_SetConfig+0x348>
 800c970:	2304      	movs	r3, #4
 800c972:	77fb      	strb	r3, [r7, #31]
 800c974:	e14a      	b.n	800cc0c <UART_SetConfig+0x348>
 800c976:	2308      	movs	r3, #8
 800c978:	77fb      	strb	r3, [r7, #31]
 800c97a:	e147      	b.n	800cc0c <UART_SetConfig+0x348>
 800c97c:	2310      	movs	r3, #16
 800c97e:	77fb      	strb	r3, [r7, #31]
 800c980:	e144      	b.n	800cc0c <UART_SetConfig+0x348>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a83      	ldr	r2, [pc, #524]	; (800cb94 <UART_SetConfig+0x2d0>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d132      	bne.n	800c9f2 <UART_SetConfig+0x12e>
 800c98c:	4b80      	ldr	r3, [pc, #512]	; (800cb90 <UART_SetConfig+0x2cc>)
 800c98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c992:	f003 030c 	and.w	r3, r3, #12
 800c996:	2b0c      	cmp	r3, #12
 800c998:	d828      	bhi.n	800c9ec <UART_SetConfig+0x128>
 800c99a:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <UART_SetConfig+0xdc>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800c9d5 	.word	0x0800c9d5
 800c9a4:	0800c9ed 	.word	0x0800c9ed
 800c9a8:	0800c9ed 	.word	0x0800c9ed
 800c9ac:	0800c9ed 	.word	0x0800c9ed
 800c9b0:	0800c9e1 	.word	0x0800c9e1
 800c9b4:	0800c9ed 	.word	0x0800c9ed
 800c9b8:	0800c9ed 	.word	0x0800c9ed
 800c9bc:	0800c9ed 	.word	0x0800c9ed
 800c9c0:	0800c9db 	.word	0x0800c9db
 800c9c4:	0800c9ed 	.word	0x0800c9ed
 800c9c8:	0800c9ed 	.word	0x0800c9ed
 800c9cc:	0800c9ed 	.word	0x0800c9ed
 800c9d0:	0800c9e7 	.word	0x0800c9e7
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	77fb      	strb	r3, [r7, #31]
 800c9d8:	e118      	b.n	800cc0c <UART_SetConfig+0x348>
 800c9da:	2302      	movs	r3, #2
 800c9dc:	77fb      	strb	r3, [r7, #31]
 800c9de:	e115      	b.n	800cc0c <UART_SetConfig+0x348>
 800c9e0:	2304      	movs	r3, #4
 800c9e2:	77fb      	strb	r3, [r7, #31]
 800c9e4:	e112      	b.n	800cc0c <UART_SetConfig+0x348>
 800c9e6:	2308      	movs	r3, #8
 800c9e8:	77fb      	strb	r3, [r7, #31]
 800c9ea:	e10f      	b.n	800cc0c <UART_SetConfig+0x348>
 800c9ec:	2310      	movs	r3, #16
 800c9ee:	77fb      	strb	r3, [r7, #31]
 800c9f0:	e10c      	b.n	800cc0c <UART_SetConfig+0x348>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a68      	ldr	r2, [pc, #416]	; (800cb98 <UART_SetConfig+0x2d4>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d120      	bne.n	800ca3e <UART_SetConfig+0x17a>
 800c9fc:	4b64      	ldr	r3, [pc, #400]	; (800cb90 <UART_SetConfig+0x2cc>)
 800c9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ca06:	2b30      	cmp	r3, #48	; 0x30
 800ca08:	d013      	beq.n	800ca32 <UART_SetConfig+0x16e>
 800ca0a:	2b30      	cmp	r3, #48	; 0x30
 800ca0c:	d814      	bhi.n	800ca38 <UART_SetConfig+0x174>
 800ca0e:	2b20      	cmp	r3, #32
 800ca10:	d009      	beq.n	800ca26 <UART_SetConfig+0x162>
 800ca12:	2b20      	cmp	r3, #32
 800ca14:	d810      	bhi.n	800ca38 <UART_SetConfig+0x174>
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <UART_SetConfig+0x15c>
 800ca1a:	2b10      	cmp	r3, #16
 800ca1c:	d006      	beq.n	800ca2c <UART_SetConfig+0x168>
 800ca1e:	e00b      	b.n	800ca38 <UART_SetConfig+0x174>
 800ca20:	2300      	movs	r3, #0
 800ca22:	77fb      	strb	r3, [r7, #31]
 800ca24:	e0f2      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca26:	2302      	movs	r3, #2
 800ca28:	77fb      	strb	r3, [r7, #31]
 800ca2a:	e0ef      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca2c:	2304      	movs	r3, #4
 800ca2e:	77fb      	strb	r3, [r7, #31]
 800ca30:	e0ec      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca32:	2308      	movs	r3, #8
 800ca34:	77fb      	strb	r3, [r7, #31]
 800ca36:	e0e9      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca38:	2310      	movs	r3, #16
 800ca3a:	77fb      	strb	r3, [r7, #31]
 800ca3c:	e0e6      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a56      	ldr	r2, [pc, #344]	; (800cb9c <UART_SetConfig+0x2d8>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d120      	bne.n	800ca8a <UART_SetConfig+0x1c6>
 800ca48:	4b51      	ldr	r3, [pc, #324]	; (800cb90 <UART_SetConfig+0x2cc>)
 800ca4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ca52:	2bc0      	cmp	r3, #192	; 0xc0
 800ca54:	d013      	beq.n	800ca7e <UART_SetConfig+0x1ba>
 800ca56:	2bc0      	cmp	r3, #192	; 0xc0
 800ca58:	d814      	bhi.n	800ca84 <UART_SetConfig+0x1c0>
 800ca5a:	2b80      	cmp	r3, #128	; 0x80
 800ca5c:	d009      	beq.n	800ca72 <UART_SetConfig+0x1ae>
 800ca5e:	2b80      	cmp	r3, #128	; 0x80
 800ca60:	d810      	bhi.n	800ca84 <UART_SetConfig+0x1c0>
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d002      	beq.n	800ca6c <UART_SetConfig+0x1a8>
 800ca66:	2b40      	cmp	r3, #64	; 0x40
 800ca68:	d006      	beq.n	800ca78 <UART_SetConfig+0x1b4>
 800ca6a:	e00b      	b.n	800ca84 <UART_SetConfig+0x1c0>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	77fb      	strb	r3, [r7, #31]
 800ca70:	e0cc      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca72:	2302      	movs	r3, #2
 800ca74:	77fb      	strb	r3, [r7, #31]
 800ca76:	e0c9      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca78:	2304      	movs	r3, #4
 800ca7a:	77fb      	strb	r3, [r7, #31]
 800ca7c:	e0c6      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca7e:	2308      	movs	r3, #8
 800ca80:	77fb      	strb	r3, [r7, #31]
 800ca82:	e0c3      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca84:	2310      	movs	r3, #16
 800ca86:	77fb      	strb	r3, [r7, #31]
 800ca88:	e0c0      	b.n	800cc0c <UART_SetConfig+0x348>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a44      	ldr	r2, [pc, #272]	; (800cba0 <UART_SetConfig+0x2dc>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d125      	bne.n	800cae0 <UART_SetConfig+0x21c>
 800ca94:	4b3e      	ldr	r3, [pc, #248]	; (800cb90 <UART_SetConfig+0x2cc>)
 800ca96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800caa2:	d017      	beq.n	800cad4 <UART_SetConfig+0x210>
 800caa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800caa8:	d817      	bhi.n	800cada <UART_SetConfig+0x216>
 800caaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caae:	d00b      	beq.n	800cac8 <UART_SetConfig+0x204>
 800cab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cab4:	d811      	bhi.n	800cada <UART_SetConfig+0x216>
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d003      	beq.n	800cac2 <UART_SetConfig+0x1fe>
 800caba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cabe:	d006      	beq.n	800cace <UART_SetConfig+0x20a>
 800cac0:	e00b      	b.n	800cada <UART_SetConfig+0x216>
 800cac2:	2300      	movs	r3, #0
 800cac4:	77fb      	strb	r3, [r7, #31]
 800cac6:	e0a1      	b.n	800cc0c <UART_SetConfig+0x348>
 800cac8:	2302      	movs	r3, #2
 800caca:	77fb      	strb	r3, [r7, #31]
 800cacc:	e09e      	b.n	800cc0c <UART_SetConfig+0x348>
 800cace:	2304      	movs	r3, #4
 800cad0:	77fb      	strb	r3, [r7, #31]
 800cad2:	e09b      	b.n	800cc0c <UART_SetConfig+0x348>
 800cad4:	2308      	movs	r3, #8
 800cad6:	77fb      	strb	r3, [r7, #31]
 800cad8:	e098      	b.n	800cc0c <UART_SetConfig+0x348>
 800cada:	2310      	movs	r3, #16
 800cadc:	77fb      	strb	r3, [r7, #31]
 800cade:	e095      	b.n	800cc0c <UART_SetConfig+0x348>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a2f      	ldr	r2, [pc, #188]	; (800cba4 <UART_SetConfig+0x2e0>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d125      	bne.n	800cb36 <UART_SetConfig+0x272>
 800caea:	4b29      	ldr	r3, [pc, #164]	; (800cb90 <UART_SetConfig+0x2cc>)
 800caec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800caf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800caf8:	d017      	beq.n	800cb2a <UART_SetConfig+0x266>
 800cafa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cafe:	d817      	bhi.n	800cb30 <UART_SetConfig+0x26c>
 800cb00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb04:	d00b      	beq.n	800cb1e <UART_SetConfig+0x25a>
 800cb06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb0a:	d811      	bhi.n	800cb30 <UART_SetConfig+0x26c>
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d003      	beq.n	800cb18 <UART_SetConfig+0x254>
 800cb10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb14:	d006      	beq.n	800cb24 <UART_SetConfig+0x260>
 800cb16:	e00b      	b.n	800cb30 <UART_SetConfig+0x26c>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	77fb      	strb	r3, [r7, #31]
 800cb1c:	e076      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb1e:	2302      	movs	r3, #2
 800cb20:	77fb      	strb	r3, [r7, #31]
 800cb22:	e073      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb24:	2304      	movs	r3, #4
 800cb26:	77fb      	strb	r3, [r7, #31]
 800cb28:	e070      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	77fb      	strb	r3, [r7, #31]
 800cb2e:	e06d      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb30:	2310      	movs	r3, #16
 800cb32:	77fb      	strb	r3, [r7, #31]
 800cb34:	e06a      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a1b      	ldr	r2, [pc, #108]	; (800cba8 <UART_SetConfig+0x2e4>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d138      	bne.n	800cbb2 <UART_SetConfig+0x2ee>
 800cb40:	4b13      	ldr	r3, [pc, #76]	; (800cb90 <UART_SetConfig+0x2cc>)
 800cb42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cb4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb4e:	d017      	beq.n	800cb80 <UART_SetConfig+0x2bc>
 800cb50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb54:	d82a      	bhi.n	800cbac <UART_SetConfig+0x2e8>
 800cb56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb5a:	d00b      	beq.n	800cb74 <UART_SetConfig+0x2b0>
 800cb5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb60:	d824      	bhi.n	800cbac <UART_SetConfig+0x2e8>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d003      	beq.n	800cb6e <UART_SetConfig+0x2aa>
 800cb66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb6a:	d006      	beq.n	800cb7a <UART_SetConfig+0x2b6>
 800cb6c:	e01e      	b.n	800cbac <UART_SetConfig+0x2e8>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	77fb      	strb	r3, [r7, #31]
 800cb72:	e04b      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb74:	2302      	movs	r3, #2
 800cb76:	77fb      	strb	r3, [r7, #31]
 800cb78:	e048      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb7a:	2304      	movs	r3, #4
 800cb7c:	77fb      	strb	r3, [r7, #31]
 800cb7e:	e045      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb80:	2308      	movs	r3, #8
 800cb82:	77fb      	strb	r3, [r7, #31]
 800cb84:	e042      	b.n	800cc0c <UART_SetConfig+0x348>
 800cb86:	bf00      	nop
 800cb88:	efff69f3 	.word	0xefff69f3
 800cb8c:	40011000 	.word	0x40011000
 800cb90:	40023800 	.word	0x40023800
 800cb94:	40004400 	.word	0x40004400
 800cb98:	40004800 	.word	0x40004800
 800cb9c:	40004c00 	.word	0x40004c00
 800cba0:	40005000 	.word	0x40005000
 800cba4:	40011400 	.word	0x40011400
 800cba8:	40007800 	.word	0x40007800
 800cbac:	2310      	movs	r3, #16
 800cbae:	77fb      	strb	r3, [r7, #31]
 800cbb0:	e02c      	b.n	800cc0c <UART_SetConfig+0x348>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a72      	ldr	r2, [pc, #456]	; (800cd80 <UART_SetConfig+0x4bc>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d125      	bne.n	800cc08 <UART_SetConfig+0x344>
 800cbbc:	4b71      	ldr	r3, [pc, #452]	; (800cd84 <UART_SetConfig+0x4c0>)
 800cbbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cbc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cbca:	d017      	beq.n	800cbfc <UART_SetConfig+0x338>
 800cbcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cbd0:	d817      	bhi.n	800cc02 <UART_SetConfig+0x33e>
 800cbd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbd6:	d00b      	beq.n	800cbf0 <UART_SetConfig+0x32c>
 800cbd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbdc:	d811      	bhi.n	800cc02 <UART_SetConfig+0x33e>
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d003      	beq.n	800cbea <UART_SetConfig+0x326>
 800cbe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbe6:	d006      	beq.n	800cbf6 <UART_SetConfig+0x332>
 800cbe8:	e00b      	b.n	800cc02 <UART_SetConfig+0x33e>
 800cbea:	2300      	movs	r3, #0
 800cbec:	77fb      	strb	r3, [r7, #31]
 800cbee:	e00d      	b.n	800cc0c <UART_SetConfig+0x348>
 800cbf0:	2302      	movs	r3, #2
 800cbf2:	77fb      	strb	r3, [r7, #31]
 800cbf4:	e00a      	b.n	800cc0c <UART_SetConfig+0x348>
 800cbf6:	2304      	movs	r3, #4
 800cbf8:	77fb      	strb	r3, [r7, #31]
 800cbfa:	e007      	b.n	800cc0c <UART_SetConfig+0x348>
 800cbfc:	2308      	movs	r3, #8
 800cbfe:	77fb      	strb	r3, [r7, #31]
 800cc00:	e004      	b.n	800cc0c <UART_SetConfig+0x348>
 800cc02:	2310      	movs	r3, #16
 800cc04:	77fb      	strb	r3, [r7, #31]
 800cc06:	e001      	b.n	800cc0c <UART_SetConfig+0x348>
 800cc08:	2310      	movs	r3, #16
 800cc0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	69db      	ldr	r3, [r3, #28]
 800cc10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc14:	d15b      	bne.n	800ccce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cc16:	7ffb      	ldrb	r3, [r7, #31]
 800cc18:	2b08      	cmp	r3, #8
 800cc1a:	d828      	bhi.n	800cc6e <UART_SetConfig+0x3aa>
 800cc1c:	a201      	add	r2, pc, #4	; (adr r2, 800cc24 <UART_SetConfig+0x360>)
 800cc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc22:	bf00      	nop
 800cc24:	0800cc49 	.word	0x0800cc49
 800cc28:	0800cc51 	.word	0x0800cc51
 800cc2c:	0800cc59 	.word	0x0800cc59
 800cc30:	0800cc6f 	.word	0x0800cc6f
 800cc34:	0800cc5f 	.word	0x0800cc5f
 800cc38:	0800cc6f 	.word	0x0800cc6f
 800cc3c:	0800cc6f 	.word	0x0800cc6f
 800cc40:	0800cc6f 	.word	0x0800cc6f
 800cc44:	0800cc67 	.word	0x0800cc67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc48:	f7fd f85e 	bl	8009d08 <HAL_RCC_GetPCLK1Freq>
 800cc4c:	61b8      	str	r0, [r7, #24]
        break;
 800cc4e:	e013      	b.n	800cc78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc50:	f7fd f86e 	bl	8009d30 <HAL_RCC_GetPCLK2Freq>
 800cc54:	61b8      	str	r0, [r7, #24]
        break;
 800cc56:	e00f      	b.n	800cc78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc58:	4b4b      	ldr	r3, [pc, #300]	; (800cd88 <UART_SetConfig+0x4c4>)
 800cc5a:	61bb      	str	r3, [r7, #24]
        break;
 800cc5c:	e00c      	b.n	800cc78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc5e:	f7fc ff81 	bl	8009b64 <HAL_RCC_GetSysClockFreq>
 800cc62:	61b8      	str	r0, [r7, #24]
        break;
 800cc64:	e008      	b.n	800cc78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc6a:	61bb      	str	r3, [r7, #24]
        break;
 800cc6c:	e004      	b.n	800cc78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	77bb      	strb	r3, [r7, #30]
        break;
 800cc76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d074      	beq.n	800cd68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	005a      	lsls	r2, r3, #1
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	085b      	lsrs	r3, r3, #1
 800cc88:	441a      	add	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	2b0f      	cmp	r3, #15
 800cc98:	d916      	bls.n	800ccc8 <UART_SetConfig+0x404>
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cca0:	d212      	bcs.n	800ccc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	f023 030f 	bic.w	r3, r3, #15
 800ccaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	085b      	lsrs	r3, r3, #1
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	f003 0307 	and.w	r3, r3, #7
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	89fb      	ldrh	r3, [r7, #14]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	89fa      	ldrh	r2, [r7, #14]
 800ccc4:	60da      	str	r2, [r3, #12]
 800ccc6:	e04f      	b.n	800cd68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	77bb      	strb	r3, [r7, #30]
 800cccc:	e04c      	b.n	800cd68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ccce:	7ffb      	ldrb	r3, [r7, #31]
 800ccd0:	2b08      	cmp	r3, #8
 800ccd2:	d828      	bhi.n	800cd26 <UART_SetConfig+0x462>
 800ccd4:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <UART_SetConfig+0x418>)
 800ccd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccda:	bf00      	nop
 800ccdc:	0800cd01 	.word	0x0800cd01
 800cce0:	0800cd09 	.word	0x0800cd09
 800cce4:	0800cd11 	.word	0x0800cd11
 800cce8:	0800cd27 	.word	0x0800cd27
 800ccec:	0800cd17 	.word	0x0800cd17
 800ccf0:	0800cd27 	.word	0x0800cd27
 800ccf4:	0800cd27 	.word	0x0800cd27
 800ccf8:	0800cd27 	.word	0x0800cd27
 800ccfc:	0800cd1f 	.word	0x0800cd1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd00:	f7fd f802 	bl	8009d08 <HAL_RCC_GetPCLK1Freq>
 800cd04:	61b8      	str	r0, [r7, #24]
        break;
 800cd06:	e013      	b.n	800cd30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd08:	f7fd f812 	bl	8009d30 <HAL_RCC_GetPCLK2Freq>
 800cd0c:	61b8      	str	r0, [r7, #24]
        break;
 800cd0e:	e00f      	b.n	800cd30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd10:	4b1d      	ldr	r3, [pc, #116]	; (800cd88 <UART_SetConfig+0x4c4>)
 800cd12:	61bb      	str	r3, [r7, #24]
        break;
 800cd14:	e00c      	b.n	800cd30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd16:	f7fc ff25 	bl	8009b64 <HAL_RCC_GetSysClockFreq>
 800cd1a:	61b8      	str	r0, [r7, #24]
        break;
 800cd1c:	e008      	b.n	800cd30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd22:	61bb      	str	r3, [r7, #24]
        break;
 800cd24:	e004      	b.n	800cd30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cd26:	2300      	movs	r3, #0
 800cd28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	77bb      	strb	r3, [r7, #30]
        break;
 800cd2e:	bf00      	nop
    }

    if (pclk != 0U)
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d018      	beq.n	800cd68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	085a      	lsrs	r2, r3, #1
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	441a      	add	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	2b0f      	cmp	r3, #15
 800cd4e:	d909      	bls.n	800cd64 <UART_SetConfig+0x4a0>
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd56:	d205      	bcs.n	800cd64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	60da      	str	r2, [r3, #12]
 800cd62:	e001      	b.n	800cd68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cd74:	7fbb      	ldrb	r3, [r7, #30]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3720      	adds	r7, #32
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	40007c00 	.word	0x40007c00
 800cd84:	40023800 	.word	0x40023800
 800cd88:	00f42400 	.word	0x00f42400

0800cd8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00a      	beq.n	800cdb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	430a      	orrs	r2, r1
 800cdb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdba:	f003 0302 	and.w	r3, r3, #2
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00a      	beq.n	800cdd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	f003 0304 	and.w	r3, r3, #4
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00a      	beq.n	800cdfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfe:	f003 0308 	and.w	r3, r3, #8
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00a      	beq.n	800ce1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	430a      	orrs	r2, r1
 800ce1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce20:	f003 0310 	and.w	r3, r3, #16
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00a      	beq.n	800ce3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	430a      	orrs	r2, r1
 800ce3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce42:	f003 0320 	and.w	r3, r3, #32
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00a      	beq.n	800ce60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	430a      	orrs	r2, r1
 800ce5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d01a      	beq.n	800cea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce8a:	d10a      	bne.n	800cea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	430a      	orrs	r2, r1
 800cea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00a      	beq.n	800cec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	430a      	orrs	r2, r1
 800cec2:	605a      	str	r2, [r3, #4]
  }
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af02      	add	r7, sp, #8
 800ced6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cee0:	f7f9 fc54 	bl	800678c <HAL_GetTick>
 800cee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 0308 	and.w	r3, r3, #8
 800cef0:	2b08      	cmp	r3, #8
 800cef2:	d10e      	bne.n	800cf12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 f81b 	bl	800cf3e <UART_WaitOnFlagUntilTimeout>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	e011      	b.n	800cf36 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2220      	movs	r2, #32
 800cf16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2220      	movs	r2, #32
 800cf1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b09c      	sub	sp, #112	; 0x70
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	60f8      	str	r0, [r7, #12]
 800cf46:	60b9      	str	r1, [r7, #8]
 800cf48:	603b      	str	r3, [r7, #0]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf4e:	e0a7      	b.n	800d0a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf56:	f000 80a3 	beq.w	800d0a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf5a:	f7f9 fc17 	bl	800678c <HAL_GetTick>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d302      	bcc.n	800cf70 <UART_WaitOnFlagUntilTimeout+0x32>
 800cf6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d13f      	bne.n	800cff0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf78:	e853 3f00 	ldrex	r3, [r3]
 800cf7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf84:	667b      	str	r3, [r7, #100]	; 0x64
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf96:	e841 2300 	strex	r3, r2, [r1]
 800cf9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cf9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1e6      	bne.n	800cf70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfac:	e853 3f00 	ldrex	r3, [r3]
 800cfb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	f023 0301 	bic.w	r3, r3, #1
 800cfb8:	663b      	str	r3, [r7, #96]	; 0x60
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfc2:	64ba      	str	r2, [r7, #72]	; 0x48
 800cfc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfca:	e841 2300 	strex	r3, r2, [r1]
 800cfce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cfd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e5      	bne.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2220      	movs	r2, #32
 800cfe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e068      	b.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0304 	and.w	r3, r3, #4
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d050      	beq.n	800d0a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	69db      	ldr	r3, [r3, #28]
 800d004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d00c:	d148      	bne.n	800d0a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d016:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d020:	e853 3f00 	ldrex	r3, [r3]
 800d024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d02c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	461a      	mov	r2, r3
 800d034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d036:	637b      	str	r3, [r7, #52]	; 0x34
 800d038:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d03e:	e841 2300 	strex	r3, r2, [r1]
 800d042:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1e6      	bne.n	800d018 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3308      	adds	r3, #8
 800d050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	e853 3f00 	ldrex	r3, [r3]
 800d058:	613b      	str	r3, [r7, #16]
   return(result);
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	f023 0301 	bic.w	r3, r3, #1
 800d060:	66bb      	str	r3, [r7, #104]	; 0x68
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	3308      	adds	r3, #8
 800d068:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d06a:	623a      	str	r2, [r7, #32]
 800d06c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06e:	69f9      	ldr	r1, [r7, #28]
 800d070:	6a3a      	ldr	r2, [r7, #32]
 800d072:	e841 2300 	strex	r3, r2, [r1]
 800d076:	61bb      	str	r3, [r7, #24]
   return(result);
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1e5      	bne.n	800d04a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2220      	movs	r2, #32
 800d082:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2220      	movs	r2, #32
 800d088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2220      	movs	r2, #32
 800d090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e010      	b.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	69da      	ldr	r2, [r3, #28]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	bf0c      	ite	eq
 800d0b0:	2301      	moveq	r3, #1
 800d0b2:	2300      	movne	r3, #0
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	79fb      	ldrb	r3, [r7, #7]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	f43f af48 	beq.w	800cf50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3770      	adds	r7, #112	; 0x70
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
	...

0800d0cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d121      	bne.n	800d122 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	4b27      	ldr	r3, [pc, #156]	; (800d180 <FMC_SDRAM_Init+0xb4>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	683a      	ldr	r2, [r7, #0]
 800d0e8:	6851      	ldr	r1, [r2, #4]
 800d0ea:	683a      	ldr	r2, [r7, #0]
 800d0ec:	6892      	ldr	r2, [r2, #8]
 800d0ee:	4311      	orrs	r1, r2
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	68d2      	ldr	r2, [r2, #12]
 800d0f4:	4311      	orrs	r1, r2
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	6912      	ldr	r2, [r2, #16]
 800d0fa:	4311      	orrs	r1, r2
 800d0fc:	683a      	ldr	r2, [r7, #0]
 800d0fe:	6952      	ldr	r2, [r2, #20]
 800d100:	4311      	orrs	r1, r2
 800d102:	683a      	ldr	r2, [r7, #0]
 800d104:	6992      	ldr	r2, [r2, #24]
 800d106:	4311      	orrs	r1, r2
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	69d2      	ldr	r2, [r2, #28]
 800d10c:	4311      	orrs	r1, r2
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	6a12      	ldr	r2, [r2, #32]
 800d112:	4311      	orrs	r1, r2
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d118:	430a      	orrs	r2, r1
 800d11a:	431a      	orrs	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	e026      	b.n	800d170 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	69d9      	ldr	r1, [r3, #28]
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	6a1b      	ldr	r3, [r3, #32]
 800d132:	4319      	orrs	r1, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d138:	430b      	orrs	r3, r1
 800d13a:	431a      	orrs	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	4b0e      	ldr	r3, [pc, #56]	; (800d180 <FMC_SDRAM_Init+0xb4>)
 800d146:	4013      	ands	r3, r2
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	6851      	ldr	r1, [r2, #4]
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	6892      	ldr	r2, [r2, #8]
 800d150:	4311      	orrs	r1, r2
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	68d2      	ldr	r2, [r2, #12]
 800d156:	4311      	orrs	r1, r2
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	6912      	ldr	r2, [r2, #16]
 800d15c:	4311      	orrs	r1, r2
 800d15e:	683a      	ldr	r2, [r7, #0]
 800d160:	6952      	ldr	r2, [r2, #20]
 800d162:	4311      	orrs	r1, r2
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	6992      	ldr	r2, [r2, #24]
 800d168:	430a      	orrs	r2, r1
 800d16a:	431a      	orrs	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	ffff8000 	.word	0xffff8000

0800d184 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d128      	bne.n	800d1e8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	1e59      	subs	r1, r3, #1
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	011b      	lsls	r3, r3, #4
 800d1ac:	4319      	orrs	r1, r3
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	021b      	lsls	r3, r3, #8
 800d1b6:	4319      	orrs	r1, r3
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	031b      	lsls	r3, r3, #12
 800d1c0:	4319      	orrs	r1, r3
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	041b      	lsls	r3, r3, #16
 800d1ca:	4319      	orrs	r1, r3
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	695b      	ldr	r3, [r3, #20]
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	051b      	lsls	r3, r3, #20
 800d1d4:	4319      	orrs	r1, r3
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	061b      	lsls	r3, r3, #24
 800d1de:	430b      	orrs	r3, r1
 800d1e0:	431a      	orrs	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	609a      	str	r2, [r3, #8]
 800d1e6:	e02d      	b.n	800d244 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	689a      	ldr	r2, [r3, #8]
 800d1ec:	4b19      	ldr	r3, [pc, #100]	; (800d254 <FMC_SDRAM_Timing_Init+0xd0>)
 800d1ee:	4013      	ands	r3, r2
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	68d2      	ldr	r2, [r2, #12]
 800d1f4:	3a01      	subs	r2, #1
 800d1f6:	0311      	lsls	r1, r2, #12
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	6952      	ldr	r2, [r2, #20]
 800d1fc:	3a01      	subs	r2, #1
 800d1fe:	0512      	lsls	r2, r2, #20
 800d200:	430a      	orrs	r2, r1
 800d202:	431a      	orrs	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	1e59      	subs	r1, r3, #1
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	3b01      	subs	r3, #1
 800d21c:	011b      	lsls	r3, r3, #4
 800d21e:	4319      	orrs	r1, r3
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	3b01      	subs	r3, #1
 800d226:	021b      	lsls	r3, r3, #8
 800d228:	4319      	orrs	r1, r3
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	3b01      	subs	r3, #1
 800d230:	041b      	lsls	r3, r3, #16
 800d232:	4319      	orrs	r1, r3
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	699b      	ldr	r3, [r3, #24]
 800d238:	3b01      	subs	r3, #1
 800d23a:	061b      	lsls	r3, r3, #24
 800d23c:	430b      	orrs	r3, r1
 800d23e:	431a      	orrs	r2, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	ff0f0fff 	.word	0xff0f0fff

0800d258 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d258:	b480      	push	{r7}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	691a      	ldr	r2, [r3, #16]
 800d268:	4b0c      	ldr	r3, [pc, #48]	; (800d29c <FMC_SDRAM_SendCommand+0x44>)
 800d26a:	4013      	ands	r3, r2
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	6811      	ldr	r1, [r2, #0]
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	6852      	ldr	r2, [r2, #4]
 800d274:	4311      	orrs	r1, r2
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	6892      	ldr	r2, [r2, #8]
 800d27a:	3a01      	subs	r2, #1
 800d27c:	0152      	lsls	r2, r2, #5
 800d27e:	4311      	orrs	r1, r2
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	68d2      	ldr	r2, [r2, #12]
 800d284:	0252      	lsls	r2, r2, #9
 800d286:	430a      	orrs	r2, r1
 800d288:	431a      	orrs	r2, r3
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	ffc00000 	.word	0xffc00000

0800d2a0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	695a      	ldr	r2, [r3, #20]
 800d2ae:	4b07      	ldr	r3, [pc, #28]	; (800d2cc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	683a      	ldr	r2, [r7, #0]
 800d2b4:	0052      	lsls	r2, r2, #1
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	ffffc001 	.word	0xffffc001

0800d2d0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d2d0:	b084      	sub	sp, #16
 800d2d2:	b480      	push	{r7}
 800d2d4:	b085      	sub	sp, #20
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	f107 001c 	add.w	r0, r7, #28
 800d2de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d2e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d2ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d2ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d2f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d2f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d2fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	4b07      	ldr	r3, [pc, #28]	; (800d324 <SDMMC_Init+0x54>)
 800d308:	4013      	ands	r3, r2
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	431a      	orrs	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	b004      	add	sp, #16
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	ffff8100 	.word	0xffff8100

0800d328 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d336:	4618      	mov	r0, r3
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800d342:	b480      	push	{r7}
 800d344:	b083      	sub	sp, #12
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2203      	movs	r2, #3
 800d370:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f003 0303 	and.w	r3, r3, #3
}
 800d390:	4618      	mov	r0, r3
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d3c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d3c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68da      	ldr	r2, [r3, #12]
 800d3d2:	4b06      	ldr	r3, [pc, #24]	; (800d3ec <SDMMC_SendCommand+0x50>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	431a      	orrs	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	fffff000 	.word	0xfffff000

0800d3f0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	b2db      	uxtb	r3, r3
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	370c      	adds	r7, #12
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b085      	sub	sp, #20
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	3314      	adds	r3, #20
 800d418:	461a      	mov	r2, r3
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	4413      	add	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
}  
 800d424:	4618      	mov	r0, r3
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d430:	b480      	push	{r7}
 800d432:	b085      	sub	sp, #20
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	685a      	ldr	r2, [r3, #4]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d456:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d45c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d462:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	4313      	orrs	r3, r2
 800d468:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	431a      	orrs	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d47a:	2300      	movs	r3, #0

}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d496:	2310      	movs	r3, #16
 800d498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d49a:	2340      	movs	r3, #64	; 0x40
 800d49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4a8:	f107 0308 	add.w	r3, r7, #8
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7ff ff74 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4b8:	2110      	movs	r1, #16
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f9d6 	bl	800d86c <SDMMC_GetCmdResp1>
 800d4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4c2:	69fb      	ldr	r3, [r7, #28]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3720      	adds	r7, #32
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b088      	sub	sp, #32
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d4da:	2311      	movs	r3, #17
 800d4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4de:	2340      	movs	r3, #64	; 0x40
 800d4e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4ec:	f107 0308 	add.w	r3, r7, #8
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff ff52 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d4f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4fc:	2111      	movs	r1, #17
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f9b4 	bl	800d86c <SDMMC_GetCmdResp1>
 800d504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d506:	69fb      	ldr	r3, [r7, #28]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3720      	adds	r7, #32
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b088      	sub	sp, #32
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d51e:	2312      	movs	r3, #18
 800d520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d522:	2340      	movs	r3, #64	; 0x40
 800d524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d526:	2300      	movs	r3, #0
 800d528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d52a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d52e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d530:	f107 0308 	add.w	r3, r7, #8
 800d534:	4619      	mov	r1, r3
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f7ff ff30 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d53c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d540:	2112      	movs	r1, #18
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f992 	bl	800d86c <SDMMC_GetCmdResp1>
 800d548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d54a:	69fb      	ldr	r3, [r7, #28]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3720      	adds	r7, #32
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b088      	sub	sp, #32
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d562:	2318      	movs	r3, #24
 800d564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d566:	2340      	movs	r3, #64	; 0x40
 800d568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d56a:	2300      	movs	r3, #0
 800d56c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d572:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d574:	f107 0308 	add.w	r3, r7, #8
 800d578:	4619      	mov	r1, r3
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7ff ff0e 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d580:	f241 3288 	movw	r2, #5000	; 0x1388
 800d584:	2118      	movs	r1, #24
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f970 	bl	800d86c <SDMMC_GetCmdResp1>
 800d58c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d58e:	69fb      	ldr	r3, [r7, #28]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3720      	adds	r7, #32
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5a6:	2319      	movs	r3, #25
 800d5a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5aa:	2340      	movs	r3, #64	; 0x40
 800d5ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5b8:	f107 0308 	add.w	r3, r7, #8
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff feec 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d5c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5c8:	2119      	movs	r1, #25
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 f94e 	bl	800d86c <SDMMC_GetCmdResp1>
 800d5d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d2:	69fb      	ldr	r3, [r7, #28]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3720      	adds	r7, #32
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d5e8:	230c      	movs	r3, #12
 800d5ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5ec:	2340      	movs	r3, #64	; 0x40
 800d5ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5fa:	f107 0308 	add.w	r3, r7, #8
 800d5fe:	4619      	mov	r1, r3
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f7ff fecb 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d606:	4a05      	ldr	r2, [pc, #20]	; (800d61c <SDMMC_CmdStopTransfer+0x40>)
 800d608:	210c      	movs	r1, #12
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f92e 	bl	800d86c <SDMMC_GetCmdResp1>
 800d610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d612:	69fb      	ldr	r3, [r7, #28]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3720      	adds	r7, #32
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	05f5e100 	.word	0x05f5e100

0800d620 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08a      	sub	sp, #40	; 0x28
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d630:	2307      	movs	r3, #7
 800d632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d634:	2340      	movs	r3, #64	; 0x40
 800d636:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d638:	2300      	movs	r3, #0
 800d63a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d63c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d640:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d642:	f107 0310 	add.w	r3, r7, #16
 800d646:	4619      	mov	r1, r3
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f7ff fea7 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d64e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d652:	2107      	movs	r1, #7
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 f909 	bl	800d86c <SDMMC_GetCmdResp1>
 800d65a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3728      	adds	r7, #40	; 0x28
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b088      	sub	sp, #32
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d66e:	2300      	movs	r3, #0
 800d670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d672:	2300      	movs	r3, #0
 800d674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d676:	2300      	movs	r3, #0
 800d678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d67a:	2300      	movs	r3, #0
 800d67c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d684:	f107 0308 	add.w	r3, r7, #8
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7ff fe86 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fb23 	bl	800dcdc <SDMMC_GetCmdError>
 800d696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d698:	69fb      	ldr	r3, [r7, #28]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3720      	adds	r7, #32
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b088      	sub	sp, #32
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d6ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6b4:	2340      	movs	r3, #64	; 0x40
 800d6b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6c2:	f107 0308 	add.w	r3, r7, #8
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7ff fe67 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fab6 	bl	800dc40 <SDMMC_GetCmdResp7>
 800d6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6d6:	69fb      	ldr	r3, [r7, #28]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3720      	adds	r7, #32
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b088      	sub	sp, #32
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d6ee:	2337      	movs	r3, #55	; 0x37
 800d6f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6f2:	2340      	movs	r3, #64	; 0x40
 800d6f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d700:	f107 0308 	add.w	r3, r7, #8
 800d704:	4619      	mov	r1, r3
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff fe48 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d710:	2137      	movs	r1, #55	; 0x37
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f8aa 	bl	800d86c <SDMMC_GetCmdResp1>
 800d718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d71a:	69fb      	ldr	r3, [r7, #28]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3720      	adds	r7, #32
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b088      	sub	sp, #32
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	4b0d      	ldr	r3, [pc, #52]	; (800d768 <SDMMC_CmdAppOperCommand+0x44>)
 800d732:	4313      	orrs	r3, r2
 800d734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d736:	2329      	movs	r3, #41	; 0x29
 800d738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d73a:	2340      	movs	r3, #64	; 0x40
 800d73c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d73e:	2300      	movs	r3, #0
 800d740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d746:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d748:	f107 0308 	add.w	r3, r7, #8
 800d74c:	4619      	mov	r1, r3
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7ff fe24 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f9bf 	bl	800dad8 <SDMMC_GetCmdResp3>
 800d75a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d75c:	69fb      	ldr	r3, [r7, #28]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3720      	adds	r7, #32
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	80100000 	.word	0x80100000

0800d76c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b088      	sub	sp, #32
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d774:	2300      	movs	r3, #0
 800d776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d778:	2302      	movs	r3, #2
 800d77a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d77c:	23c0      	movs	r3, #192	; 0xc0
 800d77e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d780:	2300      	movs	r3, #0
 800d782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d788:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d78a:	f107 0308 	add.w	r3, r7, #8
 800d78e:	4619      	mov	r1, r3
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f7ff fe03 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 f956 	bl	800da48 <SDMMC_GetCmdResp2>
 800d79c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d79e:	69fb      	ldr	r3, [r7, #28]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3720      	adds	r7, #32
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d7b6:	2309      	movs	r3, #9
 800d7b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d7ba:	23c0      	movs	r3, #192	; 0xc0
 800d7bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7c8:	f107 0308 	add.w	r3, r7, #8
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7ff fde4 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 f937 	bl	800da48 <SDMMC_GetCmdResp2>
 800d7da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7dc:	69fb      	ldr	r3, [r7, #28]
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3720      	adds	r7, #32
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b088      	sub	sp, #32
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d7f4:	2303      	movs	r3, #3
 800d7f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7f8:	2340      	movs	r3, #64	; 0x40
 800d7fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d806:	f107 0308 	add.w	r3, r7, #8
 800d80a:	4619      	mov	r1, r3
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f7ff fdc5 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	2103      	movs	r1, #3
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f99c 	bl	800db54 <SDMMC_GetCmdResp6>
 800d81c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d81e:	69fb      	ldr	r3, [r7, #28]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3720      	adds	r7, #32
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b088      	sub	sp, #32
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d836:	230d      	movs	r3, #13
 800d838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d83a:	2340      	movs	r3, #64	; 0x40
 800d83c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d83e:	2300      	movs	r3, #0
 800d840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d848:	f107 0308 	add.w	r3, r7, #8
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7ff fda4 	bl	800d39c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d854:	f241 3288 	movw	r2, #5000	; 0x1388
 800d858:	210d      	movs	r1, #13
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f806 	bl	800d86c <SDMMC_GetCmdResp1>
 800d860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d862:	69fb      	ldr	r3, [r7, #28]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3720      	adds	r7, #32
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b088      	sub	sp, #32
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	460b      	mov	r3, r1
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d87a:	4b70      	ldr	r3, [pc, #448]	; (800da3c <SDMMC_GetCmdResp1+0x1d0>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a70      	ldr	r2, [pc, #448]	; (800da40 <SDMMC_GetCmdResp1+0x1d4>)
 800d880:	fba2 2303 	umull	r2, r3, r2, r3
 800d884:	0a5a      	lsrs	r2, r3, #9
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	fb02 f303 	mul.w	r3, r2, r3
 800d88c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	1e5a      	subs	r2, r3, #1
 800d892:	61fa      	str	r2, [r7, #28]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d89c:	e0c9      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0ef      	beq.n	800d88e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1ea      	bne.n	800d88e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d004      	beq.n	800d8ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2204      	movs	r2, #4
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ca:	2304      	movs	r3, #4
 800d8cc:	e0b1      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d004      	beq.n	800d8e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e0a6      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	22c5      	movs	r2, #197	; 0xc5
 800d8e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f7ff fd80 	bl	800d3f0 <SDMMC_GetCommandResponse>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	7afb      	ldrb	r3, [r7, #11]
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d001      	beq.n	800d8fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e099      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d8fe:	2100      	movs	r1, #0
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f7ff fd82 	bl	800d40a <SDMMC_GetResponse>
 800d906:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	4b4e      	ldr	r3, [pc, #312]	; (800da44 <SDMMC_GetCmdResp1+0x1d8>)
 800d90c:	4013      	ands	r3, r2
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d101      	bne.n	800d916 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d912:	2300      	movs	r3, #0
 800d914:	e08d      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	da02      	bge.n	800d922 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d91c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d920:	e087      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d92c:	2340      	movs	r3, #64	; 0x40
 800d92e:	e080      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d93a:	2380      	movs	r3, #128	; 0x80
 800d93c:	e079      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d94c:	e071      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d002      	beq.n	800d95e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d95c:	e069      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d96c:	e061      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d97c:	e059      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d98c:	e051      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d99c:	e049      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d9a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d9ac:	e041      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d9b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9bc:	e039      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d9c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d9cc:	e031      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d9d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d9dc:	e029      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d002      	beq.n	800d9ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d9e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d9ec:	e021      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d9f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d9fc:	e019      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800da0c:	e011      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da14:	2b00      	cmp	r3, #0
 800da16:	d002      	beq.n	800da1e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800da18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800da1c:	e009      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f003 0308 	and.w	r3, r3, #8
 800da24:	2b00      	cmp	r3, #0
 800da26:	d002      	beq.n	800da2e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800da2c:	e001      	b.n	800da32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800da32:	4618      	mov	r0, r3
 800da34:	3720      	adds	r7, #32
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20000004 	.word	0x20000004
 800da40:	10624dd3 	.word	0x10624dd3
 800da44:	fdffe008 	.word	0xfdffe008

0800da48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da50:	4b1f      	ldr	r3, [pc, #124]	; (800dad0 <SDMMC_GetCmdResp2+0x88>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a1f      	ldr	r2, [pc, #124]	; (800dad4 <SDMMC_GetCmdResp2+0x8c>)
 800da56:	fba2 2303 	umull	r2, r3, r2, r3
 800da5a:	0a5b      	lsrs	r3, r3, #9
 800da5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da60:	fb02 f303 	mul.w	r3, r2, r3
 800da64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	1e5a      	subs	r2, r3, #1
 800da6a:	60fa      	str	r2, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d102      	bne.n	800da76 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da74:	e026      	b.n	800dac4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800da82:	2b00      	cmp	r3, #0
 800da84:	d0ef      	beq.n	800da66 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1ea      	bne.n	800da66 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da94:	f003 0304 	and.w	r3, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d004      	beq.n	800daa6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2204      	movs	r2, #4
 800daa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daa2:	2304      	movs	r3, #4
 800daa4:	e00e      	b.n	800dac4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daaa:	f003 0301 	and.w	r3, r3, #1
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d004      	beq.n	800dabc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2201      	movs	r2, #1
 800dab6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dab8:	2301      	movs	r3, #1
 800daba:	e003      	b.n	800dac4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	22c5      	movs	r2, #197	; 0xc5
 800dac0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3714      	adds	r7, #20
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	20000004 	.word	0x20000004
 800dad4:	10624dd3 	.word	0x10624dd3

0800dad8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dae0:	4b1a      	ldr	r3, [pc, #104]	; (800db4c <SDMMC_GetCmdResp3+0x74>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a1a      	ldr	r2, [pc, #104]	; (800db50 <SDMMC_GetCmdResp3+0x78>)
 800dae6:	fba2 2303 	umull	r2, r3, r2, r3
 800daea:	0a5b      	lsrs	r3, r3, #9
 800daec:	f241 3288 	movw	r2, #5000	; 0x1388
 800daf0:	fb02 f303 	mul.w	r3, r2, r3
 800daf4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	1e5a      	subs	r2, r3, #1
 800dafa:	60fa      	str	r2, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d102      	bne.n	800db06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db04:	e01b      	b.n	800db3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800db12:	2b00      	cmp	r3, #0
 800db14:	d0ef      	beq.n	800daf6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1ea      	bne.n	800daf6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db24:	f003 0304 	and.w	r3, r3, #4
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d004      	beq.n	800db36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2204      	movs	r2, #4
 800db30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db32:	2304      	movs	r3, #4
 800db34:	e003      	b.n	800db3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	22c5      	movs	r2, #197	; 0xc5
 800db3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3714      	adds	r7, #20
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	20000004 	.word	0x20000004
 800db50:	10624dd3 	.word	0x10624dd3

0800db54 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	460b      	mov	r3, r1
 800db5e:	607a      	str	r2, [r7, #4]
 800db60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db62:	4b35      	ldr	r3, [pc, #212]	; (800dc38 <SDMMC_GetCmdResp6+0xe4>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a35      	ldr	r2, [pc, #212]	; (800dc3c <SDMMC_GetCmdResp6+0xe8>)
 800db68:	fba2 2303 	umull	r2, r3, r2, r3
 800db6c:	0a5b      	lsrs	r3, r3, #9
 800db6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800db72:	fb02 f303 	mul.w	r3, r2, r3
 800db76:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	1e5a      	subs	r2, r3, #1
 800db7c:	61fa      	str	r2, [r7, #28]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d102      	bne.n	800db88 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db86:	e052      	b.n	800dc2e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db8c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800db94:	2b00      	cmp	r3, #0
 800db96:	d0ef      	beq.n	800db78 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db98:	69bb      	ldr	r3, [r7, #24]
 800db9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1ea      	bne.n	800db78 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dba6:	f003 0304 	and.w	r3, r3, #4
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d004      	beq.n	800dbb8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2204      	movs	r2, #4
 800dbb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbb4:	2304      	movs	r3, #4
 800dbb6:	e03a      	b.n	800dc2e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d004      	beq.n	800dbce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e02f      	b.n	800dc2e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f7ff fc0e 	bl	800d3f0 <SDMMC_GetCommandResponse>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	7afb      	ldrb	r3, [r7, #11]
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d001      	beq.n	800dbe2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e025      	b.n	800dc2e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	22c5      	movs	r2, #197	; 0xc5
 800dbe6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dbe8:	2100      	movs	r1, #0
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f7ff fc0d 	bl	800d40a <SDMMC_GetResponse>
 800dbf0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d106      	bne.n	800dc0a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	0c1b      	lsrs	r3, r3, #16
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dc06:	2300      	movs	r3, #0
 800dc08:	e011      	b.n	800dc2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc18:	e009      	b.n	800dc2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc28:	e001      	b.n	800dc2e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3720      	adds	r7, #32
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	20000004 	.word	0x20000004
 800dc3c:	10624dd3 	.word	0x10624dd3

0800dc40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc48:	4b22      	ldr	r3, [pc, #136]	; (800dcd4 <SDMMC_GetCmdResp7+0x94>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a22      	ldr	r2, [pc, #136]	; (800dcd8 <SDMMC_GetCmdResp7+0x98>)
 800dc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc52:	0a5b      	lsrs	r3, r3, #9
 800dc54:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc58:	fb02 f303 	mul.w	r3, r2, r3
 800dc5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	1e5a      	subs	r2, r3, #1
 800dc62:	60fa      	str	r2, [r7, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc6c:	e02c      	b.n	800dcc8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d0ef      	beq.n	800dc5e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d1ea      	bne.n	800dc5e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8c:	f003 0304 	and.w	r3, r3, #4
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d004      	beq.n	800dc9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2204      	movs	r2, #4
 800dc98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc9a:	2304      	movs	r3, #4
 800dc9c:	e014      	b.n	800dcc8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2201      	movs	r2, #1
 800dcae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e009      	b.n	800dcc8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2240      	movs	r2, #64	; 0x40
 800dcc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dcc6:	2300      	movs	r3, #0
  
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3714      	adds	r7, #20
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	20000004 	.word	0x20000004
 800dcd8:	10624dd3 	.word	0x10624dd3

0800dcdc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dce4:	4b11      	ldr	r3, [pc, #68]	; (800dd2c <SDMMC_GetCmdError+0x50>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a11      	ldr	r2, [pc, #68]	; (800dd30 <SDMMC_GetCmdError+0x54>)
 800dcea:	fba2 2303 	umull	r2, r3, r2, r3
 800dcee:	0a5b      	lsrs	r3, r3, #9
 800dcf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcf4:	fb02 f303 	mul.w	r3, r2, r3
 800dcf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	1e5a      	subs	r2, r3, #1
 800dcfe:	60fa      	str	r2, [r7, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd08:	e009      	b.n	800dd1e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d0f1      	beq.n	800dcfa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	22c5      	movs	r2, #197	; 0xc5
 800dd1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	20000004 	.word	0x20000004
 800dd30:	10624dd3 	.word	0x10624dd3

0800dd34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dd38:	4904      	ldr	r1, [pc, #16]	; (800dd4c <MX_FATFS_Init+0x18>)
 800dd3a:	4805      	ldr	r0, [pc, #20]	; (800dd50 <MX_FATFS_Init+0x1c>)
 800dd3c:	f003 f824 	bl	8010d88 <FATFS_LinkDriver>
 800dd40:	4603      	mov	r3, r0
 800dd42:	461a      	mov	r2, r3
 800dd44:	4b03      	ldr	r3, [pc, #12]	; (800dd54 <MX_FATFS_Init+0x20>)
 800dd46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dd48:	bf00      	nop
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	20000984 	.word	0x20000984
 800dd50:	080183f4 	.word	0x080183f4
 800dd54:	20000980 	.word	0x20000980

0800dd58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dd5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dd72:	f000 f888 	bl	800de86 <BSP_SD_IsDetected>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d001      	beq.n	800dd80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dd7c:	2302      	movs	r3, #2
 800dd7e:	e005      	b.n	800dd8c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dd80:	4804      	ldr	r0, [pc, #16]	; (800dd94 <BSP_SD_Init+0x2c>)
 800dd82:	f7fc fbd9 	bl	800a538 <HAL_SD_Init>
 800dd86:	4603      	mov	r3, r0
 800dd88:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800dd8a:	79fb      	ldrb	r3, [r7, #7]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20000434 	.word	0x20000434

0800dd98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	68f9      	ldr	r1, [r7, #12]
 800ddae:	4806      	ldr	r0, [pc, #24]	; (800ddc8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ddb0:	f7fc fc7a 	bl	800a6a8 <HAL_SD_ReadBlocks_DMA>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d001      	beq.n	800ddbe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3718      	adds	r7, #24
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	20000434 	.word	0x20000434

0800ddcc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	68f9      	ldr	r1, [r7, #12]
 800dde2:	4806      	ldr	r0, [pc, #24]	; (800ddfc <BSP_SD_WriteBlocks_DMA+0x30>)
 800dde4:	f7fc fd42 	bl	800a86c <HAL_SD_WriteBlocks_DMA>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ddf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3718      	adds	r7, #24
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	20000434 	.word	0x20000434

0800de00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800de04:	4805      	ldr	r0, [pc, #20]	; (800de1c <BSP_SD_GetCardState+0x1c>)
 800de06:	f7fd f967 	bl	800b0d8 <HAL_SD_GetCardState>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b04      	cmp	r3, #4
 800de0e:	bf14      	ite	ne
 800de10:	2301      	movne	r3, #1
 800de12:	2300      	moveq	r3, #0
 800de14:	b2db      	uxtb	r3, r3
}
 800de16:	4618      	mov	r0, r3
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	20000434 	.word	0x20000434

0800de20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800de28:	6879      	ldr	r1, [r7, #4]
 800de2a:	4803      	ldr	r0, [pc, #12]	; (800de38 <BSP_SD_GetCardInfo+0x18>)
 800de2c:	f7fd f928 	bl	800b080 <HAL_SD_GetCardInfo>
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20000434 	.word	0x20000434

0800de3c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800de44:	f000 f818 	bl	800de78 <BSP_SD_AbortCallback>
}
 800de48:	bf00      	nop
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800de58:	f000 f9a8 	bl	800e1ac <BSP_SD_WriteCpltCallback>
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800de6c:	f000 f9aa 	bl	800e1c4 <BSP_SD_ReadCpltCallback>
}
 800de70:	bf00      	nop
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800de78:	b480      	push	{r7}
 800de7a:	af00      	add	r7, sp, #0

}
 800de7c:	bf00      	nop
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr

0800de86 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b082      	sub	sp, #8
 800de8a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800de8c:	2301      	movs	r3, #1
 800de8e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800de90:	f000 f80c 	bl	800deac <BSP_PlatformIsDetected>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800de9a:	2300      	movs	r3, #0
 800de9c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800de9e:	79fb      	ldrb	r3, [r7, #7]
 800dea0:	b2db      	uxtb	r3, r3
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
	...

0800deac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800deb2:	2301      	movs	r3, #1
 800deb4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800deb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800deba:	4806      	ldr	r0, [pc, #24]	; (800ded4 <BSP_PlatformIsDetected+0x28>)
 800debc:	f7fa f954 	bl	8008168 <HAL_GPIO_ReadPin>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dec6:	2300      	movs	r3, #0
 800dec8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800deca:	79fb      	ldrb	r3, [r7, #7]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	40020800 	.word	0x40020800

0800ded8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dee0:	f7f8 fc54 	bl	800678c <HAL_GetTick>
 800dee4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dee6:	e006      	b.n	800def6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dee8:	f7ff ff8a 	bl	800de00 <BSP_SD_GetCardState>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800def2:	2300      	movs	r3, #0
 800def4:	e009      	b.n	800df0a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800def6:	f7f8 fc49 	bl	800678c <HAL_GetTick>
 800defa:	4602      	mov	r2, r0
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	429a      	cmp	r2, r3
 800df04:	d8f0      	bhi.n	800dee8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800df06:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
	...

0800df14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	4603      	mov	r3, r0
 800df1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800df1e:	4b0b      	ldr	r3, [pc, #44]	; (800df4c <SD_CheckStatus+0x38>)
 800df20:	2201      	movs	r2, #1
 800df22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800df24:	f7ff ff6c 	bl	800de00 <BSP_SD_GetCardState>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d107      	bne.n	800df3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800df2e:	4b07      	ldr	r3, [pc, #28]	; (800df4c <SD_CheckStatus+0x38>)
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	f023 0301 	bic.w	r3, r3, #1
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	4b04      	ldr	r3, [pc, #16]	; (800df4c <SD_CheckStatus+0x38>)
 800df3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800df3e:	4b03      	ldr	r3, [pc, #12]	; (800df4c <SD_CheckStatus+0x38>)
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	b2db      	uxtb	r3, r3
}
 800df44:	4618      	mov	r0, r3
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	20000021 	.word	0x20000021

0800df50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	4603      	mov	r3, r0
 800df58:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800df5a:	f7ff ff05 	bl	800dd68 <BSP_SD_Init>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d107      	bne.n	800df74 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800df64:	79fb      	ldrb	r3, [r7, #7]
 800df66:	4618      	mov	r0, r3
 800df68:	f7ff ffd4 	bl	800df14 <SD_CheckStatus>
 800df6c:	4603      	mov	r3, r0
 800df6e:	461a      	mov	r2, r3
 800df70:	4b04      	ldr	r3, [pc, #16]	; (800df84 <SD_initialize+0x34>)
 800df72:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800df74:	4b03      	ldr	r3, [pc, #12]	; (800df84 <SD_initialize+0x34>)
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	b2db      	uxtb	r3, r3
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	20000021 	.word	0x20000021

0800df88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	4603      	mov	r3, r0
 800df90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800df92:	79fb      	ldrb	r3, [r7, #7]
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff ffbd 	bl	800df14 <SD_CheckStatus>
 800df9a:	4603      	mov	r3, r0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60b9      	str	r1, [r7, #8]
 800dfac:	607a      	str	r2, [r7, #4]
 800dfae:	603b      	str	r3, [r7, #0]
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dfb8:	f247 5030 	movw	r0, #30000	; 0x7530
 800dfbc:	f7ff ff8c 	bl	800ded8 <SD_CheckStatusWithTimeout>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	da01      	bge.n	800dfca <SD_read+0x26>
  {
    return res;
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
 800dfc8:	e03b      	b.n	800e042 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	6879      	ldr	r1, [r7, #4]
 800dfce:	68b8      	ldr	r0, [r7, #8]
 800dfd0:	f7ff fee2 	bl	800dd98 <BSP_SD_ReadBlocks_DMA>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d132      	bne.n	800e040 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800dfda:	4b1c      	ldr	r3, [pc, #112]	; (800e04c <SD_read+0xa8>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800dfe0:	f7f8 fbd4 	bl	800678c <HAL_GetTick>
 800dfe4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dfe6:	bf00      	nop
 800dfe8:	4b18      	ldr	r3, [pc, #96]	; (800e04c <SD_read+0xa8>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d108      	bne.n	800e002 <SD_read+0x5e>
 800dff0:	f7f8 fbcc 	bl	800678c <HAL_GetTick>
 800dff4:	4602      	mov	r2, r0
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	f247 522f 	movw	r2, #29999	; 0x752f
 800dffe:	4293      	cmp	r3, r2
 800e000:	d9f2      	bls.n	800dfe8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e002:	4b12      	ldr	r3, [pc, #72]	; (800e04c <SD_read+0xa8>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d102      	bne.n	800e010 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	75fb      	strb	r3, [r7, #23]
 800e00e:	e017      	b.n	800e040 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e010:	4b0e      	ldr	r3, [pc, #56]	; (800e04c <SD_read+0xa8>)
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e016:	f7f8 fbb9 	bl	800678c <HAL_GetTick>
 800e01a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e01c:	e007      	b.n	800e02e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e01e:	f7ff feef 	bl	800de00 <BSP_SD_GetCardState>
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d102      	bne.n	800e02e <SD_read+0x8a>
          {
            res = RES_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e02c:	e008      	b.n	800e040 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e02e:	f7f8 fbad 	bl	800678c <HAL_GetTick>
 800e032:	4602      	mov	r2, r0
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	f247 522f 	movw	r2, #29999	; 0x752f
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d9ee      	bls.n	800e01e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e040:	7dfb      	ldrb	r3, [r7, #23]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3718      	adds	r7, #24
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	20000dec 	.word	0x20000dec

0800e050 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	607a      	str	r2, [r7, #4]
 800e05a:	603b      	str	r3, [r7, #0]
 800e05c:	4603      	mov	r3, r0
 800e05e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e060:	2301      	movs	r3, #1
 800e062:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e064:	4b24      	ldr	r3, [pc, #144]	; (800e0f8 <SD_write+0xa8>)
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e06a:	f247 5030 	movw	r0, #30000	; 0x7530
 800e06e:	f7ff ff33 	bl	800ded8 <SD_CheckStatusWithTimeout>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	da01      	bge.n	800e07c <SD_write+0x2c>
  {
    return res;
 800e078:	7dfb      	ldrb	r3, [r7, #23]
 800e07a:	e038      	b.n	800e0ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	6879      	ldr	r1, [r7, #4]
 800e080:	68b8      	ldr	r0, [r7, #8]
 800e082:	f7ff fea3 	bl	800ddcc <BSP_SD_WriteBlocks_DMA>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d12f      	bne.n	800e0ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e08c:	f7f8 fb7e 	bl	800678c <HAL_GetTick>
 800e090:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e092:	bf00      	nop
 800e094:	4b18      	ldr	r3, [pc, #96]	; (800e0f8 <SD_write+0xa8>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d108      	bne.n	800e0ae <SD_write+0x5e>
 800e09c:	f7f8 fb76 	bl	800678c <HAL_GetTick>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	f247 522f 	movw	r2, #29999	; 0x752f
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d9f2      	bls.n	800e094 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e0ae:	4b12      	ldr	r3, [pc, #72]	; (800e0f8 <SD_write+0xa8>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d102      	bne.n	800e0bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	75fb      	strb	r3, [r7, #23]
 800e0ba:	e017      	b.n	800e0ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e0bc:	4b0e      	ldr	r3, [pc, #56]	; (800e0f8 <SD_write+0xa8>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e0c2:	f7f8 fb63 	bl	800678c <HAL_GetTick>
 800e0c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e0c8:	e007      	b.n	800e0da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e0ca:	f7ff fe99 	bl	800de00 <BSP_SD_GetCardState>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d102      	bne.n	800e0da <SD_write+0x8a>
          {
            res = RES_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	75fb      	strb	r3, [r7, #23]
            break;
 800e0d8:	e008      	b.n	800e0ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e0da:	f7f8 fb57 	bl	800678c <HAL_GetTick>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d9ee      	bls.n	800e0ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20000de8 	.word	0x20000de8

0800e0fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08c      	sub	sp, #48	; 0x30
 800e100:	af00      	add	r7, sp, #0
 800e102:	4603      	mov	r3, r0
 800e104:	603a      	str	r2, [r7, #0]
 800e106:	71fb      	strb	r3, [r7, #7]
 800e108:	460b      	mov	r3, r1
 800e10a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e112:	4b25      	ldr	r3, [pc, #148]	; (800e1a8 <SD_ioctl+0xac>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	b2db      	uxtb	r3, r3
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <SD_ioctl+0x28>
 800e120:	2303      	movs	r3, #3
 800e122:	e03c      	b.n	800e19e <SD_ioctl+0xa2>

  switch (cmd)
 800e124:	79bb      	ldrb	r3, [r7, #6]
 800e126:	2b03      	cmp	r3, #3
 800e128:	d834      	bhi.n	800e194 <SD_ioctl+0x98>
 800e12a:	a201      	add	r2, pc, #4	; (adr r2, 800e130 <SD_ioctl+0x34>)
 800e12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e130:	0800e141 	.word	0x0800e141
 800e134:	0800e149 	.word	0x0800e149
 800e138:	0800e161 	.word	0x0800e161
 800e13c:	0800e17b 	.word	0x0800e17b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e146:	e028      	b.n	800e19a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e148:	f107 030c 	add.w	r3, r7, #12
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff fe67 	bl	800de20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e158:	2300      	movs	r3, #0
 800e15a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e15e:	e01c      	b.n	800e19a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e160:	f107 030c 	add.w	r3, r7, #12
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff fe5b 	bl	800de20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e172:	2300      	movs	r3, #0
 800e174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e178:	e00f      	b.n	800e19a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e17a:	f107 030c 	add.w	r3, r7, #12
 800e17e:	4618      	mov	r0, r3
 800e180:	f7ff fe4e 	bl	800de20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e186:	0a5a      	lsrs	r2, r3, #9
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e18c:	2300      	movs	r3, #0
 800e18e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e192:	e002      	b.n	800e19a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e194:	2304      	movs	r3, #4
 800e196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e19a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3730      	adds	r7, #48	; 0x30
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	20000021 	.word	0x20000021

0800e1ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e1b0:	4b03      	ldr	r3, [pc, #12]	; (800e1c0 <BSP_SD_WriteCpltCallback+0x14>)
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	601a      	str	r2, [r3, #0]
}
 800e1b6:	bf00      	nop
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	20000de8 	.word	0x20000de8

0800e1c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e1c8:	4b03      	ldr	r3, [pc, #12]	; (800e1d8 <BSP_SD_ReadCpltCallback+0x14>)
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	601a      	str	r2, [r3, #0]
}
 800e1ce:	bf00      	nop
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	20000dec 	.word	0x20000dec

0800e1dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e1e6:	79fb      	ldrb	r3, [r7, #7]
 800e1e8:	4a08      	ldr	r2, [pc, #32]	; (800e20c <disk_status+0x30>)
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	4413      	add	r3, r2
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	79fa      	ldrb	r2, [r7, #7]
 800e1f4:	4905      	ldr	r1, [pc, #20]	; (800e20c <disk_status+0x30>)
 800e1f6:	440a      	add	r2, r1
 800e1f8:	7a12      	ldrb	r2, [r2, #8]
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4798      	blx	r3
 800e1fe:	4603      	mov	r3, r0
 800e200:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e202:	7bfb      	ldrb	r3, [r7, #15]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	20000e18 	.word	0x20000e18

0800e210 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	4603      	mov	r3, r0
 800e218:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	4a0d      	ldr	r2, [pc, #52]	; (800e258 <disk_initialize+0x48>)
 800e222:	5cd3      	ldrb	r3, [r2, r3]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d111      	bne.n	800e24c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e228:	79fb      	ldrb	r3, [r7, #7]
 800e22a:	4a0b      	ldr	r2, [pc, #44]	; (800e258 <disk_initialize+0x48>)
 800e22c:	2101      	movs	r1, #1
 800e22e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e230:	79fb      	ldrb	r3, [r7, #7]
 800e232:	4a09      	ldr	r2, [pc, #36]	; (800e258 <disk_initialize+0x48>)
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	79fa      	ldrb	r2, [r7, #7]
 800e23e:	4906      	ldr	r1, [pc, #24]	; (800e258 <disk_initialize+0x48>)
 800e240:	440a      	add	r2, r1
 800e242:	7a12      	ldrb	r2, [r2, #8]
 800e244:	4610      	mov	r0, r2
 800e246:	4798      	blx	r3
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	20000e18 	.word	0x20000e18

0800e25c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e25c:	b590      	push	{r4, r7, lr}
 800e25e:	b087      	sub	sp, #28
 800e260:	af00      	add	r7, sp, #0
 800e262:	60b9      	str	r1, [r7, #8]
 800e264:	607a      	str	r2, [r7, #4]
 800e266:	603b      	str	r3, [r7, #0]
 800e268:	4603      	mov	r3, r0
 800e26a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	4a0a      	ldr	r2, [pc, #40]	; (800e298 <disk_read+0x3c>)
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4413      	add	r3, r2
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	689c      	ldr	r4, [r3, #8]
 800e278:	7bfb      	ldrb	r3, [r7, #15]
 800e27a:	4a07      	ldr	r2, [pc, #28]	; (800e298 <disk_read+0x3c>)
 800e27c:	4413      	add	r3, r2
 800e27e:	7a18      	ldrb	r0, [r3, #8]
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	68b9      	ldr	r1, [r7, #8]
 800e286:	47a0      	blx	r4
 800e288:	4603      	mov	r3, r0
 800e28a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	371c      	adds	r7, #28
 800e292:	46bd      	mov	sp, r7
 800e294:	bd90      	pop	{r4, r7, pc}
 800e296:	bf00      	nop
 800e298:	20000e18 	.word	0x20000e18

0800e29c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e29c:	b590      	push	{r4, r7, lr}
 800e29e:	b087      	sub	sp, #28
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60b9      	str	r1, [r7, #8]
 800e2a4:	607a      	str	r2, [r7, #4]
 800e2a6:	603b      	str	r3, [r7, #0]
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	4a0a      	ldr	r2, [pc, #40]	; (800e2d8 <disk_write+0x3c>)
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	68dc      	ldr	r4, [r3, #12]
 800e2b8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ba:	4a07      	ldr	r2, [pc, #28]	; (800e2d8 <disk_write+0x3c>)
 800e2bc:	4413      	add	r3, r2
 800e2be:	7a18      	ldrb	r0, [r3, #8]
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	68b9      	ldr	r1, [r7, #8]
 800e2c6:	47a0      	blx	r4
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800e2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	371c      	adds	r7, #28
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd90      	pop	{r4, r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	20000e18 	.word	0x20000e18

0800e2dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	603a      	str	r2, [r7, #0]
 800e2e6:	71fb      	strb	r3, [r7, #7]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	4a09      	ldr	r2, [pc, #36]	; (800e314 <disk_ioctl+0x38>)
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4413      	add	r3, r2
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	79fa      	ldrb	r2, [r7, #7]
 800e2fa:	4906      	ldr	r1, [pc, #24]	; (800e314 <disk_ioctl+0x38>)
 800e2fc:	440a      	add	r2, r1
 800e2fe:	7a10      	ldrb	r0, [r2, #8]
 800e300:	79b9      	ldrb	r1, [r7, #6]
 800e302:	683a      	ldr	r2, [r7, #0]
 800e304:	4798      	blx	r3
 800e306:	4603      	mov	r3, r0
 800e308:	73fb      	strb	r3, [r7, #15]
  return res;
 800e30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	20000e18 	.word	0x20000e18

0800e318 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	3301      	adds	r3, #1
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e328:	89fb      	ldrh	r3, [r7, #14]
 800e32a:	021b      	lsls	r3, r3, #8
 800e32c:	b21a      	sxth	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	b21b      	sxth	r3, r3
 800e334:	4313      	orrs	r3, r2
 800e336:	b21b      	sxth	r3, r3
 800e338:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e33a:	89fb      	ldrh	r3, [r7, #14]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3303      	adds	r3, #3
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	021b      	lsls	r3, r3, #8
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	3202      	adds	r2, #2
 800e360:	7812      	ldrb	r2, [r2, #0]
 800e362:	4313      	orrs	r3, r2
 800e364:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	021b      	lsls	r3, r3, #8
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	3201      	adds	r2, #1
 800e36e:	7812      	ldrb	r2, [r2, #0]
 800e370:	4313      	orrs	r3, r2
 800e372:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	021b      	lsls	r3, r3, #8
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	7812      	ldrb	r2, [r2, #0]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e380:	68fb      	ldr	r3, [r7, #12]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3714      	adds	r7, #20
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr

0800e38e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e38e:	b480      	push	{r7}
 800e390:	b083      	sub	sp, #12
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
 800e396:	460b      	mov	r3, r1
 800e398:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	887a      	ldrh	r2, [r7, #2]
 800e3a2:	b2d2      	uxtb	r2, r2
 800e3a4:	701a      	strb	r2, [r3, #0]
 800e3a6:	887b      	ldrh	r3, [r7, #2]
 800e3a8:	0a1b      	lsrs	r3, r3, #8
 800e3aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	1c5a      	adds	r2, r3, #1
 800e3b0:	607a      	str	r2, [r7, #4]
 800e3b2:	887a      	ldrh	r2, [r7, #2]
 800e3b4:	b2d2      	uxtb	r2, r2
 800e3b6:	701a      	strb	r2, [r3, #0]
}
 800e3b8:	bf00      	nop
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	1c5a      	adds	r2, r3, #1
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	b2d2      	uxtb	r2, r2
 800e3d8:	701a      	strb	r2, [r3, #0]
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	0a1b      	lsrs	r3, r3, #8
 800e3de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	607a      	str	r2, [r7, #4]
 800e3e6:	683a      	ldr	r2, [r7, #0]
 800e3e8:	b2d2      	uxtb	r2, r2
 800e3ea:	701a      	strb	r2, [r3, #0]
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	0a1b      	lsrs	r3, r3, #8
 800e3f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	1c5a      	adds	r2, r3, #1
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	683a      	ldr	r2, [r7, #0]
 800e3fa:	b2d2      	uxtb	r2, r2
 800e3fc:	701a      	strb	r2, [r3, #0]
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	0a1b      	lsrs	r3, r3, #8
 800e402:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	607a      	str	r2, [r7, #4]
 800e40a:	683a      	ldr	r2, [r7, #0]
 800e40c:	b2d2      	uxtb	r2, r2
 800e40e:	701a      	strb	r2, [r3, #0]
}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e41c:	b480      	push	{r7}
 800e41e:	b087      	sub	sp, #28
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00d      	beq.n	800e452 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e436:	693a      	ldr	r2, [r7, #16]
 800e438:	1c53      	adds	r3, r2, #1
 800e43a:	613b      	str	r3, [r7, #16]
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	1c59      	adds	r1, r3, #1
 800e440:	6179      	str	r1, [r7, #20]
 800e442:	7812      	ldrb	r2, [r2, #0]
 800e444:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	3b01      	subs	r3, #1
 800e44a:	607b      	str	r3, [r7, #4]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1f1      	bne.n	800e436 <mem_cpy+0x1a>
	}
}
 800e452:	bf00      	nop
 800e454:	371c      	adds	r7, #28
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr

0800e45e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e45e:	b480      	push	{r7}
 800e460:	b087      	sub	sp, #28
 800e462:	af00      	add	r7, sp, #0
 800e464:	60f8      	str	r0, [r7, #12]
 800e466:	60b9      	str	r1, [r7, #8]
 800e468:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	617a      	str	r2, [r7, #20]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	b2d2      	uxtb	r2, r2
 800e478:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	3b01      	subs	r3, #1
 800e47e:	607b      	str	r3, [r7, #4]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d1f3      	bne.n	800e46e <mem_set+0x10>
}
 800e486:	bf00      	nop
 800e488:	bf00      	nop
 800e48a:	371c      	adds	r7, #28
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e494:	b480      	push	{r7}
 800e496:	b089      	sub	sp, #36	; 0x24
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	61fb      	str	r3, [r7, #28]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	1c5a      	adds	r2, r3, #1
 800e4b0:	61fa      	str	r2, [r7, #28]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	1c5a      	adds	r2, r3, #1
 800e4ba:	61ba      	str	r2, [r7, #24]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	1acb      	subs	r3, r1, r3
 800e4c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	607b      	str	r3, [r7, #4]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d002      	beq.n	800e4d4 <mem_cmp+0x40>
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d0eb      	beq.n	800e4ac <mem_cmp+0x18>

	return r;
 800e4d4:	697b      	ldr	r3, [r7, #20]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3724      	adds	r7, #36	; 0x24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr

0800e4e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e4e2:	b480      	push	{r7}
 800e4e4:	b083      	sub	sp, #12
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
 800e4ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e4ec:	e002      	b.n	800e4f4 <chk_chr+0x12>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	607b      	str	r3, [r7, #4]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d005      	beq.n	800e508 <chk_chr+0x26>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	4293      	cmp	r3, r2
 800e506:	d1f2      	bne.n	800e4ee <chk_chr+0xc>
	return *str;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	781b      	ldrb	r3, [r3, #0]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e522:	2300      	movs	r3, #0
 800e524:	60bb      	str	r3, [r7, #8]
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	60fb      	str	r3, [r7, #12]
 800e52a:	e029      	b.n	800e580 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e52c:	4a27      	ldr	r2, [pc, #156]	; (800e5cc <chk_lock+0xb4>)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	011b      	lsls	r3, r3, #4
 800e532:	4413      	add	r3, r2
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d01d      	beq.n	800e576 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e53a:	4a24      	ldr	r2, [pc, #144]	; (800e5cc <chk_lock+0xb4>)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	011b      	lsls	r3, r3, #4
 800e540:	4413      	add	r3, r2
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d116      	bne.n	800e57a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e54c:	4a1f      	ldr	r2, [pc, #124]	; (800e5cc <chk_lock+0xb4>)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	011b      	lsls	r3, r3, #4
 800e552:	4413      	add	r3, r2
 800e554:	3304      	adds	r3, #4
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d10c      	bne.n	800e57a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e560:	4a1a      	ldr	r2, [pc, #104]	; (800e5cc <chk_lock+0xb4>)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	011b      	lsls	r3, r3, #4
 800e566:	4413      	add	r3, r2
 800e568:	3308      	adds	r3, #8
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e570:	429a      	cmp	r2, r3
 800e572:	d102      	bne.n	800e57a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e574:	e007      	b.n	800e586 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e576:	2301      	movs	r3, #1
 800e578:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	3301      	adds	r3, #1
 800e57e:	60fb      	str	r3, [r7, #12]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2b01      	cmp	r3, #1
 800e584:	d9d2      	bls.n	800e52c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b02      	cmp	r3, #2
 800e58a:	d109      	bne.n	800e5a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d102      	bne.n	800e598 <chk_lock+0x80>
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b02      	cmp	r3, #2
 800e596:	d101      	bne.n	800e59c <chk_lock+0x84>
 800e598:	2300      	movs	r3, #0
 800e59a:	e010      	b.n	800e5be <chk_lock+0xa6>
 800e59c:	2312      	movs	r3, #18
 800e59e:	e00e      	b.n	800e5be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d108      	bne.n	800e5b8 <chk_lock+0xa0>
 800e5a6:	4a09      	ldr	r2, [pc, #36]	; (800e5cc <chk_lock+0xb4>)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	011b      	lsls	r3, r3, #4
 800e5ac:	4413      	add	r3, r2
 800e5ae:	330c      	adds	r3, #12
 800e5b0:	881b      	ldrh	r3, [r3, #0]
 800e5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5b6:	d101      	bne.n	800e5bc <chk_lock+0xa4>
 800e5b8:	2310      	movs	r3, #16
 800e5ba:	e000      	b.n	800e5be <chk_lock+0xa6>
 800e5bc:	2300      	movs	r3, #0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3714      	adds	r7, #20
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	20000df8 	.word	0x20000df8

0800e5d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	607b      	str	r3, [r7, #4]
 800e5da:	e002      	b.n	800e5e2 <enq_lock+0x12>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	607b      	str	r3, [r7, #4]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d806      	bhi.n	800e5f6 <enq_lock+0x26>
 800e5e8:	4a09      	ldr	r2, [pc, #36]	; (800e610 <enq_lock+0x40>)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	011b      	lsls	r3, r3, #4
 800e5ee:	4413      	add	r3, r2
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1f2      	bne.n	800e5dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	bf14      	ite	ne
 800e5fc:	2301      	movne	r3, #1
 800e5fe:	2300      	moveq	r3, #0
 800e600:	b2db      	uxtb	r3, r3
}
 800e602:	4618      	mov	r0, r3
 800e604:	370c      	adds	r7, #12
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	20000df8 	.word	0x20000df8

0800e614 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e61e:	2300      	movs	r3, #0
 800e620:	60fb      	str	r3, [r7, #12]
 800e622:	e01f      	b.n	800e664 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e624:	4a41      	ldr	r2, [pc, #260]	; (800e72c <inc_lock+0x118>)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	011b      	lsls	r3, r3, #4
 800e62a:	4413      	add	r3, r2
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d113      	bne.n	800e65e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e636:	4a3d      	ldr	r2, [pc, #244]	; (800e72c <inc_lock+0x118>)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	011b      	lsls	r3, r3, #4
 800e63c:	4413      	add	r3, r2
 800e63e:	3304      	adds	r3, #4
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e646:	429a      	cmp	r2, r3
 800e648:	d109      	bne.n	800e65e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e64a:	4a38      	ldr	r2, [pc, #224]	; (800e72c <inc_lock+0x118>)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	011b      	lsls	r3, r3, #4
 800e650:	4413      	add	r3, r2
 800e652:	3308      	adds	r3, #8
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d006      	beq.n	800e66c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3301      	adds	r3, #1
 800e662:	60fb      	str	r3, [r7, #12]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d9dc      	bls.n	800e624 <inc_lock+0x10>
 800e66a:	e000      	b.n	800e66e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e66c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2b02      	cmp	r3, #2
 800e672:	d132      	bne.n	800e6da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e674:	2300      	movs	r3, #0
 800e676:	60fb      	str	r3, [r7, #12]
 800e678:	e002      	b.n	800e680 <inc_lock+0x6c>
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	3301      	adds	r3, #1
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2b01      	cmp	r3, #1
 800e684:	d806      	bhi.n	800e694 <inc_lock+0x80>
 800e686:	4a29      	ldr	r2, [pc, #164]	; (800e72c <inc_lock+0x118>)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	011b      	lsls	r3, r3, #4
 800e68c:	4413      	add	r3, r2
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1f2      	bne.n	800e67a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b02      	cmp	r3, #2
 800e698:	d101      	bne.n	800e69e <inc_lock+0x8a>
 800e69a:	2300      	movs	r3, #0
 800e69c:	e040      	b.n	800e720 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	4922      	ldr	r1, [pc, #136]	; (800e72c <inc_lock+0x118>)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	011b      	lsls	r3, r3, #4
 800e6a8:	440b      	add	r3, r1
 800e6aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	689a      	ldr	r2, [r3, #8]
 800e6b0:	491e      	ldr	r1, [pc, #120]	; (800e72c <inc_lock+0x118>)
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	011b      	lsls	r3, r3, #4
 800e6b6:	440b      	add	r3, r1
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	695a      	ldr	r2, [r3, #20]
 800e6c0:	491a      	ldr	r1, [pc, #104]	; (800e72c <inc_lock+0x118>)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	011b      	lsls	r3, r3, #4
 800e6c6:	440b      	add	r3, r1
 800e6c8:	3308      	adds	r3, #8
 800e6ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e6cc:	4a17      	ldr	r2, [pc, #92]	; (800e72c <inc_lock+0x118>)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	011b      	lsls	r3, r3, #4
 800e6d2:	4413      	add	r3, r2
 800e6d4:	330c      	adds	r3, #12
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d009      	beq.n	800e6f4 <inc_lock+0xe0>
 800e6e0:	4a12      	ldr	r2, [pc, #72]	; (800e72c <inc_lock+0x118>)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	011b      	lsls	r3, r3, #4
 800e6e6:	4413      	add	r3, r2
 800e6e8:	330c      	adds	r3, #12
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <inc_lock+0xe0>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	e015      	b.n	800e720 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d108      	bne.n	800e70c <inc_lock+0xf8>
 800e6fa:	4a0c      	ldr	r2, [pc, #48]	; (800e72c <inc_lock+0x118>)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	011b      	lsls	r3, r3, #4
 800e700:	4413      	add	r3, r2
 800e702:	330c      	adds	r3, #12
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	3301      	adds	r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	e001      	b.n	800e710 <inc_lock+0xfc>
 800e70c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e710:	4906      	ldr	r1, [pc, #24]	; (800e72c <inc_lock+0x118>)
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	011b      	lsls	r3, r3, #4
 800e716:	440b      	add	r3, r1
 800e718:	330c      	adds	r3, #12
 800e71a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	3301      	adds	r3, #1
}
 800e720:	4618      	mov	r0, r3
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr
 800e72c:	20000df8 	.word	0x20000df8

0800e730 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e730:	b480      	push	{r7}
 800e732:	b085      	sub	sp, #20
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	3b01      	subs	r3, #1
 800e73c:	607b      	str	r3, [r7, #4]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b01      	cmp	r3, #1
 800e742:	d825      	bhi.n	800e790 <dec_lock+0x60>
		n = Files[i].ctr;
 800e744:	4a17      	ldr	r2, [pc, #92]	; (800e7a4 <dec_lock+0x74>)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	011b      	lsls	r3, r3, #4
 800e74a:	4413      	add	r3, r2
 800e74c:	330c      	adds	r3, #12
 800e74e:	881b      	ldrh	r3, [r3, #0]
 800e750:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e752:	89fb      	ldrh	r3, [r7, #14]
 800e754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e758:	d101      	bne.n	800e75e <dec_lock+0x2e>
 800e75a:	2300      	movs	r3, #0
 800e75c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e75e:	89fb      	ldrh	r3, [r7, #14]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <dec_lock+0x3a>
 800e764:	89fb      	ldrh	r3, [r7, #14]
 800e766:	3b01      	subs	r3, #1
 800e768:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e76a:	4a0e      	ldr	r2, [pc, #56]	; (800e7a4 <dec_lock+0x74>)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	011b      	lsls	r3, r3, #4
 800e770:	4413      	add	r3, r2
 800e772:	330c      	adds	r3, #12
 800e774:	89fa      	ldrh	r2, [r7, #14]
 800e776:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e778:	89fb      	ldrh	r3, [r7, #14]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d105      	bne.n	800e78a <dec_lock+0x5a>
 800e77e:	4a09      	ldr	r2, [pc, #36]	; (800e7a4 <dec_lock+0x74>)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	011b      	lsls	r3, r3, #4
 800e784:	4413      	add	r3, r2
 800e786:	2200      	movs	r2, #0
 800e788:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e78a:	2300      	movs	r3, #0
 800e78c:	737b      	strb	r3, [r7, #13]
 800e78e:	e001      	b.n	800e794 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e790:	2302      	movs	r3, #2
 800e792:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e794:	7b7b      	ldrb	r3, [r7, #13]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3714      	adds	r7, #20
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	20000df8 	.word	0x20000df8

0800e7a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	60fb      	str	r3, [r7, #12]
 800e7b4:	e010      	b.n	800e7d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e7b6:	4a0d      	ldr	r2, [pc, #52]	; (800e7ec <clear_lock+0x44>)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	011b      	lsls	r3, r3, #4
 800e7bc:	4413      	add	r3, r2
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d105      	bne.n	800e7d2 <clear_lock+0x2a>
 800e7c6:	4a09      	ldr	r2, [pc, #36]	; (800e7ec <clear_lock+0x44>)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	011b      	lsls	r3, r3, #4
 800e7cc:	4413      	add	r3, r2
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	60fb      	str	r3, [r7, #12]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d9eb      	bls.n	800e7b6 <clear_lock+0xe>
	}
}
 800e7de:	bf00      	nop
 800e7e0:	bf00      	nop
 800e7e2:	3714      	adds	r7, #20
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	20000df8 	.word	0x20000df8

0800e7f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	78db      	ldrb	r3, [r3, #3]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d034      	beq.n	800e86e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e808:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	7858      	ldrb	r0, [r3, #1]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e814:	2301      	movs	r3, #1
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	f7ff fd40 	bl	800e29c <disk_write>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d002      	beq.n	800e828 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e822:	2301      	movs	r3, #1
 800e824:	73fb      	strb	r3, [r7, #15]
 800e826:	e022      	b.n	800e86e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2200      	movs	r2, #0
 800e82c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a1b      	ldr	r3, [r3, #32]
 800e832:	697a      	ldr	r2, [r7, #20]
 800e834:	1ad2      	subs	r2, r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d217      	bcs.n	800e86e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	789b      	ldrb	r3, [r3, #2]
 800e842:	613b      	str	r3, [r7, #16]
 800e844:	e010      	b.n	800e868 <sync_window+0x78>
					wsect += fs->fsize;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	697a      	ldr	r2, [r7, #20]
 800e84c:	4413      	add	r3, r2
 800e84e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	7858      	ldrb	r0, [r3, #1]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e85a:	2301      	movs	r3, #1
 800e85c:	697a      	ldr	r2, [r7, #20]
 800e85e:	f7ff fd1d 	bl	800e29c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	3b01      	subs	r3, #1
 800e866:	613b      	str	r3, [r7, #16]
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d8eb      	bhi.n	800e846 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e870:	4618      	mov	r0, r3
 800e872:	3718      	adds	r7, #24
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e882:	2300      	movs	r3, #0
 800e884:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d01b      	beq.n	800e8c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7ff ffad 	bl	800e7f0 <sync_window>
 800e896:	4603      	mov	r3, r0
 800e898:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e89a:	7bfb      	ldrb	r3, [r7, #15]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d113      	bne.n	800e8c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	7858      	ldrb	r0, [r3, #1]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	f7ff fcd5 	bl	800e25c <disk_read>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d004      	beq.n	800e8c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800e8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
	...

0800e8d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7ff ff87 	bl	800e7f0 <sync_window>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d158      	bne.n	800e99e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	2b03      	cmp	r3, #3
 800e8f2:	d148      	bne.n	800e986 <sync_fs+0xb2>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	791b      	ldrb	r3, [r3, #4]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d144      	bne.n	800e986 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	3330      	adds	r3, #48	; 0x30
 800e900:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e904:	2100      	movs	r1, #0
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff fda9 	bl	800e45e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	3330      	adds	r3, #48	; 0x30
 800e910:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e914:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e918:	4618      	mov	r0, r3
 800e91a:	f7ff fd38 	bl	800e38e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	3330      	adds	r3, #48	; 0x30
 800e922:	4921      	ldr	r1, [pc, #132]	; (800e9a8 <sync_fs+0xd4>)
 800e924:	4618      	mov	r0, r3
 800e926:	f7ff fd4d 	bl	800e3c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	3330      	adds	r3, #48	; 0x30
 800e92e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e932:	491e      	ldr	r1, [pc, #120]	; (800e9ac <sync_fs+0xd8>)
 800e934:	4618      	mov	r0, r3
 800e936:	f7ff fd45 	bl	800e3c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	3330      	adds	r3, #48	; 0x30
 800e93e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	691b      	ldr	r3, [r3, #16]
 800e946:	4619      	mov	r1, r3
 800e948:	4610      	mov	r0, r2
 800e94a:	f7ff fd3b 	bl	800e3c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	3330      	adds	r3, #48	; 0x30
 800e952:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	4619      	mov	r1, r3
 800e95c:	4610      	mov	r0, r2
 800e95e:	f7ff fd31 	bl	800e3c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	69db      	ldr	r3, [r3, #28]
 800e966:	1c5a      	adds	r2, r3, #1
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	7858      	ldrb	r0, [r3, #1]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e97a:	2301      	movs	r3, #1
 800e97c:	f7ff fc8e 	bl	800e29c <disk_write>
			fs->fsi_flag = 0;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	785b      	ldrb	r3, [r3, #1]
 800e98a:	2200      	movs	r2, #0
 800e98c:	2100      	movs	r1, #0
 800e98e:	4618      	mov	r0, r3
 800e990:	f7ff fca4 	bl	800e2dc <disk_ioctl>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <sync_fs+0xca>
 800e99a:	2301      	movs	r3, #1
 800e99c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	41615252 	.word	0x41615252
 800e9ac:	61417272 	.word	0x61417272

0800e9b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	3b02      	subs	r3, #2
 800e9be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	695b      	ldr	r3, [r3, #20]
 800e9c4:	3b02      	subs	r3, #2
 800e9c6:	683a      	ldr	r2, [r7, #0]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d301      	bcc.n	800e9d0 <clust2sect+0x20>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	e008      	b.n	800e9e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	895b      	ldrh	r3, [r3, #10]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	fb03 f202 	mul.w	r2, r3, r2
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e0:	4413      	add	r3, r2
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b086      	sub	sp, #24
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d904      	bls.n	800ea0e <get_fat+0x20>
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	695b      	ldr	r3, [r3, #20]
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d302      	bcc.n	800ea14 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ea0e:	2301      	movs	r3, #1
 800ea10:	617b      	str	r3, [r7, #20]
 800ea12:	e08f      	b.n	800eb34 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ea14:	f04f 33ff 	mov.w	r3, #4294967295
 800ea18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	2b03      	cmp	r3, #3
 800ea20:	d062      	beq.n	800eae8 <get_fat+0xfa>
 800ea22:	2b03      	cmp	r3, #3
 800ea24:	dc7c      	bgt.n	800eb20 <get_fat+0x132>
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d002      	beq.n	800ea30 <get_fat+0x42>
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d042      	beq.n	800eab4 <get_fat+0xc6>
 800ea2e:	e077      	b.n	800eb20 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	60fb      	str	r3, [r7, #12]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	085b      	lsrs	r3, r3, #1
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	6a1a      	ldr	r2, [r3, #32]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	0a5b      	lsrs	r3, r3, #9
 800ea46:	4413      	add	r3, r2
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6938      	ldr	r0, [r7, #16]
 800ea4c:	f7ff ff14 	bl	800e878 <move_window>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d167      	bne.n	800eb26 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	1c5a      	adds	r2, r3, #1
 800ea5a:	60fa      	str	r2, [r7, #12]
 800ea5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea60:	693a      	ldr	r2, [r7, #16]
 800ea62:	4413      	add	r3, r2
 800ea64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	6a1a      	ldr	r2, [r3, #32]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	0a5b      	lsrs	r3, r3, #9
 800ea72:	4413      	add	r3, r2
 800ea74:	4619      	mov	r1, r3
 800ea76:	6938      	ldr	r0, [r7, #16]
 800ea78:	f7ff fefe 	bl	800e878 <move_window>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d153      	bne.n	800eb2a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea88:	693a      	ldr	r2, [r7, #16]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea90:	021b      	lsls	r3, r3, #8
 800ea92:	461a      	mov	r2, r3
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	f003 0301 	and.w	r3, r3, #1
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <get_fat+0xbc>
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	091b      	lsrs	r3, r3, #4
 800eaa8:	e002      	b.n	800eab0 <get_fat+0xc2>
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eab0:	617b      	str	r3, [r7, #20]
			break;
 800eab2:	e03f      	b.n	800eb34 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	6a1a      	ldr	r2, [r3, #32]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	0a1b      	lsrs	r3, r3, #8
 800eabc:	4413      	add	r3, r2
 800eabe:	4619      	mov	r1, r3
 800eac0:	6938      	ldr	r0, [r7, #16]
 800eac2:	f7ff fed9 	bl	800e878 <move_window>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d130      	bne.n	800eb2e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eada:	4413      	add	r3, r2
 800eadc:	4618      	mov	r0, r3
 800eade:	f7ff fc1b 	bl	800e318 <ld_word>
 800eae2:	4603      	mov	r3, r0
 800eae4:	617b      	str	r3, [r7, #20]
			break;
 800eae6:	e025      	b.n	800eb34 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	6a1a      	ldr	r2, [r3, #32]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	09db      	lsrs	r3, r3, #7
 800eaf0:	4413      	add	r3, r2
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	6938      	ldr	r0, [r7, #16]
 800eaf6:	f7ff febf 	bl	800e878 <move_window>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d118      	bne.n	800eb32 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eb0e:	4413      	add	r3, r2
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7ff fc19 	bl	800e348 <ld_dword>
 800eb16:	4603      	mov	r3, r0
 800eb18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eb1c:	617b      	str	r3, [r7, #20]
			break;
 800eb1e:	e009      	b.n	800eb34 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eb20:	2301      	movs	r3, #1
 800eb22:	617b      	str	r3, [r7, #20]
 800eb24:	e006      	b.n	800eb34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb26:	bf00      	nop
 800eb28:	e004      	b.n	800eb34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb2a:	bf00      	nop
 800eb2c:	e002      	b.n	800eb34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eb2e:	bf00      	nop
 800eb30:	e000      	b.n	800eb34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eb32:	bf00      	nop
		}
	}

	return val;
 800eb34:	697b      	ldr	r3, [r7, #20]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3718      	adds	r7, #24
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800eb3e:	b590      	push	{r4, r7, lr}
 800eb40:	b089      	sub	sp, #36	; 0x24
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	60f8      	str	r0, [r7, #12]
 800eb46:	60b9      	str	r1, [r7, #8]
 800eb48:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800eb4a:	2302      	movs	r3, #2
 800eb4c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	f240 80d9 	bls.w	800ed08 <put_fat+0x1ca>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	695b      	ldr	r3, [r3, #20]
 800eb5a:	68ba      	ldr	r2, [r7, #8]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	f080 80d3 	bcs.w	800ed08 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	2b03      	cmp	r3, #3
 800eb68:	f000 8096 	beq.w	800ec98 <put_fat+0x15a>
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	f300 80cb 	bgt.w	800ed08 <put_fat+0x1ca>
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d002      	beq.n	800eb7c <put_fat+0x3e>
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d06e      	beq.n	800ec58 <put_fat+0x11a>
 800eb7a:	e0c5      	b.n	800ed08 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	61bb      	str	r3, [r7, #24]
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	085b      	lsrs	r3, r3, #1
 800eb84:	69ba      	ldr	r2, [r7, #24]
 800eb86:	4413      	add	r3, r2
 800eb88:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6a1a      	ldr	r2, [r3, #32]
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	0a5b      	lsrs	r3, r3, #9
 800eb92:	4413      	add	r3, r2
 800eb94:	4619      	mov	r1, r3
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f7ff fe6e 	bl	800e878 <move_window>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eba0:	7ffb      	ldrb	r3, [r7, #31]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f040 80a9 	bne.w	800ecfa <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	1c59      	adds	r1, r3, #1
 800ebb2:	61b9      	str	r1, [r7, #24]
 800ebb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebb8:	4413      	add	r3, r2
 800ebba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00d      	beq.n	800ebe2 <put_fat+0xa4>
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	b25b      	sxtb	r3, r3
 800ebcc:	f003 030f 	and.w	r3, r3, #15
 800ebd0:	b25a      	sxtb	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	011b      	lsls	r3, r3, #4
 800ebd8:	b25b      	sxtb	r3, r3
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	b25b      	sxtb	r3, r3
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	e001      	b.n	800ebe6 <put_fat+0xa8>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2201      	movs	r2, #1
 800ebee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6a1a      	ldr	r2, [r3, #32]
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	0a5b      	lsrs	r3, r3, #9
 800ebf8:	4413      	add	r3, r2
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f7ff fe3b 	bl	800e878 <move_window>
 800ec02:	4603      	mov	r3, r0
 800ec04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec06:	7ffb      	ldrb	r3, [r7, #31]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d178      	bne.n	800ecfe <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec18:	4413      	add	r3, r2
 800ec1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d003      	beq.n	800ec2e <put_fat+0xf0>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	091b      	lsrs	r3, r3, #4
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	e00e      	b.n	800ec4c <put_fat+0x10e>
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	b25b      	sxtb	r3, r3
 800ec34:	f023 030f 	bic.w	r3, r3, #15
 800ec38:	b25a      	sxtb	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	0a1b      	lsrs	r3, r3, #8
 800ec3e:	b25b      	sxtb	r3, r3
 800ec40:	f003 030f 	and.w	r3, r3, #15
 800ec44:	b25b      	sxtb	r3, r3
 800ec46:	4313      	orrs	r3, r2
 800ec48:	b25b      	sxtb	r3, r3
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2201      	movs	r2, #1
 800ec54:	70da      	strb	r2, [r3, #3]
			break;
 800ec56:	e057      	b.n	800ed08 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6a1a      	ldr	r2, [r3, #32]
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	0a1b      	lsrs	r3, r3, #8
 800ec60:	4413      	add	r3, r2
 800ec62:	4619      	mov	r1, r3
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f7ff fe07 	bl	800e878 <move_window>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec6e:	7ffb      	ldrb	r3, [r7, #31]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d146      	bne.n	800ed02 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ec82:	4413      	add	r3, r2
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	b292      	uxth	r2, r2
 800ec88:	4611      	mov	r1, r2
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7ff fb7f 	bl	800e38e <st_word>
			fs->wflag = 1;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2201      	movs	r2, #1
 800ec94:	70da      	strb	r2, [r3, #3]
			break;
 800ec96:	e037      	b.n	800ed08 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6a1a      	ldr	r2, [r3, #32]
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	09db      	lsrs	r3, r3, #7
 800eca0:	4413      	add	r3, r2
 800eca2:	4619      	mov	r1, r3
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f7ff fde7 	bl	800e878 <move_window>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ecae:	7ffb      	ldrb	r3, [r7, #31]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d128      	bne.n	800ed06 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ecc8:	4413      	add	r3, r2
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7ff fb3c 	bl	800e348 <ld_dword>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ecd6:	4323      	orrs	r3, r4
 800ecd8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ece8:	4413      	add	r3, r2
 800ecea:	6879      	ldr	r1, [r7, #4]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7ff fb69 	bl	800e3c4 <st_dword>
			fs->wflag = 1;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	70da      	strb	r2, [r3, #3]
			break;
 800ecf8:	e006      	b.n	800ed08 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ecfa:	bf00      	nop
 800ecfc:	e004      	b.n	800ed08 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ecfe:	bf00      	nop
 800ed00:	e002      	b.n	800ed08 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ed02:	bf00      	nop
 800ed04:	e000      	b.n	800ed08 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ed06:	bf00      	nop
		}
	}
	return res;
 800ed08:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3724      	adds	r7, #36	; 0x24
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd90      	pop	{r4, r7, pc}

0800ed12 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b088      	sub	sp, #32
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	60f8      	str	r0, [r7, #12]
 800ed1a:	60b9      	str	r1, [r7, #8]
 800ed1c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d904      	bls.n	800ed38 <remove_chain+0x26>
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	695b      	ldr	r3, [r3, #20]
 800ed32:	68ba      	ldr	r2, [r7, #8]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d301      	bcc.n	800ed3c <remove_chain+0x2a>
 800ed38:	2302      	movs	r3, #2
 800ed3a:	e04b      	b.n	800edd4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00c      	beq.n	800ed5c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ed42:	f04f 32ff 	mov.w	r2, #4294967295
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	69b8      	ldr	r0, [r7, #24]
 800ed4a:	f7ff fef8 	bl	800eb3e <put_fat>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ed52:	7ffb      	ldrb	r3, [r7, #31]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <remove_chain+0x4a>
 800ed58:	7ffb      	ldrb	r3, [r7, #31]
 800ed5a:	e03b      	b.n	800edd4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f7ff fe45 	bl	800e9ee <get_fat>
 800ed64:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d031      	beq.n	800edd0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d101      	bne.n	800ed76 <remove_chain+0x64>
 800ed72:	2302      	movs	r3, #2
 800ed74:	e02e      	b.n	800edd4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed7c:	d101      	bne.n	800ed82 <remove_chain+0x70>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e028      	b.n	800edd4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ed82:	2200      	movs	r2, #0
 800ed84:	68b9      	ldr	r1, [r7, #8]
 800ed86:	69b8      	ldr	r0, [r7, #24]
 800ed88:	f7ff fed9 	bl	800eb3e <put_fat>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ed90:	7ffb      	ldrb	r3, [r7, #31]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <remove_chain+0x88>
 800ed96:	7ffb      	ldrb	r3, [r7, #31]
 800ed98:	e01c      	b.n	800edd4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	691a      	ldr	r2, [r3, #16]
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	695b      	ldr	r3, [r3, #20]
 800eda2:	3b02      	subs	r3, #2
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d20b      	bcs.n	800edc0 <remove_chain+0xae>
			fs->free_clst++;
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	691b      	ldr	r3, [r3, #16]
 800edac:	1c5a      	adds	r2, r3, #1
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	791b      	ldrb	r3, [r3, #4]
 800edb6:	f043 0301 	orr.w	r3, r3, #1
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	68ba      	ldr	r2, [r7, #8]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d3c6      	bcc.n	800ed5c <remove_chain+0x4a>
 800edce:	e000      	b.n	800edd2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800edd0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800edd2:	2300      	movs	r3, #0
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3720      	adds	r7, #32
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b088      	sub	sp, #32
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d10d      	bne.n	800ee0e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800edf8:	69bb      	ldr	r3, [r7, #24]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d004      	beq.n	800ee08 <create_chain+0x2c>
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	695b      	ldr	r3, [r3, #20]
 800ee02:	69ba      	ldr	r2, [r7, #24]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d31b      	bcc.n	800ee40 <create_chain+0x64>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	61bb      	str	r3, [r7, #24]
 800ee0c:	e018      	b.n	800ee40 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ee0e:	6839      	ldr	r1, [r7, #0]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7ff fdec 	bl	800e9ee <get_fat>
 800ee16:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d801      	bhi.n	800ee22 <create_chain+0x46>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e070      	b.n	800ef04 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee28:	d101      	bne.n	800ee2e <create_chain+0x52>
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	e06a      	b.n	800ef04 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	695b      	ldr	r3, [r3, #20]
 800ee32:	68fa      	ldr	r2, [r7, #12]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d201      	bcs.n	800ee3c <create_chain+0x60>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	e063      	b.n	800ef04 <create_chain+0x128>
		scl = clst;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	3301      	adds	r3, #1
 800ee48:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	69fa      	ldr	r2, [r7, #28]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d307      	bcc.n	800ee64 <create_chain+0x88>
				ncl = 2;
 800ee54:	2302      	movs	r3, #2
 800ee56:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ee58:	69fa      	ldr	r2, [r7, #28]
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d901      	bls.n	800ee64 <create_chain+0x88>
 800ee60:	2300      	movs	r3, #0
 800ee62:	e04f      	b.n	800ef04 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ee64:	69f9      	ldr	r1, [r7, #28]
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7ff fdc1 	bl	800e9ee <get_fat>
 800ee6c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00e      	beq.n	800ee92 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d003      	beq.n	800ee82 <create_chain+0xa6>
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee80:	d101      	bne.n	800ee86 <create_chain+0xaa>
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	e03e      	b.n	800ef04 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ee86:	69fa      	ldr	r2, [r7, #28]
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d1da      	bne.n	800ee44 <create_chain+0x68>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	e038      	b.n	800ef04 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ee92:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ee94:	f04f 32ff 	mov.w	r2, #4294967295
 800ee98:	69f9      	ldr	r1, [r7, #28]
 800ee9a:	6938      	ldr	r0, [r7, #16]
 800ee9c:	f7ff fe4f 	bl	800eb3e <put_fat>
 800eea0:	4603      	mov	r3, r0
 800eea2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800eea4:	7dfb      	ldrb	r3, [r7, #23]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d109      	bne.n	800eebe <create_chain+0xe2>
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d006      	beq.n	800eebe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eeb0:	69fa      	ldr	r2, [r7, #28]
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	6938      	ldr	r0, [r7, #16]
 800eeb6:	f7ff fe42 	bl	800eb3e <put_fat>
 800eeba:	4603      	mov	r3, r0
 800eebc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eebe:	7dfb      	ldrb	r3, [r7, #23]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d116      	bne.n	800eef2 <create_chain+0x116>
		fs->last_clst = ncl;
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	69fa      	ldr	r2, [r7, #28]
 800eec8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	691a      	ldr	r2, [r3, #16]
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	695b      	ldr	r3, [r3, #20]
 800eed2:	3b02      	subs	r3, #2
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d804      	bhi.n	800eee2 <create_chain+0x106>
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	1e5a      	subs	r2, r3, #1
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	791b      	ldrb	r3, [r3, #4]
 800eee6:	f043 0301 	orr.w	r3, r3, #1
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	711a      	strb	r2, [r3, #4]
 800eef0:	e007      	b.n	800ef02 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eef2:	7dfb      	ldrb	r3, [r7, #23]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d102      	bne.n	800eefe <create_chain+0x122>
 800eef8:	f04f 33ff 	mov.w	r3, #4294967295
 800eefc:	e000      	b.n	800ef00 <create_chain+0x124>
 800eefe:	2301      	movs	r3, #1
 800ef00:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ef02:	69fb      	ldr	r3, [r7, #28]
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3720      	adds	r7, #32
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b087      	sub	sp, #28
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef20:	3304      	adds	r3, #4
 800ef22:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	0a5b      	lsrs	r3, r3, #9
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	8952      	ldrh	r2, [r2, #10]
 800ef2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	1d1a      	adds	r2, r3, #4
 800ef36:	613a      	str	r2, [r7, #16]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d101      	bne.n	800ef46 <clmt_clust+0x3a>
 800ef42:	2300      	movs	r3, #0
 800ef44:	e010      	b.n	800ef68 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ef46:	697a      	ldr	r2, [r7, #20]
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d307      	bcc.n	800ef5e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ef4e:	697a      	ldr	r2, [r7, #20]
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	617b      	str	r3, [r7, #20]
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	3304      	adds	r3, #4
 800ef5a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef5c:	e7e9      	b.n	800ef32 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ef5e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	4413      	add	r3, r2
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	371c      	adds	r7, #28
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b086      	sub	sp, #24
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef8a:	d204      	bcs.n	800ef96 <dir_sdi+0x22>
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	f003 031f 	and.w	r3, r3, #31
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d001      	beq.n	800ef9a <dir_sdi+0x26>
		return FR_INT_ERR;
 800ef96:	2302      	movs	r3, #2
 800ef98:	e063      	b.n	800f062 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	683a      	ldr	r2, [r7, #0]
 800ef9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	689b      	ldr	r3, [r3, #8]
 800efa4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d106      	bne.n	800efba <dir_sdi+0x46>
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d902      	bls.n	800efba <dir_sdi+0x46>
		clst = fs->dirbase;
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10c      	bne.n	800efda <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	095b      	lsrs	r3, r3, #5
 800efc4:	693a      	ldr	r2, [r7, #16]
 800efc6:	8912      	ldrh	r2, [r2, #8]
 800efc8:	4293      	cmp	r3, r2
 800efca:	d301      	bcc.n	800efd0 <dir_sdi+0x5c>
 800efcc:	2302      	movs	r3, #2
 800efce:	e048      	b.n	800f062 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	61da      	str	r2, [r3, #28]
 800efd8:	e029      	b.n	800f02e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	895b      	ldrh	r3, [r3, #10]
 800efde:	025b      	lsls	r3, r3, #9
 800efe0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800efe2:	e019      	b.n	800f018 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6979      	ldr	r1, [r7, #20]
 800efe8:	4618      	mov	r0, r3
 800efea:	f7ff fd00 	bl	800e9ee <get_fat>
 800efee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff6:	d101      	bne.n	800effc <dir_sdi+0x88>
 800eff8:	2301      	movs	r3, #1
 800effa:	e032      	b.n	800f062 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d904      	bls.n	800f00c <dir_sdi+0x98>
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	697a      	ldr	r2, [r7, #20]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d301      	bcc.n	800f010 <dir_sdi+0x9c>
 800f00c:	2302      	movs	r3, #2
 800f00e:	e028      	b.n	800f062 <dir_sdi+0xee>
			ofs -= csz;
 800f010:	683a      	ldr	r2, [r7, #0]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f018:	683a      	ldr	r2, [r7, #0]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d2e1      	bcs.n	800efe4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f020:	6979      	ldr	r1, [r7, #20]
 800f022:	6938      	ldr	r0, [r7, #16]
 800f024:	f7ff fcc4 	bl	800e9b0 <clust2sect>
 800f028:	4602      	mov	r2, r0
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	69db      	ldr	r3, [r3, #28]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d101      	bne.n	800f040 <dir_sdi+0xcc>
 800f03c:	2302      	movs	r3, #2
 800f03e:	e010      	b.n	800f062 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	69da      	ldr	r2, [r3, #28]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	0a5b      	lsrs	r3, r3, #9
 800f048:	441a      	add	r2, r3
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f05a:	441a      	add	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b086      	sub	sp, #24
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	695b      	ldr	r3, [r3, #20]
 800f07e:	3320      	adds	r3, #32
 800f080:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	69db      	ldr	r3, [r3, #28]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d003      	beq.n	800f092 <dir_next+0x28>
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f090:	d301      	bcc.n	800f096 <dir_next+0x2c>
 800f092:	2304      	movs	r3, #4
 800f094:	e0aa      	b.n	800f1ec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	f040 8098 	bne.w	800f1d2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	69db      	ldr	r3, [r3, #28]
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	699b      	ldr	r3, [r3, #24]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10b      	bne.n	800f0cc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	095b      	lsrs	r3, r3, #5
 800f0b8:	68fa      	ldr	r2, [r7, #12]
 800f0ba:	8912      	ldrh	r2, [r2, #8]
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	f0c0 8088 	bcc.w	800f1d2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	61da      	str	r2, [r3, #28]
 800f0c8:	2304      	movs	r3, #4
 800f0ca:	e08f      	b.n	800f1ec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	0a5b      	lsrs	r3, r3, #9
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	8952      	ldrh	r2, [r2, #10]
 800f0d4:	3a01      	subs	r2, #1
 800f0d6:	4013      	ands	r3, r2
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d17a      	bne.n	800f1d2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	699b      	ldr	r3, [r3, #24]
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	f7ff fc82 	bl	800e9ee <get_fat>
 800f0ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d801      	bhi.n	800f0f6 <dir_next+0x8c>
 800f0f2:	2302      	movs	r3, #2
 800f0f4:	e07a      	b.n	800f1ec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fc:	d101      	bne.n	800f102 <dir_next+0x98>
 800f0fe:	2301      	movs	r3, #1
 800f100:	e074      	b.n	800f1ec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	695b      	ldr	r3, [r3, #20]
 800f106:	697a      	ldr	r2, [r7, #20]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d358      	bcc.n	800f1be <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d104      	bne.n	800f11c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	61da      	str	r2, [r3, #28]
 800f118:	2304      	movs	r3, #4
 800f11a:	e067      	b.n	800f1ec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	699b      	ldr	r3, [r3, #24]
 800f122:	4619      	mov	r1, r3
 800f124:	4610      	mov	r0, r2
 800f126:	f7ff fe59 	bl	800eddc <create_chain>
 800f12a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d101      	bne.n	800f136 <dir_next+0xcc>
 800f132:	2307      	movs	r3, #7
 800f134:	e05a      	b.n	800f1ec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d101      	bne.n	800f140 <dir_next+0xd6>
 800f13c:	2302      	movs	r3, #2
 800f13e:	e055      	b.n	800f1ec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f146:	d101      	bne.n	800f14c <dir_next+0xe2>
 800f148:	2301      	movs	r3, #1
 800f14a:	e04f      	b.n	800f1ec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7ff fb4f 	bl	800e7f0 <sync_window>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <dir_next+0xf2>
 800f158:	2301      	movs	r3, #1
 800f15a:	e047      	b.n	800f1ec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3330      	adds	r3, #48	; 0x30
 800f160:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f164:	2100      	movs	r1, #0
 800f166:	4618      	mov	r0, r3
 800f168:	f7ff f979 	bl	800e45e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f16c:	2300      	movs	r3, #0
 800f16e:	613b      	str	r3, [r7, #16]
 800f170:	6979      	ldr	r1, [r7, #20]
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f7ff fc1c 	bl	800e9b0 <clust2sect>
 800f178:	4602      	mov	r2, r0
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	62da      	str	r2, [r3, #44]	; 0x2c
 800f17e:	e012      	b.n	800f1a6 <dir_next+0x13c>
						fs->wflag = 1;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2201      	movs	r2, #1
 800f184:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f7ff fb32 	bl	800e7f0 <sync_window>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d001      	beq.n	800f196 <dir_next+0x12c>
 800f192:	2301      	movs	r3, #1
 800f194:	e02a      	b.n	800f1ec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	3301      	adds	r3, #1
 800f19a:	613b      	str	r3, [r7, #16]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a0:	1c5a      	adds	r2, r3, #1
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	62da      	str	r2, [r3, #44]	; 0x2c
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	895b      	ldrh	r3, [r3, #10]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d3e6      	bcc.n	800f180 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	1ad2      	subs	r2, r2, r3
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	697a      	ldr	r2, [r7, #20]
 800f1c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f1c4:	6979      	ldr	r1, [r7, #20]
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f7ff fbf2 	bl	800e9b0 <clust2sect>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1e4:	441a      	add	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f1ea:	2300      	movs	r3, #0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b086      	sub	sp, #24
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f204:	2100      	movs	r1, #0
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7ff feb4 	bl	800ef74 <dir_sdi>
 800f20c:	4603      	mov	r3, r0
 800f20e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f210:	7dfb      	ldrb	r3, [r7, #23]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d12b      	bne.n	800f26e <dir_alloc+0x7a>
		n = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	69db      	ldr	r3, [r3, #28]
 800f21e:	4619      	mov	r1, r3
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7ff fb29 	bl	800e878 <move_window>
 800f226:	4603      	mov	r3, r0
 800f228:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f22a:	7dfb      	ldrb	r3, [r7, #23]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d11d      	bne.n	800f26c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6a1b      	ldr	r3, [r3, #32]
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	2be5      	cmp	r3, #229	; 0xe5
 800f238:	d004      	beq.n	800f244 <dir_alloc+0x50>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d107      	bne.n	800f254 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	3301      	adds	r3, #1
 800f248:	613b      	str	r3, [r7, #16]
 800f24a:	693a      	ldr	r2, [r7, #16]
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d102      	bne.n	800f258 <dir_alloc+0x64>
 800f252:	e00c      	b.n	800f26e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f254:	2300      	movs	r3, #0
 800f256:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f258:	2101      	movs	r1, #1
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7ff ff05 	bl	800f06a <dir_next>
 800f260:	4603      	mov	r3, r0
 800f262:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f264:	7dfb      	ldrb	r3, [r7, #23]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d0d7      	beq.n	800f21a <dir_alloc+0x26>
 800f26a:	e000      	b.n	800f26e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f26c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f26e:	7dfb      	ldrb	r3, [r7, #23]
 800f270:	2b04      	cmp	r3, #4
 800f272:	d101      	bne.n	800f278 <dir_alloc+0x84>
 800f274:	2307      	movs	r3, #7
 800f276:	75fb      	strb	r3, [r7, #23]
	return res;
 800f278:	7dfb      	ldrb	r3, [r7, #23]
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3718      	adds	r7, #24
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b084      	sub	sp, #16
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
 800f28a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	331a      	adds	r3, #26
 800f290:	4618      	mov	r0, r3
 800f292:	f7ff f841 	bl	800e318 <ld_word>
 800f296:	4603      	mov	r3, r0
 800f298:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	2b03      	cmp	r3, #3
 800f2a0:	d109      	bne.n	800f2b6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	3314      	adds	r3, #20
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7ff f836 	bl	800e318 <ld_word>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	041b      	lsls	r3, r3, #16
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	331a      	adds	r3, #26
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	b292      	uxth	r2, r2
 800f2d4:	4611      	mov	r1, r2
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff f859 	bl	800e38e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b03      	cmp	r3, #3
 800f2e2:	d109      	bne.n	800f2f8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	f103 0214 	add.w	r2, r3, #20
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	0c1b      	lsrs	r3, r3, #16
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	4610      	mov	r0, r2
 800f2f4:	f7ff f84b 	bl	800e38e <st_word>
	}
}
 800f2f8:	bf00      	nop
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f30e:	2100      	movs	r1, #0
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7ff fe2f 	bl	800ef74 <dir_sdi>
 800f316:	4603      	mov	r3, r0
 800f318:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f31a:	7dfb      	ldrb	r3, [r7, #23]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d001      	beq.n	800f324 <dir_find+0x24>
 800f320:	7dfb      	ldrb	r3, [r7, #23]
 800f322:	e03e      	b.n	800f3a2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	69db      	ldr	r3, [r3, #28]
 800f328:	4619      	mov	r1, r3
 800f32a:	6938      	ldr	r0, [r7, #16]
 800f32c:	f7ff faa4 	bl	800e878 <move_window>
 800f330:	4603      	mov	r3, r0
 800f332:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f334:	7dfb      	ldrb	r3, [r7, #23]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d12f      	bne.n	800f39a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d102      	bne.n	800f34e <dir_find+0x4e>
 800f348:	2304      	movs	r3, #4
 800f34a:	75fb      	strb	r3, [r7, #23]
 800f34c:	e028      	b.n	800f3a0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a1b      	ldr	r3, [r3, #32]
 800f352:	330b      	adds	r3, #11
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6a1b      	ldr	r3, [r3, #32]
 800f364:	330b      	adds	r3, #11
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	f003 0308 	and.w	r3, r3, #8
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d10a      	bne.n	800f386 <dir_find+0x86>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6a18      	ldr	r0, [r3, #32]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	3324      	adds	r3, #36	; 0x24
 800f378:	220b      	movs	r2, #11
 800f37a:	4619      	mov	r1, r3
 800f37c:	f7ff f88a 	bl	800e494 <mem_cmp>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00b      	beq.n	800f39e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f386:	2100      	movs	r1, #0
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff fe6e 	bl	800f06a <dir_next>
 800f38e:	4603      	mov	r3, r0
 800f390:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f392:	7dfb      	ldrb	r3, [r7, #23]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d0c5      	beq.n	800f324 <dir_find+0x24>
 800f398:	e002      	b.n	800f3a0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f39a:	bf00      	nop
 800f39c:	e000      	b.n	800f3a0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f39e:	bf00      	nop

	return res;
 800f3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3718      	adds	r7, #24
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b084      	sub	sp, #16
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7ff ff1a 	bl	800f1f4 <dir_alloc>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f3c4:	7bfb      	ldrb	r3, [r7, #15]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d11c      	bne.n	800f404 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	69db      	ldr	r3, [r3, #28]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	68b8      	ldr	r0, [r7, #8]
 800f3d2:	f7ff fa51 	bl	800e878 <move_window>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d111      	bne.n	800f404 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6a1b      	ldr	r3, [r3, #32]
 800f3e4:	2220      	movs	r2, #32
 800f3e6:	2100      	movs	r1, #0
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7ff f838 	bl	800e45e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a18      	ldr	r0, [r3, #32]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	3324      	adds	r3, #36	; 0x24
 800f3f6:	220b      	movs	r2, #11
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	f7ff f80f 	bl	800e41c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	2201      	movs	r2, #1
 800f402:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f404:	7bfb      	ldrb	r3, [r7, #15]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
	...

0800f410 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	60fb      	str	r3, [r7, #12]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	3324      	adds	r3, #36	; 0x24
 800f424:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f426:	220b      	movs	r2, #11
 800f428:	2120      	movs	r1, #32
 800f42a:	68b8      	ldr	r0, [r7, #8]
 800f42c:	f7ff f817 	bl	800e45e <mem_set>
	si = i = 0; ni = 8;
 800f430:	2300      	movs	r3, #0
 800f432:	613b      	str	r3, [r7, #16]
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	61fb      	str	r3, [r7, #28]
 800f438:	2308      	movs	r3, #8
 800f43a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	1c5a      	adds	r2, r3, #1
 800f440:	61fa      	str	r2, [r7, #28]
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	4413      	add	r3, r2
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f44a:	7efb      	ldrb	r3, [r7, #27]
 800f44c:	2b20      	cmp	r3, #32
 800f44e:	d94e      	bls.n	800f4ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f450:	7efb      	ldrb	r3, [r7, #27]
 800f452:	2b2f      	cmp	r3, #47	; 0x2f
 800f454:	d006      	beq.n	800f464 <create_name+0x54>
 800f456:	7efb      	ldrb	r3, [r7, #27]
 800f458:	2b5c      	cmp	r3, #92	; 0x5c
 800f45a:	d110      	bne.n	800f47e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f45c:	e002      	b.n	800f464 <create_name+0x54>
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	3301      	adds	r3, #1
 800f462:	61fb      	str	r3, [r7, #28]
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	4413      	add	r3, r2
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b2f      	cmp	r3, #47	; 0x2f
 800f46e:	d0f6      	beq.n	800f45e <create_name+0x4e>
 800f470:	68fa      	ldr	r2, [r7, #12]
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	4413      	add	r3, r2
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	2b5c      	cmp	r3, #92	; 0x5c
 800f47a:	d0f0      	beq.n	800f45e <create_name+0x4e>
			break;
 800f47c:	e038      	b.n	800f4f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f47e:	7efb      	ldrb	r3, [r7, #27]
 800f480:	2b2e      	cmp	r3, #46	; 0x2e
 800f482:	d003      	beq.n	800f48c <create_name+0x7c>
 800f484:	693a      	ldr	r2, [r7, #16]
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d30c      	bcc.n	800f4a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2b0b      	cmp	r3, #11
 800f490:	d002      	beq.n	800f498 <create_name+0x88>
 800f492:	7efb      	ldrb	r3, [r7, #27]
 800f494:	2b2e      	cmp	r3, #46	; 0x2e
 800f496:	d001      	beq.n	800f49c <create_name+0x8c>
 800f498:	2306      	movs	r3, #6
 800f49a:	e044      	b.n	800f526 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f49c:	2308      	movs	r3, #8
 800f49e:	613b      	str	r3, [r7, #16]
 800f4a0:	230b      	movs	r3, #11
 800f4a2:	617b      	str	r3, [r7, #20]
			continue;
 800f4a4:	e022      	b.n	800f4ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f4a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	da04      	bge.n	800f4b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f4ae:	7efb      	ldrb	r3, [r7, #27]
 800f4b0:	3b80      	subs	r3, #128	; 0x80
 800f4b2:	4a1f      	ldr	r2, [pc, #124]	; (800f530 <create_name+0x120>)
 800f4b4:	5cd3      	ldrb	r3, [r2, r3]
 800f4b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f4b8:	7efb      	ldrb	r3, [r7, #27]
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	481d      	ldr	r0, [pc, #116]	; (800f534 <create_name+0x124>)
 800f4be:	f7ff f810 	bl	800e4e2 <chk_chr>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d001      	beq.n	800f4cc <create_name+0xbc>
 800f4c8:	2306      	movs	r3, #6
 800f4ca:	e02c      	b.n	800f526 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f4cc:	7efb      	ldrb	r3, [r7, #27]
 800f4ce:	2b60      	cmp	r3, #96	; 0x60
 800f4d0:	d905      	bls.n	800f4de <create_name+0xce>
 800f4d2:	7efb      	ldrb	r3, [r7, #27]
 800f4d4:	2b7a      	cmp	r3, #122	; 0x7a
 800f4d6:	d802      	bhi.n	800f4de <create_name+0xce>
 800f4d8:	7efb      	ldrb	r3, [r7, #27]
 800f4da:	3b20      	subs	r3, #32
 800f4dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	1c5a      	adds	r2, r3, #1
 800f4e2:	613a      	str	r2, [r7, #16]
 800f4e4:	68ba      	ldr	r2, [r7, #8]
 800f4e6:	4413      	add	r3, r2
 800f4e8:	7efa      	ldrb	r2, [r7, #27]
 800f4ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f4ec:	e7a6      	b.n	800f43c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f4ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f4f0:	68fa      	ldr	r2, [r7, #12]
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	441a      	add	r2, r3
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d101      	bne.n	800f504 <create_name+0xf4>
 800f500:	2306      	movs	r3, #6
 800f502:	e010      	b.n	800f526 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	2be5      	cmp	r3, #229	; 0xe5
 800f50a:	d102      	bne.n	800f512 <create_name+0x102>
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	2205      	movs	r2, #5
 800f510:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f512:	7efb      	ldrb	r3, [r7, #27]
 800f514:	2b20      	cmp	r3, #32
 800f516:	d801      	bhi.n	800f51c <create_name+0x10c>
 800f518:	2204      	movs	r2, #4
 800f51a:	e000      	b.n	800f51e <create_name+0x10e>
 800f51c:	2200      	movs	r2, #0
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	330b      	adds	r3, #11
 800f522:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f524:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f526:	4618      	mov	r0, r3
 800f528:	3720      	adds	r7, #32
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	08018408 	.word	0x08018408
 800f534:	08015cf8 	.word	0x08015cf8

0800f538 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f54c:	e002      	b.n	800f554 <follow_path+0x1c>
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	3301      	adds	r3, #1
 800f552:	603b      	str	r3, [r7, #0]
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2b2f      	cmp	r3, #47	; 0x2f
 800f55a:	d0f8      	beq.n	800f54e <follow_path+0x16>
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	2b5c      	cmp	r3, #92	; 0x5c
 800f562:	d0f4      	beq.n	800f54e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	2200      	movs	r2, #0
 800f568:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	2b1f      	cmp	r3, #31
 800f570:	d80a      	bhi.n	800f588 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2280      	movs	r2, #128	; 0x80
 800f576:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f57a:	2100      	movs	r1, #0
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7ff fcf9 	bl	800ef74 <dir_sdi>
 800f582:	4603      	mov	r3, r0
 800f584:	75fb      	strb	r3, [r7, #23]
 800f586:	e043      	b.n	800f610 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f588:	463b      	mov	r3, r7
 800f58a:	4619      	mov	r1, r3
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff ff3f 	bl	800f410 <create_name>
 800f592:	4603      	mov	r3, r0
 800f594:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f596:	7dfb      	ldrb	r3, [r7, #23]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d134      	bne.n	800f606 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff feaf 	bl	800f300 <dir_find>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f5ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f5ae:	7dfb      	ldrb	r3, [r7, #23]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00a      	beq.n	800f5ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f5b4:	7dfb      	ldrb	r3, [r7, #23]
 800f5b6:	2b04      	cmp	r3, #4
 800f5b8:	d127      	bne.n	800f60a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f5ba:	7afb      	ldrb	r3, [r7, #11]
 800f5bc:	f003 0304 	and.w	r3, r3, #4
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d122      	bne.n	800f60a <follow_path+0xd2>
 800f5c4:	2305      	movs	r3, #5
 800f5c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f5c8:	e01f      	b.n	800f60a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f5ca:	7afb      	ldrb	r3, [r7, #11]
 800f5cc:	f003 0304 	and.w	r3, r3, #4
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d11c      	bne.n	800f60e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	799b      	ldrb	r3, [r3, #6]
 800f5d8:	f003 0310 	and.w	r3, r3, #16
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d102      	bne.n	800f5e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f5e0:	2305      	movs	r3, #5
 800f5e2:	75fb      	strb	r3, [r7, #23]
 800f5e4:	e014      	b.n	800f610 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	695b      	ldr	r3, [r3, #20]
 800f5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5f4:	4413      	add	r3, r2
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f7ff fe42 	bl	800f282 <ld_clust>
 800f5fe:	4602      	mov	r2, r0
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f604:	e7c0      	b.n	800f588 <follow_path+0x50>
			if (res != FR_OK) break;
 800f606:	bf00      	nop
 800f608:	e002      	b.n	800f610 <follow_path+0xd8>
				break;
 800f60a:	bf00      	nop
 800f60c:	e000      	b.n	800f610 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f60e:	bf00      	nop
			}
		}
	}

	return res;
 800f610:	7dfb      	ldrb	r3, [r7, #23]
}
 800f612:	4618      	mov	r0, r3
 800f614:	3718      	adds	r7, #24
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f61a:	b480      	push	{r7}
 800f61c:	b087      	sub	sp, #28
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f622:	f04f 33ff 	mov.w	r3, #4294967295
 800f626:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d031      	beq.n	800f694 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	617b      	str	r3, [r7, #20]
 800f636:	e002      	b.n	800f63e <get_ldnumber+0x24>
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	3301      	adds	r3, #1
 800f63c:	617b      	str	r3, [r7, #20]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	2b20      	cmp	r3, #32
 800f644:	d903      	bls.n	800f64e <get_ldnumber+0x34>
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	2b3a      	cmp	r3, #58	; 0x3a
 800f64c:	d1f4      	bne.n	800f638 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	2b3a      	cmp	r3, #58	; 0x3a
 800f654:	d11c      	bne.n	800f690 <get_ldnumber+0x76>
			tp = *path;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	1c5a      	adds	r2, r3, #1
 800f660:	60fa      	str	r2, [r7, #12]
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	3b30      	subs	r3, #48	; 0x30
 800f666:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	2b09      	cmp	r3, #9
 800f66c:	d80e      	bhi.n	800f68c <get_ldnumber+0x72>
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	429a      	cmp	r2, r3
 800f674:	d10a      	bne.n	800f68c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d107      	bne.n	800f68c <get_ldnumber+0x72>
					vol = (int)i;
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	3301      	adds	r3, #1
 800f684:	617b      	str	r3, [r7, #20]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	697a      	ldr	r2, [r7, #20]
 800f68a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	e002      	b.n	800f696 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f690:	2300      	movs	r3, #0
 800f692:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f694:	693b      	ldr	r3, [r7, #16]
}
 800f696:	4618      	mov	r0, r3
 800f698:	371c      	adds	r7, #28
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
	...

0800f6a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	70da      	strb	r2, [r3, #3]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f6bc:	6839      	ldr	r1, [r7, #0]
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f7ff f8da 	bl	800e878 <move_window>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d001      	beq.n	800f6ce <check_fs+0x2a>
 800f6ca:	2304      	movs	r3, #4
 800f6cc:	e038      	b.n	800f740 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	3330      	adds	r3, #48	; 0x30
 800f6d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fe fe1e 	bl	800e318 <ld_word>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	461a      	mov	r2, r3
 800f6e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d001      	beq.n	800f6ec <check_fs+0x48>
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	e029      	b.n	800f740 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6f2:	2be9      	cmp	r3, #233	; 0xe9
 800f6f4:	d009      	beq.n	800f70a <check_fs+0x66>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6fc:	2beb      	cmp	r3, #235	; 0xeb
 800f6fe:	d11e      	bne.n	800f73e <check_fs+0x9a>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f706:	2b90      	cmp	r3, #144	; 0x90
 800f708:	d119      	bne.n	800f73e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	3330      	adds	r3, #48	; 0x30
 800f70e:	3336      	adds	r3, #54	; 0x36
 800f710:	4618      	mov	r0, r3
 800f712:	f7fe fe19 	bl	800e348 <ld_dword>
 800f716:	4603      	mov	r3, r0
 800f718:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f71c:	4a0a      	ldr	r2, [pc, #40]	; (800f748 <check_fs+0xa4>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d101      	bne.n	800f726 <check_fs+0x82>
 800f722:	2300      	movs	r3, #0
 800f724:	e00c      	b.n	800f740 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	3330      	adds	r3, #48	; 0x30
 800f72a:	3352      	adds	r3, #82	; 0x52
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fe fe0b 	bl	800e348 <ld_dword>
 800f732:	4603      	mov	r3, r0
 800f734:	4a05      	ldr	r2, [pc, #20]	; (800f74c <check_fs+0xa8>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d101      	bne.n	800f73e <check_fs+0x9a>
 800f73a:	2300      	movs	r3, #0
 800f73c:	e000      	b.n	800f740 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f73e:	2302      	movs	r3, #2
}
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	00544146 	.word	0x00544146
 800f74c:	33544146 	.word	0x33544146

0800f750 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b096      	sub	sp, #88	; 0x58
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	4613      	mov	r3, r2
 800f75c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	2200      	movs	r2, #0
 800f762:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f7ff ff58 	bl	800f61a <get_ldnumber>
 800f76a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f76e:	2b00      	cmp	r3, #0
 800f770:	da01      	bge.n	800f776 <find_volume+0x26>
 800f772:	230b      	movs	r3, #11
 800f774:	e22d      	b.n	800fbd2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f776:	4aa1      	ldr	r2, [pc, #644]	; (800f9fc <find_volume+0x2ac>)
 800f778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f77e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <find_volume+0x3a>
 800f786:	230c      	movs	r3, #12
 800f788:	e223      	b.n	800fbd2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f78e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f790:	79fb      	ldrb	r3, [r7, #7]
 800f792:	f023 0301 	bic.w	r3, r3, #1
 800f796:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d01a      	beq.n	800f7d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a2:	785b      	ldrb	r3, [r3, #1]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe fd19 	bl	800e1dc <disk_status>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f7b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7b4:	f003 0301 	and.w	r3, r3, #1
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d10c      	bne.n	800f7d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d007      	beq.n	800f7d2 <find_volume+0x82>
 800f7c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7c6:	f003 0304 	and.w	r3, r3, #4
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d001      	beq.n	800f7d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f7ce:	230a      	movs	r3, #10
 800f7d0:	e1ff      	b.n	800fbd2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e1fd      	b.n	800fbd2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d8:	2200      	movs	r2, #0
 800f7da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e6:	785b      	ldrb	r3, [r3, #1]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fe fd11 	bl	800e210 <disk_initialize>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f7f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7f8:	f003 0301 	and.w	r3, r3, #1
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f800:	2303      	movs	r3, #3
 800f802:	e1e6      	b.n	800fbd2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f804:	79fb      	ldrb	r3, [r7, #7]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d007      	beq.n	800f81a <find_volume+0xca>
 800f80a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f80e:	f003 0304 	and.w	r3, r3, #4
 800f812:	2b00      	cmp	r3, #0
 800f814:	d001      	beq.n	800f81a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f816:	230a      	movs	r3, #10
 800f818:	e1db      	b.n	800fbd2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f81e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f822:	f7ff ff3f 	bl	800f6a4 <check_fs>
 800f826:	4603      	mov	r3, r0
 800f828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f82c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f830:	2b02      	cmp	r3, #2
 800f832:	d149      	bne.n	800f8c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f834:	2300      	movs	r3, #0
 800f836:	643b      	str	r3, [r7, #64]	; 0x40
 800f838:	e01e      	b.n	800f878 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f842:	011b      	lsls	r3, r3, #4
 800f844:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f848:	4413      	add	r3, r2
 800f84a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84e:	3304      	adds	r3, #4
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d006      	beq.n	800f864 <find_volume+0x114>
 800f856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f858:	3308      	adds	r3, #8
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fe fd74 	bl	800e348 <ld_dword>
 800f860:	4602      	mov	r2, r0
 800f862:	e000      	b.n	800f866 <find_volume+0x116>
 800f864:	2200      	movs	r2, #0
 800f866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	3358      	adds	r3, #88	; 0x58
 800f86c:	443b      	add	r3, r7
 800f86e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f874:	3301      	adds	r3, #1
 800f876:	643b      	str	r3, [r7, #64]	; 0x40
 800f878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f87a:	2b03      	cmp	r3, #3
 800f87c:	d9dd      	bls.n	800f83a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f87e:	2300      	movs	r3, #0
 800f880:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f884:	2b00      	cmp	r3, #0
 800f886:	d002      	beq.n	800f88e <find_volume+0x13e>
 800f888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f88a:	3b01      	subs	r3, #1
 800f88c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f890:	009b      	lsls	r3, r3, #2
 800f892:	3358      	adds	r3, #88	; 0x58
 800f894:	443b      	add	r3, r7
 800f896:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f89a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d005      	beq.n	800f8ae <find_volume+0x15e>
 800f8a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f8a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8a6:	f7ff fefd 	bl	800f6a4 <check_fs>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	e000      	b.n	800f8b0 <find_volume+0x160>
 800f8ae:	2303      	movs	r3, #3
 800f8b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f8b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d905      	bls.n	800f8c8 <find_volume+0x178>
 800f8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8be:	3301      	adds	r3, #1
 800f8c0:	643b      	str	r3, [r7, #64]	; 0x40
 800f8c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8c4:	2b03      	cmp	r3, #3
 800f8c6:	d9e2      	bls.n	800f88e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f8c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d101      	bne.n	800f8d4 <find_volume+0x184>
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	e17e      	b.n	800fbd2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f8d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d901      	bls.n	800f8e0 <find_volume+0x190>
 800f8dc:	230d      	movs	r3, #13
 800f8de:	e178      	b.n	800fbd2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e2:	3330      	adds	r3, #48	; 0x30
 800f8e4:	330b      	adds	r3, #11
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fe fd16 	bl	800e318 <ld_word>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8f2:	d001      	beq.n	800f8f8 <find_volume+0x1a8>
 800f8f4:	230d      	movs	r3, #13
 800f8f6:	e16c      	b.n	800fbd2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fa:	3330      	adds	r3, #48	; 0x30
 800f8fc:	3316      	adds	r3, #22
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7fe fd0a 	bl	800e318 <ld_word>
 800f904:	4603      	mov	r3, r0
 800f906:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d106      	bne.n	800f91c <find_volume+0x1cc>
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	3330      	adds	r3, #48	; 0x30
 800f912:	3324      	adds	r3, #36	; 0x24
 800f914:	4618      	mov	r0, r3
 800f916:	f7fe fd17 	bl	800e348 <ld_dword>
 800f91a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f920:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f924:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92e:	789b      	ldrb	r3, [r3, #2]
 800f930:	2b01      	cmp	r3, #1
 800f932:	d005      	beq.n	800f940 <find_volume+0x1f0>
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	789b      	ldrb	r3, [r3, #2]
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d001      	beq.n	800f940 <find_volume+0x1f0>
 800f93c:	230d      	movs	r3, #13
 800f93e:	e148      	b.n	800fbd2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f942:	789b      	ldrb	r3, [r3, #2]
 800f944:	461a      	mov	r2, r3
 800f946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f948:	fb02 f303 	mul.w	r3, r2, r3
 800f94c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f954:	b29a      	uxth	r2, r3
 800f956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f958:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95c:	895b      	ldrh	r3, [r3, #10]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d008      	beq.n	800f974 <find_volume+0x224>
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	895b      	ldrh	r3, [r3, #10]
 800f966:	461a      	mov	r2, r3
 800f968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96a:	895b      	ldrh	r3, [r3, #10]
 800f96c:	3b01      	subs	r3, #1
 800f96e:	4013      	ands	r3, r2
 800f970:	2b00      	cmp	r3, #0
 800f972:	d001      	beq.n	800f978 <find_volume+0x228>
 800f974:	230d      	movs	r3, #13
 800f976:	e12c      	b.n	800fbd2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97a:	3330      	adds	r3, #48	; 0x30
 800f97c:	3311      	adds	r3, #17
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fe fcca 	bl	800e318 <ld_word>
 800f984:	4603      	mov	r3, r0
 800f986:	461a      	mov	r2, r3
 800f988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98e:	891b      	ldrh	r3, [r3, #8]
 800f990:	f003 030f 	and.w	r3, r3, #15
 800f994:	b29b      	uxth	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d001      	beq.n	800f99e <find_volume+0x24e>
 800f99a:	230d      	movs	r3, #13
 800f99c:	e119      	b.n	800fbd2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a0:	3330      	adds	r3, #48	; 0x30
 800f9a2:	3313      	adds	r3, #19
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fe fcb7 	bl	800e318 <ld_word>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <find_volume+0x272>
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b6:	3330      	adds	r3, #48	; 0x30
 800f9b8:	3320      	adds	r3, #32
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fe fcc4 	bl	800e348 <ld_dword>
 800f9c0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	3330      	adds	r3, #48	; 0x30
 800f9c6:	330e      	adds	r3, #14
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fe fca5 	bl	800e318 <ld_word>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f9d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d101      	bne.n	800f9dc <find_volume+0x28c>
 800f9d8:	230d      	movs	r3, #13
 800f9da:	e0fa      	b.n	800fbd2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f9dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9e0:	4413      	add	r3, r2
 800f9e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9e4:	8912      	ldrh	r2, [r2, #8]
 800f9e6:	0912      	lsrs	r2, r2, #4
 800f9e8:	b292      	uxth	r2, r2
 800f9ea:	4413      	add	r3, r2
 800f9ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f9ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d204      	bcs.n	800fa00 <find_volume+0x2b0>
 800f9f6:	230d      	movs	r3, #13
 800f9f8:	e0eb      	b.n	800fbd2 <find_volume+0x482>
 800f9fa:	bf00      	nop
 800f9fc:	20000df0 	.word	0x20000df0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fa00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa08:	8952      	ldrh	r2, [r2, #10]
 800fa0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d101      	bne.n	800fa1a <find_volume+0x2ca>
 800fa16:	230d      	movs	r3, #13
 800fa18:	e0db      	b.n	800fbd2 <find_volume+0x482>
		fmt = FS_FAT32;
 800fa1a:	2303      	movs	r3, #3
 800fa1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa22:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d802      	bhi.n	800fa30 <find_volume+0x2e0>
 800fa2a:	2302      	movs	r3, #2
 800fa2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa32:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d802      	bhi.n	800fa40 <find_volume+0x2f0>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa42:	1c9a      	adds	r2, r3, #2
 800fa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa46:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa4c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fa4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa52:	441a      	add	r2, r3
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fa58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa5c:	441a      	add	r2, r3
 800fa5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa60:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800fa62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa66:	2b03      	cmp	r3, #3
 800fa68:	d11e      	bne.n	800faa8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6c:	3330      	adds	r3, #48	; 0x30
 800fa6e:	332a      	adds	r3, #42	; 0x2a
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fe fc51 	bl	800e318 <ld_word>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d001      	beq.n	800fa80 <find_volume+0x330>
 800fa7c:	230d      	movs	r3, #13
 800fa7e:	e0a8      	b.n	800fbd2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa82:	891b      	ldrh	r3, [r3, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d001      	beq.n	800fa8c <find_volume+0x33c>
 800fa88:	230d      	movs	r3, #13
 800fa8a:	e0a2      	b.n	800fbd2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8e:	3330      	adds	r3, #48	; 0x30
 800fa90:	332c      	adds	r3, #44	; 0x2c
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe fc58 	bl	800e348 <ld_dword>
 800fa98:	4602      	mov	r2, r0
 800fa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa0:	695b      	ldr	r3, [r3, #20]
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	647b      	str	r3, [r7, #68]	; 0x44
 800faa6:	e01f      	b.n	800fae8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800faa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faaa:	891b      	ldrh	r3, [r3, #8]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <find_volume+0x364>
 800fab0:	230d      	movs	r3, #13
 800fab2:	e08e      	b.n	800fbd2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab6:	6a1a      	ldr	r2, [r3, #32]
 800fab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faba:	441a      	add	r2, r3
 800fabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d103      	bne.n	800fad0 <find_volume+0x380>
 800fac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faca:	695b      	ldr	r3, [r3, #20]
 800facc:	005b      	lsls	r3, r3, #1
 800face:	e00a      	b.n	800fae6 <find_volume+0x396>
 800fad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad2:	695a      	ldr	r2, [r3, #20]
 800fad4:	4613      	mov	r3, r2
 800fad6:	005b      	lsls	r3, r3, #1
 800fad8:	4413      	add	r3, r2
 800fada:	085a      	lsrs	r2, r3, #1
 800fadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fade:	695b      	ldr	r3, [r3, #20]
 800fae0:	f003 0301 	and.w	r3, r3, #1
 800fae4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fae6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faea:	699a      	ldr	r2, [r3, #24]
 800faec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800faf2:	0a5b      	lsrs	r3, r3, #9
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d201      	bcs.n	800fafc <find_volume+0x3ac>
 800faf8:	230d      	movs	r3, #13
 800fafa:	e06a      	b.n	800fbd2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafe:	f04f 32ff 	mov.w	r2, #4294967295
 800fb02:	611a      	str	r2, [r3, #16]
 800fb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb06:	691a      	ldr	r2, [r3, #16]
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0e:	2280      	movs	r2, #128	; 0x80
 800fb10:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fb12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb16:	2b03      	cmp	r3, #3
 800fb18:	d149      	bne.n	800fbae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1c:	3330      	adds	r3, #48	; 0x30
 800fb1e:	3330      	adds	r3, #48	; 0x30
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fe fbf9 	bl	800e318 <ld_word>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d140      	bne.n	800fbae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fb2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb2e:	3301      	adds	r3, #1
 800fb30:	4619      	mov	r1, r3
 800fb32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb34:	f7fe fea0 	bl	800e878 <move_window>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d137      	bne.n	800fbae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb40:	2200      	movs	r2, #0
 800fb42:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb46:	3330      	adds	r3, #48	; 0x30
 800fb48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fe fbe3 	bl	800e318 <ld_word>
 800fb52:	4603      	mov	r3, r0
 800fb54:	461a      	mov	r2, r3
 800fb56:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d127      	bne.n	800fbae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb60:	3330      	adds	r3, #48	; 0x30
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe fbf0 	bl	800e348 <ld_dword>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	4a1c      	ldr	r2, [pc, #112]	; (800fbdc <find_volume+0x48c>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d11e      	bne.n	800fbae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb72:	3330      	adds	r3, #48	; 0x30
 800fb74:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fe fbe5 	bl	800e348 <ld_dword>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	4a17      	ldr	r2, [pc, #92]	; (800fbe0 <find_volume+0x490>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d113      	bne.n	800fbae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb88:	3330      	adds	r3, #48	; 0x30
 800fb8a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fe fbda 	bl	800e348 <ld_dword>
 800fb94:	4602      	mov	r2, r0
 800fb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb98:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9c:	3330      	adds	r3, #48	; 0x30
 800fb9e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7fe fbd0 	bl	800e348 <ld_dword>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbac:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fbb4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fbb6:	4b0b      	ldr	r3, [pc, #44]	; (800fbe4 <find_volume+0x494>)
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	4b09      	ldr	r3, [pc, #36]	; (800fbe4 <find_volume+0x494>)
 800fbc0:	801a      	strh	r2, [r3, #0]
 800fbc2:	4b08      	ldr	r3, [pc, #32]	; (800fbe4 <find_volume+0x494>)
 800fbc4:	881a      	ldrh	r2, [r3, #0]
 800fbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fbca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbcc:	f7fe fdec 	bl	800e7a8 <clear_lock>
#endif
	return FR_OK;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3758      	adds	r7, #88	; 0x58
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	41615252 	.word	0x41615252
 800fbe0:	61417272 	.word	0x61417272
 800fbe4:	20000df4 	.word	0x20000df4

0800fbe8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fbf2:	2309      	movs	r3, #9
 800fbf4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d01c      	beq.n	800fc36 <validate+0x4e>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d018      	beq.n	800fc36 <validate+0x4e>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d013      	beq.n	800fc36 <validate+0x4e>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	889a      	ldrh	r2, [r3, #4]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	88db      	ldrh	r3, [r3, #6]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d10c      	bne.n	800fc36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	785b      	ldrb	r3, [r3, #1]
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fe fada 	bl	800e1dc <disk_status>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	f003 0301 	and.w	r3, r3, #1
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d101      	bne.n	800fc36 <validate+0x4e>
			res = FR_OK;
 800fc32:	2300      	movs	r3, #0
 800fc34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fc36:	7bfb      	ldrb	r3, [r7, #15]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d102      	bne.n	800fc42 <validate+0x5a>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	e000      	b.n	800fc44 <validate+0x5c>
 800fc42:	2300      	movs	r3, #0
 800fc44:	683a      	ldr	r2, [r7, #0]
 800fc46:	6013      	str	r3, [r2, #0]
	return res;
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
	...

0800fc54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b088      	sub	sp, #32
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	4613      	mov	r3, r2
 800fc60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fc66:	f107 0310 	add.w	r3, r7, #16
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7ff fcd5 	bl	800f61a <get_ldnumber>
 800fc70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	da01      	bge.n	800fc7c <f_mount+0x28>
 800fc78:	230b      	movs	r3, #11
 800fc7a:	e02b      	b.n	800fcd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fc7c:	4a17      	ldr	r2, [pc, #92]	; (800fcdc <f_mount+0x88>)
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d005      	beq.n	800fc98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fc8c:	69b8      	ldr	r0, [r7, #24]
 800fc8e:	f7fe fd8b 	bl	800e7a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	2200      	movs	r2, #0
 800fc96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d002      	beq.n	800fca4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	490d      	ldr	r1, [pc, #52]	; (800fcdc <f_mount+0x88>)
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d002      	beq.n	800fcba <f_mount+0x66>
 800fcb4:	79fb      	ldrb	r3, [r7, #7]
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d001      	beq.n	800fcbe <f_mount+0x6a>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	e00a      	b.n	800fcd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fcbe:	f107 010c 	add.w	r1, r7, #12
 800fcc2:	f107 0308 	add.w	r3, r7, #8
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7ff fd41 	bl	800f750 <find_volume>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3720      	adds	r7, #32
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	20000df0 	.word	0x20000df0

0800fce0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b098      	sub	sp, #96	; 0x60
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	4613      	mov	r3, r2
 800fcec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d101      	bne.n	800fcf8 <f_open+0x18>
 800fcf4:	2309      	movs	r3, #9
 800fcf6:	e1ad      	b.n	8010054 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcfe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fd00:	79fa      	ldrb	r2, [r7, #7]
 800fd02:	f107 0110 	add.w	r1, r7, #16
 800fd06:	f107 0308 	add.w	r3, r7, #8
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7ff fd20 	bl	800f750 <find_volume>
 800fd10:	4603      	mov	r3, r0
 800fd12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fd16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f040 8191 	bne.w	8010042 <f_open+0x362>
		dj.obj.fs = fs;
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fd24:	68ba      	ldr	r2, [r7, #8]
 800fd26:	f107 0314 	add.w	r3, r7, #20
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7ff fc03 	bl	800f538 <follow_path>
 800fd32:	4603      	mov	r3, r0
 800fd34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fd38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d11a      	bne.n	800fd76 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fd40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fd44:	b25b      	sxtb	r3, r3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	da03      	bge.n	800fd52 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fd4a:	2306      	movs	r3, #6
 800fd4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fd50:	e011      	b.n	800fd76 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	f023 0301 	bic.w	r3, r3, #1
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	bf14      	ite	ne
 800fd5c:	2301      	movne	r3, #1
 800fd5e:	2300      	moveq	r3, #0
 800fd60:	b2db      	uxtb	r3, r3
 800fd62:	461a      	mov	r2, r3
 800fd64:	f107 0314 	add.w	r3, r7, #20
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fe fbd4 	bl	800e518 <chk_lock>
 800fd70:	4603      	mov	r3, r0
 800fd72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fd76:	79fb      	ldrb	r3, [r7, #7]
 800fd78:	f003 031c 	and.w	r3, r3, #28
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d07f      	beq.n	800fe80 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fd80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d017      	beq.n	800fdb8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fd88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd8c:	2b04      	cmp	r3, #4
 800fd8e:	d10e      	bne.n	800fdae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fd90:	f7fe fc1e 	bl	800e5d0 <enq_lock>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d006      	beq.n	800fda8 <f_open+0xc8>
 800fd9a:	f107 0314 	add.w	r3, r7, #20
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7ff fb03 	bl	800f3aa <dir_register>
 800fda4:	4603      	mov	r3, r0
 800fda6:	e000      	b.n	800fdaa <f_open+0xca>
 800fda8:	2312      	movs	r3, #18
 800fdaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fdae:	79fb      	ldrb	r3, [r7, #7]
 800fdb0:	f043 0308 	orr.w	r3, r3, #8
 800fdb4:	71fb      	strb	r3, [r7, #7]
 800fdb6:	e010      	b.n	800fdda <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fdb8:	7ebb      	ldrb	r3, [r7, #26]
 800fdba:	f003 0311 	and.w	r3, r3, #17
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d003      	beq.n	800fdca <f_open+0xea>
					res = FR_DENIED;
 800fdc2:	2307      	movs	r3, #7
 800fdc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fdc8:	e007      	b.n	800fdda <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fdca:	79fb      	ldrb	r3, [r7, #7]
 800fdcc:	f003 0304 	and.w	r3, r3, #4
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d002      	beq.n	800fdda <f_open+0xfa>
 800fdd4:	2308      	movs	r3, #8
 800fdd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fdda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d168      	bne.n	800feb4 <f_open+0x1d4>
 800fde2:	79fb      	ldrb	r3, [r7, #7]
 800fde4:	f003 0308 	and.w	r3, r3, #8
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d063      	beq.n	800feb4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fdec:	f7fd ffb4 	bl	800dd58 <get_fattime>
 800fdf0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf4:	330e      	adds	r3, #14
 800fdf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fe fae3 	bl	800e3c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe00:	3316      	adds	r3, #22
 800fe02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7fe fadd 	bl	800e3c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fe0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe0c:	330b      	adds	r3, #11
 800fe0e:	2220      	movs	r2, #32
 800fe10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe16:	4611      	mov	r1, r2
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7ff fa32 	bl	800f282 <ld_clust>
 800fe1e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe24:	2200      	movs	r2, #0
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff fa4a 	bl	800f2c0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fe2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe2e:	331c      	adds	r3, #28
 800fe30:	2100      	movs	r1, #0
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fe fac6 	bl	800e3c4 <st_dword>
					fs->wflag = 1;
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fe3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d037      	beq.n	800feb4 <f_open+0x1d4>
						dw = fs->winsect;
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe48:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fe4a:	f107 0314 	add.w	r3, r7, #20
 800fe4e:	2200      	movs	r2, #0
 800fe50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fe ff5d 	bl	800ed12 <remove_chain>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800fe5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d126      	bne.n	800feb4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fe fd04 	bl	800e878 <move_window>
 800fe70:	4603      	mov	r3, r0
 800fe72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe7a:	3a01      	subs	r2, #1
 800fe7c:	60da      	str	r2, [r3, #12]
 800fe7e:	e019      	b.n	800feb4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fe80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d115      	bne.n	800feb4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fe88:	7ebb      	ldrb	r3, [r7, #26]
 800fe8a:	f003 0310 	and.w	r3, r3, #16
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d003      	beq.n	800fe9a <f_open+0x1ba>
					res = FR_NO_FILE;
 800fe92:	2304      	movs	r3, #4
 800fe94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fe98:	e00c      	b.n	800feb4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fe9a:	79fb      	ldrb	r3, [r7, #7]
 800fe9c:	f003 0302 	and.w	r3, r3, #2
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d007      	beq.n	800feb4 <f_open+0x1d4>
 800fea4:	7ebb      	ldrb	r3, [r7, #26]
 800fea6:	f003 0301 	and.w	r3, r3, #1
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d002      	beq.n	800feb4 <f_open+0x1d4>
						res = FR_DENIED;
 800feae:	2307      	movs	r3, #7
 800feb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800feb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d128      	bne.n	800ff0e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800febc:	79fb      	ldrb	r3, [r7, #7]
 800febe:	f003 0308 	and.w	r3, r3, #8
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d003      	beq.n	800fece <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fec6:	79fb      	ldrb	r3, [r7, #7]
 800fec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fecc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fedc:	79fb      	ldrb	r3, [r7, #7]
 800fede:	f023 0301 	bic.w	r3, r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	bf14      	ite	ne
 800fee6:	2301      	movne	r3, #1
 800fee8:	2300      	moveq	r3, #0
 800feea:	b2db      	uxtb	r3, r3
 800feec:	461a      	mov	r2, r3
 800feee:	f107 0314 	add.w	r3, r7, #20
 800fef2:	4611      	mov	r1, r2
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fe fb8d 	bl	800e614 <inc_lock>
 800fefa:	4602      	mov	r2, r0
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	691b      	ldr	r3, [r3, #16]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d102      	bne.n	800ff0e <f_open+0x22e>
 800ff08:	2302      	movs	r3, #2
 800ff0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ff0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f040 8095 	bne.w	8010042 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff1c:	4611      	mov	r1, r2
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7ff f9af 	bl	800f282 <ld_clust>
 800ff24:	4602      	mov	r2, r0
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ff2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2c:	331c      	adds	r3, #28
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fe fa0a 	bl	800e348 <ld_dword>
 800ff34:	4602      	mov	r2, r0
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	88da      	ldrh	r2, [r3, #6]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	79fa      	ldrb	r2, [r7, #7]
 800ff52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2200      	movs	r2, #0
 800ff58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2200      	movs	r2, #0
 800ff64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	3330      	adds	r3, #48	; 0x30
 800ff6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff6e:	2100      	movs	r1, #0
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fe fa74 	bl	800e45e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ff76:	79fb      	ldrb	r3, [r7, #7]
 800ff78:	f003 0320 	and.w	r3, r3, #32
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d060      	beq.n	8010042 <f_open+0x362>
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d05c      	beq.n	8010042 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	68da      	ldr	r2, [r3, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	895b      	ldrh	r3, [r3, #10]
 800ff94:	025b      	lsls	r3, r3, #9
 800ff96:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	657b      	str	r3, [r7, #84]	; 0x54
 800ffa4:	e016      	b.n	800ffd4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7fe fd1f 	bl	800e9ee <get_fat>
 800ffb0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ffb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d802      	bhi.n	800ffbe <f_open+0x2de>
 800ffb8:	2302      	movs	r3, #2
 800ffba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ffbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc4:	d102      	bne.n	800ffcc <f_open+0x2ec>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ffcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ffce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	657b      	str	r3, [r7, #84]	; 0x54
 800ffd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d103      	bne.n	800ffe4 <f_open+0x304>
 800ffdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ffde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d8e0      	bhi.n	800ffa6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ffe8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ffea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d127      	bne.n	8010042 <f_open+0x362>
 800fff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d022      	beq.n	8010042 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010000:	4618      	mov	r0, r3
 8010002:	f7fe fcd5 	bl	800e9b0 <clust2sect>
 8010006:	6478      	str	r0, [r7, #68]	; 0x44
 8010008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801000a:	2b00      	cmp	r3, #0
 801000c:	d103      	bne.n	8010016 <f_open+0x336>
						res = FR_INT_ERR;
 801000e:	2302      	movs	r3, #2
 8010010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010014:	e015      	b.n	8010042 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010018:	0a5a      	lsrs	r2, r3, #9
 801001a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801001c:	441a      	add	r2, r3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	7858      	ldrb	r0, [r3, #1]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6a1a      	ldr	r2, [r3, #32]
 8010030:	2301      	movs	r3, #1
 8010032:	f7fe f913 	bl	800e25c <disk_read>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d002      	beq.n	8010042 <f_open+0x362>
 801003c:	2301      	movs	r3, #1
 801003e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010042:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010046:	2b00      	cmp	r3, #0
 8010048:	d002      	beq.n	8010050 <f_open+0x370>
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010054:	4618      	mov	r0, r3
 8010056:	3760      	adds	r7, #96	; 0x60
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b08c      	sub	sp, #48	; 0x30
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
 8010068:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	2200      	movs	r2, #0
 8010072:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f107 0210 	add.w	r2, r7, #16
 801007a:	4611      	mov	r1, r2
 801007c:	4618      	mov	r0, r3
 801007e:	f7ff fdb3 	bl	800fbe8 <validate>
 8010082:	4603      	mov	r3, r0
 8010084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801008c:	2b00      	cmp	r3, #0
 801008e:	d107      	bne.n	80100a0 <f_write+0x44>
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	7d5b      	ldrb	r3, [r3, #21]
 8010094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <f_write+0x4a>
 80100a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100a4:	e14b      	b.n	801033e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	7d1b      	ldrb	r3, [r3, #20]
 80100aa:	f003 0302 	and.w	r3, r3, #2
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d101      	bne.n	80100b6 <f_write+0x5a>
 80100b2:	2307      	movs	r3, #7
 80100b4:	e143      	b.n	801033e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	699a      	ldr	r2, [r3, #24]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	441a      	add	r2, r3
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	f080 812d 	bcs.w	8010322 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	699b      	ldr	r3, [r3, #24]
 80100cc:	43db      	mvns	r3, r3
 80100ce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80100d0:	e127      	b.n	8010322 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	699b      	ldr	r3, [r3, #24]
 80100d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f040 80e3 	bne.w	80102a6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	699b      	ldr	r3, [r3, #24]
 80100e4:	0a5b      	lsrs	r3, r3, #9
 80100e6:	693a      	ldr	r2, [r7, #16]
 80100e8:	8952      	ldrh	r2, [r2, #10]
 80100ea:	3a01      	subs	r2, #1
 80100ec:	4013      	ands	r3, r2
 80100ee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80100f0:	69bb      	ldr	r3, [r7, #24]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d143      	bne.n	801017e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	699b      	ldr	r3, [r3, #24]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d10c      	bne.n	8010118 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010106:	2b00      	cmp	r3, #0
 8010108:	d11a      	bne.n	8010140 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2100      	movs	r1, #0
 801010e:	4618      	mov	r0, r3
 8010110:	f7fe fe64 	bl	800eddc <create_chain>
 8010114:	62b8      	str	r0, [r7, #40]	; 0x28
 8010116:	e013      	b.n	8010140 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011c:	2b00      	cmp	r3, #0
 801011e:	d007      	beq.n	8010130 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	699b      	ldr	r3, [r3, #24]
 8010124:	4619      	mov	r1, r3
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f7fe fef0 	bl	800ef0c <clmt_clust>
 801012c:	62b8      	str	r0, [r7, #40]	; 0x28
 801012e:	e007      	b.n	8010140 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	69db      	ldr	r3, [r3, #28]
 8010136:	4619      	mov	r1, r3
 8010138:	4610      	mov	r0, r2
 801013a:	f7fe fe4f 	bl	800eddc <create_chain>
 801013e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010142:	2b00      	cmp	r3, #0
 8010144:	f000 80f2 	beq.w	801032c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014a:	2b01      	cmp	r3, #1
 801014c:	d104      	bne.n	8010158 <f_write+0xfc>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2202      	movs	r2, #2
 8010152:	755a      	strb	r2, [r3, #21]
 8010154:	2302      	movs	r3, #2
 8010156:	e0f2      	b.n	801033e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801015e:	d104      	bne.n	801016a <f_write+0x10e>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2201      	movs	r2, #1
 8010164:	755a      	strb	r2, [r3, #21]
 8010166:	2301      	movs	r3, #1
 8010168:	e0e9      	b.n	801033e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801016e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	689b      	ldr	r3, [r3, #8]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d102      	bne.n	801017e <f_write+0x122>
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801017c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	7d1b      	ldrb	r3, [r3, #20]
 8010182:	b25b      	sxtb	r3, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	da18      	bge.n	80101ba <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	7858      	ldrb	r0, [r3, #1]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	6a1a      	ldr	r2, [r3, #32]
 8010196:	2301      	movs	r3, #1
 8010198:	f7fe f880 	bl	800e29c <disk_write>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d004      	beq.n	80101ac <f_write+0x150>
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2201      	movs	r2, #1
 80101a6:	755a      	strb	r2, [r3, #21]
 80101a8:	2301      	movs	r3, #1
 80101aa:	e0c8      	b.n	801033e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	7d1b      	ldrb	r3, [r3, #20]
 80101b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101b4:	b2da      	uxtb	r2, r3
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80101ba:	693a      	ldr	r2, [r7, #16]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	69db      	ldr	r3, [r3, #28]
 80101c0:	4619      	mov	r1, r3
 80101c2:	4610      	mov	r0, r2
 80101c4:	f7fe fbf4 	bl	800e9b0 <clust2sect>
 80101c8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d104      	bne.n	80101da <f_write+0x17e>
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2202      	movs	r2, #2
 80101d4:	755a      	strb	r2, [r3, #21]
 80101d6:	2302      	movs	r3, #2
 80101d8:	e0b1      	b.n	801033e <f_write+0x2e2>
			sect += csect;
 80101da:	697a      	ldr	r2, [r7, #20]
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	4413      	add	r3, r2
 80101e0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	0a5b      	lsrs	r3, r3, #9
 80101e6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80101e8:	6a3b      	ldr	r3, [r7, #32]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d03c      	beq.n	8010268 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80101ee:	69ba      	ldr	r2, [r7, #24]
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	4413      	add	r3, r2
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	8952      	ldrh	r2, [r2, #10]
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d905      	bls.n	8010208 <f_write+0x1ac>
					cc = fs->csize - csect;
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	895b      	ldrh	r3, [r3, #10]
 8010200:	461a      	mov	r2, r3
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	7858      	ldrb	r0, [r3, #1]
 801020c:	6a3b      	ldr	r3, [r7, #32]
 801020e:	697a      	ldr	r2, [r7, #20]
 8010210:	69f9      	ldr	r1, [r7, #28]
 8010212:	f7fe f843 	bl	800e29c <disk_write>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d004      	beq.n	8010226 <f_write+0x1ca>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2201      	movs	r2, #1
 8010220:	755a      	strb	r2, [r3, #21]
 8010222:	2301      	movs	r3, #1
 8010224:	e08b      	b.n	801033e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6a1a      	ldr	r2, [r3, #32]
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	6a3a      	ldr	r2, [r7, #32]
 8010230:	429a      	cmp	r2, r3
 8010232:	d915      	bls.n	8010260 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	6a1a      	ldr	r2, [r3, #32]
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	025b      	lsls	r3, r3, #9
 8010244:	69fa      	ldr	r2, [r7, #28]
 8010246:	4413      	add	r3, r2
 8010248:	f44f 7200 	mov.w	r2, #512	; 0x200
 801024c:	4619      	mov	r1, r3
 801024e:	f7fe f8e5 	bl	800e41c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	7d1b      	ldrb	r3, [r3, #20]
 8010256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801025a:	b2da      	uxtb	r2, r3
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010260:	6a3b      	ldr	r3, [r7, #32]
 8010262:	025b      	lsls	r3, r3, #9
 8010264:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010266:	e03f      	b.n	80102e8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6a1b      	ldr	r3, [r3, #32]
 801026c:	697a      	ldr	r2, [r7, #20]
 801026e:	429a      	cmp	r2, r3
 8010270:	d016      	beq.n	80102a0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	699a      	ldr	r2, [r3, #24]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801027a:	429a      	cmp	r2, r3
 801027c:	d210      	bcs.n	80102a0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	7858      	ldrb	r0, [r3, #1]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010288:	2301      	movs	r3, #1
 801028a:	697a      	ldr	r2, [r7, #20]
 801028c:	f7fd ffe6 	bl	800e25c <disk_read>
 8010290:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010292:	2b00      	cmp	r3, #0
 8010294:	d004      	beq.n	80102a0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2201      	movs	r2, #1
 801029a:	755a      	strb	r2, [r3, #21]
 801029c:	2301      	movs	r3, #1
 801029e:	e04e      	b.n	801033e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	697a      	ldr	r2, [r7, #20]
 80102a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	699b      	ldr	r3, [r3, #24]
 80102aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102ae:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80102b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d901      	bls.n	80102c0 <f_write+0x264>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	699b      	ldr	r3, [r3, #24]
 80102ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102ce:	4413      	add	r3, r2
 80102d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102d2:	69f9      	ldr	r1, [r7, #28]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fe f8a1 	bl	800e41c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	7d1b      	ldrb	r3, [r3, #20]
 80102de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80102e8:	69fa      	ldr	r2, [r7, #28]
 80102ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ec:	4413      	add	r3, r2
 80102ee:	61fb      	str	r3, [r7, #28]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	699a      	ldr	r2, [r3, #24]
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	441a      	add	r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	619a      	str	r2, [r3, #24]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	68da      	ldr	r2, [r3, #12]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	699b      	ldr	r3, [r3, #24]
 8010304:	429a      	cmp	r2, r3
 8010306:	bf38      	it	cc
 8010308:	461a      	movcc	r2, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	60da      	str	r2, [r3, #12]
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010314:	441a      	add	r2, r3
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031e:	1ad3      	subs	r3, r2, r3
 8010320:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2b00      	cmp	r3, #0
 8010326:	f47f aed4 	bne.w	80100d2 <f_write+0x76>
 801032a:	e000      	b.n	801032e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801032c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	7d1b      	ldrb	r3, [r3, #20]
 8010332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010336:	b2da      	uxtb	r2, r3
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3730      	adds	r7, #48	; 0x30
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b086      	sub	sp, #24
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f107 0208 	add.w	r2, r7, #8
 8010354:	4611      	mov	r1, r2
 8010356:	4618      	mov	r0, r3
 8010358:	f7ff fc46 	bl	800fbe8 <validate>
 801035c:	4603      	mov	r3, r0
 801035e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010360:	7dfb      	ldrb	r3, [r7, #23]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d168      	bne.n	8010438 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	7d1b      	ldrb	r3, [r3, #20]
 801036a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801036e:	2b00      	cmp	r3, #0
 8010370:	d062      	beq.n	8010438 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	7d1b      	ldrb	r3, [r3, #20]
 8010376:	b25b      	sxtb	r3, r3
 8010378:	2b00      	cmp	r3, #0
 801037a:	da15      	bge.n	80103a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	7858      	ldrb	r0, [r3, #1]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6a1a      	ldr	r2, [r3, #32]
 801038a:	2301      	movs	r3, #1
 801038c:	f7fd ff86 	bl	800e29c <disk_write>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d001      	beq.n	801039a <f_sync+0x54>
 8010396:	2301      	movs	r3, #1
 8010398:	e04f      	b.n	801043a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	7d1b      	ldrb	r3, [r3, #20]
 801039e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103a2:	b2da      	uxtb	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80103a8:	f7fd fcd6 	bl	800dd58 <get_fattime>
 80103ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80103ae:	68ba      	ldr	r2, [r7, #8]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b4:	4619      	mov	r1, r3
 80103b6:	4610      	mov	r0, r2
 80103b8:	f7fe fa5e 	bl	800e878 <move_window>
 80103bc:	4603      	mov	r3, r0
 80103be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80103c0:	7dfb      	ldrb	r3, [r7, #23]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d138      	bne.n	8010438 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	330b      	adds	r3, #11
 80103d0:	781a      	ldrb	r2, [r3, #0]
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	330b      	adds	r3, #11
 80103d6:	f042 0220 	orr.w	r2, r2, #32
 80103da:	b2d2      	uxtb	r2, r2
 80103dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6818      	ldr	r0, [r3, #0]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	461a      	mov	r2, r3
 80103e8:	68f9      	ldr	r1, [r7, #12]
 80103ea:	f7fe ff69 	bl	800f2c0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f103 021c 	add.w	r2, r3, #28
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	4619      	mov	r1, r3
 80103fa:	4610      	mov	r0, r2
 80103fc:	f7fd ffe2 	bl	800e3c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	3316      	adds	r3, #22
 8010404:	6939      	ldr	r1, [r7, #16]
 8010406:	4618      	mov	r0, r3
 8010408:	f7fd ffdc 	bl	800e3c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	3312      	adds	r3, #18
 8010410:	2100      	movs	r1, #0
 8010412:	4618      	mov	r0, r3
 8010414:	f7fd ffbb 	bl	800e38e <st_word>
					fs->wflag = 1;
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2201      	movs	r2, #1
 801041c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	4618      	mov	r0, r3
 8010422:	f7fe fa57 	bl	800e8d4 <sync_fs>
 8010426:	4603      	mov	r3, r0
 8010428:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	7d1b      	ldrb	r3, [r3, #20]
 801042e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010432:	b2da      	uxtb	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010438:	7dfb      	ldrb	r3, [r7, #23]
}
 801043a:	4618      	mov	r0, r3
 801043c:	3718      	adds	r7, #24
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b084      	sub	sp, #16
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7ff ff7b 	bl	8010346 <f_sync>
 8010450:	4603      	mov	r3, r0
 8010452:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010454:	7bfb      	ldrb	r3, [r7, #15]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d118      	bne.n	801048c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f107 0208 	add.w	r2, r7, #8
 8010460:	4611      	mov	r1, r2
 8010462:	4618      	mov	r0, r3
 8010464:	f7ff fbc0 	bl	800fbe8 <validate>
 8010468:	4603      	mov	r3, r0
 801046a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801046c:	7bfb      	ldrb	r3, [r7, #15]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d10c      	bne.n	801048c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	691b      	ldr	r3, [r3, #16]
 8010476:	4618      	mov	r0, r3
 8010478:	f7fe f95a 	bl	800e730 <dec_lock>
 801047c:	4603      	mov	r3, r0
 801047e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010480:	7bfb      	ldrb	r3, [r7, #15]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d102      	bne.n	801048c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2200      	movs	r2, #0
 801048a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801048c:	7bfb      	ldrb	r3, [r7, #15]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
	...

08010498 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8010498:	b590      	push	{r4, r7, lr}
 801049a:	b09d      	sub	sp, #116	; 0x74
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	607a      	str	r2, [r7, #4]
 80104a2:	603b      	str	r3, [r7, #0]
 80104a4:	460b      	mov	r3, r1
 80104a6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80104a8:	2301      	movs	r3, #1
 80104aa:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80104ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104b0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80104b2:	f107 030c 	add.w	r3, r7, #12
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7ff f8af 	bl	800f61a <get_ldnumber>
 80104bc:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80104be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	da02      	bge.n	80104ca <f_mkfs+0x32>
 80104c4:	230b      	movs	r3, #11
 80104c6:	f000 bc0d 	b.w	8010ce4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80104ca:	4a94      	ldr	r2, [pc, #592]	; (801071c <f_mkfs+0x284>)
 80104cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d005      	beq.n	80104e2 <f_mkfs+0x4a>
 80104d6:	4a91      	ldr	r2, [pc, #580]	; (801071c <f_mkfs+0x284>)
 80104d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104de:	2200      	movs	r2, #0
 80104e0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80104e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80104e8:	2300      	movs	r3, #0
 80104ea:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80104ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fd fe8c 	bl	800e210 <disk_initialize>
 80104f8:	4603      	mov	r3, r0
 80104fa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80104fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010502:	f003 0301 	and.w	r3, r3, #1
 8010506:	2b00      	cmp	r3, #0
 8010508:	d001      	beq.n	801050e <f_mkfs+0x76>
 801050a:	2303      	movs	r3, #3
 801050c:	e3ea      	b.n	8010ce4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801050e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010512:	f003 0304 	and.w	r3, r3, #4
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <f_mkfs+0x86>
 801051a:	230a      	movs	r3, #10
 801051c:	e3e2      	b.n	8010ce4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801051e:	f107 0214 	add.w	r2, r7, #20
 8010522:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010526:	2103      	movs	r1, #3
 8010528:	4618      	mov	r0, r3
 801052a:	f7fd fed7 	bl	800e2dc <disk_ioctl>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d10c      	bne.n	801054e <f_mkfs+0xb6>
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d009      	beq.n	801054e <f_mkfs+0xb6>
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010540:	d805      	bhi.n	801054e <f_mkfs+0xb6>
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	1e5a      	subs	r2, r3, #1
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	4013      	ands	r3, r2
 801054a:	2b00      	cmp	r3, #0
 801054c:	d001      	beq.n	8010552 <f_mkfs+0xba>
 801054e:	2301      	movs	r3, #1
 8010550:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8010552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010556:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d003      	beq.n	8010566 <f_mkfs+0xce>
 801055e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	429a      	cmp	r2, r3
 8010564:	d309      	bcc.n	801057a <f_mkfs+0xe2>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801056c:	d805      	bhi.n	801057a <f_mkfs+0xe2>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	1e5a      	subs	r2, r3, #1
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4013      	ands	r3, r2
 8010576:	2b00      	cmp	r3, #0
 8010578:	d001      	beq.n	801057e <f_mkfs+0xe6>
 801057a:	2313      	movs	r3, #19
 801057c:	e3b2      	b.n	8010ce4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 801057e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	fbb2 f3f3 	udiv	r3, r2, r3
 8010586:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 801058c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801058e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010592:	fbb2 f3f3 	udiv	r3, r2, r3
 8010596:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8010598:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059c:	fb02 f303 	mul.w	r3, r2, r3
 80105a0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80105a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d101      	bne.n	80105ac <f_mkfs+0x114>
 80105a8:	230e      	movs	r3, #14
 80105aa:	e39b      	b.n	8010ce4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80105ac:	f107 0210 	add.w	r2, r7, #16
 80105b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80105b4:	2101      	movs	r1, #1
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fd fe90 	bl	800e2dc <disk_ioctl>
 80105bc:	4603      	mov	r3, r0
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d001      	beq.n	80105c6 <f_mkfs+0x12e>
 80105c2:	2301      	movs	r3, #1
 80105c4:	e38e      	b.n	8010ce4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80105c6:	7afb      	ldrb	r3, [r7, #11]
 80105c8:	f003 0308 	and.w	r3, r3, #8
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d001      	beq.n	80105d4 <f_mkfs+0x13c>
 80105d0:	2300      	movs	r3, #0
 80105d2:	e000      	b.n	80105d6 <f_mkfs+0x13e>
 80105d4:	233f      	movs	r3, #63	; 0x3f
 80105d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105dc:	429a      	cmp	r2, r3
 80105de:	d901      	bls.n	80105e4 <f_mkfs+0x14c>
 80105e0:	230e      	movs	r3, #14
 80105e2:	e37f      	b.n	8010ce4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80105e4:	693a      	ldr	r2, [r7, #16]
 80105e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	2b7f      	cmp	r3, #127	; 0x7f
 80105f0:	d801      	bhi.n	80105f6 <f_mkfs+0x15e>
 80105f2:	230e      	movs	r3, #14
 80105f4:	e376      	b.n	8010ce4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2b80      	cmp	r3, #128	; 0x80
 80105fa:	d901      	bls.n	8010600 <f_mkfs+0x168>
 80105fc:	2313      	movs	r3, #19
 80105fe:	e371      	b.n	8010ce4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8010600:	7afb      	ldrb	r3, [r7, #11]
 8010602:	f003 0302 	and.w	r3, r3, #2
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00d      	beq.n	8010626 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801060a:	7afb      	ldrb	r3, [r7, #11]
 801060c:	f003 0307 	and.w	r3, r3, #7
 8010610:	2b02      	cmp	r3, #2
 8010612:	d004      	beq.n	801061e <f_mkfs+0x186>
 8010614:	7afb      	ldrb	r3, [r7, #11]
 8010616:	f003 0301 	and.w	r3, r3, #1
 801061a:	2b00      	cmp	r3, #0
 801061c:	d103      	bne.n	8010626 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801061e:	2303      	movs	r3, #3
 8010620:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010624:	e009      	b.n	801063a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010626:	7afb      	ldrb	r3, [r7, #11]
 8010628:	f003 0301 	and.w	r3, r3, #1
 801062c:	2b00      	cmp	r3, #0
 801062e:	d101      	bne.n	8010634 <f_mkfs+0x19c>
 8010630:	2313      	movs	r3, #19
 8010632:	e357      	b.n	8010ce4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8010634:	2302      	movs	r3, #2
 8010636:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801063e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010642:	2b03      	cmp	r3, #3
 8010644:	d13c      	bne.n	80106c0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8010646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010648:	2b00      	cmp	r3, #0
 801064a:	d11b      	bne.n	8010684 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	0c5b      	lsrs	r3, r3, #17
 8010650:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8010652:	2300      	movs	r3, #0
 8010654:	64bb      	str	r3, [r7, #72]	; 0x48
 8010656:	2301      	movs	r3, #1
 8010658:	653b      	str	r3, [r7, #80]	; 0x50
 801065a:	e005      	b.n	8010668 <f_mkfs+0x1d0>
 801065c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801065e:	3301      	adds	r3, #1
 8010660:	64bb      	str	r3, [r7, #72]	; 0x48
 8010662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010664:	005b      	lsls	r3, r3, #1
 8010666:	653b      	str	r3, [r7, #80]	; 0x50
 8010668:	4a2d      	ldr	r2, [pc, #180]	; (8010720 <f_mkfs+0x288>)
 801066a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801066c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d007      	beq.n	8010684 <f_mkfs+0x1ec>
 8010674:	4a2a      	ldr	r2, [pc, #168]	; (8010720 <f_mkfs+0x288>)
 8010676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801067c:	461a      	mov	r2, r3
 801067e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010680:	4293      	cmp	r3, r2
 8010682:	d2eb      	bcs.n	801065c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8010684:	693a      	ldr	r2, [r7, #16]
 8010686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010688:	fbb2 f3f3 	udiv	r3, r2, r3
 801068c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801068e:	6a3b      	ldr	r3, [r7, #32]
 8010690:	3302      	adds	r3, #2
 8010692:	009a      	lsls	r2, r3, #2
 8010694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010696:	4413      	add	r3, r2
 8010698:	1e5a      	subs	r2, r3, #1
 801069a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80106a0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80106a2:	2320      	movs	r3, #32
 80106a4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80106a6:	2300      	movs	r3, #0
 80106a8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80106aa:	6a3b      	ldr	r3, [r7, #32]
 80106ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d903      	bls.n	80106bc <f_mkfs+0x224>
 80106b4:	6a3b      	ldr	r3, [r7, #32]
 80106b6:	4a1b      	ldr	r2, [pc, #108]	; (8010724 <f_mkfs+0x28c>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d952      	bls.n	8010762 <f_mkfs+0x2ca>
 80106bc:	230e      	movs	r3, #14
 80106be:	e311      	b.n	8010ce4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80106c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d11b      	bne.n	80106fe <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	0b1b      	lsrs	r3, r3, #12
 80106ca:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80106cc:	2300      	movs	r3, #0
 80106ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80106d0:	2301      	movs	r3, #1
 80106d2:	653b      	str	r3, [r7, #80]	; 0x50
 80106d4:	e005      	b.n	80106e2 <f_mkfs+0x24a>
 80106d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106d8:	3301      	adds	r3, #1
 80106da:	64bb      	str	r3, [r7, #72]	; 0x48
 80106dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	653b      	str	r3, [r7, #80]	; 0x50
 80106e2:	4a11      	ldr	r2, [pc, #68]	; (8010728 <f_mkfs+0x290>)
 80106e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d007      	beq.n	80106fe <f_mkfs+0x266>
 80106ee:	4a0e      	ldr	r2, [pc, #56]	; (8010728 <f_mkfs+0x290>)
 80106f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106f6:	461a      	mov	r2, r3
 80106f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d2eb      	bcs.n	80106d6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010702:	fbb2 f3f3 	udiv	r3, r2, r3
 8010706:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8010708:	6a3b      	ldr	r3, [r7, #32]
 801070a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801070e:	4293      	cmp	r3, r2
 8010710:	d90c      	bls.n	801072c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8010712:	6a3b      	ldr	r3, [r7, #32]
 8010714:	3302      	adds	r3, #2
 8010716:	005b      	lsls	r3, r3, #1
 8010718:	65fb      	str	r3, [r7, #92]	; 0x5c
 801071a:	e012      	b.n	8010742 <f_mkfs+0x2aa>
 801071c:	20000df0 	.word	0x20000df0
 8010720:	08018488 	.word	0x08018488
 8010724:	0ffffff5 	.word	0x0ffffff5
 8010728:	08018498 	.word	0x08018498
				} else {
					fmt = FS_FAT12;
 801072c:	2301      	movs	r3, #1
 801072e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8010732:	6a3a      	ldr	r2, [r7, #32]
 8010734:	4613      	mov	r3, r2
 8010736:	005b      	lsls	r3, r3, #1
 8010738:	4413      	add	r3, r2
 801073a:	3301      	adds	r3, #1
 801073c:	085b      	lsrs	r3, r3, #1
 801073e:	3303      	adds	r3, #3
 8010740:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8010742:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010746:	4413      	add	r3, r2
 8010748:	1e5a      	subs	r2, r3, #1
 801074a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010750:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8010752:	2301      	movs	r3, #1
 8010754:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8010756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010758:	015a      	lsls	r2, r3, #5
 801075a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801075c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010760:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8010762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010766:	4413      	add	r3, r2
 8010768:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801076a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801076c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801076e:	fb03 f202 	mul.w	r2, r3, r2
 8010772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010774:	4413      	add	r3, r2
 8010776:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010778:	4413      	add	r3, r2
 801077a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 801077c:	697a      	ldr	r2, [r7, #20]
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	4413      	add	r3, r2
 8010782:	1e5a      	subs	r2, r3, #1
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	425b      	negs	r3, r3
 8010788:	401a      	ands	r2, r3
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	1ad3      	subs	r3, r2, r3
 801078e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8010790:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010794:	2b03      	cmp	r3, #3
 8010796:	d108      	bne.n	80107aa <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8010798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801079a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801079c:	4413      	add	r3, r2
 801079e:	657b      	str	r3, [r7, #84]	; 0x54
 80107a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107a4:	4413      	add	r3, r2
 80107a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80107a8:	e006      	b.n	80107b8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80107aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80107ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80107b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80107b4:	4413      	add	r3, r2
 80107b6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80107b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ba:	011a      	lsls	r2, r3, #4
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	441a      	add	r2, r3
 80107c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c2:	1ad2      	subs	r2, r2, r3
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d901      	bls.n	80107ce <f_mkfs+0x336>
 80107ca:	230e      	movs	r3, #14
 80107cc:	e28a      	b.n	8010ce4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80107ce:	693a      	ldr	r2, [r7, #16]
 80107d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107d2:	1ad2      	subs	r2, r2, r3
 80107d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80107d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107d8:	fb01 f303 	mul.w	r3, r1, r3
 80107dc:	1ad2      	subs	r2, r2, r3
 80107de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107e0:	1ad2      	subs	r2, r2, r3
 80107e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80107e8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80107ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80107ee:	2b03      	cmp	r3, #3
 80107f0:	d10f      	bne.n	8010812 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80107f2:	6a3b      	ldr	r3, [r7, #32]
 80107f4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d80a      	bhi.n	8010812 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d105      	bne.n	801080e <f_mkfs+0x376>
 8010802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010804:	085b      	lsrs	r3, r3, #1
 8010806:	607b      	str	r3, [r7, #4]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d144      	bne.n	8010898 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801080e:	230e      	movs	r3, #14
 8010810:	e268      	b.n	8010ce4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8010812:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010816:	2b02      	cmp	r3, #2
 8010818:	d133      	bne.n	8010882 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801081a:	6a3b      	ldr	r3, [r7, #32]
 801081c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010820:	4293      	cmp	r3, r2
 8010822:	d91e      	bls.n	8010862 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d107      	bne.n	801083a <f_mkfs+0x3a2>
 801082a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	2b40      	cmp	r3, #64	; 0x40
 8010830:	d803      	bhi.n	801083a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8010832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010834:	005b      	lsls	r3, r3, #1
 8010836:	607b      	str	r3, [r7, #4]
 8010838:	e033      	b.n	80108a2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801083a:	7afb      	ldrb	r3, [r7, #11]
 801083c:	f003 0302 	and.w	r3, r3, #2
 8010840:	2b00      	cmp	r3, #0
 8010842:	d003      	beq.n	801084c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8010844:	2303      	movs	r3, #3
 8010846:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801084a:	e02a      	b.n	80108a2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d105      	bne.n	801085e <f_mkfs+0x3c6>
 8010852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010854:	005b      	lsls	r3, r3, #1
 8010856:	607b      	str	r3, [r7, #4]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2b80      	cmp	r3, #128	; 0x80
 801085c:	d91e      	bls.n	801089c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801085e:	230e      	movs	r3, #14
 8010860:	e240      	b.n	8010ce4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8010862:	6a3b      	ldr	r3, [r7, #32]
 8010864:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010868:	4293      	cmp	r3, r2
 801086a:	d80a      	bhi.n	8010882 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d105      	bne.n	801087e <f_mkfs+0x3e6>
 8010872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010874:	005b      	lsls	r3, r3, #1
 8010876:	607b      	str	r3, [r7, #4]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b80      	cmp	r3, #128	; 0x80
 801087c:	d910      	bls.n	80108a0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 801087e:	230e      	movs	r3, #14
 8010880:	e230      	b.n	8010ce4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8010882:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010886:	2b01      	cmp	r3, #1
 8010888:	d10c      	bne.n	80108a4 <f_mkfs+0x40c>
 801088a:	6a3b      	ldr	r3, [r7, #32]
 801088c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010890:	4293      	cmp	r3, r2
 8010892:	d907      	bls.n	80108a4 <f_mkfs+0x40c>
 8010894:	230e      	movs	r3, #14
 8010896:	e225      	b.n	8010ce4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010898:	bf00      	nop
 801089a:	e6ce      	b.n	801063a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801089c:	bf00      	nop
 801089e:	e6cc      	b.n	801063a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80108a0:	bf00      	nop
			pau = au;
 80108a2:	e6ca      	b.n	801063a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80108a4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80108a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80108a8:	461a      	mov	r2, r3
 80108aa:	2100      	movs	r1, #0
 80108ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108ae:	f7fd fdd6 	bl	800e45e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80108b2:	220b      	movs	r2, #11
 80108b4:	49b2      	ldr	r1, [pc, #712]	; (8010b80 <f_mkfs+0x6e8>)
 80108b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108b8:	f7fd fdb0 	bl	800e41c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80108bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108be:	330b      	adds	r3, #11
 80108c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80108c2:	4611      	mov	r1, r2
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fd fd62 	bl	800e38e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80108ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108cc:	330d      	adds	r3, #13
 80108ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108d0:	b2d2      	uxtb	r2, r2
 80108d2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80108d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d6:	330e      	adds	r3, #14
 80108d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108da:	b292      	uxth	r2, r2
 80108dc:	4611      	mov	r1, r2
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fd fd55 	bl	800e38e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80108e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e6:	3310      	adds	r3, #16
 80108e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108ea:	b2d2      	uxtb	r2, r2
 80108ec:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80108ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f0:	f103 0211 	add.w	r2, r3, #17
 80108f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80108f8:	2b03      	cmp	r3, #3
 80108fa:	d002      	beq.n	8010902 <f_mkfs+0x46a>
 80108fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108fe:	b29b      	uxth	r3, r3
 8010900:	e000      	b.n	8010904 <f_mkfs+0x46c>
 8010902:	2300      	movs	r3, #0
 8010904:	4619      	mov	r1, r3
 8010906:	4610      	mov	r0, r2
 8010908:	f7fd fd41 	bl	800e38e <st_word>
		if (sz_vol < 0x10000) {
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010912:	d208      	bcs.n	8010926 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8010914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010916:	3313      	adds	r3, #19
 8010918:	693a      	ldr	r2, [r7, #16]
 801091a:	b292      	uxth	r2, r2
 801091c:	4611      	mov	r1, r2
 801091e:	4618      	mov	r0, r3
 8010920:	f7fd fd35 	bl	800e38e <st_word>
 8010924:	e006      	b.n	8010934 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8010926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010928:	3320      	adds	r3, #32
 801092a:	693a      	ldr	r2, [r7, #16]
 801092c:	4611      	mov	r1, r2
 801092e:	4618      	mov	r0, r3
 8010930:	f7fd fd48 	bl	800e3c4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8010934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010936:	3315      	adds	r3, #21
 8010938:	22f8      	movs	r2, #248	; 0xf8
 801093a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 801093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093e:	3318      	adds	r3, #24
 8010940:	213f      	movs	r1, #63	; 0x3f
 8010942:	4618      	mov	r0, r3
 8010944:	f7fd fd23 	bl	800e38e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8010948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094a:	331a      	adds	r3, #26
 801094c:	21ff      	movs	r1, #255	; 0xff
 801094e:	4618      	mov	r0, r3
 8010950:	f7fd fd1d 	bl	800e38e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8010954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010956:	331c      	adds	r3, #28
 8010958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801095a:	4618      	mov	r0, r3
 801095c:	f7fd fd32 	bl	800e3c4 <st_dword>
		if (fmt == FS_FAT32) {
 8010960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010964:	2b03      	cmp	r3, #3
 8010966:	d131      	bne.n	80109cc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8010968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 801096e:	f7fd f9f3 	bl	800dd58 <get_fattime>
 8010972:	4603      	mov	r3, r0
 8010974:	4619      	mov	r1, r3
 8010976:	4620      	mov	r0, r4
 8010978:	f7fd fd24 	bl	800e3c4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 801097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097e:	3324      	adds	r3, #36	; 0x24
 8010980:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010982:	4618      	mov	r0, r3
 8010984:	f7fd fd1e 	bl	800e3c4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8010988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098a:	332c      	adds	r3, #44	; 0x2c
 801098c:	2102      	movs	r1, #2
 801098e:	4618      	mov	r0, r3
 8010990:	f7fd fd18 	bl	800e3c4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8010994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010996:	3330      	adds	r3, #48	; 0x30
 8010998:	2101      	movs	r1, #1
 801099a:	4618      	mov	r0, r3
 801099c:	f7fd fcf7 	bl	800e38e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80109a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a2:	3332      	adds	r3, #50	; 0x32
 80109a4:	2106      	movs	r1, #6
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7fd fcf1 	bl	800e38e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80109ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ae:	3340      	adds	r3, #64	; 0x40
 80109b0:	2280      	movs	r2, #128	; 0x80
 80109b2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80109b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b6:	3342      	adds	r3, #66	; 0x42
 80109b8:	2229      	movs	r2, #41	; 0x29
 80109ba:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80109bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109be:	3347      	adds	r3, #71	; 0x47
 80109c0:	2213      	movs	r2, #19
 80109c2:	4970      	ldr	r1, [pc, #448]	; (8010b84 <f_mkfs+0x6ec>)
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7fd fd29 	bl	800e41c <mem_cpy>
 80109ca:	e020      	b.n	8010a0e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80109cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ce:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80109d2:	f7fd f9c1 	bl	800dd58 <get_fattime>
 80109d6:	4603      	mov	r3, r0
 80109d8:	4619      	mov	r1, r3
 80109da:	4620      	mov	r0, r4
 80109dc:	f7fd fcf2 	bl	800e3c4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80109e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e2:	3316      	adds	r3, #22
 80109e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80109e6:	b292      	uxth	r2, r2
 80109e8:	4611      	mov	r1, r2
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fd fccf 	bl	800e38e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80109f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f2:	3324      	adds	r3, #36	; 0x24
 80109f4:	2280      	movs	r2, #128	; 0x80
 80109f6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80109f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fa:	3326      	adds	r3, #38	; 0x26
 80109fc:	2229      	movs	r2, #41	; 0x29
 80109fe:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8010a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a02:	332b      	adds	r3, #43	; 0x2b
 8010a04:	2213      	movs	r2, #19
 8010a06:	4960      	ldr	r1, [pc, #384]	; (8010b88 <f_mkfs+0x6f0>)
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fd fd07 	bl	800e41c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a14:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fd fcb8 	bl	800e38e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8010a1e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010a22:	2301      	movs	r3, #1
 8010a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a28:	f7fd fc38 	bl	800e29c <disk_write>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <f_mkfs+0x59e>
 8010a32:	2301      	movs	r3, #1
 8010a34:	e156      	b.n	8010ce4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8010a36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010a3a:	2b03      	cmp	r3, #3
 8010a3c:	d140      	bne.n	8010ac0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8010a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a40:	1d9a      	adds	r2, r3, #6
 8010a42:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010a46:	2301      	movs	r3, #1
 8010a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a4a:	f7fd fc27 	bl	800e29c <disk_write>
			mem_set(buf, 0, ss);
 8010a4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010a50:	461a      	mov	r2, r3
 8010a52:	2100      	movs	r1, #0
 8010a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a56:	f7fd fd02 	bl	800e45e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8010a5a:	494c      	ldr	r1, [pc, #304]	; (8010b8c <f_mkfs+0x6f4>)
 8010a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a5e:	f7fd fcb1 	bl	800e3c4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8010a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010a68:	4949      	ldr	r1, [pc, #292]	; (8010b90 <f_mkfs+0x6f8>)
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fd fcaa 	bl	800e3c4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8010a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010a76:	6a3b      	ldr	r3, [r7, #32]
 8010a78:	3b01      	subs	r3, #1
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	4610      	mov	r0, r2
 8010a7e:	f7fd fca1 	bl	800e3c4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8010a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a84:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010a88:	2102      	movs	r1, #2
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fd fc9a 	bl	800e3c4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8010a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a96:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fd fc77 	bl	800e38e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	1dda      	adds	r2, r3, #7
 8010aa4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010aac:	f7fd fbf6 	bl	800e29c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab2:	1c5a      	adds	r2, r3, #1
 8010ab4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010ab8:	2301      	movs	r3, #1
 8010aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010abc:	f7fd fbee 	bl	800e29c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ac2:	2100      	movs	r1, #0
 8010ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ac6:	f7fd fcca 	bl	800e45e <mem_set>
		sect = b_fat;		/* FAT start sector */
 8010aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010acc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010ace:	2300      	movs	r3, #0
 8010ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ad2:	e04b      	b.n	8010b6c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8010ad4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010ad8:	2b03      	cmp	r3, #3
 8010ada:	d113      	bne.n	8010b04 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8010adc:	f06f 0107 	mvn.w	r1, #7
 8010ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ae2:	f7fd fc6f 	bl	800e3c4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8010ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae8:	3304      	adds	r3, #4
 8010aea:	f04f 31ff 	mov.w	r1, #4294967295
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fd fc68 	bl	800e3c4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8010af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af6:	3308      	adds	r3, #8
 8010af8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fd fc61 	bl	800e3c4 <st_dword>
 8010b02:	e00b      	b.n	8010b1c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8010b04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d101      	bne.n	8010b10 <f_mkfs+0x678>
 8010b0c:	4b21      	ldr	r3, [pc, #132]	; (8010b94 <f_mkfs+0x6fc>)
 8010b0e:	e001      	b.n	8010b14 <f_mkfs+0x67c>
 8010b10:	f06f 0307 	mvn.w	r3, #7
 8010b14:	4619      	mov	r1, r3
 8010b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b18:	f7fd fc54 	bl	800e3c4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b1e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b24:	4293      	cmp	r3, r2
 8010b26:	bf28      	it	cs
 8010b28:	4613      	movcs	r3, r2
 8010b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010b2c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010b34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010b36:	f7fd fbb1 	bl	800e29c <disk_write>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d001      	beq.n	8010b44 <f_mkfs+0x6ac>
 8010b40:	2301      	movs	r3, #1
 8010b42:	e0cf      	b.n	8010ce4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8010b44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010b46:	461a      	mov	r2, r3
 8010b48:	2100      	movs	r1, #0
 8010b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b4c:	f7fd fc87 	bl	800e45e <mem_set>
				sect += n; nsect -= n;
 8010b50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b54:	4413      	add	r3, r2
 8010b56:	667b      	str	r3, [r7, #100]	; 0x64
 8010b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8010b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d1dc      	bne.n	8010b20 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b68:	3301      	adds	r3, #1
 8010b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d3af      	bcc.n	8010ad4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8010b74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b78:	2b03      	cmp	r3, #3
 8010b7a:	d10d      	bne.n	8010b98 <f_mkfs+0x700>
 8010b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b7e:	e00c      	b.n	8010b9a <f_mkfs+0x702>
 8010b80:	08015d08 	.word	0x08015d08
 8010b84:	08015d14 	.word	0x08015d14
 8010b88:	08015d28 	.word	0x08015d28
 8010b8c:	41615252 	.word	0x41615252
 8010b90:	61417272 	.word	0x61417272
 8010b94:	00fffff8 	.word	0x00fffff8
 8010b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b9a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8010b9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	bf28      	it	cs
 8010ba4:	4613      	movcs	r3, r2
 8010ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010ba8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010bb2:	f7fd fb73 	bl	800e29c <disk_write>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d001      	beq.n	8010bc0 <f_mkfs+0x728>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e091      	b.n	8010ce4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8010bc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bc4:	4413      	add	r3, r2
 8010bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8010bc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bcc:	1ad3      	subs	r3, r2, r3
 8010bce:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8010bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1e2      	bne.n	8010b9c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8010bd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010bda:	2b03      	cmp	r3, #3
 8010bdc:	d103      	bne.n	8010be6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010bde:	230c      	movs	r3, #12
 8010be0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010be4:	e010      	b.n	8010c08 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bec:	d303      	bcc.n	8010bf6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010bee:	2306      	movs	r3, #6
 8010bf0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010bf4:	e008      	b.n	8010c08 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8010bf6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	d101      	bne.n	8010c02 <f_mkfs+0x76a>
 8010bfe:	2304      	movs	r3, #4
 8010c00:	e000      	b.n	8010c04 <f_mkfs+0x76c>
 8010c02:	2301      	movs	r3, #1
 8010c04:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8010c08:	7afb      	ldrb	r3, [r7, #11]
 8010c0a:	f003 0308 	and.w	r3, r3, #8
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d15b      	bne.n	8010cca <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8010c12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010c14:	461a      	mov	r2, r3
 8010c16:	2100      	movs	r1, #0
 8010c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c1a:	f7fd fc20 	bl	800e45e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010c24:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fd fbb0 	bl	800e38e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010c34:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	2201      	movs	r2, #1
 8010c42:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8010c44:	69bb      	ldr	r3, [r7, #24]
 8010c46:	3302      	adds	r3, #2
 8010c48:	2201      	movs	r2, #1
 8010c4a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	3303      	adds	r3, #3
 8010c50:	2200      	movs	r2, #0
 8010c52:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	3304      	adds	r3, #4
 8010c58:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8010c5c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010c5e:	693a      	ldr	r2, [r7, #16]
 8010c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c62:	441a      	add	r2, r3
 8010c64:	4b21      	ldr	r3, [pc, #132]	; (8010cec <f_mkfs+0x854>)
 8010c66:	fba3 1302 	umull	r1, r3, r3, r2
 8010c6a:	1ad2      	subs	r2, r2, r3
 8010c6c:	0852      	lsrs	r2, r2, #1
 8010c6e:	4413      	add	r3, r2
 8010c70:	0b5b      	lsrs	r3, r3, #13
 8010c72:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	3305      	adds	r3, #5
 8010c78:	22fe      	movs	r2, #254	; 0xfe
 8010c7a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8010c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c7e:	089b      	lsrs	r3, r3, #2
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	3306      	adds	r3, #6
 8010c86:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8010c8a:	b2d2      	uxtb	r2, r2
 8010c8c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010c8e:	69bb      	ldr	r3, [r7, #24]
 8010c90:	3307      	adds	r3, #7
 8010c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010c94:	b2d2      	uxtb	r2, r2
 8010c96:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010c98:	69bb      	ldr	r3, [r7, #24]
 8010c9a:	3308      	adds	r3, #8
 8010c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fd fb90 	bl	800e3c4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	330c      	adds	r3, #12
 8010ca8:	693a      	ldr	r2, [r7, #16]
 8010caa:	4611      	mov	r1, r2
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fd fb89 	bl	800e3c4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8010cb2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	2200      	movs	r2, #0
 8010cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010cbc:	f7fd faee 	bl	800e29c <disk_write>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d001      	beq.n	8010cca <f_mkfs+0x832>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	e00c      	b.n	8010ce4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8010cca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010cce:	2200      	movs	r2, #0
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fd fb02 	bl	800e2dc <disk_ioctl>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <f_mkfs+0x84a>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e000      	b.n	8010ce4 <f_mkfs+0x84c>

	return FR_OK;
 8010ce2:	2300      	movs	r3, #0
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3774      	adds	r7, #116	; 0x74
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd90      	pop	{r4, r7, pc}
 8010cec:	0515565b 	.word	0x0515565b

08010cf0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b087      	sub	sp, #28
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010d02:	2300      	movs	r3, #0
 8010d04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010d06:	4b1f      	ldr	r3, [pc, #124]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d08:	7a5b      	ldrb	r3, [r3, #9]
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d131      	bne.n	8010d74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010d10:	4b1c      	ldr	r3, [pc, #112]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d12:	7a5b      	ldrb	r3, [r3, #9]
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	461a      	mov	r2, r3
 8010d18:	4b1a      	ldr	r3, [pc, #104]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010d1e:	4b19      	ldr	r3, [pc, #100]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d20:	7a5b      	ldrb	r3, [r3, #9]
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	4a17      	ldr	r2, [pc, #92]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	4413      	add	r3, r2
 8010d2a:	68fa      	ldr	r2, [r7, #12]
 8010d2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010d2e:	4b15      	ldr	r3, [pc, #84]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d30:	7a5b      	ldrb	r3, [r3, #9]
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	461a      	mov	r2, r3
 8010d36:	4b13      	ldr	r3, [pc, #76]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d38:	4413      	add	r3, r2
 8010d3a:	79fa      	ldrb	r2, [r7, #7]
 8010d3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010d3e:	4b11      	ldr	r3, [pc, #68]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d40:	7a5b      	ldrb	r3, [r3, #9]
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	1c5a      	adds	r2, r3, #1
 8010d46:	b2d1      	uxtb	r1, r2
 8010d48:	4a0e      	ldr	r2, [pc, #56]	; (8010d84 <FATFS_LinkDriverEx+0x94>)
 8010d4a:	7251      	strb	r1, [r2, #9]
 8010d4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010d4e:	7dbb      	ldrb	r3, [r7, #22]
 8010d50:	3330      	adds	r3, #48	; 0x30
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	223a      	movs	r2, #58	; 0x3a
 8010d5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	3302      	adds	r3, #2
 8010d64:	222f      	movs	r2, #47	; 0x2f
 8010d66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	3303      	adds	r3, #3
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010d70:	2300      	movs	r3, #0
 8010d72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	20000e18 	.word	0x20000e18

08010d88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010d92:	2200      	movs	r2, #0
 8010d94:	6839      	ldr	r1, [r7, #0]
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f7ff ffaa 	bl	8010cf0 <FATFS_LinkDriverEx>
 8010d9c:	4603      	mov	r3, r0
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
	...

08010da8 <malloc>:
 8010da8:	4b02      	ldr	r3, [pc, #8]	; (8010db4 <malloc+0xc>)
 8010daa:	4601      	mov	r1, r0
 8010dac:	6818      	ldr	r0, [r3, #0]
 8010dae:	f000 b823 	b.w	8010df8 <_malloc_r>
 8010db2:	bf00      	nop
 8010db4:	2000007c 	.word	0x2000007c

08010db8 <sbrk_aligned>:
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	4e0e      	ldr	r6, [pc, #56]	; (8010df4 <sbrk_aligned+0x3c>)
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	6831      	ldr	r1, [r6, #0]
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	b911      	cbnz	r1, 8010dca <sbrk_aligned+0x12>
 8010dc4:	f001 f880 	bl	8011ec8 <_sbrk_r>
 8010dc8:	6030      	str	r0, [r6, #0]
 8010dca:	4621      	mov	r1, r4
 8010dcc:	4628      	mov	r0, r5
 8010dce:	f001 f87b 	bl	8011ec8 <_sbrk_r>
 8010dd2:	1c43      	adds	r3, r0, #1
 8010dd4:	d00a      	beq.n	8010dec <sbrk_aligned+0x34>
 8010dd6:	1cc4      	adds	r4, r0, #3
 8010dd8:	f024 0403 	bic.w	r4, r4, #3
 8010ddc:	42a0      	cmp	r0, r4
 8010dde:	d007      	beq.n	8010df0 <sbrk_aligned+0x38>
 8010de0:	1a21      	subs	r1, r4, r0
 8010de2:	4628      	mov	r0, r5
 8010de4:	f001 f870 	bl	8011ec8 <_sbrk_r>
 8010de8:	3001      	adds	r0, #1
 8010dea:	d101      	bne.n	8010df0 <sbrk_aligned+0x38>
 8010dec:	f04f 34ff 	mov.w	r4, #4294967295
 8010df0:	4620      	mov	r0, r4
 8010df2:	bd70      	pop	{r4, r5, r6, pc}
 8010df4:	20000e28 	.word	0x20000e28

08010df8 <_malloc_r>:
 8010df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dfc:	1ccd      	adds	r5, r1, #3
 8010dfe:	f025 0503 	bic.w	r5, r5, #3
 8010e02:	3508      	adds	r5, #8
 8010e04:	2d0c      	cmp	r5, #12
 8010e06:	bf38      	it	cc
 8010e08:	250c      	movcc	r5, #12
 8010e0a:	2d00      	cmp	r5, #0
 8010e0c:	4607      	mov	r7, r0
 8010e0e:	db01      	blt.n	8010e14 <_malloc_r+0x1c>
 8010e10:	42a9      	cmp	r1, r5
 8010e12:	d905      	bls.n	8010e20 <_malloc_r+0x28>
 8010e14:	230c      	movs	r3, #12
 8010e16:	603b      	str	r3, [r7, #0]
 8010e18:	2600      	movs	r6, #0
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010ef4 <_malloc_r+0xfc>
 8010e24:	f000 f868 	bl	8010ef8 <__malloc_lock>
 8010e28:	f8d8 3000 	ldr.w	r3, [r8]
 8010e2c:	461c      	mov	r4, r3
 8010e2e:	bb5c      	cbnz	r4, 8010e88 <_malloc_r+0x90>
 8010e30:	4629      	mov	r1, r5
 8010e32:	4638      	mov	r0, r7
 8010e34:	f7ff ffc0 	bl	8010db8 <sbrk_aligned>
 8010e38:	1c43      	adds	r3, r0, #1
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	d155      	bne.n	8010eea <_malloc_r+0xf2>
 8010e3e:	f8d8 4000 	ldr.w	r4, [r8]
 8010e42:	4626      	mov	r6, r4
 8010e44:	2e00      	cmp	r6, #0
 8010e46:	d145      	bne.n	8010ed4 <_malloc_r+0xdc>
 8010e48:	2c00      	cmp	r4, #0
 8010e4a:	d048      	beq.n	8010ede <_malloc_r+0xe6>
 8010e4c:	6823      	ldr	r3, [r4, #0]
 8010e4e:	4631      	mov	r1, r6
 8010e50:	4638      	mov	r0, r7
 8010e52:	eb04 0903 	add.w	r9, r4, r3
 8010e56:	f001 f837 	bl	8011ec8 <_sbrk_r>
 8010e5a:	4581      	cmp	r9, r0
 8010e5c:	d13f      	bne.n	8010ede <_malloc_r+0xe6>
 8010e5e:	6821      	ldr	r1, [r4, #0]
 8010e60:	1a6d      	subs	r5, r5, r1
 8010e62:	4629      	mov	r1, r5
 8010e64:	4638      	mov	r0, r7
 8010e66:	f7ff ffa7 	bl	8010db8 <sbrk_aligned>
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	d037      	beq.n	8010ede <_malloc_r+0xe6>
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	442b      	add	r3, r5
 8010e72:	6023      	str	r3, [r4, #0]
 8010e74:	f8d8 3000 	ldr.w	r3, [r8]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d038      	beq.n	8010eee <_malloc_r+0xf6>
 8010e7c:	685a      	ldr	r2, [r3, #4]
 8010e7e:	42a2      	cmp	r2, r4
 8010e80:	d12b      	bne.n	8010eda <_malloc_r+0xe2>
 8010e82:	2200      	movs	r2, #0
 8010e84:	605a      	str	r2, [r3, #4]
 8010e86:	e00f      	b.n	8010ea8 <_malloc_r+0xb0>
 8010e88:	6822      	ldr	r2, [r4, #0]
 8010e8a:	1b52      	subs	r2, r2, r5
 8010e8c:	d41f      	bmi.n	8010ece <_malloc_r+0xd6>
 8010e8e:	2a0b      	cmp	r2, #11
 8010e90:	d917      	bls.n	8010ec2 <_malloc_r+0xca>
 8010e92:	1961      	adds	r1, r4, r5
 8010e94:	42a3      	cmp	r3, r4
 8010e96:	6025      	str	r5, [r4, #0]
 8010e98:	bf18      	it	ne
 8010e9a:	6059      	strne	r1, [r3, #4]
 8010e9c:	6863      	ldr	r3, [r4, #4]
 8010e9e:	bf08      	it	eq
 8010ea0:	f8c8 1000 	streq.w	r1, [r8]
 8010ea4:	5162      	str	r2, [r4, r5]
 8010ea6:	604b      	str	r3, [r1, #4]
 8010ea8:	4638      	mov	r0, r7
 8010eaa:	f104 060b 	add.w	r6, r4, #11
 8010eae:	f000 f829 	bl	8010f04 <__malloc_unlock>
 8010eb2:	f026 0607 	bic.w	r6, r6, #7
 8010eb6:	1d23      	adds	r3, r4, #4
 8010eb8:	1af2      	subs	r2, r6, r3
 8010eba:	d0ae      	beq.n	8010e1a <_malloc_r+0x22>
 8010ebc:	1b9b      	subs	r3, r3, r6
 8010ebe:	50a3      	str	r3, [r4, r2]
 8010ec0:	e7ab      	b.n	8010e1a <_malloc_r+0x22>
 8010ec2:	42a3      	cmp	r3, r4
 8010ec4:	6862      	ldr	r2, [r4, #4]
 8010ec6:	d1dd      	bne.n	8010e84 <_malloc_r+0x8c>
 8010ec8:	f8c8 2000 	str.w	r2, [r8]
 8010ecc:	e7ec      	b.n	8010ea8 <_malloc_r+0xb0>
 8010ece:	4623      	mov	r3, r4
 8010ed0:	6864      	ldr	r4, [r4, #4]
 8010ed2:	e7ac      	b.n	8010e2e <_malloc_r+0x36>
 8010ed4:	4634      	mov	r4, r6
 8010ed6:	6876      	ldr	r6, [r6, #4]
 8010ed8:	e7b4      	b.n	8010e44 <_malloc_r+0x4c>
 8010eda:	4613      	mov	r3, r2
 8010edc:	e7cc      	b.n	8010e78 <_malloc_r+0x80>
 8010ede:	230c      	movs	r3, #12
 8010ee0:	603b      	str	r3, [r7, #0]
 8010ee2:	4638      	mov	r0, r7
 8010ee4:	f000 f80e 	bl	8010f04 <__malloc_unlock>
 8010ee8:	e797      	b.n	8010e1a <_malloc_r+0x22>
 8010eea:	6025      	str	r5, [r4, #0]
 8010eec:	e7dc      	b.n	8010ea8 <_malloc_r+0xb0>
 8010eee:	605b      	str	r3, [r3, #4]
 8010ef0:	deff      	udf	#255	; 0xff
 8010ef2:	bf00      	nop
 8010ef4:	20000e24 	.word	0x20000e24

08010ef8 <__malloc_lock>:
 8010ef8:	4801      	ldr	r0, [pc, #4]	; (8010f00 <__malloc_lock+0x8>)
 8010efa:	f001 b832 	b.w	8011f62 <__retarget_lock_acquire_recursive>
 8010efe:	bf00      	nop
 8010f00:	20000f6c 	.word	0x20000f6c

08010f04 <__malloc_unlock>:
 8010f04:	4801      	ldr	r0, [pc, #4]	; (8010f0c <__malloc_unlock+0x8>)
 8010f06:	f001 b82d 	b.w	8011f64 <__retarget_lock_release_recursive>
 8010f0a:	bf00      	nop
 8010f0c:	20000f6c 	.word	0x20000f6c

08010f10 <__cvt>:
 8010f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f14:	ec55 4b10 	vmov	r4, r5, d0
 8010f18:	2d00      	cmp	r5, #0
 8010f1a:	460e      	mov	r6, r1
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	462b      	mov	r3, r5
 8010f20:	bfbb      	ittet	lt
 8010f22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010f26:	461d      	movlt	r5, r3
 8010f28:	2300      	movge	r3, #0
 8010f2a:	232d      	movlt	r3, #45	; 0x2d
 8010f2c:	700b      	strb	r3, [r1, #0]
 8010f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010f34:	4691      	mov	r9, r2
 8010f36:	f023 0820 	bic.w	r8, r3, #32
 8010f3a:	bfbc      	itt	lt
 8010f3c:	4622      	movlt	r2, r4
 8010f3e:	4614      	movlt	r4, r2
 8010f40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010f44:	d005      	beq.n	8010f52 <__cvt+0x42>
 8010f46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010f4a:	d100      	bne.n	8010f4e <__cvt+0x3e>
 8010f4c:	3601      	adds	r6, #1
 8010f4e:	2102      	movs	r1, #2
 8010f50:	e000      	b.n	8010f54 <__cvt+0x44>
 8010f52:	2103      	movs	r1, #3
 8010f54:	ab03      	add	r3, sp, #12
 8010f56:	9301      	str	r3, [sp, #4]
 8010f58:	ab02      	add	r3, sp, #8
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	ec45 4b10 	vmov	d0, r4, r5
 8010f60:	4653      	mov	r3, sl
 8010f62:	4632      	mov	r2, r6
 8010f64:	f001 f8a4 	bl	80120b0 <_dtoa_r>
 8010f68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010f6c:	4607      	mov	r7, r0
 8010f6e:	d102      	bne.n	8010f76 <__cvt+0x66>
 8010f70:	f019 0f01 	tst.w	r9, #1
 8010f74:	d022      	beq.n	8010fbc <__cvt+0xac>
 8010f76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010f7a:	eb07 0906 	add.w	r9, r7, r6
 8010f7e:	d110      	bne.n	8010fa2 <__cvt+0x92>
 8010f80:	783b      	ldrb	r3, [r7, #0]
 8010f82:	2b30      	cmp	r3, #48	; 0x30
 8010f84:	d10a      	bne.n	8010f9c <__cvt+0x8c>
 8010f86:	2200      	movs	r2, #0
 8010f88:	2300      	movs	r3, #0
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	f7ef fdcb 	bl	8000b28 <__aeabi_dcmpeq>
 8010f92:	b918      	cbnz	r0, 8010f9c <__cvt+0x8c>
 8010f94:	f1c6 0601 	rsb	r6, r6, #1
 8010f98:	f8ca 6000 	str.w	r6, [sl]
 8010f9c:	f8da 3000 	ldr.w	r3, [sl]
 8010fa0:	4499      	add	r9, r3
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	4629      	mov	r1, r5
 8010faa:	f7ef fdbd 	bl	8000b28 <__aeabi_dcmpeq>
 8010fae:	b108      	cbz	r0, 8010fb4 <__cvt+0xa4>
 8010fb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8010fb4:	2230      	movs	r2, #48	; 0x30
 8010fb6:	9b03      	ldr	r3, [sp, #12]
 8010fb8:	454b      	cmp	r3, r9
 8010fba:	d307      	bcc.n	8010fcc <__cvt+0xbc>
 8010fbc:	9b03      	ldr	r3, [sp, #12]
 8010fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fc0:	1bdb      	subs	r3, r3, r7
 8010fc2:	4638      	mov	r0, r7
 8010fc4:	6013      	str	r3, [r2, #0]
 8010fc6:	b004      	add	sp, #16
 8010fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fcc:	1c59      	adds	r1, r3, #1
 8010fce:	9103      	str	r1, [sp, #12]
 8010fd0:	701a      	strb	r2, [r3, #0]
 8010fd2:	e7f0      	b.n	8010fb6 <__cvt+0xa6>

08010fd4 <__exponent>:
 8010fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2900      	cmp	r1, #0
 8010fda:	bfb8      	it	lt
 8010fdc:	4249      	neglt	r1, r1
 8010fde:	f803 2b02 	strb.w	r2, [r3], #2
 8010fe2:	bfb4      	ite	lt
 8010fe4:	222d      	movlt	r2, #45	; 0x2d
 8010fe6:	222b      	movge	r2, #43	; 0x2b
 8010fe8:	2909      	cmp	r1, #9
 8010fea:	7042      	strb	r2, [r0, #1]
 8010fec:	dd2a      	ble.n	8011044 <__exponent+0x70>
 8010fee:	f10d 0207 	add.w	r2, sp, #7
 8010ff2:	4617      	mov	r7, r2
 8010ff4:	260a      	movs	r6, #10
 8010ff6:	4694      	mov	ip, r2
 8010ff8:	fb91 f5f6 	sdiv	r5, r1, r6
 8010ffc:	fb06 1415 	mls	r4, r6, r5, r1
 8011000:	3430      	adds	r4, #48	; 0x30
 8011002:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011006:	460c      	mov	r4, r1
 8011008:	2c63      	cmp	r4, #99	; 0x63
 801100a:	f102 32ff 	add.w	r2, r2, #4294967295
 801100e:	4629      	mov	r1, r5
 8011010:	dcf1      	bgt.n	8010ff6 <__exponent+0x22>
 8011012:	3130      	adds	r1, #48	; 0x30
 8011014:	f1ac 0402 	sub.w	r4, ip, #2
 8011018:	f802 1c01 	strb.w	r1, [r2, #-1]
 801101c:	1c41      	adds	r1, r0, #1
 801101e:	4622      	mov	r2, r4
 8011020:	42ba      	cmp	r2, r7
 8011022:	d30a      	bcc.n	801103a <__exponent+0x66>
 8011024:	f10d 0209 	add.w	r2, sp, #9
 8011028:	eba2 020c 	sub.w	r2, r2, ip
 801102c:	42bc      	cmp	r4, r7
 801102e:	bf88      	it	hi
 8011030:	2200      	movhi	r2, #0
 8011032:	4413      	add	r3, r2
 8011034:	1a18      	subs	r0, r3, r0
 8011036:	b003      	add	sp, #12
 8011038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801103a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801103e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011042:	e7ed      	b.n	8011020 <__exponent+0x4c>
 8011044:	2330      	movs	r3, #48	; 0x30
 8011046:	3130      	adds	r1, #48	; 0x30
 8011048:	7083      	strb	r3, [r0, #2]
 801104a:	70c1      	strb	r1, [r0, #3]
 801104c:	1d03      	adds	r3, r0, #4
 801104e:	e7f1      	b.n	8011034 <__exponent+0x60>

08011050 <_printf_float>:
 8011050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011054:	ed2d 8b02 	vpush	{d8}
 8011058:	b08d      	sub	sp, #52	; 0x34
 801105a:	460c      	mov	r4, r1
 801105c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011060:	4616      	mov	r6, r2
 8011062:	461f      	mov	r7, r3
 8011064:	4605      	mov	r5, r0
 8011066:	f000 fef7 	bl	8011e58 <_localeconv_r>
 801106a:	f8d0 a000 	ldr.w	sl, [r0]
 801106e:	4650      	mov	r0, sl
 8011070:	f7ef f92e 	bl	80002d0 <strlen>
 8011074:	2300      	movs	r3, #0
 8011076:	930a      	str	r3, [sp, #40]	; 0x28
 8011078:	6823      	ldr	r3, [r4, #0]
 801107a:	9305      	str	r3, [sp, #20]
 801107c:	f8d8 3000 	ldr.w	r3, [r8]
 8011080:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011084:	3307      	adds	r3, #7
 8011086:	f023 0307 	bic.w	r3, r3, #7
 801108a:	f103 0208 	add.w	r2, r3, #8
 801108e:	f8c8 2000 	str.w	r2, [r8]
 8011092:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011096:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801109a:	9307      	str	r3, [sp, #28]
 801109c:	f8cd 8018 	str.w	r8, [sp, #24]
 80110a0:	ee08 0a10 	vmov	s16, r0
 80110a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80110a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110ac:	4b9e      	ldr	r3, [pc, #632]	; (8011328 <_printf_float+0x2d8>)
 80110ae:	f04f 32ff 	mov.w	r2, #4294967295
 80110b2:	f7ef fd6b 	bl	8000b8c <__aeabi_dcmpun>
 80110b6:	bb88      	cbnz	r0, 801111c <_printf_float+0xcc>
 80110b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110bc:	4b9a      	ldr	r3, [pc, #616]	; (8011328 <_printf_float+0x2d8>)
 80110be:	f04f 32ff 	mov.w	r2, #4294967295
 80110c2:	f7ef fd45 	bl	8000b50 <__aeabi_dcmple>
 80110c6:	bb48      	cbnz	r0, 801111c <_printf_float+0xcc>
 80110c8:	2200      	movs	r2, #0
 80110ca:	2300      	movs	r3, #0
 80110cc:	4640      	mov	r0, r8
 80110ce:	4649      	mov	r1, r9
 80110d0:	f7ef fd34 	bl	8000b3c <__aeabi_dcmplt>
 80110d4:	b110      	cbz	r0, 80110dc <_printf_float+0x8c>
 80110d6:	232d      	movs	r3, #45	; 0x2d
 80110d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110dc:	4a93      	ldr	r2, [pc, #588]	; (801132c <_printf_float+0x2dc>)
 80110de:	4b94      	ldr	r3, [pc, #592]	; (8011330 <_printf_float+0x2e0>)
 80110e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80110e4:	bf94      	ite	ls
 80110e6:	4690      	movls	r8, r2
 80110e8:	4698      	movhi	r8, r3
 80110ea:	2303      	movs	r3, #3
 80110ec:	6123      	str	r3, [r4, #16]
 80110ee:	9b05      	ldr	r3, [sp, #20]
 80110f0:	f023 0304 	bic.w	r3, r3, #4
 80110f4:	6023      	str	r3, [r4, #0]
 80110f6:	f04f 0900 	mov.w	r9, #0
 80110fa:	9700      	str	r7, [sp, #0]
 80110fc:	4633      	mov	r3, r6
 80110fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8011100:	4621      	mov	r1, r4
 8011102:	4628      	mov	r0, r5
 8011104:	f000 f9da 	bl	80114bc <_printf_common>
 8011108:	3001      	adds	r0, #1
 801110a:	f040 8090 	bne.w	801122e <_printf_float+0x1de>
 801110e:	f04f 30ff 	mov.w	r0, #4294967295
 8011112:	b00d      	add	sp, #52	; 0x34
 8011114:	ecbd 8b02 	vpop	{d8}
 8011118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111c:	4642      	mov	r2, r8
 801111e:	464b      	mov	r3, r9
 8011120:	4640      	mov	r0, r8
 8011122:	4649      	mov	r1, r9
 8011124:	f7ef fd32 	bl	8000b8c <__aeabi_dcmpun>
 8011128:	b140      	cbz	r0, 801113c <_printf_float+0xec>
 801112a:	464b      	mov	r3, r9
 801112c:	2b00      	cmp	r3, #0
 801112e:	bfbc      	itt	lt
 8011130:	232d      	movlt	r3, #45	; 0x2d
 8011132:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011136:	4a7f      	ldr	r2, [pc, #508]	; (8011334 <_printf_float+0x2e4>)
 8011138:	4b7f      	ldr	r3, [pc, #508]	; (8011338 <_printf_float+0x2e8>)
 801113a:	e7d1      	b.n	80110e0 <_printf_float+0x90>
 801113c:	6863      	ldr	r3, [r4, #4]
 801113e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011142:	9206      	str	r2, [sp, #24]
 8011144:	1c5a      	adds	r2, r3, #1
 8011146:	d13f      	bne.n	80111c8 <_printf_float+0x178>
 8011148:	2306      	movs	r3, #6
 801114a:	6063      	str	r3, [r4, #4]
 801114c:	9b05      	ldr	r3, [sp, #20]
 801114e:	6861      	ldr	r1, [r4, #4]
 8011150:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011154:	2300      	movs	r3, #0
 8011156:	9303      	str	r3, [sp, #12]
 8011158:	ab0a      	add	r3, sp, #40	; 0x28
 801115a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801115e:	ab09      	add	r3, sp, #36	; 0x24
 8011160:	ec49 8b10 	vmov	d0, r8, r9
 8011164:	9300      	str	r3, [sp, #0]
 8011166:	6022      	str	r2, [r4, #0]
 8011168:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801116c:	4628      	mov	r0, r5
 801116e:	f7ff fecf 	bl	8010f10 <__cvt>
 8011172:	9b06      	ldr	r3, [sp, #24]
 8011174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011176:	2b47      	cmp	r3, #71	; 0x47
 8011178:	4680      	mov	r8, r0
 801117a:	d108      	bne.n	801118e <_printf_float+0x13e>
 801117c:	1cc8      	adds	r0, r1, #3
 801117e:	db02      	blt.n	8011186 <_printf_float+0x136>
 8011180:	6863      	ldr	r3, [r4, #4]
 8011182:	4299      	cmp	r1, r3
 8011184:	dd41      	ble.n	801120a <_printf_float+0x1ba>
 8011186:	f1ab 0302 	sub.w	r3, fp, #2
 801118a:	fa5f fb83 	uxtb.w	fp, r3
 801118e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011192:	d820      	bhi.n	80111d6 <_printf_float+0x186>
 8011194:	3901      	subs	r1, #1
 8011196:	465a      	mov	r2, fp
 8011198:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801119c:	9109      	str	r1, [sp, #36]	; 0x24
 801119e:	f7ff ff19 	bl	8010fd4 <__exponent>
 80111a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111a4:	1813      	adds	r3, r2, r0
 80111a6:	2a01      	cmp	r2, #1
 80111a8:	4681      	mov	r9, r0
 80111aa:	6123      	str	r3, [r4, #16]
 80111ac:	dc02      	bgt.n	80111b4 <_printf_float+0x164>
 80111ae:	6822      	ldr	r2, [r4, #0]
 80111b0:	07d2      	lsls	r2, r2, #31
 80111b2:	d501      	bpl.n	80111b8 <_printf_float+0x168>
 80111b4:	3301      	adds	r3, #1
 80111b6:	6123      	str	r3, [r4, #16]
 80111b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d09c      	beq.n	80110fa <_printf_float+0xaa>
 80111c0:	232d      	movs	r3, #45	; 0x2d
 80111c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111c6:	e798      	b.n	80110fa <_printf_float+0xaa>
 80111c8:	9a06      	ldr	r2, [sp, #24]
 80111ca:	2a47      	cmp	r2, #71	; 0x47
 80111cc:	d1be      	bne.n	801114c <_printf_float+0xfc>
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d1bc      	bne.n	801114c <_printf_float+0xfc>
 80111d2:	2301      	movs	r3, #1
 80111d4:	e7b9      	b.n	801114a <_printf_float+0xfa>
 80111d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80111da:	d118      	bne.n	801120e <_printf_float+0x1be>
 80111dc:	2900      	cmp	r1, #0
 80111de:	6863      	ldr	r3, [r4, #4]
 80111e0:	dd0b      	ble.n	80111fa <_printf_float+0x1aa>
 80111e2:	6121      	str	r1, [r4, #16]
 80111e4:	b913      	cbnz	r3, 80111ec <_printf_float+0x19c>
 80111e6:	6822      	ldr	r2, [r4, #0]
 80111e8:	07d0      	lsls	r0, r2, #31
 80111ea:	d502      	bpl.n	80111f2 <_printf_float+0x1a2>
 80111ec:	3301      	adds	r3, #1
 80111ee:	440b      	add	r3, r1
 80111f0:	6123      	str	r3, [r4, #16]
 80111f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80111f4:	f04f 0900 	mov.w	r9, #0
 80111f8:	e7de      	b.n	80111b8 <_printf_float+0x168>
 80111fa:	b913      	cbnz	r3, 8011202 <_printf_float+0x1b2>
 80111fc:	6822      	ldr	r2, [r4, #0]
 80111fe:	07d2      	lsls	r2, r2, #31
 8011200:	d501      	bpl.n	8011206 <_printf_float+0x1b6>
 8011202:	3302      	adds	r3, #2
 8011204:	e7f4      	b.n	80111f0 <_printf_float+0x1a0>
 8011206:	2301      	movs	r3, #1
 8011208:	e7f2      	b.n	80111f0 <_printf_float+0x1a0>
 801120a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801120e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011210:	4299      	cmp	r1, r3
 8011212:	db05      	blt.n	8011220 <_printf_float+0x1d0>
 8011214:	6823      	ldr	r3, [r4, #0]
 8011216:	6121      	str	r1, [r4, #16]
 8011218:	07d8      	lsls	r0, r3, #31
 801121a:	d5ea      	bpl.n	80111f2 <_printf_float+0x1a2>
 801121c:	1c4b      	adds	r3, r1, #1
 801121e:	e7e7      	b.n	80111f0 <_printf_float+0x1a0>
 8011220:	2900      	cmp	r1, #0
 8011222:	bfd4      	ite	le
 8011224:	f1c1 0202 	rsble	r2, r1, #2
 8011228:	2201      	movgt	r2, #1
 801122a:	4413      	add	r3, r2
 801122c:	e7e0      	b.n	80111f0 <_printf_float+0x1a0>
 801122e:	6823      	ldr	r3, [r4, #0]
 8011230:	055a      	lsls	r2, r3, #21
 8011232:	d407      	bmi.n	8011244 <_printf_float+0x1f4>
 8011234:	6923      	ldr	r3, [r4, #16]
 8011236:	4642      	mov	r2, r8
 8011238:	4631      	mov	r1, r6
 801123a:	4628      	mov	r0, r5
 801123c:	47b8      	blx	r7
 801123e:	3001      	adds	r0, #1
 8011240:	d12c      	bne.n	801129c <_printf_float+0x24c>
 8011242:	e764      	b.n	801110e <_printf_float+0xbe>
 8011244:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011248:	f240 80e0 	bls.w	801140c <_printf_float+0x3bc>
 801124c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011250:	2200      	movs	r2, #0
 8011252:	2300      	movs	r3, #0
 8011254:	f7ef fc68 	bl	8000b28 <__aeabi_dcmpeq>
 8011258:	2800      	cmp	r0, #0
 801125a:	d034      	beq.n	80112c6 <_printf_float+0x276>
 801125c:	4a37      	ldr	r2, [pc, #220]	; (801133c <_printf_float+0x2ec>)
 801125e:	2301      	movs	r3, #1
 8011260:	4631      	mov	r1, r6
 8011262:	4628      	mov	r0, r5
 8011264:	47b8      	blx	r7
 8011266:	3001      	adds	r0, #1
 8011268:	f43f af51 	beq.w	801110e <_printf_float+0xbe>
 801126c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011270:	429a      	cmp	r2, r3
 8011272:	db02      	blt.n	801127a <_printf_float+0x22a>
 8011274:	6823      	ldr	r3, [r4, #0]
 8011276:	07d8      	lsls	r0, r3, #31
 8011278:	d510      	bpl.n	801129c <_printf_float+0x24c>
 801127a:	ee18 3a10 	vmov	r3, s16
 801127e:	4652      	mov	r2, sl
 8011280:	4631      	mov	r1, r6
 8011282:	4628      	mov	r0, r5
 8011284:	47b8      	blx	r7
 8011286:	3001      	adds	r0, #1
 8011288:	f43f af41 	beq.w	801110e <_printf_float+0xbe>
 801128c:	f04f 0800 	mov.w	r8, #0
 8011290:	f104 091a 	add.w	r9, r4, #26
 8011294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011296:	3b01      	subs	r3, #1
 8011298:	4543      	cmp	r3, r8
 801129a:	dc09      	bgt.n	80112b0 <_printf_float+0x260>
 801129c:	6823      	ldr	r3, [r4, #0]
 801129e:	079b      	lsls	r3, r3, #30
 80112a0:	f100 8107 	bmi.w	80114b2 <_printf_float+0x462>
 80112a4:	68e0      	ldr	r0, [r4, #12]
 80112a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112a8:	4298      	cmp	r0, r3
 80112aa:	bfb8      	it	lt
 80112ac:	4618      	movlt	r0, r3
 80112ae:	e730      	b.n	8011112 <_printf_float+0xc2>
 80112b0:	2301      	movs	r3, #1
 80112b2:	464a      	mov	r2, r9
 80112b4:	4631      	mov	r1, r6
 80112b6:	4628      	mov	r0, r5
 80112b8:	47b8      	blx	r7
 80112ba:	3001      	adds	r0, #1
 80112bc:	f43f af27 	beq.w	801110e <_printf_float+0xbe>
 80112c0:	f108 0801 	add.w	r8, r8, #1
 80112c4:	e7e6      	b.n	8011294 <_printf_float+0x244>
 80112c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	dc39      	bgt.n	8011340 <_printf_float+0x2f0>
 80112cc:	4a1b      	ldr	r2, [pc, #108]	; (801133c <_printf_float+0x2ec>)
 80112ce:	2301      	movs	r3, #1
 80112d0:	4631      	mov	r1, r6
 80112d2:	4628      	mov	r0, r5
 80112d4:	47b8      	blx	r7
 80112d6:	3001      	adds	r0, #1
 80112d8:	f43f af19 	beq.w	801110e <_printf_float+0xbe>
 80112dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80112e0:	4313      	orrs	r3, r2
 80112e2:	d102      	bne.n	80112ea <_printf_float+0x29a>
 80112e4:	6823      	ldr	r3, [r4, #0]
 80112e6:	07d9      	lsls	r1, r3, #31
 80112e8:	d5d8      	bpl.n	801129c <_printf_float+0x24c>
 80112ea:	ee18 3a10 	vmov	r3, s16
 80112ee:	4652      	mov	r2, sl
 80112f0:	4631      	mov	r1, r6
 80112f2:	4628      	mov	r0, r5
 80112f4:	47b8      	blx	r7
 80112f6:	3001      	adds	r0, #1
 80112f8:	f43f af09 	beq.w	801110e <_printf_float+0xbe>
 80112fc:	f04f 0900 	mov.w	r9, #0
 8011300:	f104 0a1a 	add.w	sl, r4, #26
 8011304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011306:	425b      	negs	r3, r3
 8011308:	454b      	cmp	r3, r9
 801130a:	dc01      	bgt.n	8011310 <_printf_float+0x2c0>
 801130c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801130e:	e792      	b.n	8011236 <_printf_float+0x1e6>
 8011310:	2301      	movs	r3, #1
 8011312:	4652      	mov	r2, sl
 8011314:	4631      	mov	r1, r6
 8011316:	4628      	mov	r0, r5
 8011318:	47b8      	blx	r7
 801131a:	3001      	adds	r0, #1
 801131c:	f43f aef7 	beq.w	801110e <_printf_float+0xbe>
 8011320:	f109 0901 	add.w	r9, r9, #1
 8011324:	e7ee      	b.n	8011304 <_printf_float+0x2b4>
 8011326:	bf00      	nop
 8011328:	7fefffff 	.word	0x7fefffff
 801132c:	080184a6 	.word	0x080184a6
 8011330:	080184aa 	.word	0x080184aa
 8011334:	080184ae 	.word	0x080184ae
 8011338:	080184b2 	.word	0x080184b2
 801133c:	080184b6 	.word	0x080184b6
 8011340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011344:	429a      	cmp	r2, r3
 8011346:	bfa8      	it	ge
 8011348:	461a      	movge	r2, r3
 801134a:	2a00      	cmp	r2, #0
 801134c:	4691      	mov	r9, r2
 801134e:	dc37      	bgt.n	80113c0 <_printf_float+0x370>
 8011350:	f04f 0b00 	mov.w	fp, #0
 8011354:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011358:	f104 021a 	add.w	r2, r4, #26
 801135c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801135e:	9305      	str	r3, [sp, #20]
 8011360:	eba3 0309 	sub.w	r3, r3, r9
 8011364:	455b      	cmp	r3, fp
 8011366:	dc33      	bgt.n	80113d0 <_printf_float+0x380>
 8011368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801136c:	429a      	cmp	r2, r3
 801136e:	db3b      	blt.n	80113e8 <_printf_float+0x398>
 8011370:	6823      	ldr	r3, [r4, #0]
 8011372:	07da      	lsls	r2, r3, #31
 8011374:	d438      	bmi.n	80113e8 <_printf_float+0x398>
 8011376:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801137a:	eba2 0903 	sub.w	r9, r2, r3
 801137e:	9b05      	ldr	r3, [sp, #20]
 8011380:	1ad2      	subs	r2, r2, r3
 8011382:	4591      	cmp	r9, r2
 8011384:	bfa8      	it	ge
 8011386:	4691      	movge	r9, r2
 8011388:	f1b9 0f00 	cmp.w	r9, #0
 801138c:	dc35      	bgt.n	80113fa <_printf_float+0x3aa>
 801138e:	f04f 0800 	mov.w	r8, #0
 8011392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011396:	f104 0a1a 	add.w	sl, r4, #26
 801139a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801139e:	1a9b      	subs	r3, r3, r2
 80113a0:	eba3 0309 	sub.w	r3, r3, r9
 80113a4:	4543      	cmp	r3, r8
 80113a6:	f77f af79 	ble.w	801129c <_printf_float+0x24c>
 80113aa:	2301      	movs	r3, #1
 80113ac:	4652      	mov	r2, sl
 80113ae:	4631      	mov	r1, r6
 80113b0:	4628      	mov	r0, r5
 80113b2:	47b8      	blx	r7
 80113b4:	3001      	adds	r0, #1
 80113b6:	f43f aeaa 	beq.w	801110e <_printf_float+0xbe>
 80113ba:	f108 0801 	add.w	r8, r8, #1
 80113be:	e7ec      	b.n	801139a <_printf_float+0x34a>
 80113c0:	4613      	mov	r3, r2
 80113c2:	4631      	mov	r1, r6
 80113c4:	4642      	mov	r2, r8
 80113c6:	4628      	mov	r0, r5
 80113c8:	47b8      	blx	r7
 80113ca:	3001      	adds	r0, #1
 80113cc:	d1c0      	bne.n	8011350 <_printf_float+0x300>
 80113ce:	e69e      	b.n	801110e <_printf_float+0xbe>
 80113d0:	2301      	movs	r3, #1
 80113d2:	4631      	mov	r1, r6
 80113d4:	4628      	mov	r0, r5
 80113d6:	9205      	str	r2, [sp, #20]
 80113d8:	47b8      	blx	r7
 80113da:	3001      	adds	r0, #1
 80113dc:	f43f ae97 	beq.w	801110e <_printf_float+0xbe>
 80113e0:	9a05      	ldr	r2, [sp, #20]
 80113e2:	f10b 0b01 	add.w	fp, fp, #1
 80113e6:	e7b9      	b.n	801135c <_printf_float+0x30c>
 80113e8:	ee18 3a10 	vmov	r3, s16
 80113ec:	4652      	mov	r2, sl
 80113ee:	4631      	mov	r1, r6
 80113f0:	4628      	mov	r0, r5
 80113f2:	47b8      	blx	r7
 80113f4:	3001      	adds	r0, #1
 80113f6:	d1be      	bne.n	8011376 <_printf_float+0x326>
 80113f8:	e689      	b.n	801110e <_printf_float+0xbe>
 80113fa:	9a05      	ldr	r2, [sp, #20]
 80113fc:	464b      	mov	r3, r9
 80113fe:	4442      	add	r2, r8
 8011400:	4631      	mov	r1, r6
 8011402:	4628      	mov	r0, r5
 8011404:	47b8      	blx	r7
 8011406:	3001      	adds	r0, #1
 8011408:	d1c1      	bne.n	801138e <_printf_float+0x33e>
 801140a:	e680      	b.n	801110e <_printf_float+0xbe>
 801140c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801140e:	2a01      	cmp	r2, #1
 8011410:	dc01      	bgt.n	8011416 <_printf_float+0x3c6>
 8011412:	07db      	lsls	r3, r3, #31
 8011414:	d53a      	bpl.n	801148c <_printf_float+0x43c>
 8011416:	2301      	movs	r3, #1
 8011418:	4642      	mov	r2, r8
 801141a:	4631      	mov	r1, r6
 801141c:	4628      	mov	r0, r5
 801141e:	47b8      	blx	r7
 8011420:	3001      	adds	r0, #1
 8011422:	f43f ae74 	beq.w	801110e <_printf_float+0xbe>
 8011426:	ee18 3a10 	vmov	r3, s16
 801142a:	4652      	mov	r2, sl
 801142c:	4631      	mov	r1, r6
 801142e:	4628      	mov	r0, r5
 8011430:	47b8      	blx	r7
 8011432:	3001      	adds	r0, #1
 8011434:	f43f ae6b 	beq.w	801110e <_printf_float+0xbe>
 8011438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801143c:	2200      	movs	r2, #0
 801143e:	2300      	movs	r3, #0
 8011440:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011444:	f7ef fb70 	bl	8000b28 <__aeabi_dcmpeq>
 8011448:	b9d8      	cbnz	r0, 8011482 <_printf_float+0x432>
 801144a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801144e:	f108 0201 	add.w	r2, r8, #1
 8011452:	4631      	mov	r1, r6
 8011454:	4628      	mov	r0, r5
 8011456:	47b8      	blx	r7
 8011458:	3001      	adds	r0, #1
 801145a:	d10e      	bne.n	801147a <_printf_float+0x42a>
 801145c:	e657      	b.n	801110e <_printf_float+0xbe>
 801145e:	2301      	movs	r3, #1
 8011460:	4652      	mov	r2, sl
 8011462:	4631      	mov	r1, r6
 8011464:	4628      	mov	r0, r5
 8011466:	47b8      	blx	r7
 8011468:	3001      	adds	r0, #1
 801146a:	f43f ae50 	beq.w	801110e <_printf_float+0xbe>
 801146e:	f108 0801 	add.w	r8, r8, #1
 8011472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011474:	3b01      	subs	r3, #1
 8011476:	4543      	cmp	r3, r8
 8011478:	dcf1      	bgt.n	801145e <_printf_float+0x40e>
 801147a:	464b      	mov	r3, r9
 801147c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011480:	e6da      	b.n	8011238 <_printf_float+0x1e8>
 8011482:	f04f 0800 	mov.w	r8, #0
 8011486:	f104 0a1a 	add.w	sl, r4, #26
 801148a:	e7f2      	b.n	8011472 <_printf_float+0x422>
 801148c:	2301      	movs	r3, #1
 801148e:	4642      	mov	r2, r8
 8011490:	e7df      	b.n	8011452 <_printf_float+0x402>
 8011492:	2301      	movs	r3, #1
 8011494:	464a      	mov	r2, r9
 8011496:	4631      	mov	r1, r6
 8011498:	4628      	mov	r0, r5
 801149a:	47b8      	blx	r7
 801149c:	3001      	adds	r0, #1
 801149e:	f43f ae36 	beq.w	801110e <_printf_float+0xbe>
 80114a2:	f108 0801 	add.w	r8, r8, #1
 80114a6:	68e3      	ldr	r3, [r4, #12]
 80114a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80114aa:	1a5b      	subs	r3, r3, r1
 80114ac:	4543      	cmp	r3, r8
 80114ae:	dcf0      	bgt.n	8011492 <_printf_float+0x442>
 80114b0:	e6f8      	b.n	80112a4 <_printf_float+0x254>
 80114b2:	f04f 0800 	mov.w	r8, #0
 80114b6:	f104 0919 	add.w	r9, r4, #25
 80114ba:	e7f4      	b.n	80114a6 <_printf_float+0x456>

080114bc <_printf_common>:
 80114bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114c0:	4616      	mov	r6, r2
 80114c2:	4699      	mov	r9, r3
 80114c4:	688a      	ldr	r2, [r1, #8]
 80114c6:	690b      	ldr	r3, [r1, #16]
 80114c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80114cc:	4293      	cmp	r3, r2
 80114ce:	bfb8      	it	lt
 80114d0:	4613      	movlt	r3, r2
 80114d2:	6033      	str	r3, [r6, #0]
 80114d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114d8:	4607      	mov	r7, r0
 80114da:	460c      	mov	r4, r1
 80114dc:	b10a      	cbz	r2, 80114e2 <_printf_common+0x26>
 80114de:	3301      	adds	r3, #1
 80114e0:	6033      	str	r3, [r6, #0]
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	0699      	lsls	r1, r3, #26
 80114e6:	bf42      	ittt	mi
 80114e8:	6833      	ldrmi	r3, [r6, #0]
 80114ea:	3302      	addmi	r3, #2
 80114ec:	6033      	strmi	r3, [r6, #0]
 80114ee:	6825      	ldr	r5, [r4, #0]
 80114f0:	f015 0506 	ands.w	r5, r5, #6
 80114f4:	d106      	bne.n	8011504 <_printf_common+0x48>
 80114f6:	f104 0a19 	add.w	sl, r4, #25
 80114fa:	68e3      	ldr	r3, [r4, #12]
 80114fc:	6832      	ldr	r2, [r6, #0]
 80114fe:	1a9b      	subs	r3, r3, r2
 8011500:	42ab      	cmp	r3, r5
 8011502:	dc26      	bgt.n	8011552 <_printf_common+0x96>
 8011504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011508:	1e13      	subs	r3, r2, #0
 801150a:	6822      	ldr	r2, [r4, #0]
 801150c:	bf18      	it	ne
 801150e:	2301      	movne	r3, #1
 8011510:	0692      	lsls	r2, r2, #26
 8011512:	d42b      	bmi.n	801156c <_printf_common+0xb0>
 8011514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011518:	4649      	mov	r1, r9
 801151a:	4638      	mov	r0, r7
 801151c:	47c0      	blx	r8
 801151e:	3001      	adds	r0, #1
 8011520:	d01e      	beq.n	8011560 <_printf_common+0xa4>
 8011522:	6823      	ldr	r3, [r4, #0]
 8011524:	6922      	ldr	r2, [r4, #16]
 8011526:	f003 0306 	and.w	r3, r3, #6
 801152a:	2b04      	cmp	r3, #4
 801152c:	bf02      	ittt	eq
 801152e:	68e5      	ldreq	r5, [r4, #12]
 8011530:	6833      	ldreq	r3, [r6, #0]
 8011532:	1aed      	subeq	r5, r5, r3
 8011534:	68a3      	ldr	r3, [r4, #8]
 8011536:	bf0c      	ite	eq
 8011538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801153c:	2500      	movne	r5, #0
 801153e:	4293      	cmp	r3, r2
 8011540:	bfc4      	itt	gt
 8011542:	1a9b      	subgt	r3, r3, r2
 8011544:	18ed      	addgt	r5, r5, r3
 8011546:	2600      	movs	r6, #0
 8011548:	341a      	adds	r4, #26
 801154a:	42b5      	cmp	r5, r6
 801154c:	d11a      	bne.n	8011584 <_printf_common+0xc8>
 801154e:	2000      	movs	r0, #0
 8011550:	e008      	b.n	8011564 <_printf_common+0xa8>
 8011552:	2301      	movs	r3, #1
 8011554:	4652      	mov	r2, sl
 8011556:	4649      	mov	r1, r9
 8011558:	4638      	mov	r0, r7
 801155a:	47c0      	blx	r8
 801155c:	3001      	adds	r0, #1
 801155e:	d103      	bne.n	8011568 <_printf_common+0xac>
 8011560:	f04f 30ff 	mov.w	r0, #4294967295
 8011564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011568:	3501      	adds	r5, #1
 801156a:	e7c6      	b.n	80114fa <_printf_common+0x3e>
 801156c:	18e1      	adds	r1, r4, r3
 801156e:	1c5a      	adds	r2, r3, #1
 8011570:	2030      	movs	r0, #48	; 0x30
 8011572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011576:	4422      	add	r2, r4
 8011578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801157c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011580:	3302      	adds	r3, #2
 8011582:	e7c7      	b.n	8011514 <_printf_common+0x58>
 8011584:	2301      	movs	r3, #1
 8011586:	4622      	mov	r2, r4
 8011588:	4649      	mov	r1, r9
 801158a:	4638      	mov	r0, r7
 801158c:	47c0      	blx	r8
 801158e:	3001      	adds	r0, #1
 8011590:	d0e6      	beq.n	8011560 <_printf_common+0xa4>
 8011592:	3601      	adds	r6, #1
 8011594:	e7d9      	b.n	801154a <_printf_common+0x8e>
	...

08011598 <_printf_i>:
 8011598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801159c:	7e0f      	ldrb	r7, [r1, #24]
 801159e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80115a0:	2f78      	cmp	r7, #120	; 0x78
 80115a2:	4691      	mov	r9, r2
 80115a4:	4680      	mov	r8, r0
 80115a6:	460c      	mov	r4, r1
 80115a8:	469a      	mov	sl, r3
 80115aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80115ae:	d807      	bhi.n	80115c0 <_printf_i+0x28>
 80115b0:	2f62      	cmp	r7, #98	; 0x62
 80115b2:	d80a      	bhi.n	80115ca <_printf_i+0x32>
 80115b4:	2f00      	cmp	r7, #0
 80115b6:	f000 80d4 	beq.w	8011762 <_printf_i+0x1ca>
 80115ba:	2f58      	cmp	r7, #88	; 0x58
 80115bc:	f000 80c0 	beq.w	8011740 <_printf_i+0x1a8>
 80115c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80115c8:	e03a      	b.n	8011640 <_printf_i+0xa8>
 80115ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80115ce:	2b15      	cmp	r3, #21
 80115d0:	d8f6      	bhi.n	80115c0 <_printf_i+0x28>
 80115d2:	a101      	add	r1, pc, #4	; (adr r1, 80115d8 <_printf_i+0x40>)
 80115d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115d8:	08011631 	.word	0x08011631
 80115dc:	08011645 	.word	0x08011645
 80115e0:	080115c1 	.word	0x080115c1
 80115e4:	080115c1 	.word	0x080115c1
 80115e8:	080115c1 	.word	0x080115c1
 80115ec:	080115c1 	.word	0x080115c1
 80115f0:	08011645 	.word	0x08011645
 80115f4:	080115c1 	.word	0x080115c1
 80115f8:	080115c1 	.word	0x080115c1
 80115fc:	080115c1 	.word	0x080115c1
 8011600:	080115c1 	.word	0x080115c1
 8011604:	08011749 	.word	0x08011749
 8011608:	08011671 	.word	0x08011671
 801160c:	08011703 	.word	0x08011703
 8011610:	080115c1 	.word	0x080115c1
 8011614:	080115c1 	.word	0x080115c1
 8011618:	0801176b 	.word	0x0801176b
 801161c:	080115c1 	.word	0x080115c1
 8011620:	08011671 	.word	0x08011671
 8011624:	080115c1 	.word	0x080115c1
 8011628:	080115c1 	.word	0x080115c1
 801162c:	0801170b 	.word	0x0801170b
 8011630:	682b      	ldr	r3, [r5, #0]
 8011632:	1d1a      	adds	r2, r3, #4
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	602a      	str	r2, [r5, #0]
 8011638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801163c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011640:	2301      	movs	r3, #1
 8011642:	e09f      	b.n	8011784 <_printf_i+0x1ec>
 8011644:	6820      	ldr	r0, [r4, #0]
 8011646:	682b      	ldr	r3, [r5, #0]
 8011648:	0607      	lsls	r7, r0, #24
 801164a:	f103 0104 	add.w	r1, r3, #4
 801164e:	6029      	str	r1, [r5, #0]
 8011650:	d501      	bpl.n	8011656 <_printf_i+0xbe>
 8011652:	681e      	ldr	r6, [r3, #0]
 8011654:	e003      	b.n	801165e <_printf_i+0xc6>
 8011656:	0646      	lsls	r6, r0, #25
 8011658:	d5fb      	bpl.n	8011652 <_printf_i+0xba>
 801165a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801165e:	2e00      	cmp	r6, #0
 8011660:	da03      	bge.n	801166a <_printf_i+0xd2>
 8011662:	232d      	movs	r3, #45	; 0x2d
 8011664:	4276      	negs	r6, r6
 8011666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801166a:	485a      	ldr	r0, [pc, #360]	; (80117d4 <_printf_i+0x23c>)
 801166c:	230a      	movs	r3, #10
 801166e:	e012      	b.n	8011696 <_printf_i+0xfe>
 8011670:	682b      	ldr	r3, [r5, #0]
 8011672:	6820      	ldr	r0, [r4, #0]
 8011674:	1d19      	adds	r1, r3, #4
 8011676:	6029      	str	r1, [r5, #0]
 8011678:	0605      	lsls	r5, r0, #24
 801167a:	d501      	bpl.n	8011680 <_printf_i+0xe8>
 801167c:	681e      	ldr	r6, [r3, #0]
 801167e:	e002      	b.n	8011686 <_printf_i+0xee>
 8011680:	0641      	lsls	r1, r0, #25
 8011682:	d5fb      	bpl.n	801167c <_printf_i+0xe4>
 8011684:	881e      	ldrh	r6, [r3, #0]
 8011686:	4853      	ldr	r0, [pc, #332]	; (80117d4 <_printf_i+0x23c>)
 8011688:	2f6f      	cmp	r7, #111	; 0x6f
 801168a:	bf0c      	ite	eq
 801168c:	2308      	moveq	r3, #8
 801168e:	230a      	movne	r3, #10
 8011690:	2100      	movs	r1, #0
 8011692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011696:	6865      	ldr	r5, [r4, #4]
 8011698:	60a5      	str	r5, [r4, #8]
 801169a:	2d00      	cmp	r5, #0
 801169c:	bfa2      	ittt	ge
 801169e:	6821      	ldrge	r1, [r4, #0]
 80116a0:	f021 0104 	bicge.w	r1, r1, #4
 80116a4:	6021      	strge	r1, [r4, #0]
 80116a6:	b90e      	cbnz	r6, 80116ac <_printf_i+0x114>
 80116a8:	2d00      	cmp	r5, #0
 80116aa:	d04b      	beq.n	8011744 <_printf_i+0x1ac>
 80116ac:	4615      	mov	r5, r2
 80116ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80116b2:	fb03 6711 	mls	r7, r3, r1, r6
 80116b6:	5dc7      	ldrb	r7, [r0, r7]
 80116b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80116bc:	4637      	mov	r7, r6
 80116be:	42bb      	cmp	r3, r7
 80116c0:	460e      	mov	r6, r1
 80116c2:	d9f4      	bls.n	80116ae <_printf_i+0x116>
 80116c4:	2b08      	cmp	r3, #8
 80116c6:	d10b      	bne.n	80116e0 <_printf_i+0x148>
 80116c8:	6823      	ldr	r3, [r4, #0]
 80116ca:	07de      	lsls	r6, r3, #31
 80116cc:	d508      	bpl.n	80116e0 <_printf_i+0x148>
 80116ce:	6923      	ldr	r3, [r4, #16]
 80116d0:	6861      	ldr	r1, [r4, #4]
 80116d2:	4299      	cmp	r1, r3
 80116d4:	bfde      	ittt	le
 80116d6:	2330      	movle	r3, #48	; 0x30
 80116d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80116dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80116e0:	1b52      	subs	r2, r2, r5
 80116e2:	6122      	str	r2, [r4, #16]
 80116e4:	f8cd a000 	str.w	sl, [sp]
 80116e8:	464b      	mov	r3, r9
 80116ea:	aa03      	add	r2, sp, #12
 80116ec:	4621      	mov	r1, r4
 80116ee:	4640      	mov	r0, r8
 80116f0:	f7ff fee4 	bl	80114bc <_printf_common>
 80116f4:	3001      	adds	r0, #1
 80116f6:	d14a      	bne.n	801178e <_printf_i+0x1f6>
 80116f8:	f04f 30ff 	mov.w	r0, #4294967295
 80116fc:	b004      	add	sp, #16
 80116fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	f043 0320 	orr.w	r3, r3, #32
 8011708:	6023      	str	r3, [r4, #0]
 801170a:	4833      	ldr	r0, [pc, #204]	; (80117d8 <_printf_i+0x240>)
 801170c:	2778      	movs	r7, #120	; 0x78
 801170e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011712:	6823      	ldr	r3, [r4, #0]
 8011714:	6829      	ldr	r1, [r5, #0]
 8011716:	061f      	lsls	r7, r3, #24
 8011718:	f851 6b04 	ldr.w	r6, [r1], #4
 801171c:	d402      	bmi.n	8011724 <_printf_i+0x18c>
 801171e:	065f      	lsls	r7, r3, #25
 8011720:	bf48      	it	mi
 8011722:	b2b6      	uxthmi	r6, r6
 8011724:	07df      	lsls	r7, r3, #31
 8011726:	bf48      	it	mi
 8011728:	f043 0320 	orrmi.w	r3, r3, #32
 801172c:	6029      	str	r1, [r5, #0]
 801172e:	bf48      	it	mi
 8011730:	6023      	strmi	r3, [r4, #0]
 8011732:	b91e      	cbnz	r6, 801173c <_printf_i+0x1a4>
 8011734:	6823      	ldr	r3, [r4, #0]
 8011736:	f023 0320 	bic.w	r3, r3, #32
 801173a:	6023      	str	r3, [r4, #0]
 801173c:	2310      	movs	r3, #16
 801173e:	e7a7      	b.n	8011690 <_printf_i+0xf8>
 8011740:	4824      	ldr	r0, [pc, #144]	; (80117d4 <_printf_i+0x23c>)
 8011742:	e7e4      	b.n	801170e <_printf_i+0x176>
 8011744:	4615      	mov	r5, r2
 8011746:	e7bd      	b.n	80116c4 <_printf_i+0x12c>
 8011748:	682b      	ldr	r3, [r5, #0]
 801174a:	6826      	ldr	r6, [r4, #0]
 801174c:	6961      	ldr	r1, [r4, #20]
 801174e:	1d18      	adds	r0, r3, #4
 8011750:	6028      	str	r0, [r5, #0]
 8011752:	0635      	lsls	r5, r6, #24
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	d501      	bpl.n	801175c <_printf_i+0x1c4>
 8011758:	6019      	str	r1, [r3, #0]
 801175a:	e002      	b.n	8011762 <_printf_i+0x1ca>
 801175c:	0670      	lsls	r0, r6, #25
 801175e:	d5fb      	bpl.n	8011758 <_printf_i+0x1c0>
 8011760:	8019      	strh	r1, [r3, #0]
 8011762:	2300      	movs	r3, #0
 8011764:	6123      	str	r3, [r4, #16]
 8011766:	4615      	mov	r5, r2
 8011768:	e7bc      	b.n	80116e4 <_printf_i+0x14c>
 801176a:	682b      	ldr	r3, [r5, #0]
 801176c:	1d1a      	adds	r2, r3, #4
 801176e:	602a      	str	r2, [r5, #0]
 8011770:	681d      	ldr	r5, [r3, #0]
 8011772:	6862      	ldr	r2, [r4, #4]
 8011774:	2100      	movs	r1, #0
 8011776:	4628      	mov	r0, r5
 8011778:	f7ee fd5a 	bl	8000230 <memchr>
 801177c:	b108      	cbz	r0, 8011782 <_printf_i+0x1ea>
 801177e:	1b40      	subs	r0, r0, r5
 8011780:	6060      	str	r0, [r4, #4]
 8011782:	6863      	ldr	r3, [r4, #4]
 8011784:	6123      	str	r3, [r4, #16]
 8011786:	2300      	movs	r3, #0
 8011788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801178c:	e7aa      	b.n	80116e4 <_printf_i+0x14c>
 801178e:	6923      	ldr	r3, [r4, #16]
 8011790:	462a      	mov	r2, r5
 8011792:	4649      	mov	r1, r9
 8011794:	4640      	mov	r0, r8
 8011796:	47d0      	blx	sl
 8011798:	3001      	adds	r0, #1
 801179a:	d0ad      	beq.n	80116f8 <_printf_i+0x160>
 801179c:	6823      	ldr	r3, [r4, #0]
 801179e:	079b      	lsls	r3, r3, #30
 80117a0:	d413      	bmi.n	80117ca <_printf_i+0x232>
 80117a2:	68e0      	ldr	r0, [r4, #12]
 80117a4:	9b03      	ldr	r3, [sp, #12]
 80117a6:	4298      	cmp	r0, r3
 80117a8:	bfb8      	it	lt
 80117aa:	4618      	movlt	r0, r3
 80117ac:	e7a6      	b.n	80116fc <_printf_i+0x164>
 80117ae:	2301      	movs	r3, #1
 80117b0:	4632      	mov	r2, r6
 80117b2:	4649      	mov	r1, r9
 80117b4:	4640      	mov	r0, r8
 80117b6:	47d0      	blx	sl
 80117b8:	3001      	adds	r0, #1
 80117ba:	d09d      	beq.n	80116f8 <_printf_i+0x160>
 80117bc:	3501      	adds	r5, #1
 80117be:	68e3      	ldr	r3, [r4, #12]
 80117c0:	9903      	ldr	r1, [sp, #12]
 80117c2:	1a5b      	subs	r3, r3, r1
 80117c4:	42ab      	cmp	r3, r5
 80117c6:	dcf2      	bgt.n	80117ae <_printf_i+0x216>
 80117c8:	e7eb      	b.n	80117a2 <_printf_i+0x20a>
 80117ca:	2500      	movs	r5, #0
 80117cc:	f104 0619 	add.w	r6, r4, #25
 80117d0:	e7f5      	b.n	80117be <_printf_i+0x226>
 80117d2:	bf00      	nop
 80117d4:	080184b8 	.word	0x080184b8
 80117d8:	080184c9 	.word	0x080184c9

080117dc <_scanf_float>:
 80117dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e0:	b087      	sub	sp, #28
 80117e2:	4617      	mov	r7, r2
 80117e4:	9303      	str	r3, [sp, #12]
 80117e6:	688b      	ldr	r3, [r1, #8]
 80117e8:	1e5a      	subs	r2, r3, #1
 80117ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80117ee:	bf83      	ittte	hi
 80117f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80117f4:	195b      	addhi	r3, r3, r5
 80117f6:	9302      	strhi	r3, [sp, #8]
 80117f8:	2300      	movls	r3, #0
 80117fa:	bf86      	itte	hi
 80117fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011800:	608b      	strhi	r3, [r1, #8]
 8011802:	9302      	strls	r3, [sp, #8]
 8011804:	680b      	ldr	r3, [r1, #0]
 8011806:	468b      	mov	fp, r1
 8011808:	2500      	movs	r5, #0
 801180a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801180e:	f84b 3b1c 	str.w	r3, [fp], #28
 8011812:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011816:	4680      	mov	r8, r0
 8011818:	460c      	mov	r4, r1
 801181a:	465e      	mov	r6, fp
 801181c:	46aa      	mov	sl, r5
 801181e:	46a9      	mov	r9, r5
 8011820:	9501      	str	r5, [sp, #4]
 8011822:	68a2      	ldr	r2, [r4, #8]
 8011824:	b152      	cbz	r2, 801183c <_scanf_float+0x60>
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	2b4e      	cmp	r3, #78	; 0x4e
 801182c:	d864      	bhi.n	80118f8 <_scanf_float+0x11c>
 801182e:	2b40      	cmp	r3, #64	; 0x40
 8011830:	d83c      	bhi.n	80118ac <_scanf_float+0xd0>
 8011832:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011836:	b2c8      	uxtb	r0, r1
 8011838:	280e      	cmp	r0, #14
 801183a:	d93a      	bls.n	80118b2 <_scanf_float+0xd6>
 801183c:	f1b9 0f00 	cmp.w	r9, #0
 8011840:	d003      	beq.n	801184a <_scanf_float+0x6e>
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011848:	6023      	str	r3, [r4, #0]
 801184a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801184e:	f1ba 0f01 	cmp.w	sl, #1
 8011852:	f200 8113 	bhi.w	8011a7c <_scanf_float+0x2a0>
 8011856:	455e      	cmp	r6, fp
 8011858:	f200 8105 	bhi.w	8011a66 <_scanf_float+0x28a>
 801185c:	2501      	movs	r5, #1
 801185e:	4628      	mov	r0, r5
 8011860:	b007      	add	sp, #28
 8011862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011866:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801186a:	2a0d      	cmp	r2, #13
 801186c:	d8e6      	bhi.n	801183c <_scanf_float+0x60>
 801186e:	a101      	add	r1, pc, #4	; (adr r1, 8011874 <_scanf_float+0x98>)
 8011870:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011874:	080119b3 	.word	0x080119b3
 8011878:	0801183d 	.word	0x0801183d
 801187c:	0801183d 	.word	0x0801183d
 8011880:	0801183d 	.word	0x0801183d
 8011884:	08011a13 	.word	0x08011a13
 8011888:	080119eb 	.word	0x080119eb
 801188c:	0801183d 	.word	0x0801183d
 8011890:	0801183d 	.word	0x0801183d
 8011894:	080119c1 	.word	0x080119c1
 8011898:	0801183d 	.word	0x0801183d
 801189c:	0801183d 	.word	0x0801183d
 80118a0:	0801183d 	.word	0x0801183d
 80118a4:	0801183d 	.word	0x0801183d
 80118a8:	08011979 	.word	0x08011979
 80118ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80118b0:	e7db      	b.n	801186a <_scanf_float+0x8e>
 80118b2:	290e      	cmp	r1, #14
 80118b4:	d8c2      	bhi.n	801183c <_scanf_float+0x60>
 80118b6:	a001      	add	r0, pc, #4	; (adr r0, 80118bc <_scanf_float+0xe0>)
 80118b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80118bc:	0801196b 	.word	0x0801196b
 80118c0:	0801183d 	.word	0x0801183d
 80118c4:	0801196b 	.word	0x0801196b
 80118c8:	080119ff 	.word	0x080119ff
 80118cc:	0801183d 	.word	0x0801183d
 80118d0:	08011919 	.word	0x08011919
 80118d4:	08011955 	.word	0x08011955
 80118d8:	08011955 	.word	0x08011955
 80118dc:	08011955 	.word	0x08011955
 80118e0:	08011955 	.word	0x08011955
 80118e4:	08011955 	.word	0x08011955
 80118e8:	08011955 	.word	0x08011955
 80118ec:	08011955 	.word	0x08011955
 80118f0:	08011955 	.word	0x08011955
 80118f4:	08011955 	.word	0x08011955
 80118f8:	2b6e      	cmp	r3, #110	; 0x6e
 80118fa:	d809      	bhi.n	8011910 <_scanf_float+0x134>
 80118fc:	2b60      	cmp	r3, #96	; 0x60
 80118fe:	d8b2      	bhi.n	8011866 <_scanf_float+0x8a>
 8011900:	2b54      	cmp	r3, #84	; 0x54
 8011902:	d077      	beq.n	80119f4 <_scanf_float+0x218>
 8011904:	2b59      	cmp	r3, #89	; 0x59
 8011906:	d199      	bne.n	801183c <_scanf_float+0x60>
 8011908:	2d07      	cmp	r5, #7
 801190a:	d197      	bne.n	801183c <_scanf_float+0x60>
 801190c:	2508      	movs	r5, #8
 801190e:	e029      	b.n	8011964 <_scanf_float+0x188>
 8011910:	2b74      	cmp	r3, #116	; 0x74
 8011912:	d06f      	beq.n	80119f4 <_scanf_float+0x218>
 8011914:	2b79      	cmp	r3, #121	; 0x79
 8011916:	e7f6      	b.n	8011906 <_scanf_float+0x12a>
 8011918:	6821      	ldr	r1, [r4, #0]
 801191a:	05c8      	lsls	r0, r1, #23
 801191c:	d51a      	bpl.n	8011954 <_scanf_float+0x178>
 801191e:	9b02      	ldr	r3, [sp, #8]
 8011920:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011924:	6021      	str	r1, [r4, #0]
 8011926:	f109 0901 	add.w	r9, r9, #1
 801192a:	b11b      	cbz	r3, 8011934 <_scanf_float+0x158>
 801192c:	3b01      	subs	r3, #1
 801192e:	3201      	adds	r2, #1
 8011930:	9302      	str	r3, [sp, #8]
 8011932:	60a2      	str	r2, [r4, #8]
 8011934:	68a3      	ldr	r3, [r4, #8]
 8011936:	3b01      	subs	r3, #1
 8011938:	60a3      	str	r3, [r4, #8]
 801193a:	6923      	ldr	r3, [r4, #16]
 801193c:	3301      	adds	r3, #1
 801193e:	6123      	str	r3, [r4, #16]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	3b01      	subs	r3, #1
 8011944:	2b00      	cmp	r3, #0
 8011946:	607b      	str	r3, [r7, #4]
 8011948:	f340 8084 	ble.w	8011a54 <_scanf_float+0x278>
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	3301      	adds	r3, #1
 8011950:	603b      	str	r3, [r7, #0]
 8011952:	e766      	b.n	8011822 <_scanf_float+0x46>
 8011954:	eb1a 0f05 	cmn.w	sl, r5
 8011958:	f47f af70 	bne.w	801183c <_scanf_float+0x60>
 801195c:	6822      	ldr	r2, [r4, #0]
 801195e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011962:	6022      	str	r2, [r4, #0]
 8011964:	f806 3b01 	strb.w	r3, [r6], #1
 8011968:	e7e4      	b.n	8011934 <_scanf_float+0x158>
 801196a:	6822      	ldr	r2, [r4, #0]
 801196c:	0610      	lsls	r0, r2, #24
 801196e:	f57f af65 	bpl.w	801183c <_scanf_float+0x60>
 8011972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011976:	e7f4      	b.n	8011962 <_scanf_float+0x186>
 8011978:	f1ba 0f00 	cmp.w	sl, #0
 801197c:	d10e      	bne.n	801199c <_scanf_float+0x1c0>
 801197e:	f1b9 0f00 	cmp.w	r9, #0
 8011982:	d10e      	bne.n	80119a2 <_scanf_float+0x1c6>
 8011984:	6822      	ldr	r2, [r4, #0]
 8011986:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801198a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801198e:	d108      	bne.n	80119a2 <_scanf_float+0x1c6>
 8011990:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011994:	6022      	str	r2, [r4, #0]
 8011996:	f04f 0a01 	mov.w	sl, #1
 801199a:	e7e3      	b.n	8011964 <_scanf_float+0x188>
 801199c:	f1ba 0f02 	cmp.w	sl, #2
 80119a0:	d055      	beq.n	8011a4e <_scanf_float+0x272>
 80119a2:	2d01      	cmp	r5, #1
 80119a4:	d002      	beq.n	80119ac <_scanf_float+0x1d0>
 80119a6:	2d04      	cmp	r5, #4
 80119a8:	f47f af48 	bne.w	801183c <_scanf_float+0x60>
 80119ac:	3501      	adds	r5, #1
 80119ae:	b2ed      	uxtb	r5, r5
 80119b0:	e7d8      	b.n	8011964 <_scanf_float+0x188>
 80119b2:	f1ba 0f01 	cmp.w	sl, #1
 80119b6:	f47f af41 	bne.w	801183c <_scanf_float+0x60>
 80119ba:	f04f 0a02 	mov.w	sl, #2
 80119be:	e7d1      	b.n	8011964 <_scanf_float+0x188>
 80119c0:	b97d      	cbnz	r5, 80119e2 <_scanf_float+0x206>
 80119c2:	f1b9 0f00 	cmp.w	r9, #0
 80119c6:	f47f af3c 	bne.w	8011842 <_scanf_float+0x66>
 80119ca:	6822      	ldr	r2, [r4, #0]
 80119cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80119d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80119d4:	f47f af39 	bne.w	801184a <_scanf_float+0x6e>
 80119d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80119dc:	6022      	str	r2, [r4, #0]
 80119de:	2501      	movs	r5, #1
 80119e0:	e7c0      	b.n	8011964 <_scanf_float+0x188>
 80119e2:	2d03      	cmp	r5, #3
 80119e4:	d0e2      	beq.n	80119ac <_scanf_float+0x1d0>
 80119e6:	2d05      	cmp	r5, #5
 80119e8:	e7de      	b.n	80119a8 <_scanf_float+0x1cc>
 80119ea:	2d02      	cmp	r5, #2
 80119ec:	f47f af26 	bne.w	801183c <_scanf_float+0x60>
 80119f0:	2503      	movs	r5, #3
 80119f2:	e7b7      	b.n	8011964 <_scanf_float+0x188>
 80119f4:	2d06      	cmp	r5, #6
 80119f6:	f47f af21 	bne.w	801183c <_scanf_float+0x60>
 80119fa:	2507      	movs	r5, #7
 80119fc:	e7b2      	b.n	8011964 <_scanf_float+0x188>
 80119fe:	6822      	ldr	r2, [r4, #0]
 8011a00:	0591      	lsls	r1, r2, #22
 8011a02:	f57f af1b 	bpl.w	801183c <_scanf_float+0x60>
 8011a06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011a0a:	6022      	str	r2, [r4, #0]
 8011a0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a10:	e7a8      	b.n	8011964 <_scanf_float+0x188>
 8011a12:	6822      	ldr	r2, [r4, #0]
 8011a14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011a18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011a1c:	d006      	beq.n	8011a2c <_scanf_float+0x250>
 8011a1e:	0550      	lsls	r0, r2, #21
 8011a20:	f57f af0c 	bpl.w	801183c <_scanf_float+0x60>
 8011a24:	f1b9 0f00 	cmp.w	r9, #0
 8011a28:	f43f af0f 	beq.w	801184a <_scanf_float+0x6e>
 8011a2c:	0591      	lsls	r1, r2, #22
 8011a2e:	bf58      	it	pl
 8011a30:	9901      	ldrpl	r1, [sp, #4]
 8011a32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011a36:	bf58      	it	pl
 8011a38:	eba9 0101 	subpl.w	r1, r9, r1
 8011a3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011a40:	bf58      	it	pl
 8011a42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011a46:	6022      	str	r2, [r4, #0]
 8011a48:	f04f 0900 	mov.w	r9, #0
 8011a4c:	e78a      	b.n	8011964 <_scanf_float+0x188>
 8011a4e:	f04f 0a03 	mov.w	sl, #3
 8011a52:	e787      	b.n	8011964 <_scanf_float+0x188>
 8011a54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011a58:	4639      	mov	r1, r7
 8011a5a:	4640      	mov	r0, r8
 8011a5c:	4798      	blx	r3
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	f43f aedf 	beq.w	8011822 <_scanf_float+0x46>
 8011a64:	e6ea      	b.n	801183c <_scanf_float+0x60>
 8011a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a6e:	463a      	mov	r2, r7
 8011a70:	4640      	mov	r0, r8
 8011a72:	4798      	blx	r3
 8011a74:	6923      	ldr	r3, [r4, #16]
 8011a76:	3b01      	subs	r3, #1
 8011a78:	6123      	str	r3, [r4, #16]
 8011a7a:	e6ec      	b.n	8011856 <_scanf_float+0x7a>
 8011a7c:	1e6b      	subs	r3, r5, #1
 8011a7e:	2b06      	cmp	r3, #6
 8011a80:	d825      	bhi.n	8011ace <_scanf_float+0x2f2>
 8011a82:	2d02      	cmp	r5, #2
 8011a84:	d836      	bhi.n	8011af4 <_scanf_float+0x318>
 8011a86:	455e      	cmp	r6, fp
 8011a88:	f67f aee8 	bls.w	801185c <_scanf_float+0x80>
 8011a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a94:	463a      	mov	r2, r7
 8011a96:	4640      	mov	r0, r8
 8011a98:	4798      	blx	r3
 8011a9a:	6923      	ldr	r3, [r4, #16]
 8011a9c:	3b01      	subs	r3, #1
 8011a9e:	6123      	str	r3, [r4, #16]
 8011aa0:	e7f1      	b.n	8011a86 <_scanf_float+0x2aa>
 8011aa2:	9802      	ldr	r0, [sp, #8]
 8011aa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011aa8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011aac:	9002      	str	r0, [sp, #8]
 8011aae:	463a      	mov	r2, r7
 8011ab0:	4640      	mov	r0, r8
 8011ab2:	4798      	blx	r3
 8011ab4:	6923      	ldr	r3, [r4, #16]
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	6123      	str	r3, [r4, #16]
 8011aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011abe:	fa5f fa8a 	uxtb.w	sl, sl
 8011ac2:	f1ba 0f02 	cmp.w	sl, #2
 8011ac6:	d1ec      	bne.n	8011aa2 <_scanf_float+0x2c6>
 8011ac8:	3d03      	subs	r5, #3
 8011aca:	b2ed      	uxtb	r5, r5
 8011acc:	1b76      	subs	r6, r6, r5
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	05da      	lsls	r2, r3, #23
 8011ad2:	d52f      	bpl.n	8011b34 <_scanf_float+0x358>
 8011ad4:	055b      	lsls	r3, r3, #21
 8011ad6:	d510      	bpl.n	8011afa <_scanf_float+0x31e>
 8011ad8:	455e      	cmp	r6, fp
 8011ada:	f67f aebf 	bls.w	801185c <_scanf_float+0x80>
 8011ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011ae2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011ae6:	463a      	mov	r2, r7
 8011ae8:	4640      	mov	r0, r8
 8011aea:	4798      	blx	r3
 8011aec:	6923      	ldr	r3, [r4, #16]
 8011aee:	3b01      	subs	r3, #1
 8011af0:	6123      	str	r3, [r4, #16]
 8011af2:	e7f1      	b.n	8011ad8 <_scanf_float+0x2fc>
 8011af4:	46aa      	mov	sl, r5
 8011af6:	9602      	str	r6, [sp, #8]
 8011af8:	e7df      	b.n	8011aba <_scanf_float+0x2de>
 8011afa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011afe:	6923      	ldr	r3, [r4, #16]
 8011b00:	2965      	cmp	r1, #101	; 0x65
 8011b02:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b06:	f106 35ff 	add.w	r5, r6, #4294967295
 8011b0a:	6123      	str	r3, [r4, #16]
 8011b0c:	d00c      	beq.n	8011b28 <_scanf_float+0x34c>
 8011b0e:	2945      	cmp	r1, #69	; 0x45
 8011b10:	d00a      	beq.n	8011b28 <_scanf_float+0x34c>
 8011b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b16:	463a      	mov	r2, r7
 8011b18:	4640      	mov	r0, r8
 8011b1a:	4798      	blx	r3
 8011b1c:	6923      	ldr	r3, [r4, #16]
 8011b1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011b22:	3b01      	subs	r3, #1
 8011b24:	1eb5      	subs	r5, r6, #2
 8011b26:	6123      	str	r3, [r4, #16]
 8011b28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b2c:	463a      	mov	r2, r7
 8011b2e:	4640      	mov	r0, r8
 8011b30:	4798      	blx	r3
 8011b32:	462e      	mov	r6, r5
 8011b34:	6825      	ldr	r5, [r4, #0]
 8011b36:	f015 0510 	ands.w	r5, r5, #16
 8011b3a:	d158      	bne.n	8011bee <_scanf_float+0x412>
 8011b3c:	7035      	strb	r5, [r6, #0]
 8011b3e:	6823      	ldr	r3, [r4, #0]
 8011b40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b48:	d11c      	bne.n	8011b84 <_scanf_float+0x3a8>
 8011b4a:	9b01      	ldr	r3, [sp, #4]
 8011b4c:	454b      	cmp	r3, r9
 8011b4e:	eba3 0209 	sub.w	r2, r3, r9
 8011b52:	d124      	bne.n	8011b9e <_scanf_float+0x3c2>
 8011b54:	2200      	movs	r2, #0
 8011b56:	4659      	mov	r1, fp
 8011b58:	4640      	mov	r0, r8
 8011b5a:	f002 fba1 	bl	80142a0 <_strtod_r>
 8011b5e:	9b03      	ldr	r3, [sp, #12]
 8011b60:	6821      	ldr	r1, [r4, #0]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f011 0f02 	tst.w	r1, #2
 8011b68:	ec57 6b10 	vmov	r6, r7, d0
 8011b6c:	f103 0204 	add.w	r2, r3, #4
 8011b70:	d020      	beq.n	8011bb4 <_scanf_float+0x3d8>
 8011b72:	9903      	ldr	r1, [sp, #12]
 8011b74:	600a      	str	r2, [r1, #0]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	e9c3 6700 	strd	r6, r7, [r3]
 8011b7c:	68e3      	ldr	r3, [r4, #12]
 8011b7e:	3301      	adds	r3, #1
 8011b80:	60e3      	str	r3, [r4, #12]
 8011b82:	e66c      	b.n	801185e <_scanf_float+0x82>
 8011b84:	9b04      	ldr	r3, [sp, #16]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d0e4      	beq.n	8011b54 <_scanf_float+0x378>
 8011b8a:	9905      	ldr	r1, [sp, #20]
 8011b8c:	230a      	movs	r3, #10
 8011b8e:	462a      	mov	r2, r5
 8011b90:	3101      	adds	r1, #1
 8011b92:	4640      	mov	r0, r8
 8011b94:	f002 fc0c 	bl	80143b0 <_strtol_r>
 8011b98:	9b04      	ldr	r3, [sp, #16]
 8011b9a:	9e05      	ldr	r6, [sp, #20]
 8011b9c:	1ac2      	subs	r2, r0, r3
 8011b9e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011ba2:	429e      	cmp	r6, r3
 8011ba4:	bf28      	it	cs
 8011ba6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011baa:	4912      	ldr	r1, [pc, #72]	; (8011bf4 <_scanf_float+0x418>)
 8011bac:	4630      	mov	r0, r6
 8011bae:	f000 f8e7 	bl	8011d80 <siprintf>
 8011bb2:	e7cf      	b.n	8011b54 <_scanf_float+0x378>
 8011bb4:	f011 0f04 	tst.w	r1, #4
 8011bb8:	9903      	ldr	r1, [sp, #12]
 8011bba:	600a      	str	r2, [r1, #0]
 8011bbc:	d1db      	bne.n	8011b76 <_scanf_float+0x39a>
 8011bbe:	f8d3 8000 	ldr.w	r8, [r3]
 8011bc2:	ee10 2a10 	vmov	r2, s0
 8011bc6:	ee10 0a10 	vmov	r0, s0
 8011bca:	463b      	mov	r3, r7
 8011bcc:	4639      	mov	r1, r7
 8011bce:	f7ee ffdd 	bl	8000b8c <__aeabi_dcmpun>
 8011bd2:	b128      	cbz	r0, 8011be0 <_scanf_float+0x404>
 8011bd4:	4808      	ldr	r0, [pc, #32]	; (8011bf8 <_scanf_float+0x41c>)
 8011bd6:	f000 f9dd 	bl	8011f94 <nanf>
 8011bda:	ed88 0a00 	vstr	s0, [r8]
 8011bde:	e7cd      	b.n	8011b7c <_scanf_float+0x3a0>
 8011be0:	4630      	mov	r0, r6
 8011be2:	4639      	mov	r1, r7
 8011be4:	f7ef f830 	bl	8000c48 <__aeabi_d2f>
 8011be8:	f8c8 0000 	str.w	r0, [r8]
 8011bec:	e7c6      	b.n	8011b7c <_scanf_float+0x3a0>
 8011bee:	2500      	movs	r5, #0
 8011bf0:	e635      	b.n	801185e <_scanf_float+0x82>
 8011bf2:	bf00      	nop
 8011bf4:	080184da 	.word	0x080184da
 8011bf8:	0801886d 	.word	0x0801886d

08011bfc <std>:
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	b510      	push	{r4, lr}
 8011c00:	4604      	mov	r4, r0
 8011c02:	e9c0 3300 	strd	r3, r3, [r0]
 8011c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c0a:	6083      	str	r3, [r0, #8]
 8011c0c:	8181      	strh	r1, [r0, #12]
 8011c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8011c10:	81c2      	strh	r2, [r0, #14]
 8011c12:	6183      	str	r3, [r0, #24]
 8011c14:	4619      	mov	r1, r3
 8011c16:	2208      	movs	r2, #8
 8011c18:	305c      	adds	r0, #92	; 0x5c
 8011c1a:	f000 f914 	bl	8011e46 <memset>
 8011c1e:	4b0d      	ldr	r3, [pc, #52]	; (8011c54 <std+0x58>)
 8011c20:	6263      	str	r3, [r4, #36]	; 0x24
 8011c22:	4b0d      	ldr	r3, [pc, #52]	; (8011c58 <std+0x5c>)
 8011c24:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c26:	4b0d      	ldr	r3, [pc, #52]	; (8011c5c <std+0x60>)
 8011c28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c2a:	4b0d      	ldr	r3, [pc, #52]	; (8011c60 <std+0x64>)
 8011c2c:	6323      	str	r3, [r4, #48]	; 0x30
 8011c2e:	4b0d      	ldr	r3, [pc, #52]	; (8011c64 <std+0x68>)
 8011c30:	6224      	str	r4, [r4, #32]
 8011c32:	429c      	cmp	r4, r3
 8011c34:	d006      	beq.n	8011c44 <std+0x48>
 8011c36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011c3a:	4294      	cmp	r4, r2
 8011c3c:	d002      	beq.n	8011c44 <std+0x48>
 8011c3e:	33d0      	adds	r3, #208	; 0xd0
 8011c40:	429c      	cmp	r4, r3
 8011c42:	d105      	bne.n	8011c50 <std+0x54>
 8011c44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c4c:	f000 b988 	b.w	8011f60 <__retarget_lock_init_recursive>
 8011c50:	bd10      	pop	{r4, pc}
 8011c52:	bf00      	nop
 8011c54:	08011dc1 	.word	0x08011dc1
 8011c58:	08011de3 	.word	0x08011de3
 8011c5c:	08011e1b 	.word	0x08011e1b
 8011c60:	08011e3f 	.word	0x08011e3f
 8011c64:	20000e2c 	.word	0x20000e2c

08011c68 <stdio_exit_handler>:
 8011c68:	4a02      	ldr	r2, [pc, #8]	; (8011c74 <stdio_exit_handler+0xc>)
 8011c6a:	4903      	ldr	r1, [pc, #12]	; (8011c78 <stdio_exit_handler+0x10>)
 8011c6c:	4803      	ldr	r0, [pc, #12]	; (8011c7c <stdio_exit_handler+0x14>)
 8011c6e:	f000 b869 	b.w	8011d44 <_fwalk_sglue>
 8011c72:	bf00      	nop
 8011c74:	20000024 	.word	0x20000024
 8011c78:	080149f9 	.word	0x080149f9
 8011c7c:	20000030 	.word	0x20000030

08011c80 <cleanup_stdio>:
 8011c80:	6841      	ldr	r1, [r0, #4]
 8011c82:	4b0c      	ldr	r3, [pc, #48]	; (8011cb4 <cleanup_stdio+0x34>)
 8011c84:	4299      	cmp	r1, r3
 8011c86:	b510      	push	{r4, lr}
 8011c88:	4604      	mov	r4, r0
 8011c8a:	d001      	beq.n	8011c90 <cleanup_stdio+0x10>
 8011c8c:	f002 feb4 	bl	80149f8 <_fflush_r>
 8011c90:	68a1      	ldr	r1, [r4, #8]
 8011c92:	4b09      	ldr	r3, [pc, #36]	; (8011cb8 <cleanup_stdio+0x38>)
 8011c94:	4299      	cmp	r1, r3
 8011c96:	d002      	beq.n	8011c9e <cleanup_stdio+0x1e>
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f002 fead 	bl	80149f8 <_fflush_r>
 8011c9e:	68e1      	ldr	r1, [r4, #12]
 8011ca0:	4b06      	ldr	r3, [pc, #24]	; (8011cbc <cleanup_stdio+0x3c>)
 8011ca2:	4299      	cmp	r1, r3
 8011ca4:	d004      	beq.n	8011cb0 <cleanup_stdio+0x30>
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cac:	f002 bea4 	b.w	80149f8 <_fflush_r>
 8011cb0:	bd10      	pop	{r4, pc}
 8011cb2:	bf00      	nop
 8011cb4:	20000e2c 	.word	0x20000e2c
 8011cb8:	20000e94 	.word	0x20000e94
 8011cbc:	20000efc 	.word	0x20000efc

08011cc0 <global_stdio_init.part.0>:
 8011cc0:	b510      	push	{r4, lr}
 8011cc2:	4b0b      	ldr	r3, [pc, #44]	; (8011cf0 <global_stdio_init.part.0+0x30>)
 8011cc4:	4c0b      	ldr	r4, [pc, #44]	; (8011cf4 <global_stdio_init.part.0+0x34>)
 8011cc6:	4a0c      	ldr	r2, [pc, #48]	; (8011cf8 <global_stdio_init.part.0+0x38>)
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	4620      	mov	r0, r4
 8011ccc:	2200      	movs	r2, #0
 8011cce:	2104      	movs	r1, #4
 8011cd0:	f7ff ff94 	bl	8011bfc <std>
 8011cd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011cd8:	2201      	movs	r2, #1
 8011cda:	2109      	movs	r1, #9
 8011cdc:	f7ff ff8e 	bl	8011bfc <std>
 8011ce0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011ce4:	2202      	movs	r2, #2
 8011ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cea:	2112      	movs	r1, #18
 8011cec:	f7ff bf86 	b.w	8011bfc <std>
 8011cf0:	20000f64 	.word	0x20000f64
 8011cf4:	20000e2c 	.word	0x20000e2c
 8011cf8:	08011c69 	.word	0x08011c69

08011cfc <__sfp_lock_acquire>:
 8011cfc:	4801      	ldr	r0, [pc, #4]	; (8011d04 <__sfp_lock_acquire+0x8>)
 8011cfe:	f000 b930 	b.w	8011f62 <__retarget_lock_acquire_recursive>
 8011d02:	bf00      	nop
 8011d04:	20000f6d 	.word	0x20000f6d

08011d08 <__sfp_lock_release>:
 8011d08:	4801      	ldr	r0, [pc, #4]	; (8011d10 <__sfp_lock_release+0x8>)
 8011d0a:	f000 b92b 	b.w	8011f64 <__retarget_lock_release_recursive>
 8011d0e:	bf00      	nop
 8011d10:	20000f6d 	.word	0x20000f6d

08011d14 <__sinit>:
 8011d14:	b510      	push	{r4, lr}
 8011d16:	4604      	mov	r4, r0
 8011d18:	f7ff fff0 	bl	8011cfc <__sfp_lock_acquire>
 8011d1c:	6a23      	ldr	r3, [r4, #32]
 8011d1e:	b11b      	cbz	r3, 8011d28 <__sinit+0x14>
 8011d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d24:	f7ff bff0 	b.w	8011d08 <__sfp_lock_release>
 8011d28:	4b04      	ldr	r3, [pc, #16]	; (8011d3c <__sinit+0x28>)
 8011d2a:	6223      	str	r3, [r4, #32]
 8011d2c:	4b04      	ldr	r3, [pc, #16]	; (8011d40 <__sinit+0x2c>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1f5      	bne.n	8011d20 <__sinit+0xc>
 8011d34:	f7ff ffc4 	bl	8011cc0 <global_stdio_init.part.0>
 8011d38:	e7f2      	b.n	8011d20 <__sinit+0xc>
 8011d3a:	bf00      	nop
 8011d3c:	08011c81 	.word	0x08011c81
 8011d40:	20000f64 	.word	0x20000f64

08011d44 <_fwalk_sglue>:
 8011d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d48:	4607      	mov	r7, r0
 8011d4a:	4688      	mov	r8, r1
 8011d4c:	4614      	mov	r4, r2
 8011d4e:	2600      	movs	r6, #0
 8011d50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d54:	f1b9 0901 	subs.w	r9, r9, #1
 8011d58:	d505      	bpl.n	8011d66 <_fwalk_sglue+0x22>
 8011d5a:	6824      	ldr	r4, [r4, #0]
 8011d5c:	2c00      	cmp	r4, #0
 8011d5e:	d1f7      	bne.n	8011d50 <_fwalk_sglue+0xc>
 8011d60:	4630      	mov	r0, r6
 8011d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d66:	89ab      	ldrh	r3, [r5, #12]
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d907      	bls.n	8011d7c <_fwalk_sglue+0x38>
 8011d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d70:	3301      	adds	r3, #1
 8011d72:	d003      	beq.n	8011d7c <_fwalk_sglue+0x38>
 8011d74:	4629      	mov	r1, r5
 8011d76:	4638      	mov	r0, r7
 8011d78:	47c0      	blx	r8
 8011d7a:	4306      	orrs	r6, r0
 8011d7c:	3568      	adds	r5, #104	; 0x68
 8011d7e:	e7e9      	b.n	8011d54 <_fwalk_sglue+0x10>

08011d80 <siprintf>:
 8011d80:	b40e      	push	{r1, r2, r3}
 8011d82:	b500      	push	{lr}
 8011d84:	b09c      	sub	sp, #112	; 0x70
 8011d86:	ab1d      	add	r3, sp, #116	; 0x74
 8011d88:	9002      	str	r0, [sp, #8]
 8011d8a:	9006      	str	r0, [sp, #24]
 8011d8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011d90:	4809      	ldr	r0, [pc, #36]	; (8011db8 <siprintf+0x38>)
 8011d92:	9107      	str	r1, [sp, #28]
 8011d94:	9104      	str	r1, [sp, #16]
 8011d96:	4909      	ldr	r1, [pc, #36]	; (8011dbc <siprintf+0x3c>)
 8011d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d9c:	9105      	str	r1, [sp, #20]
 8011d9e:	6800      	ldr	r0, [r0, #0]
 8011da0:	9301      	str	r3, [sp, #4]
 8011da2:	a902      	add	r1, sp, #8
 8011da4:	f002 fb60 	bl	8014468 <_svfiprintf_r>
 8011da8:	9b02      	ldr	r3, [sp, #8]
 8011daa:	2200      	movs	r2, #0
 8011dac:	701a      	strb	r2, [r3, #0]
 8011dae:	b01c      	add	sp, #112	; 0x70
 8011db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011db4:	b003      	add	sp, #12
 8011db6:	4770      	bx	lr
 8011db8:	2000007c 	.word	0x2000007c
 8011dbc:	ffff0208 	.word	0xffff0208

08011dc0 <__sread>:
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	460c      	mov	r4, r1
 8011dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dc8:	f000 f86c 	bl	8011ea4 <_read_r>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	bfab      	itete	ge
 8011dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8011dd4:	181b      	addge	r3, r3, r0
 8011dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011dda:	bfac      	ite	ge
 8011ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8011dde:	81a3      	strhlt	r3, [r4, #12]
 8011de0:	bd10      	pop	{r4, pc}

08011de2 <__swrite>:
 8011de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de6:	461f      	mov	r7, r3
 8011de8:	898b      	ldrh	r3, [r1, #12]
 8011dea:	05db      	lsls	r3, r3, #23
 8011dec:	4605      	mov	r5, r0
 8011dee:	460c      	mov	r4, r1
 8011df0:	4616      	mov	r6, r2
 8011df2:	d505      	bpl.n	8011e00 <__swrite+0x1e>
 8011df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df8:	2302      	movs	r3, #2
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f000 f840 	bl	8011e80 <_lseek_r>
 8011e00:	89a3      	ldrh	r3, [r4, #12]
 8011e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e0a:	81a3      	strh	r3, [r4, #12]
 8011e0c:	4632      	mov	r2, r6
 8011e0e:	463b      	mov	r3, r7
 8011e10:	4628      	mov	r0, r5
 8011e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e16:	f000 b867 	b.w	8011ee8 <_write_r>

08011e1a <__sseek>:
 8011e1a:	b510      	push	{r4, lr}
 8011e1c:	460c      	mov	r4, r1
 8011e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e22:	f000 f82d 	bl	8011e80 <_lseek_r>
 8011e26:	1c43      	adds	r3, r0, #1
 8011e28:	89a3      	ldrh	r3, [r4, #12]
 8011e2a:	bf15      	itete	ne
 8011e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011e36:	81a3      	strheq	r3, [r4, #12]
 8011e38:	bf18      	it	ne
 8011e3a:	81a3      	strhne	r3, [r4, #12]
 8011e3c:	bd10      	pop	{r4, pc}

08011e3e <__sclose>:
 8011e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e42:	f000 b80d 	b.w	8011e60 <_close_r>

08011e46 <memset>:
 8011e46:	4402      	add	r2, r0
 8011e48:	4603      	mov	r3, r0
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	d100      	bne.n	8011e50 <memset+0xa>
 8011e4e:	4770      	bx	lr
 8011e50:	f803 1b01 	strb.w	r1, [r3], #1
 8011e54:	e7f9      	b.n	8011e4a <memset+0x4>
	...

08011e58 <_localeconv_r>:
 8011e58:	4800      	ldr	r0, [pc, #0]	; (8011e5c <_localeconv_r+0x4>)
 8011e5a:	4770      	bx	lr
 8011e5c:	20000170 	.word	0x20000170

08011e60 <_close_r>:
 8011e60:	b538      	push	{r3, r4, r5, lr}
 8011e62:	4d06      	ldr	r5, [pc, #24]	; (8011e7c <_close_r+0x1c>)
 8011e64:	2300      	movs	r3, #0
 8011e66:	4604      	mov	r4, r0
 8011e68:	4608      	mov	r0, r1
 8011e6a:	602b      	str	r3, [r5, #0]
 8011e6c:	f7f2 fb01 	bl	8004472 <_close>
 8011e70:	1c43      	adds	r3, r0, #1
 8011e72:	d102      	bne.n	8011e7a <_close_r+0x1a>
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	b103      	cbz	r3, 8011e7a <_close_r+0x1a>
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	bd38      	pop	{r3, r4, r5, pc}
 8011e7c:	20000f68 	.word	0x20000f68

08011e80 <_lseek_r>:
 8011e80:	b538      	push	{r3, r4, r5, lr}
 8011e82:	4d07      	ldr	r5, [pc, #28]	; (8011ea0 <_lseek_r+0x20>)
 8011e84:	4604      	mov	r4, r0
 8011e86:	4608      	mov	r0, r1
 8011e88:	4611      	mov	r1, r2
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	602a      	str	r2, [r5, #0]
 8011e8e:	461a      	mov	r2, r3
 8011e90:	f7f2 fb16 	bl	80044c0 <_lseek>
 8011e94:	1c43      	adds	r3, r0, #1
 8011e96:	d102      	bne.n	8011e9e <_lseek_r+0x1e>
 8011e98:	682b      	ldr	r3, [r5, #0]
 8011e9a:	b103      	cbz	r3, 8011e9e <_lseek_r+0x1e>
 8011e9c:	6023      	str	r3, [r4, #0]
 8011e9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ea0:	20000f68 	.word	0x20000f68

08011ea4 <_read_r>:
 8011ea4:	b538      	push	{r3, r4, r5, lr}
 8011ea6:	4d07      	ldr	r5, [pc, #28]	; (8011ec4 <_read_r+0x20>)
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	4608      	mov	r0, r1
 8011eac:	4611      	mov	r1, r2
 8011eae:	2200      	movs	r2, #0
 8011eb0:	602a      	str	r2, [r5, #0]
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	f7f2 faa4 	bl	8004400 <_read>
 8011eb8:	1c43      	adds	r3, r0, #1
 8011eba:	d102      	bne.n	8011ec2 <_read_r+0x1e>
 8011ebc:	682b      	ldr	r3, [r5, #0]
 8011ebe:	b103      	cbz	r3, 8011ec2 <_read_r+0x1e>
 8011ec0:	6023      	str	r3, [r4, #0]
 8011ec2:	bd38      	pop	{r3, r4, r5, pc}
 8011ec4:	20000f68 	.word	0x20000f68

08011ec8 <_sbrk_r>:
 8011ec8:	b538      	push	{r3, r4, r5, lr}
 8011eca:	4d06      	ldr	r5, [pc, #24]	; (8011ee4 <_sbrk_r+0x1c>)
 8011ecc:	2300      	movs	r3, #0
 8011ece:	4604      	mov	r4, r0
 8011ed0:	4608      	mov	r0, r1
 8011ed2:	602b      	str	r3, [r5, #0]
 8011ed4:	f7f2 fb02 	bl	80044dc <_sbrk>
 8011ed8:	1c43      	adds	r3, r0, #1
 8011eda:	d102      	bne.n	8011ee2 <_sbrk_r+0x1a>
 8011edc:	682b      	ldr	r3, [r5, #0]
 8011ede:	b103      	cbz	r3, 8011ee2 <_sbrk_r+0x1a>
 8011ee0:	6023      	str	r3, [r4, #0]
 8011ee2:	bd38      	pop	{r3, r4, r5, pc}
 8011ee4:	20000f68 	.word	0x20000f68

08011ee8 <_write_r>:
 8011ee8:	b538      	push	{r3, r4, r5, lr}
 8011eea:	4d07      	ldr	r5, [pc, #28]	; (8011f08 <_write_r+0x20>)
 8011eec:	4604      	mov	r4, r0
 8011eee:	4608      	mov	r0, r1
 8011ef0:	4611      	mov	r1, r2
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	602a      	str	r2, [r5, #0]
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	f7f2 fa9f 	bl	800443a <_write>
 8011efc:	1c43      	adds	r3, r0, #1
 8011efe:	d102      	bne.n	8011f06 <_write_r+0x1e>
 8011f00:	682b      	ldr	r3, [r5, #0]
 8011f02:	b103      	cbz	r3, 8011f06 <_write_r+0x1e>
 8011f04:	6023      	str	r3, [r4, #0]
 8011f06:	bd38      	pop	{r3, r4, r5, pc}
 8011f08:	20000f68 	.word	0x20000f68

08011f0c <__errno>:
 8011f0c:	4b01      	ldr	r3, [pc, #4]	; (8011f14 <__errno+0x8>)
 8011f0e:	6818      	ldr	r0, [r3, #0]
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	2000007c 	.word	0x2000007c

08011f18 <__libc_init_array>:
 8011f18:	b570      	push	{r4, r5, r6, lr}
 8011f1a:	4d0d      	ldr	r5, [pc, #52]	; (8011f50 <__libc_init_array+0x38>)
 8011f1c:	4c0d      	ldr	r4, [pc, #52]	; (8011f54 <__libc_init_array+0x3c>)
 8011f1e:	1b64      	subs	r4, r4, r5
 8011f20:	10a4      	asrs	r4, r4, #2
 8011f22:	2600      	movs	r6, #0
 8011f24:	42a6      	cmp	r6, r4
 8011f26:	d109      	bne.n	8011f3c <__libc_init_array+0x24>
 8011f28:	4d0b      	ldr	r5, [pc, #44]	; (8011f58 <__libc_init_array+0x40>)
 8011f2a:	4c0c      	ldr	r4, [pc, #48]	; (8011f5c <__libc_init_array+0x44>)
 8011f2c:	f003 fd16 	bl	801595c <_init>
 8011f30:	1b64      	subs	r4, r4, r5
 8011f32:	10a4      	asrs	r4, r4, #2
 8011f34:	2600      	movs	r6, #0
 8011f36:	42a6      	cmp	r6, r4
 8011f38:	d105      	bne.n	8011f46 <__libc_init_array+0x2e>
 8011f3a:	bd70      	pop	{r4, r5, r6, pc}
 8011f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f40:	4798      	blx	r3
 8011f42:	3601      	adds	r6, #1
 8011f44:	e7ee      	b.n	8011f24 <__libc_init_array+0xc>
 8011f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f4a:	4798      	blx	r3
 8011f4c:	3601      	adds	r6, #1
 8011f4e:	e7f2      	b.n	8011f36 <__libc_init_array+0x1e>
 8011f50:	080188d8 	.word	0x080188d8
 8011f54:	080188d8 	.word	0x080188d8
 8011f58:	080188d8 	.word	0x080188d8
 8011f5c:	080188dc 	.word	0x080188dc

08011f60 <__retarget_lock_init_recursive>:
 8011f60:	4770      	bx	lr

08011f62 <__retarget_lock_acquire_recursive>:
 8011f62:	4770      	bx	lr

08011f64 <__retarget_lock_release_recursive>:
 8011f64:	4770      	bx	lr

08011f66 <strcpy>:
 8011f66:	4603      	mov	r3, r0
 8011f68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f6c:	f803 2b01 	strb.w	r2, [r3], #1
 8011f70:	2a00      	cmp	r2, #0
 8011f72:	d1f9      	bne.n	8011f68 <strcpy+0x2>
 8011f74:	4770      	bx	lr

08011f76 <memcpy>:
 8011f76:	440a      	add	r2, r1
 8011f78:	4291      	cmp	r1, r2
 8011f7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f7e:	d100      	bne.n	8011f82 <memcpy+0xc>
 8011f80:	4770      	bx	lr
 8011f82:	b510      	push	{r4, lr}
 8011f84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f8c:	4291      	cmp	r1, r2
 8011f8e:	d1f9      	bne.n	8011f84 <memcpy+0xe>
 8011f90:	bd10      	pop	{r4, pc}
	...

08011f94 <nanf>:
 8011f94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f9c <nanf+0x8>
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	7fc00000 	.word	0x7fc00000

08011fa0 <quorem>:
 8011fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	6903      	ldr	r3, [r0, #16]
 8011fa6:	690c      	ldr	r4, [r1, #16]
 8011fa8:	42a3      	cmp	r3, r4
 8011faa:	4607      	mov	r7, r0
 8011fac:	db7e      	blt.n	80120ac <quorem+0x10c>
 8011fae:	3c01      	subs	r4, #1
 8011fb0:	f101 0814 	add.w	r8, r1, #20
 8011fb4:	f100 0514 	add.w	r5, r0, #20
 8011fb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fbc:	9301      	str	r3, [sp, #4]
 8011fbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011fc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011fce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011fd2:	fbb2 f6f3 	udiv	r6, r2, r3
 8011fd6:	d331      	bcc.n	801203c <quorem+0x9c>
 8011fd8:	f04f 0e00 	mov.w	lr, #0
 8011fdc:	4640      	mov	r0, r8
 8011fde:	46ac      	mov	ip, r5
 8011fe0:	46f2      	mov	sl, lr
 8011fe2:	f850 2b04 	ldr.w	r2, [r0], #4
 8011fe6:	b293      	uxth	r3, r2
 8011fe8:	fb06 e303 	mla	r3, r6, r3, lr
 8011fec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011ff0:	0c1a      	lsrs	r2, r3, #16
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	ebaa 0303 	sub.w	r3, sl, r3
 8011ff8:	f8dc a000 	ldr.w	sl, [ip]
 8011ffc:	fa13 f38a 	uxtah	r3, r3, sl
 8012000:	fb06 220e 	mla	r2, r6, lr, r2
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	9b00      	ldr	r3, [sp, #0]
 8012008:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801200c:	b292      	uxth	r2, r2
 801200e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012012:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012016:	f8bd 3000 	ldrh.w	r3, [sp]
 801201a:	4581      	cmp	r9, r0
 801201c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012020:	f84c 3b04 	str.w	r3, [ip], #4
 8012024:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012028:	d2db      	bcs.n	8011fe2 <quorem+0x42>
 801202a:	f855 300b 	ldr.w	r3, [r5, fp]
 801202e:	b92b      	cbnz	r3, 801203c <quorem+0x9c>
 8012030:	9b01      	ldr	r3, [sp, #4]
 8012032:	3b04      	subs	r3, #4
 8012034:	429d      	cmp	r5, r3
 8012036:	461a      	mov	r2, r3
 8012038:	d32c      	bcc.n	8012094 <quorem+0xf4>
 801203a:	613c      	str	r4, [r7, #16]
 801203c:	4638      	mov	r0, r7
 801203e:	f001 f93b 	bl	80132b8 <__mcmp>
 8012042:	2800      	cmp	r0, #0
 8012044:	db22      	blt.n	801208c <quorem+0xec>
 8012046:	3601      	adds	r6, #1
 8012048:	4629      	mov	r1, r5
 801204a:	2000      	movs	r0, #0
 801204c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012050:	f8d1 c000 	ldr.w	ip, [r1]
 8012054:	b293      	uxth	r3, r2
 8012056:	1ac3      	subs	r3, r0, r3
 8012058:	0c12      	lsrs	r2, r2, #16
 801205a:	fa13 f38c 	uxtah	r3, r3, ip
 801205e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012066:	b29b      	uxth	r3, r3
 8012068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801206c:	45c1      	cmp	r9, r8
 801206e:	f841 3b04 	str.w	r3, [r1], #4
 8012072:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012076:	d2e9      	bcs.n	801204c <quorem+0xac>
 8012078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801207c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012080:	b922      	cbnz	r2, 801208c <quorem+0xec>
 8012082:	3b04      	subs	r3, #4
 8012084:	429d      	cmp	r5, r3
 8012086:	461a      	mov	r2, r3
 8012088:	d30a      	bcc.n	80120a0 <quorem+0x100>
 801208a:	613c      	str	r4, [r7, #16]
 801208c:	4630      	mov	r0, r6
 801208e:	b003      	add	sp, #12
 8012090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012094:	6812      	ldr	r2, [r2, #0]
 8012096:	3b04      	subs	r3, #4
 8012098:	2a00      	cmp	r2, #0
 801209a:	d1ce      	bne.n	801203a <quorem+0x9a>
 801209c:	3c01      	subs	r4, #1
 801209e:	e7c9      	b.n	8012034 <quorem+0x94>
 80120a0:	6812      	ldr	r2, [r2, #0]
 80120a2:	3b04      	subs	r3, #4
 80120a4:	2a00      	cmp	r2, #0
 80120a6:	d1f0      	bne.n	801208a <quorem+0xea>
 80120a8:	3c01      	subs	r4, #1
 80120aa:	e7eb      	b.n	8012084 <quorem+0xe4>
 80120ac:	2000      	movs	r0, #0
 80120ae:	e7ee      	b.n	801208e <quorem+0xee>

080120b0 <_dtoa_r>:
 80120b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b4:	ed2d 8b04 	vpush	{d8-d9}
 80120b8:	69c5      	ldr	r5, [r0, #28]
 80120ba:	b093      	sub	sp, #76	; 0x4c
 80120bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80120c0:	ec57 6b10 	vmov	r6, r7, d0
 80120c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80120c8:	9107      	str	r1, [sp, #28]
 80120ca:	4604      	mov	r4, r0
 80120cc:	920a      	str	r2, [sp, #40]	; 0x28
 80120ce:	930d      	str	r3, [sp, #52]	; 0x34
 80120d0:	b975      	cbnz	r5, 80120f0 <_dtoa_r+0x40>
 80120d2:	2010      	movs	r0, #16
 80120d4:	f7fe fe68 	bl	8010da8 <malloc>
 80120d8:	4602      	mov	r2, r0
 80120da:	61e0      	str	r0, [r4, #28]
 80120dc:	b920      	cbnz	r0, 80120e8 <_dtoa_r+0x38>
 80120de:	4bae      	ldr	r3, [pc, #696]	; (8012398 <_dtoa_r+0x2e8>)
 80120e0:	21ef      	movs	r1, #239	; 0xef
 80120e2:	48ae      	ldr	r0, [pc, #696]	; (801239c <_dtoa_r+0x2ec>)
 80120e4:	f002 fd7c 	bl	8014be0 <__assert_func>
 80120e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80120ec:	6005      	str	r5, [r0, #0]
 80120ee:	60c5      	str	r5, [r0, #12]
 80120f0:	69e3      	ldr	r3, [r4, #28]
 80120f2:	6819      	ldr	r1, [r3, #0]
 80120f4:	b151      	cbz	r1, 801210c <_dtoa_r+0x5c>
 80120f6:	685a      	ldr	r2, [r3, #4]
 80120f8:	604a      	str	r2, [r1, #4]
 80120fa:	2301      	movs	r3, #1
 80120fc:	4093      	lsls	r3, r2
 80120fe:	608b      	str	r3, [r1, #8]
 8012100:	4620      	mov	r0, r4
 8012102:	f000 fe53 	bl	8012dac <_Bfree>
 8012106:	69e3      	ldr	r3, [r4, #28]
 8012108:	2200      	movs	r2, #0
 801210a:	601a      	str	r2, [r3, #0]
 801210c:	1e3b      	subs	r3, r7, #0
 801210e:	bfbb      	ittet	lt
 8012110:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012114:	9303      	strlt	r3, [sp, #12]
 8012116:	2300      	movge	r3, #0
 8012118:	2201      	movlt	r2, #1
 801211a:	bfac      	ite	ge
 801211c:	f8c8 3000 	strge.w	r3, [r8]
 8012120:	f8c8 2000 	strlt.w	r2, [r8]
 8012124:	4b9e      	ldr	r3, [pc, #632]	; (80123a0 <_dtoa_r+0x2f0>)
 8012126:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801212a:	ea33 0308 	bics.w	r3, r3, r8
 801212e:	d11b      	bne.n	8012168 <_dtoa_r+0xb8>
 8012130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012132:	f242 730f 	movw	r3, #9999	; 0x270f
 8012136:	6013      	str	r3, [r2, #0]
 8012138:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801213c:	4333      	orrs	r3, r6
 801213e:	f000 8593 	beq.w	8012c68 <_dtoa_r+0xbb8>
 8012142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012144:	b963      	cbnz	r3, 8012160 <_dtoa_r+0xb0>
 8012146:	4b97      	ldr	r3, [pc, #604]	; (80123a4 <_dtoa_r+0x2f4>)
 8012148:	e027      	b.n	801219a <_dtoa_r+0xea>
 801214a:	4b97      	ldr	r3, [pc, #604]	; (80123a8 <_dtoa_r+0x2f8>)
 801214c:	9300      	str	r3, [sp, #0]
 801214e:	3308      	adds	r3, #8
 8012150:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012152:	6013      	str	r3, [r2, #0]
 8012154:	9800      	ldr	r0, [sp, #0]
 8012156:	b013      	add	sp, #76	; 0x4c
 8012158:	ecbd 8b04 	vpop	{d8-d9}
 801215c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012160:	4b90      	ldr	r3, [pc, #576]	; (80123a4 <_dtoa_r+0x2f4>)
 8012162:	9300      	str	r3, [sp, #0]
 8012164:	3303      	adds	r3, #3
 8012166:	e7f3      	b.n	8012150 <_dtoa_r+0xa0>
 8012168:	ed9d 7b02 	vldr	d7, [sp, #8]
 801216c:	2200      	movs	r2, #0
 801216e:	ec51 0b17 	vmov	r0, r1, d7
 8012172:	eeb0 8a47 	vmov.f32	s16, s14
 8012176:	eef0 8a67 	vmov.f32	s17, s15
 801217a:	2300      	movs	r3, #0
 801217c:	f7ee fcd4 	bl	8000b28 <__aeabi_dcmpeq>
 8012180:	4681      	mov	r9, r0
 8012182:	b160      	cbz	r0, 801219e <_dtoa_r+0xee>
 8012184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012186:	2301      	movs	r3, #1
 8012188:	6013      	str	r3, [r2, #0]
 801218a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801218c:	2b00      	cmp	r3, #0
 801218e:	f000 8568 	beq.w	8012c62 <_dtoa_r+0xbb2>
 8012192:	4b86      	ldr	r3, [pc, #536]	; (80123ac <_dtoa_r+0x2fc>)
 8012194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012196:	6013      	str	r3, [r2, #0]
 8012198:	3b01      	subs	r3, #1
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	e7da      	b.n	8012154 <_dtoa_r+0xa4>
 801219e:	aa10      	add	r2, sp, #64	; 0x40
 80121a0:	a911      	add	r1, sp, #68	; 0x44
 80121a2:	4620      	mov	r0, r4
 80121a4:	eeb0 0a48 	vmov.f32	s0, s16
 80121a8:	eef0 0a68 	vmov.f32	s1, s17
 80121ac:	f001 f99a 	bl	80134e4 <__d2b>
 80121b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80121b4:	4682      	mov	sl, r0
 80121b6:	2d00      	cmp	r5, #0
 80121b8:	d07f      	beq.n	80122ba <_dtoa_r+0x20a>
 80121ba:	ee18 3a90 	vmov	r3, s17
 80121be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80121c6:	ec51 0b18 	vmov	r0, r1, d8
 80121ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80121ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80121d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80121d6:	4619      	mov	r1, r3
 80121d8:	2200      	movs	r2, #0
 80121da:	4b75      	ldr	r3, [pc, #468]	; (80123b0 <_dtoa_r+0x300>)
 80121dc:	f7ee f884 	bl	80002e8 <__aeabi_dsub>
 80121e0:	a367      	add	r3, pc, #412	; (adr r3, 8012380 <_dtoa_r+0x2d0>)
 80121e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e6:	f7ee fa37 	bl	8000658 <__aeabi_dmul>
 80121ea:	a367      	add	r3, pc, #412	; (adr r3, 8012388 <_dtoa_r+0x2d8>)
 80121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f0:	f7ee f87c 	bl	80002ec <__adddf3>
 80121f4:	4606      	mov	r6, r0
 80121f6:	4628      	mov	r0, r5
 80121f8:	460f      	mov	r7, r1
 80121fa:	f7ee f9c3 	bl	8000584 <__aeabi_i2d>
 80121fe:	a364      	add	r3, pc, #400	; (adr r3, 8012390 <_dtoa_r+0x2e0>)
 8012200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012204:	f7ee fa28 	bl	8000658 <__aeabi_dmul>
 8012208:	4602      	mov	r2, r0
 801220a:	460b      	mov	r3, r1
 801220c:	4630      	mov	r0, r6
 801220e:	4639      	mov	r1, r7
 8012210:	f7ee f86c 	bl	80002ec <__adddf3>
 8012214:	4606      	mov	r6, r0
 8012216:	460f      	mov	r7, r1
 8012218:	f7ee fcce 	bl	8000bb8 <__aeabi_d2iz>
 801221c:	2200      	movs	r2, #0
 801221e:	4683      	mov	fp, r0
 8012220:	2300      	movs	r3, #0
 8012222:	4630      	mov	r0, r6
 8012224:	4639      	mov	r1, r7
 8012226:	f7ee fc89 	bl	8000b3c <__aeabi_dcmplt>
 801222a:	b148      	cbz	r0, 8012240 <_dtoa_r+0x190>
 801222c:	4658      	mov	r0, fp
 801222e:	f7ee f9a9 	bl	8000584 <__aeabi_i2d>
 8012232:	4632      	mov	r2, r6
 8012234:	463b      	mov	r3, r7
 8012236:	f7ee fc77 	bl	8000b28 <__aeabi_dcmpeq>
 801223a:	b908      	cbnz	r0, 8012240 <_dtoa_r+0x190>
 801223c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012240:	f1bb 0f16 	cmp.w	fp, #22
 8012244:	d857      	bhi.n	80122f6 <_dtoa_r+0x246>
 8012246:	4b5b      	ldr	r3, [pc, #364]	; (80123b4 <_dtoa_r+0x304>)
 8012248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	ec51 0b18 	vmov	r0, r1, d8
 8012254:	f7ee fc72 	bl	8000b3c <__aeabi_dcmplt>
 8012258:	2800      	cmp	r0, #0
 801225a:	d04e      	beq.n	80122fa <_dtoa_r+0x24a>
 801225c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012260:	2300      	movs	r3, #0
 8012262:	930c      	str	r3, [sp, #48]	; 0x30
 8012264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012266:	1b5b      	subs	r3, r3, r5
 8012268:	1e5a      	subs	r2, r3, #1
 801226a:	bf45      	ittet	mi
 801226c:	f1c3 0301 	rsbmi	r3, r3, #1
 8012270:	9305      	strmi	r3, [sp, #20]
 8012272:	2300      	movpl	r3, #0
 8012274:	2300      	movmi	r3, #0
 8012276:	9206      	str	r2, [sp, #24]
 8012278:	bf54      	ite	pl
 801227a:	9305      	strpl	r3, [sp, #20]
 801227c:	9306      	strmi	r3, [sp, #24]
 801227e:	f1bb 0f00 	cmp.w	fp, #0
 8012282:	db3c      	blt.n	80122fe <_dtoa_r+0x24e>
 8012284:	9b06      	ldr	r3, [sp, #24]
 8012286:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801228a:	445b      	add	r3, fp
 801228c:	9306      	str	r3, [sp, #24]
 801228e:	2300      	movs	r3, #0
 8012290:	9308      	str	r3, [sp, #32]
 8012292:	9b07      	ldr	r3, [sp, #28]
 8012294:	2b09      	cmp	r3, #9
 8012296:	d868      	bhi.n	801236a <_dtoa_r+0x2ba>
 8012298:	2b05      	cmp	r3, #5
 801229a:	bfc4      	itt	gt
 801229c:	3b04      	subgt	r3, #4
 801229e:	9307      	strgt	r3, [sp, #28]
 80122a0:	9b07      	ldr	r3, [sp, #28]
 80122a2:	f1a3 0302 	sub.w	r3, r3, #2
 80122a6:	bfcc      	ite	gt
 80122a8:	2500      	movgt	r5, #0
 80122aa:	2501      	movle	r5, #1
 80122ac:	2b03      	cmp	r3, #3
 80122ae:	f200 8085 	bhi.w	80123bc <_dtoa_r+0x30c>
 80122b2:	e8df f003 	tbb	[pc, r3]
 80122b6:	3b2e      	.short	0x3b2e
 80122b8:	5839      	.short	0x5839
 80122ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80122be:	441d      	add	r5, r3
 80122c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80122c4:	2b20      	cmp	r3, #32
 80122c6:	bfc1      	itttt	gt
 80122c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80122cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80122d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80122d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80122d8:	bfd6      	itet	le
 80122da:	f1c3 0320 	rsble	r3, r3, #32
 80122de:	ea48 0003 	orrgt.w	r0, r8, r3
 80122e2:	fa06 f003 	lslle.w	r0, r6, r3
 80122e6:	f7ee f93d 	bl	8000564 <__aeabi_ui2d>
 80122ea:	2201      	movs	r2, #1
 80122ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80122f0:	3d01      	subs	r5, #1
 80122f2:	920e      	str	r2, [sp, #56]	; 0x38
 80122f4:	e76f      	b.n	80121d6 <_dtoa_r+0x126>
 80122f6:	2301      	movs	r3, #1
 80122f8:	e7b3      	b.n	8012262 <_dtoa_r+0x1b2>
 80122fa:	900c      	str	r0, [sp, #48]	; 0x30
 80122fc:	e7b2      	b.n	8012264 <_dtoa_r+0x1b4>
 80122fe:	9b05      	ldr	r3, [sp, #20]
 8012300:	eba3 030b 	sub.w	r3, r3, fp
 8012304:	9305      	str	r3, [sp, #20]
 8012306:	f1cb 0300 	rsb	r3, fp, #0
 801230a:	9308      	str	r3, [sp, #32]
 801230c:	2300      	movs	r3, #0
 801230e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012310:	e7bf      	b.n	8012292 <_dtoa_r+0x1e2>
 8012312:	2300      	movs	r3, #0
 8012314:	9309      	str	r3, [sp, #36]	; 0x24
 8012316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012318:	2b00      	cmp	r3, #0
 801231a:	dc52      	bgt.n	80123c2 <_dtoa_r+0x312>
 801231c:	2301      	movs	r3, #1
 801231e:	9301      	str	r3, [sp, #4]
 8012320:	9304      	str	r3, [sp, #16]
 8012322:	461a      	mov	r2, r3
 8012324:	920a      	str	r2, [sp, #40]	; 0x28
 8012326:	e00b      	b.n	8012340 <_dtoa_r+0x290>
 8012328:	2301      	movs	r3, #1
 801232a:	e7f3      	b.n	8012314 <_dtoa_r+0x264>
 801232c:	2300      	movs	r3, #0
 801232e:	9309      	str	r3, [sp, #36]	; 0x24
 8012330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012332:	445b      	add	r3, fp
 8012334:	9301      	str	r3, [sp, #4]
 8012336:	3301      	adds	r3, #1
 8012338:	2b01      	cmp	r3, #1
 801233a:	9304      	str	r3, [sp, #16]
 801233c:	bfb8      	it	lt
 801233e:	2301      	movlt	r3, #1
 8012340:	69e0      	ldr	r0, [r4, #28]
 8012342:	2100      	movs	r1, #0
 8012344:	2204      	movs	r2, #4
 8012346:	f102 0614 	add.w	r6, r2, #20
 801234a:	429e      	cmp	r6, r3
 801234c:	d93d      	bls.n	80123ca <_dtoa_r+0x31a>
 801234e:	6041      	str	r1, [r0, #4]
 8012350:	4620      	mov	r0, r4
 8012352:	f000 fceb 	bl	8012d2c <_Balloc>
 8012356:	9000      	str	r0, [sp, #0]
 8012358:	2800      	cmp	r0, #0
 801235a:	d139      	bne.n	80123d0 <_dtoa_r+0x320>
 801235c:	4b16      	ldr	r3, [pc, #88]	; (80123b8 <_dtoa_r+0x308>)
 801235e:	4602      	mov	r2, r0
 8012360:	f240 11af 	movw	r1, #431	; 0x1af
 8012364:	e6bd      	b.n	80120e2 <_dtoa_r+0x32>
 8012366:	2301      	movs	r3, #1
 8012368:	e7e1      	b.n	801232e <_dtoa_r+0x27e>
 801236a:	2501      	movs	r5, #1
 801236c:	2300      	movs	r3, #0
 801236e:	9307      	str	r3, [sp, #28]
 8012370:	9509      	str	r5, [sp, #36]	; 0x24
 8012372:	f04f 33ff 	mov.w	r3, #4294967295
 8012376:	9301      	str	r3, [sp, #4]
 8012378:	9304      	str	r3, [sp, #16]
 801237a:	2200      	movs	r2, #0
 801237c:	2312      	movs	r3, #18
 801237e:	e7d1      	b.n	8012324 <_dtoa_r+0x274>
 8012380:	636f4361 	.word	0x636f4361
 8012384:	3fd287a7 	.word	0x3fd287a7
 8012388:	8b60c8b3 	.word	0x8b60c8b3
 801238c:	3fc68a28 	.word	0x3fc68a28
 8012390:	509f79fb 	.word	0x509f79fb
 8012394:	3fd34413 	.word	0x3fd34413
 8012398:	080184ec 	.word	0x080184ec
 801239c:	08018503 	.word	0x08018503
 80123a0:	7ff00000 	.word	0x7ff00000
 80123a4:	080184e8 	.word	0x080184e8
 80123a8:	080184df 	.word	0x080184df
 80123ac:	080184b7 	.word	0x080184b7
 80123b0:	3ff80000 	.word	0x3ff80000
 80123b4:	080185f0 	.word	0x080185f0
 80123b8:	0801855b 	.word	0x0801855b
 80123bc:	2301      	movs	r3, #1
 80123be:	9309      	str	r3, [sp, #36]	; 0x24
 80123c0:	e7d7      	b.n	8012372 <_dtoa_r+0x2c2>
 80123c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123c4:	9301      	str	r3, [sp, #4]
 80123c6:	9304      	str	r3, [sp, #16]
 80123c8:	e7ba      	b.n	8012340 <_dtoa_r+0x290>
 80123ca:	3101      	adds	r1, #1
 80123cc:	0052      	lsls	r2, r2, #1
 80123ce:	e7ba      	b.n	8012346 <_dtoa_r+0x296>
 80123d0:	69e3      	ldr	r3, [r4, #28]
 80123d2:	9a00      	ldr	r2, [sp, #0]
 80123d4:	601a      	str	r2, [r3, #0]
 80123d6:	9b04      	ldr	r3, [sp, #16]
 80123d8:	2b0e      	cmp	r3, #14
 80123da:	f200 80a8 	bhi.w	801252e <_dtoa_r+0x47e>
 80123de:	2d00      	cmp	r5, #0
 80123e0:	f000 80a5 	beq.w	801252e <_dtoa_r+0x47e>
 80123e4:	f1bb 0f00 	cmp.w	fp, #0
 80123e8:	dd38      	ble.n	801245c <_dtoa_r+0x3ac>
 80123ea:	4bc0      	ldr	r3, [pc, #768]	; (80126ec <_dtoa_r+0x63c>)
 80123ec:	f00b 020f 	and.w	r2, fp, #15
 80123f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80123f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80123fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012400:	d019      	beq.n	8012436 <_dtoa_r+0x386>
 8012402:	4bbb      	ldr	r3, [pc, #748]	; (80126f0 <_dtoa_r+0x640>)
 8012404:	ec51 0b18 	vmov	r0, r1, d8
 8012408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801240c:	f7ee fa4e 	bl	80008ac <__aeabi_ddiv>
 8012410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012414:	f008 080f 	and.w	r8, r8, #15
 8012418:	2503      	movs	r5, #3
 801241a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80126f0 <_dtoa_r+0x640>
 801241e:	f1b8 0f00 	cmp.w	r8, #0
 8012422:	d10a      	bne.n	801243a <_dtoa_r+0x38a>
 8012424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012428:	4632      	mov	r2, r6
 801242a:	463b      	mov	r3, r7
 801242c:	f7ee fa3e 	bl	80008ac <__aeabi_ddiv>
 8012430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012434:	e02b      	b.n	801248e <_dtoa_r+0x3de>
 8012436:	2502      	movs	r5, #2
 8012438:	e7ef      	b.n	801241a <_dtoa_r+0x36a>
 801243a:	f018 0f01 	tst.w	r8, #1
 801243e:	d008      	beq.n	8012452 <_dtoa_r+0x3a2>
 8012440:	4630      	mov	r0, r6
 8012442:	4639      	mov	r1, r7
 8012444:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012448:	f7ee f906 	bl	8000658 <__aeabi_dmul>
 801244c:	3501      	adds	r5, #1
 801244e:	4606      	mov	r6, r0
 8012450:	460f      	mov	r7, r1
 8012452:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012456:	f109 0908 	add.w	r9, r9, #8
 801245a:	e7e0      	b.n	801241e <_dtoa_r+0x36e>
 801245c:	f000 809f 	beq.w	801259e <_dtoa_r+0x4ee>
 8012460:	f1cb 0600 	rsb	r6, fp, #0
 8012464:	4ba1      	ldr	r3, [pc, #644]	; (80126ec <_dtoa_r+0x63c>)
 8012466:	4fa2      	ldr	r7, [pc, #648]	; (80126f0 <_dtoa_r+0x640>)
 8012468:	f006 020f 	and.w	r2, r6, #15
 801246c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012474:	ec51 0b18 	vmov	r0, r1, d8
 8012478:	f7ee f8ee 	bl	8000658 <__aeabi_dmul>
 801247c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012480:	1136      	asrs	r6, r6, #4
 8012482:	2300      	movs	r3, #0
 8012484:	2502      	movs	r5, #2
 8012486:	2e00      	cmp	r6, #0
 8012488:	d17e      	bne.n	8012588 <_dtoa_r+0x4d8>
 801248a:	2b00      	cmp	r3, #0
 801248c:	d1d0      	bne.n	8012430 <_dtoa_r+0x380>
 801248e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012490:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012494:	2b00      	cmp	r3, #0
 8012496:	f000 8084 	beq.w	80125a2 <_dtoa_r+0x4f2>
 801249a:	4b96      	ldr	r3, [pc, #600]	; (80126f4 <_dtoa_r+0x644>)
 801249c:	2200      	movs	r2, #0
 801249e:	4640      	mov	r0, r8
 80124a0:	4649      	mov	r1, r9
 80124a2:	f7ee fb4b 	bl	8000b3c <__aeabi_dcmplt>
 80124a6:	2800      	cmp	r0, #0
 80124a8:	d07b      	beq.n	80125a2 <_dtoa_r+0x4f2>
 80124aa:	9b04      	ldr	r3, [sp, #16]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d078      	beq.n	80125a2 <_dtoa_r+0x4f2>
 80124b0:	9b01      	ldr	r3, [sp, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	dd39      	ble.n	801252a <_dtoa_r+0x47a>
 80124b6:	4b90      	ldr	r3, [pc, #576]	; (80126f8 <_dtoa_r+0x648>)
 80124b8:	2200      	movs	r2, #0
 80124ba:	4640      	mov	r0, r8
 80124bc:	4649      	mov	r1, r9
 80124be:	f7ee f8cb 	bl	8000658 <__aeabi_dmul>
 80124c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124c6:	9e01      	ldr	r6, [sp, #4]
 80124c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80124cc:	3501      	adds	r5, #1
 80124ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80124d2:	4628      	mov	r0, r5
 80124d4:	f7ee f856 	bl	8000584 <__aeabi_i2d>
 80124d8:	4642      	mov	r2, r8
 80124da:	464b      	mov	r3, r9
 80124dc:	f7ee f8bc 	bl	8000658 <__aeabi_dmul>
 80124e0:	4b86      	ldr	r3, [pc, #536]	; (80126fc <_dtoa_r+0x64c>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	f7ed ff02 	bl	80002ec <__adddf3>
 80124e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80124ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124f0:	9303      	str	r3, [sp, #12]
 80124f2:	2e00      	cmp	r6, #0
 80124f4:	d158      	bne.n	80125a8 <_dtoa_r+0x4f8>
 80124f6:	4b82      	ldr	r3, [pc, #520]	; (8012700 <_dtoa_r+0x650>)
 80124f8:	2200      	movs	r2, #0
 80124fa:	4640      	mov	r0, r8
 80124fc:	4649      	mov	r1, r9
 80124fe:	f7ed fef3 	bl	80002e8 <__aeabi_dsub>
 8012502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012506:	4680      	mov	r8, r0
 8012508:	4689      	mov	r9, r1
 801250a:	f7ee fb35 	bl	8000b78 <__aeabi_dcmpgt>
 801250e:	2800      	cmp	r0, #0
 8012510:	f040 8296 	bne.w	8012a40 <_dtoa_r+0x990>
 8012514:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012518:	4640      	mov	r0, r8
 801251a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801251e:	4649      	mov	r1, r9
 8012520:	f7ee fb0c 	bl	8000b3c <__aeabi_dcmplt>
 8012524:	2800      	cmp	r0, #0
 8012526:	f040 8289 	bne.w	8012a3c <_dtoa_r+0x98c>
 801252a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801252e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012530:	2b00      	cmp	r3, #0
 8012532:	f2c0 814e 	blt.w	80127d2 <_dtoa_r+0x722>
 8012536:	f1bb 0f0e 	cmp.w	fp, #14
 801253a:	f300 814a 	bgt.w	80127d2 <_dtoa_r+0x722>
 801253e:	4b6b      	ldr	r3, [pc, #428]	; (80126ec <_dtoa_r+0x63c>)
 8012540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801254a:	2b00      	cmp	r3, #0
 801254c:	f280 80dc 	bge.w	8012708 <_dtoa_r+0x658>
 8012550:	9b04      	ldr	r3, [sp, #16]
 8012552:	2b00      	cmp	r3, #0
 8012554:	f300 80d8 	bgt.w	8012708 <_dtoa_r+0x658>
 8012558:	f040 826f 	bne.w	8012a3a <_dtoa_r+0x98a>
 801255c:	4b68      	ldr	r3, [pc, #416]	; (8012700 <_dtoa_r+0x650>)
 801255e:	2200      	movs	r2, #0
 8012560:	4640      	mov	r0, r8
 8012562:	4649      	mov	r1, r9
 8012564:	f7ee f878 	bl	8000658 <__aeabi_dmul>
 8012568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801256c:	f7ee fafa 	bl	8000b64 <__aeabi_dcmpge>
 8012570:	9e04      	ldr	r6, [sp, #16]
 8012572:	4637      	mov	r7, r6
 8012574:	2800      	cmp	r0, #0
 8012576:	f040 8245 	bne.w	8012a04 <_dtoa_r+0x954>
 801257a:	9d00      	ldr	r5, [sp, #0]
 801257c:	2331      	movs	r3, #49	; 0x31
 801257e:	f805 3b01 	strb.w	r3, [r5], #1
 8012582:	f10b 0b01 	add.w	fp, fp, #1
 8012586:	e241      	b.n	8012a0c <_dtoa_r+0x95c>
 8012588:	07f2      	lsls	r2, r6, #31
 801258a:	d505      	bpl.n	8012598 <_dtoa_r+0x4e8>
 801258c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012590:	f7ee f862 	bl	8000658 <__aeabi_dmul>
 8012594:	3501      	adds	r5, #1
 8012596:	2301      	movs	r3, #1
 8012598:	1076      	asrs	r6, r6, #1
 801259a:	3708      	adds	r7, #8
 801259c:	e773      	b.n	8012486 <_dtoa_r+0x3d6>
 801259e:	2502      	movs	r5, #2
 80125a0:	e775      	b.n	801248e <_dtoa_r+0x3de>
 80125a2:	9e04      	ldr	r6, [sp, #16]
 80125a4:	465f      	mov	r7, fp
 80125a6:	e792      	b.n	80124ce <_dtoa_r+0x41e>
 80125a8:	9900      	ldr	r1, [sp, #0]
 80125aa:	4b50      	ldr	r3, [pc, #320]	; (80126ec <_dtoa_r+0x63c>)
 80125ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125b0:	4431      	add	r1, r6
 80125b2:	9102      	str	r1, [sp, #8]
 80125b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125b6:	eeb0 9a47 	vmov.f32	s18, s14
 80125ba:	eef0 9a67 	vmov.f32	s19, s15
 80125be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80125c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80125c6:	2900      	cmp	r1, #0
 80125c8:	d044      	beq.n	8012654 <_dtoa_r+0x5a4>
 80125ca:	494e      	ldr	r1, [pc, #312]	; (8012704 <_dtoa_r+0x654>)
 80125cc:	2000      	movs	r0, #0
 80125ce:	f7ee f96d 	bl	80008ac <__aeabi_ddiv>
 80125d2:	ec53 2b19 	vmov	r2, r3, d9
 80125d6:	f7ed fe87 	bl	80002e8 <__aeabi_dsub>
 80125da:	9d00      	ldr	r5, [sp, #0]
 80125dc:	ec41 0b19 	vmov	d9, r0, r1
 80125e0:	4649      	mov	r1, r9
 80125e2:	4640      	mov	r0, r8
 80125e4:	f7ee fae8 	bl	8000bb8 <__aeabi_d2iz>
 80125e8:	4606      	mov	r6, r0
 80125ea:	f7ed ffcb 	bl	8000584 <__aeabi_i2d>
 80125ee:	4602      	mov	r2, r0
 80125f0:	460b      	mov	r3, r1
 80125f2:	4640      	mov	r0, r8
 80125f4:	4649      	mov	r1, r9
 80125f6:	f7ed fe77 	bl	80002e8 <__aeabi_dsub>
 80125fa:	3630      	adds	r6, #48	; 0x30
 80125fc:	f805 6b01 	strb.w	r6, [r5], #1
 8012600:	ec53 2b19 	vmov	r2, r3, d9
 8012604:	4680      	mov	r8, r0
 8012606:	4689      	mov	r9, r1
 8012608:	f7ee fa98 	bl	8000b3c <__aeabi_dcmplt>
 801260c:	2800      	cmp	r0, #0
 801260e:	d164      	bne.n	80126da <_dtoa_r+0x62a>
 8012610:	4642      	mov	r2, r8
 8012612:	464b      	mov	r3, r9
 8012614:	4937      	ldr	r1, [pc, #220]	; (80126f4 <_dtoa_r+0x644>)
 8012616:	2000      	movs	r0, #0
 8012618:	f7ed fe66 	bl	80002e8 <__aeabi_dsub>
 801261c:	ec53 2b19 	vmov	r2, r3, d9
 8012620:	f7ee fa8c 	bl	8000b3c <__aeabi_dcmplt>
 8012624:	2800      	cmp	r0, #0
 8012626:	f040 80b6 	bne.w	8012796 <_dtoa_r+0x6e6>
 801262a:	9b02      	ldr	r3, [sp, #8]
 801262c:	429d      	cmp	r5, r3
 801262e:	f43f af7c 	beq.w	801252a <_dtoa_r+0x47a>
 8012632:	4b31      	ldr	r3, [pc, #196]	; (80126f8 <_dtoa_r+0x648>)
 8012634:	ec51 0b19 	vmov	r0, r1, d9
 8012638:	2200      	movs	r2, #0
 801263a:	f7ee f80d 	bl	8000658 <__aeabi_dmul>
 801263e:	4b2e      	ldr	r3, [pc, #184]	; (80126f8 <_dtoa_r+0x648>)
 8012640:	ec41 0b19 	vmov	d9, r0, r1
 8012644:	2200      	movs	r2, #0
 8012646:	4640      	mov	r0, r8
 8012648:	4649      	mov	r1, r9
 801264a:	f7ee f805 	bl	8000658 <__aeabi_dmul>
 801264e:	4680      	mov	r8, r0
 8012650:	4689      	mov	r9, r1
 8012652:	e7c5      	b.n	80125e0 <_dtoa_r+0x530>
 8012654:	ec51 0b17 	vmov	r0, r1, d7
 8012658:	f7ed fffe 	bl	8000658 <__aeabi_dmul>
 801265c:	9b02      	ldr	r3, [sp, #8]
 801265e:	9d00      	ldr	r5, [sp, #0]
 8012660:	930f      	str	r3, [sp, #60]	; 0x3c
 8012662:	ec41 0b19 	vmov	d9, r0, r1
 8012666:	4649      	mov	r1, r9
 8012668:	4640      	mov	r0, r8
 801266a:	f7ee faa5 	bl	8000bb8 <__aeabi_d2iz>
 801266e:	4606      	mov	r6, r0
 8012670:	f7ed ff88 	bl	8000584 <__aeabi_i2d>
 8012674:	3630      	adds	r6, #48	; 0x30
 8012676:	4602      	mov	r2, r0
 8012678:	460b      	mov	r3, r1
 801267a:	4640      	mov	r0, r8
 801267c:	4649      	mov	r1, r9
 801267e:	f7ed fe33 	bl	80002e8 <__aeabi_dsub>
 8012682:	f805 6b01 	strb.w	r6, [r5], #1
 8012686:	9b02      	ldr	r3, [sp, #8]
 8012688:	429d      	cmp	r5, r3
 801268a:	4680      	mov	r8, r0
 801268c:	4689      	mov	r9, r1
 801268e:	f04f 0200 	mov.w	r2, #0
 8012692:	d124      	bne.n	80126de <_dtoa_r+0x62e>
 8012694:	4b1b      	ldr	r3, [pc, #108]	; (8012704 <_dtoa_r+0x654>)
 8012696:	ec51 0b19 	vmov	r0, r1, d9
 801269a:	f7ed fe27 	bl	80002ec <__adddf3>
 801269e:	4602      	mov	r2, r0
 80126a0:	460b      	mov	r3, r1
 80126a2:	4640      	mov	r0, r8
 80126a4:	4649      	mov	r1, r9
 80126a6:	f7ee fa67 	bl	8000b78 <__aeabi_dcmpgt>
 80126aa:	2800      	cmp	r0, #0
 80126ac:	d173      	bne.n	8012796 <_dtoa_r+0x6e6>
 80126ae:	ec53 2b19 	vmov	r2, r3, d9
 80126b2:	4914      	ldr	r1, [pc, #80]	; (8012704 <_dtoa_r+0x654>)
 80126b4:	2000      	movs	r0, #0
 80126b6:	f7ed fe17 	bl	80002e8 <__aeabi_dsub>
 80126ba:	4602      	mov	r2, r0
 80126bc:	460b      	mov	r3, r1
 80126be:	4640      	mov	r0, r8
 80126c0:	4649      	mov	r1, r9
 80126c2:	f7ee fa3b 	bl	8000b3c <__aeabi_dcmplt>
 80126c6:	2800      	cmp	r0, #0
 80126c8:	f43f af2f 	beq.w	801252a <_dtoa_r+0x47a>
 80126cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80126ce:	1e6b      	subs	r3, r5, #1
 80126d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80126d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80126d6:	2b30      	cmp	r3, #48	; 0x30
 80126d8:	d0f8      	beq.n	80126cc <_dtoa_r+0x61c>
 80126da:	46bb      	mov	fp, r7
 80126dc:	e04a      	b.n	8012774 <_dtoa_r+0x6c4>
 80126de:	4b06      	ldr	r3, [pc, #24]	; (80126f8 <_dtoa_r+0x648>)
 80126e0:	f7ed ffba 	bl	8000658 <__aeabi_dmul>
 80126e4:	4680      	mov	r8, r0
 80126e6:	4689      	mov	r9, r1
 80126e8:	e7bd      	b.n	8012666 <_dtoa_r+0x5b6>
 80126ea:	bf00      	nop
 80126ec:	080185f0 	.word	0x080185f0
 80126f0:	080185c8 	.word	0x080185c8
 80126f4:	3ff00000 	.word	0x3ff00000
 80126f8:	40240000 	.word	0x40240000
 80126fc:	401c0000 	.word	0x401c0000
 8012700:	40140000 	.word	0x40140000
 8012704:	3fe00000 	.word	0x3fe00000
 8012708:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801270c:	9d00      	ldr	r5, [sp, #0]
 801270e:	4642      	mov	r2, r8
 8012710:	464b      	mov	r3, r9
 8012712:	4630      	mov	r0, r6
 8012714:	4639      	mov	r1, r7
 8012716:	f7ee f8c9 	bl	80008ac <__aeabi_ddiv>
 801271a:	f7ee fa4d 	bl	8000bb8 <__aeabi_d2iz>
 801271e:	9001      	str	r0, [sp, #4]
 8012720:	f7ed ff30 	bl	8000584 <__aeabi_i2d>
 8012724:	4642      	mov	r2, r8
 8012726:	464b      	mov	r3, r9
 8012728:	f7ed ff96 	bl	8000658 <__aeabi_dmul>
 801272c:	4602      	mov	r2, r0
 801272e:	460b      	mov	r3, r1
 8012730:	4630      	mov	r0, r6
 8012732:	4639      	mov	r1, r7
 8012734:	f7ed fdd8 	bl	80002e8 <__aeabi_dsub>
 8012738:	9e01      	ldr	r6, [sp, #4]
 801273a:	9f04      	ldr	r7, [sp, #16]
 801273c:	3630      	adds	r6, #48	; 0x30
 801273e:	f805 6b01 	strb.w	r6, [r5], #1
 8012742:	9e00      	ldr	r6, [sp, #0]
 8012744:	1bae      	subs	r6, r5, r6
 8012746:	42b7      	cmp	r7, r6
 8012748:	4602      	mov	r2, r0
 801274a:	460b      	mov	r3, r1
 801274c:	d134      	bne.n	80127b8 <_dtoa_r+0x708>
 801274e:	f7ed fdcd 	bl	80002ec <__adddf3>
 8012752:	4642      	mov	r2, r8
 8012754:	464b      	mov	r3, r9
 8012756:	4606      	mov	r6, r0
 8012758:	460f      	mov	r7, r1
 801275a:	f7ee fa0d 	bl	8000b78 <__aeabi_dcmpgt>
 801275e:	b9c8      	cbnz	r0, 8012794 <_dtoa_r+0x6e4>
 8012760:	4642      	mov	r2, r8
 8012762:	464b      	mov	r3, r9
 8012764:	4630      	mov	r0, r6
 8012766:	4639      	mov	r1, r7
 8012768:	f7ee f9de 	bl	8000b28 <__aeabi_dcmpeq>
 801276c:	b110      	cbz	r0, 8012774 <_dtoa_r+0x6c4>
 801276e:	9b01      	ldr	r3, [sp, #4]
 8012770:	07db      	lsls	r3, r3, #31
 8012772:	d40f      	bmi.n	8012794 <_dtoa_r+0x6e4>
 8012774:	4651      	mov	r1, sl
 8012776:	4620      	mov	r0, r4
 8012778:	f000 fb18 	bl	8012dac <_Bfree>
 801277c:	2300      	movs	r3, #0
 801277e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012780:	702b      	strb	r3, [r5, #0]
 8012782:	f10b 0301 	add.w	r3, fp, #1
 8012786:	6013      	str	r3, [r2, #0]
 8012788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801278a:	2b00      	cmp	r3, #0
 801278c:	f43f ace2 	beq.w	8012154 <_dtoa_r+0xa4>
 8012790:	601d      	str	r5, [r3, #0]
 8012792:	e4df      	b.n	8012154 <_dtoa_r+0xa4>
 8012794:	465f      	mov	r7, fp
 8012796:	462b      	mov	r3, r5
 8012798:	461d      	mov	r5, r3
 801279a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801279e:	2a39      	cmp	r2, #57	; 0x39
 80127a0:	d106      	bne.n	80127b0 <_dtoa_r+0x700>
 80127a2:	9a00      	ldr	r2, [sp, #0]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d1f7      	bne.n	8012798 <_dtoa_r+0x6e8>
 80127a8:	9900      	ldr	r1, [sp, #0]
 80127aa:	2230      	movs	r2, #48	; 0x30
 80127ac:	3701      	adds	r7, #1
 80127ae:	700a      	strb	r2, [r1, #0]
 80127b0:	781a      	ldrb	r2, [r3, #0]
 80127b2:	3201      	adds	r2, #1
 80127b4:	701a      	strb	r2, [r3, #0]
 80127b6:	e790      	b.n	80126da <_dtoa_r+0x62a>
 80127b8:	4ba3      	ldr	r3, [pc, #652]	; (8012a48 <_dtoa_r+0x998>)
 80127ba:	2200      	movs	r2, #0
 80127bc:	f7ed ff4c 	bl	8000658 <__aeabi_dmul>
 80127c0:	2200      	movs	r2, #0
 80127c2:	2300      	movs	r3, #0
 80127c4:	4606      	mov	r6, r0
 80127c6:	460f      	mov	r7, r1
 80127c8:	f7ee f9ae 	bl	8000b28 <__aeabi_dcmpeq>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d09e      	beq.n	801270e <_dtoa_r+0x65e>
 80127d0:	e7d0      	b.n	8012774 <_dtoa_r+0x6c4>
 80127d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127d4:	2a00      	cmp	r2, #0
 80127d6:	f000 80ca 	beq.w	801296e <_dtoa_r+0x8be>
 80127da:	9a07      	ldr	r2, [sp, #28]
 80127dc:	2a01      	cmp	r2, #1
 80127de:	f300 80ad 	bgt.w	801293c <_dtoa_r+0x88c>
 80127e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127e4:	2a00      	cmp	r2, #0
 80127e6:	f000 80a5 	beq.w	8012934 <_dtoa_r+0x884>
 80127ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80127ee:	9e08      	ldr	r6, [sp, #32]
 80127f0:	9d05      	ldr	r5, [sp, #20]
 80127f2:	9a05      	ldr	r2, [sp, #20]
 80127f4:	441a      	add	r2, r3
 80127f6:	9205      	str	r2, [sp, #20]
 80127f8:	9a06      	ldr	r2, [sp, #24]
 80127fa:	2101      	movs	r1, #1
 80127fc:	441a      	add	r2, r3
 80127fe:	4620      	mov	r0, r4
 8012800:	9206      	str	r2, [sp, #24]
 8012802:	f000 fbd3 	bl	8012fac <__i2b>
 8012806:	4607      	mov	r7, r0
 8012808:	b165      	cbz	r5, 8012824 <_dtoa_r+0x774>
 801280a:	9b06      	ldr	r3, [sp, #24]
 801280c:	2b00      	cmp	r3, #0
 801280e:	dd09      	ble.n	8012824 <_dtoa_r+0x774>
 8012810:	42ab      	cmp	r3, r5
 8012812:	9a05      	ldr	r2, [sp, #20]
 8012814:	bfa8      	it	ge
 8012816:	462b      	movge	r3, r5
 8012818:	1ad2      	subs	r2, r2, r3
 801281a:	9205      	str	r2, [sp, #20]
 801281c:	9a06      	ldr	r2, [sp, #24]
 801281e:	1aed      	subs	r5, r5, r3
 8012820:	1ad3      	subs	r3, r2, r3
 8012822:	9306      	str	r3, [sp, #24]
 8012824:	9b08      	ldr	r3, [sp, #32]
 8012826:	b1f3      	cbz	r3, 8012866 <_dtoa_r+0x7b6>
 8012828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801282a:	2b00      	cmp	r3, #0
 801282c:	f000 80a3 	beq.w	8012976 <_dtoa_r+0x8c6>
 8012830:	2e00      	cmp	r6, #0
 8012832:	dd10      	ble.n	8012856 <_dtoa_r+0x7a6>
 8012834:	4639      	mov	r1, r7
 8012836:	4632      	mov	r2, r6
 8012838:	4620      	mov	r0, r4
 801283a:	f000 fc77 	bl	801312c <__pow5mult>
 801283e:	4652      	mov	r2, sl
 8012840:	4601      	mov	r1, r0
 8012842:	4607      	mov	r7, r0
 8012844:	4620      	mov	r0, r4
 8012846:	f000 fbc7 	bl	8012fd8 <__multiply>
 801284a:	4651      	mov	r1, sl
 801284c:	4680      	mov	r8, r0
 801284e:	4620      	mov	r0, r4
 8012850:	f000 faac 	bl	8012dac <_Bfree>
 8012854:	46c2      	mov	sl, r8
 8012856:	9b08      	ldr	r3, [sp, #32]
 8012858:	1b9a      	subs	r2, r3, r6
 801285a:	d004      	beq.n	8012866 <_dtoa_r+0x7b6>
 801285c:	4651      	mov	r1, sl
 801285e:	4620      	mov	r0, r4
 8012860:	f000 fc64 	bl	801312c <__pow5mult>
 8012864:	4682      	mov	sl, r0
 8012866:	2101      	movs	r1, #1
 8012868:	4620      	mov	r0, r4
 801286a:	f000 fb9f 	bl	8012fac <__i2b>
 801286e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012870:	2b00      	cmp	r3, #0
 8012872:	4606      	mov	r6, r0
 8012874:	f340 8081 	ble.w	801297a <_dtoa_r+0x8ca>
 8012878:	461a      	mov	r2, r3
 801287a:	4601      	mov	r1, r0
 801287c:	4620      	mov	r0, r4
 801287e:	f000 fc55 	bl	801312c <__pow5mult>
 8012882:	9b07      	ldr	r3, [sp, #28]
 8012884:	2b01      	cmp	r3, #1
 8012886:	4606      	mov	r6, r0
 8012888:	dd7a      	ble.n	8012980 <_dtoa_r+0x8d0>
 801288a:	f04f 0800 	mov.w	r8, #0
 801288e:	6933      	ldr	r3, [r6, #16]
 8012890:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012894:	6918      	ldr	r0, [r3, #16]
 8012896:	f000 fb3b 	bl	8012f10 <__hi0bits>
 801289a:	f1c0 0020 	rsb	r0, r0, #32
 801289e:	9b06      	ldr	r3, [sp, #24]
 80128a0:	4418      	add	r0, r3
 80128a2:	f010 001f 	ands.w	r0, r0, #31
 80128a6:	f000 8094 	beq.w	80129d2 <_dtoa_r+0x922>
 80128aa:	f1c0 0320 	rsb	r3, r0, #32
 80128ae:	2b04      	cmp	r3, #4
 80128b0:	f340 8085 	ble.w	80129be <_dtoa_r+0x90e>
 80128b4:	9b05      	ldr	r3, [sp, #20]
 80128b6:	f1c0 001c 	rsb	r0, r0, #28
 80128ba:	4403      	add	r3, r0
 80128bc:	9305      	str	r3, [sp, #20]
 80128be:	9b06      	ldr	r3, [sp, #24]
 80128c0:	4403      	add	r3, r0
 80128c2:	4405      	add	r5, r0
 80128c4:	9306      	str	r3, [sp, #24]
 80128c6:	9b05      	ldr	r3, [sp, #20]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	dd05      	ble.n	80128d8 <_dtoa_r+0x828>
 80128cc:	4651      	mov	r1, sl
 80128ce:	461a      	mov	r2, r3
 80128d0:	4620      	mov	r0, r4
 80128d2:	f000 fc85 	bl	80131e0 <__lshift>
 80128d6:	4682      	mov	sl, r0
 80128d8:	9b06      	ldr	r3, [sp, #24]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	dd05      	ble.n	80128ea <_dtoa_r+0x83a>
 80128de:	4631      	mov	r1, r6
 80128e0:	461a      	mov	r2, r3
 80128e2:	4620      	mov	r0, r4
 80128e4:	f000 fc7c 	bl	80131e0 <__lshift>
 80128e8:	4606      	mov	r6, r0
 80128ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d072      	beq.n	80129d6 <_dtoa_r+0x926>
 80128f0:	4631      	mov	r1, r6
 80128f2:	4650      	mov	r0, sl
 80128f4:	f000 fce0 	bl	80132b8 <__mcmp>
 80128f8:	2800      	cmp	r0, #0
 80128fa:	da6c      	bge.n	80129d6 <_dtoa_r+0x926>
 80128fc:	2300      	movs	r3, #0
 80128fe:	4651      	mov	r1, sl
 8012900:	220a      	movs	r2, #10
 8012902:	4620      	mov	r0, r4
 8012904:	f000 fa74 	bl	8012df0 <__multadd>
 8012908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801290a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801290e:	4682      	mov	sl, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	f000 81b0 	beq.w	8012c76 <_dtoa_r+0xbc6>
 8012916:	2300      	movs	r3, #0
 8012918:	4639      	mov	r1, r7
 801291a:	220a      	movs	r2, #10
 801291c:	4620      	mov	r0, r4
 801291e:	f000 fa67 	bl	8012df0 <__multadd>
 8012922:	9b01      	ldr	r3, [sp, #4]
 8012924:	2b00      	cmp	r3, #0
 8012926:	4607      	mov	r7, r0
 8012928:	f300 8096 	bgt.w	8012a58 <_dtoa_r+0x9a8>
 801292c:	9b07      	ldr	r3, [sp, #28]
 801292e:	2b02      	cmp	r3, #2
 8012930:	dc59      	bgt.n	80129e6 <_dtoa_r+0x936>
 8012932:	e091      	b.n	8012a58 <_dtoa_r+0x9a8>
 8012934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801293a:	e758      	b.n	80127ee <_dtoa_r+0x73e>
 801293c:	9b04      	ldr	r3, [sp, #16]
 801293e:	1e5e      	subs	r6, r3, #1
 8012940:	9b08      	ldr	r3, [sp, #32]
 8012942:	42b3      	cmp	r3, r6
 8012944:	bfbf      	itttt	lt
 8012946:	9b08      	ldrlt	r3, [sp, #32]
 8012948:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801294a:	9608      	strlt	r6, [sp, #32]
 801294c:	1af3      	sublt	r3, r6, r3
 801294e:	bfb4      	ite	lt
 8012950:	18d2      	addlt	r2, r2, r3
 8012952:	1b9e      	subge	r6, r3, r6
 8012954:	9b04      	ldr	r3, [sp, #16]
 8012956:	bfbc      	itt	lt
 8012958:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801295a:	2600      	movlt	r6, #0
 801295c:	2b00      	cmp	r3, #0
 801295e:	bfb7      	itett	lt
 8012960:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012964:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012968:	1a9d      	sublt	r5, r3, r2
 801296a:	2300      	movlt	r3, #0
 801296c:	e741      	b.n	80127f2 <_dtoa_r+0x742>
 801296e:	9e08      	ldr	r6, [sp, #32]
 8012970:	9d05      	ldr	r5, [sp, #20]
 8012972:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012974:	e748      	b.n	8012808 <_dtoa_r+0x758>
 8012976:	9a08      	ldr	r2, [sp, #32]
 8012978:	e770      	b.n	801285c <_dtoa_r+0x7ac>
 801297a:	9b07      	ldr	r3, [sp, #28]
 801297c:	2b01      	cmp	r3, #1
 801297e:	dc19      	bgt.n	80129b4 <_dtoa_r+0x904>
 8012980:	9b02      	ldr	r3, [sp, #8]
 8012982:	b9bb      	cbnz	r3, 80129b4 <_dtoa_r+0x904>
 8012984:	9b03      	ldr	r3, [sp, #12]
 8012986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801298a:	b99b      	cbnz	r3, 80129b4 <_dtoa_r+0x904>
 801298c:	9b03      	ldr	r3, [sp, #12]
 801298e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012992:	0d1b      	lsrs	r3, r3, #20
 8012994:	051b      	lsls	r3, r3, #20
 8012996:	b183      	cbz	r3, 80129ba <_dtoa_r+0x90a>
 8012998:	9b05      	ldr	r3, [sp, #20]
 801299a:	3301      	adds	r3, #1
 801299c:	9305      	str	r3, [sp, #20]
 801299e:	9b06      	ldr	r3, [sp, #24]
 80129a0:	3301      	adds	r3, #1
 80129a2:	9306      	str	r3, [sp, #24]
 80129a4:	f04f 0801 	mov.w	r8, #1
 80129a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	f47f af6f 	bne.w	801288e <_dtoa_r+0x7de>
 80129b0:	2001      	movs	r0, #1
 80129b2:	e774      	b.n	801289e <_dtoa_r+0x7ee>
 80129b4:	f04f 0800 	mov.w	r8, #0
 80129b8:	e7f6      	b.n	80129a8 <_dtoa_r+0x8f8>
 80129ba:	4698      	mov	r8, r3
 80129bc:	e7f4      	b.n	80129a8 <_dtoa_r+0x8f8>
 80129be:	d082      	beq.n	80128c6 <_dtoa_r+0x816>
 80129c0:	9a05      	ldr	r2, [sp, #20]
 80129c2:	331c      	adds	r3, #28
 80129c4:	441a      	add	r2, r3
 80129c6:	9205      	str	r2, [sp, #20]
 80129c8:	9a06      	ldr	r2, [sp, #24]
 80129ca:	441a      	add	r2, r3
 80129cc:	441d      	add	r5, r3
 80129ce:	9206      	str	r2, [sp, #24]
 80129d0:	e779      	b.n	80128c6 <_dtoa_r+0x816>
 80129d2:	4603      	mov	r3, r0
 80129d4:	e7f4      	b.n	80129c0 <_dtoa_r+0x910>
 80129d6:	9b04      	ldr	r3, [sp, #16]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	dc37      	bgt.n	8012a4c <_dtoa_r+0x99c>
 80129dc:	9b07      	ldr	r3, [sp, #28]
 80129de:	2b02      	cmp	r3, #2
 80129e0:	dd34      	ble.n	8012a4c <_dtoa_r+0x99c>
 80129e2:	9b04      	ldr	r3, [sp, #16]
 80129e4:	9301      	str	r3, [sp, #4]
 80129e6:	9b01      	ldr	r3, [sp, #4]
 80129e8:	b963      	cbnz	r3, 8012a04 <_dtoa_r+0x954>
 80129ea:	4631      	mov	r1, r6
 80129ec:	2205      	movs	r2, #5
 80129ee:	4620      	mov	r0, r4
 80129f0:	f000 f9fe 	bl	8012df0 <__multadd>
 80129f4:	4601      	mov	r1, r0
 80129f6:	4606      	mov	r6, r0
 80129f8:	4650      	mov	r0, sl
 80129fa:	f000 fc5d 	bl	80132b8 <__mcmp>
 80129fe:	2800      	cmp	r0, #0
 8012a00:	f73f adbb 	bgt.w	801257a <_dtoa_r+0x4ca>
 8012a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a06:	9d00      	ldr	r5, [sp, #0]
 8012a08:	ea6f 0b03 	mvn.w	fp, r3
 8012a0c:	f04f 0800 	mov.w	r8, #0
 8012a10:	4631      	mov	r1, r6
 8012a12:	4620      	mov	r0, r4
 8012a14:	f000 f9ca 	bl	8012dac <_Bfree>
 8012a18:	2f00      	cmp	r7, #0
 8012a1a:	f43f aeab 	beq.w	8012774 <_dtoa_r+0x6c4>
 8012a1e:	f1b8 0f00 	cmp.w	r8, #0
 8012a22:	d005      	beq.n	8012a30 <_dtoa_r+0x980>
 8012a24:	45b8      	cmp	r8, r7
 8012a26:	d003      	beq.n	8012a30 <_dtoa_r+0x980>
 8012a28:	4641      	mov	r1, r8
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f000 f9be 	bl	8012dac <_Bfree>
 8012a30:	4639      	mov	r1, r7
 8012a32:	4620      	mov	r0, r4
 8012a34:	f000 f9ba 	bl	8012dac <_Bfree>
 8012a38:	e69c      	b.n	8012774 <_dtoa_r+0x6c4>
 8012a3a:	2600      	movs	r6, #0
 8012a3c:	4637      	mov	r7, r6
 8012a3e:	e7e1      	b.n	8012a04 <_dtoa_r+0x954>
 8012a40:	46bb      	mov	fp, r7
 8012a42:	4637      	mov	r7, r6
 8012a44:	e599      	b.n	801257a <_dtoa_r+0x4ca>
 8012a46:	bf00      	nop
 8012a48:	40240000 	.word	0x40240000
 8012a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f000 80c8 	beq.w	8012be4 <_dtoa_r+0xb34>
 8012a54:	9b04      	ldr	r3, [sp, #16]
 8012a56:	9301      	str	r3, [sp, #4]
 8012a58:	2d00      	cmp	r5, #0
 8012a5a:	dd05      	ble.n	8012a68 <_dtoa_r+0x9b8>
 8012a5c:	4639      	mov	r1, r7
 8012a5e:	462a      	mov	r2, r5
 8012a60:	4620      	mov	r0, r4
 8012a62:	f000 fbbd 	bl	80131e0 <__lshift>
 8012a66:	4607      	mov	r7, r0
 8012a68:	f1b8 0f00 	cmp.w	r8, #0
 8012a6c:	d05b      	beq.n	8012b26 <_dtoa_r+0xa76>
 8012a6e:	6879      	ldr	r1, [r7, #4]
 8012a70:	4620      	mov	r0, r4
 8012a72:	f000 f95b 	bl	8012d2c <_Balloc>
 8012a76:	4605      	mov	r5, r0
 8012a78:	b928      	cbnz	r0, 8012a86 <_dtoa_r+0x9d6>
 8012a7a:	4b83      	ldr	r3, [pc, #524]	; (8012c88 <_dtoa_r+0xbd8>)
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012a82:	f7ff bb2e 	b.w	80120e2 <_dtoa_r+0x32>
 8012a86:	693a      	ldr	r2, [r7, #16]
 8012a88:	3202      	adds	r2, #2
 8012a8a:	0092      	lsls	r2, r2, #2
 8012a8c:	f107 010c 	add.w	r1, r7, #12
 8012a90:	300c      	adds	r0, #12
 8012a92:	f7ff fa70 	bl	8011f76 <memcpy>
 8012a96:	2201      	movs	r2, #1
 8012a98:	4629      	mov	r1, r5
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	f000 fba0 	bl	80131e0 <__lshift>
 8012aa0:	9b00      	ldr	r3, [sp, #0]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	9304      	str	r3, [sp, #16]
 8012aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012aaa:	4413      	add	r3, r2
 8012aac:	9308      	str	r3, [sp, #32]
 8012aae:	9b02      	ldr	r3, [sp, #8]
 8012ab0:	f003 0301 	and.w	r3, r3, #1
 8012ab4:	46b8      	mov	r8, r7
 8012ab6:	9306      	str	r3, [sp, #24]
 8012ab8:	4607      	mov	r7, r0
 8012aba:	9b04      	ldr	r3, [sp, #16]
 8012abc:	4631      	mov	r1, r6
 8012abe:	3b01      	subs	r3, #1
 8012ac0:	4650      	mov	r0, sl
 8012ac2:	9301      	str	r3, [sp, #4]
 8012ac4:	f7ff fa6c 	bl	8011fa0 <quorem>
 8012ac8:	4641      	mov	r1, r8
 8012aca:	9002      	str	r0, [sp, #8]
 8012acc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012ad0:	4650      	mov	r0, sl
 8012ad2:	f000 fbf1 	bl	80132b8 <__mcmp>
 8012ad6:	463a      	mov	r2, r7
 8012ad8:	9005      	str	r0, [sp, #20]
 8012ada:	4631      	mov	r1, r6
 8012adc:	4620      	mov	r0, r4
 8012ade:	f000 fc07 	bl	80132f0 <__mdiff>
 8012ae2:	68c2      	ldr	r2, [r0, #12]
 8012ae4:	4605      	mov	r5, r0
 8012ae6:	bb02      	cbnz	r2, 8012b2a <_dtoa_r+0xa7a>
 8012ae8:	4601      	mov	r1, r0
 8012aea:	4650      	mov	r0, sl
 8012aec:	f000 fbe4 	bl	80132b8 <__mcmp>
 8012af0:	4602      	mov	r2, r0
 8012af2:	4629      	mov	r1, r5
 8012af4:	4620      	mov	r0, r4
 8012af6:	9209      	str	r2, [sp, #36]	; 0x24
 8012af8:	f000 f958 	bl	8012dac <_Bfree>
 8012afc:	9b07      	ldr	r3, [sp, #28]
 8012afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b00:	9d04      	ldr	r5, [sp, #16]
 8012b02:	ea43 0102 	orr.w	r1, r3, r2
 8012b06:	9b06      	ldr	r3, [sp, #24]
 8012b08:	4319      	orrs	r1, r3
 8012b0a:	d110      	bne.n	8012b2e <_dtoa_r+0xa7e>
 8012b0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012b10:	d029      	beq.n	8012b66 <_dtoa_r+0xab6>
 8012b12:	9b05      	ldr	r3, [sp, #20]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	dd02      	ble.n	8012b1e <_dtoa_r+0xa6e>
 8012b18:	9b02      	ldr	r3, [sp, #8]
 8012b1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012b1e:	9b01      	ldr	r3, [sp, #4]
 8012b20:	f883 9000 	strb.w	r9, [r3]
 8012b24:	e774      	b.n	8012a10 <_dtoa_r+0x960>
 8012b26:	4638      	mov	r0, r7
 8012b28:	e7ba      	b.n	8012aa0 <_dtoa_r+0x9f0>
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	e7e1      	b.n	8012af2 <_dtoa_r+0xa42>
 8012b2e:	9b05      	ldr	r3, [sp, #20]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	db04      	blt.n	8012b3e <_dtoa_r+0xa8e>
 8012b34:	9907      	ldr	r1, [sp, #28]
 8012b36:	430b      	orrs	r3, r1
 8012b38:	9906      	ldr	r1, [sp, #24]
 8012b3a:	430b      	orrs	r3, r1
 8012b3c:	d120      	bne.n	8012b80 <_dtoa_r+0xad0>
 8012b3e:	2a00      	cmp	r2, #0
 8012b40:	dded      	ble.n	8012b1e <_dtoa_r+0xa6e>
 8012b42:	4651      	mov	r1, sl
 8012b44:	2201      	movs	r2, #1
 8012b46:	4620      	mov	r0, r4
 8012b48:	f000 fb4a 	bl	80131e0 <__lshift>
 8012b4c:	4631      	mov	r1, r6
 8012b4e:	4682      	mov	sl, r0
 8012b50:	f000 fbb2 	bl	80132b8 <__mcmp>
 8012b54:	2800      	cmp	r0, #0
 8012b56:	dc03      	bgt.n	8012b60 <_dtoa_r+0xab0>
 8012b58:	d1e1      	bne.n	8012b1e <_dtoa_r+0xa6e>
 8012b5a:	f019 0f01 	tst.w	r9, #1
 8012b5e:	d0de      	beq.n	8012b1e <_dtoa_r+0xa6e>
 8012b60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012b64:	d1d8      	bne.n	8012b18 <_dtoa_r+0xa68>
 8012b66:	9a01      	ldr	r2, [sp, #4]
 8012b68:	2339      	movs	r3, #57	; 0x39
 8012b6a:	7013      	strb	r3, [r2, #0]
 8012b6c:	462b      	mov	r3, r5
 8012b6e:	461d      	mov	r5, r3
 8012b70:	3b01      	subs	r3, #1
 8012b72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012b76:	2a39      	cmp	r2, #57	; 0x39
 8012b78:	d06c      	beq.n	8012c54 <_dtoa_r+0xba4>
 8012b7a:	3201      	adds	r2, #1
 8012b7c:	701a      	strb	r2, [r3, #0]
 8012b7e:	e747      	b.n	8012a10 <_dtoa_r+0x960>
 8012b80:	2a00      	cmp	r2, #0
 8012b82:	dd07      	ble.n	8012b94 <_dtoa_r+0xae4>
 8012b84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012b88:	d0ed      	beq.n	8012b66 <_dtoa_r+0xab6>
 8012b8a:	9a01      	ldr	r2, [sp, #4]
 8012b8c:	f109 0301 	add.w	r3, r9, #1
 8012b90:	7013      	strb	r3, [r2, #0]
 8012b92:	e73d      	b.n	8012a10 <_dtoa_r+0x960>
 8012b94:	9b04      	ldr	r3, [sp, #16]
 8012b96:	9a08      	ldr	r2, [sp, #32]
 8012b98:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d043      	beq.n	8012c28 <_dtoa_r+0xb78>
 8012ba0:	4651      	mov	r1, sl
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	220a      	movs	r2, #10
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	f000 f922 	bl	8012df0 <__multadd>
 8012bac:	45b8      	cmp	r8, r7
 8012bae:	4682      	mov	sl, r0
 8012bb0:	f04f 0300 	mov.w	r3, #0
 8012bb4:	f04f 020a 	mov.w	r2, #10
 8012bb8:	4641      	mov	r1, r8
 8012bba:	4620      	mov	r0, r4
 8012bbc:	d107      	bne.n	8012bce <_dtoa_r+0xb1e>
 8012bbe:	f000 f917 	bl	8012df0 <__multadd>
 8012bc2:	4680      	mov	r8, r0
 8012bc4:	4607      	mov	r7, r0
 8012bc6:	9b04      	ldr	r3, [sp, #16]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	9304      	str	r3, [sp, #16]
 8012bcc:	e775      	b.n	8012aba <_dtoa_r+0xa0a>
 8012bce:	f000 f90f 	bl	8012df0 <__multadd>
 8012bd2:	4639      	mov	r1, r7
 8012bd4:	4680      	mov	r8, r0
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	220a      	movs	r2, #10
 8012bda:	4620      	mov	r0, r4
 8012bdc:	f000 f908 	bl	8012df0 <__multadd>
 8012be0:	4607      	mov	r7, r0
 8012be2:	e7f0      	b.n	8012bc6 <_dtoa_r+0xb16>
 8012be4:	9b04      	ldr	r3, [sp, #16]
 8012be6:	9301      	str	r3, [sp, #4]
 8012be8:	9d00      	ldr	r5, [sp, #0]
 8012bea:	4631      	mov	r1, r6
 8012bec:	4650      	mov	r0, sl
 8012bee:	f7ff f9d7 	bl	8011fa0 <quorem>
 8012bf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012bf6:	9b00      	ldr	r3, [sp, #0]
 8012bf8:	f805 9b01 	strb.w	r9, [r5], #1
 8012bfc:	1aea      	subs	r2, r5, r3
 8012bfe:	9b01      	ldr	r3, [sp, #4]
 8012c00:	4293      	cmp	r3, r2
 8012c02:	dd07      	ble.n	8012c14 <_dtoa_r+0xb64>
 8012c04:	4651      	mov	r1, sl
 8012c06:	2300      	movs	r3, #0
 8012c08:	220a      	movs	r2, #10
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f000 f8f0 	bl	8012df0 <__multadd>
 8012c10:	4682      	mov	sl, r0
 8012c12:	e7ea      	b.n	8012bea <_dtoa_r+0xb3a>
 8012c14:	9b01      	ldr	r3, [sp, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	bfc8      	it	gt
 8012c1a:	461d      	movgt	r5, r3
 8012c1c:	9b00      	ldr	r3, [sp, #0]
 8012c1e:	bfd8      	it	le
 8012c20:	2501      	movle	r5, #1
 8012c22:	441d      	add	r5, r3
 8012c24:	f04f 0800 	mov.w	r8, #0
 8012c28:	4651      	mov	r1, sl
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f000 fad7 	bl	80131e0 <__lshift>
 8012c32:	4631      	mov	r1, r6
 8012c34:	4682      	mov	sl, r0
 8012c36:	f000 fb3f 	bl	80132b8 <__mcmp>
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	dc96      	bgt.n	8012b6c <_dtoa_r+0xabc>
 8012c3e:	d102      	bne.n	8012c46 <_dtoa_r+0xb96>
 8012c40:	f019 0f01 	tst.w	r9, #1
 8012c44:	d192      	bne.n	8012b6c <_dtoa_r+0xabc>
 8012c46:	462b      	mov	r3, r5
 8012c48:	461d      	mov	r5, r3
 8012c4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c4e:	2a30      	cmp	r2, #48	; 0x30
 8012c50:	d0fa      	beq.n	8012c48 <_dtoa_r+0xb98>
 8012c52:	e6dd      	b.n	8012a10 <_dtoa_r+0x960>
 8012c54:	9a00      	ldr	r2, [sp, #0]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d189      	bne.n	8012b6e <_dtoa_r+0xabe>
 8012c5a:	f10b 0b01 	add.w	fp, fp, #1
 8012c5e:	2331      	movs	r3, #49	; 0x31
 8012c60:	e796      	b.n	8012b90 <_dtoa_r+0xae0>
 8012c62:	4b0a      	ldr	r3, [pc, #40]	; (8012c8c <_dtoa_r+0xbdc>)
 8012c64:	f7ff ba99 	b.w	801219a <_dtoa_r+0xea>
 8012c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	f47f aa6d 	bne.w	801214a <_dtoa_r+0x9a>
 8012c70:	4b07      	ldr	r3, [pc, #28]	; (8012c90 <_dtoa_r+0xbe0>)
 8012c72:	f7ff ba92 	b.w	801219a <_dtoa_r+0xea>
 8012c76:	9b01      	ldr	r3, [sp, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	dcb5      	bgt.n	8012be8 <_dtoa_r+0xb38>
 8012c7c:	9b07      	ldr	r3, [sp, #28]
 8012c7e:	2b02      	cmp	r3, #2
 8012c80:	f73f aeb1 	bgt.w	80129e6 <_dtoa_r+0x936>
 8012c84:	e7b0      	b.n	8012be8 <_dtoa_r+0xb38>
 8012c86:	bf00      	nop
 8012c88:	0801855b 	.word	0x0801855b
 8012c8c:	080184b6 	.word	0x080184b6
 8012c90:	080184df 	.word	0x080184df

08012c94 <_free_r>:
 8012c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c96:	2900      	cmp	r1, #0
 8012c98:	d044      	beq.n	8012d24 <_free_r+0x90>
 8012c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c9e:	9001      	str	r0, [sp, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8012ca6:	bfb8      	it	lt
 8012ca8:	18e4      	addlt	r4, r4, r3
 8012caa:	f7fe f925 	bl	8010ef8 <__malloc_lock>
 8012cae:	4a1e      	ldr	r2, [pc, #120]	; (8012d28 <_free_r+0x94>)
 8012cb0:	9801      	ldr	r0, [sp, #4]
 8012cb2:	6813      	ldr	r3, [r2, #0]
 8012cb4:	b933      	cbnz	r3, 8012cc4 <_free_r+0x30>
 8012cb6:	6063      	str	r3, [r4, #4]
 8012cb8:	6014      	str	r4, [r2, #0]
 8012cba:	b003      	add	sp, #12
 8012cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012cc0:	f7fe b920 	b.w	8010f04 <__malloc_unlock>
 8012cc4:	42a3      	cmp	r3, r4
 8012cc6:	d908      	bls.n	8012cda <_free_r+0x46>
 8012cc8:	6825      	ldr	r5, [r4, #0]
 8012cca:	1961      	adds	r1, r4, r5
 8012ccc:	428b      	cmp	r3, r1
 8012cce:	bf01      	itttt	eq
 8012cd0:	6819      	ldreq	r1, [r3, #0]
 8012cd2:	685b      	ldreq	r3, [r3, #4]
 8012cd4:	1949      	addeq	r1, r1, r5
 8012cd6:	6021      	streq	r1, [r4, #0]
 8012cd8:	e7ed      	b.n	8012cb6 <_free_r+0x22>
 8012cda:	461a      	mov	r2, r3
 8012cdc:	685b      	ldr	r3, [r3, #4]
 8012cde:	b10b      	cbz	r3, 8012ce4 <_free_r+0x50>
 8012ce0:	42a3      	cmp	r3, r4
 8012ce2:	d9fa      	bls.n	8012cda <_free_r+0x46>
 8012ce4:	6811      	ldr	r1, [r2, #0]
 8012ce6:	1855      	adds	r5, r2, r1
 8012ce8:	42a5      	cmp	r5, r4
 8012cea:	d10b      	bne.n	8012d04 <_free_r+0x70>
 8012cec:	6824      	ldr	r4, [r4, #0]
 8012cee:	4421      	add	r1, r4
 8012cf0:	1854      	adds	r4, r2, r1
 8012cf2:	42a3      	cmp	r3, r4
 8012cf4:	6011      	str	r1, [r2, #0]
 8012cf6:	d1e0      	bne.n	8012cba <_free_r+0x26>
 8012cf8:	681c      	ldr	r4, [r3, #0]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	6053      	str	r3, [r2, #4]
 8012cfe:	440c      	add	r4, r1
 8012d00:	6014      	str	r4, [r2, #0]
 8012d02:	e7da      	b.n	8012cba <_free_r+0x26>
 8012d04:	d902      	bls.n	8012d0c <_free_r+0x78>
 8012d06:	230c      	movs	r3, #12
 8012d08:	6003      	str	r3, [r0, #0]
 8012d0a:	e7d6      	b.n	8012cba <_free_r+0x26>
 8012d0c:	6825      	ldr	r5, [r4, #0]
 8012d0e:	1961      	adds	r1, r4, r5
 8012d10:	428b      	cmp	r3, r1
 8012d12:	bf04      	itt	eq
 8012d14:	6819      	ldreq	r1, [r3, #0]
 8012d16:	685b      	ldreq	r3, [r3, #4]
 8012d18:	6063      	str	r3, [r4, #4]
 8012d1a:	bf04      	itt	eq
 8012d1c:	1949      	addeq	r1, r1, r5
 8012d1e:	6021      	streq	r1, [r4, #0]
 8012d20:	6054      	str	r4, [r2, #4]
 8012d22:	e7ca      	b.n	8012cba <_free_r+0x26>
 8012d24:	b003      	add	sp, #12
 8012d26:	bd30      	pop	{r4, r5, pc}
 8012d28:	20000e24 	.word	0x20000e24

08012d2c <_Balloc>:
 8012d2c:	b570      	push	{r4, r5, r6, lr}
 8012d2e:	69c6      	ldr	r6, [r0, #28]
 8012d30:	4604      	mov	r4, r0
 8012d32:	460d      	mov	r5, r1
 8012d34:	b976      	cbnz	r6, 8012d54 <_Balloc+0x28>
 8012d36:	2010      	movs	r0, #16
 8012d38:	f7fe f836 	bl	8010da8 <malloc>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	61e0      	str	r0, [r4, #28]
 8012d40:	b920      	cbnz	r0, 8012d4c <_Balloc+0x20>
 8012d42:	4b18      	ldr	r3, [pc, #96]	; (8012da4 <_Balloc+0x78>)
 8012d44:	4818      	ldr	r0, [pc, #96]	; (8012da8 <_Balloc+0x7c>)
 8012d46:	216b      	movs	r1, #107	; 0x6b
 8012d48:	f001 ff4a 	bl	8014be0 <__assert_func>
 8012d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d50:	6006      	str	r6, [r0, #0]
 8012d52:	60c6      	str	r6, [r0, #12]
 8012d54:	69e6      	ldr	r6, [r4, #28]
 8012d56:	68f3      	ldr	r3, [r6, #12]
 8012d58:	b183      	cbz	r3, 8012d7c <_Balloc+0x50>
 8012d5a:	69e3      	ldr	r3, [r4, #28]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d62:	b9b8      	cbnz	r0, 8012d94 <_Balloc+0x68>
 8012d64:	2101      	movs	r1, #1
 8012d66:	fa01 f605 	lsl.w	r6, r1, r5
 8012d6a:	1d72      	adds	r2, r6, #5
 8012d6c:	0092      	lsls	r2, r2, #2
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f001 ff54 	bl	8014c1c <_calloc_r>
 8012d74:	b160      	cbz	r0, 8012d90 <_Balloc+0x64>
 8012d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d7a:	e00e      	b.n	8012d9a <_Balloc+0x6e>
 8012d7c:	2221      	movs	r2, #33	; 0x21
 8012d7e:	2104      	movs	r1, #4
 8012d80:	4620      	mov	r0, r4
 8012d82:	f001 ff4b 	bl	8014c1c <_calloc_r>
 8012d86:	69e3      	ldr	r3, [r4, #28]
 8012d88:	60f0      	str	r0, [r6, #12]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d1e4      	bne.n	8012d5a <_Balloc+0x2e>
 8012d90:	2000      	movs	r0, #0
 8012d92:	bd70      	pop	{r4, r5, r6, pc}
 8012d94:	6802      	ldr	r2, [r0, #0]
 8012d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012da0:	e7f7      	b.n	8012d92 <_Balloc+0x66>
 8012da2:	bf00      	nop
 8012da4:	080184ec 	.word	0x080184ec
 8012da8:	0801856c 	.word	0x0801856c

08012dac <_Bfree>:
 8012dac:	b570      	push	{r4, r5, r6, lr}
 8012dae:	69c6      	ldr	r6, [r0, #28]
 8012db0:	4605      	mov	r5, r0
 8012db2:	460c      	mov	r4, r1
 8012db4:	b976      	cbnz	r6, 8012dd4 <_Bfree+0x28>
 8012db6:	2010      	movs	r0, #16
 8012db8:	f7fd fff6 	bl	8010da8 <malloc>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	61e8      	str	r0, [r5, #28]
 8012dc0:	b920      	cbnz	r0, 8012dcc <_Bfree+0x20>
 8012dc2:	4b09      	ldr	r3, [pc, #36]	; (8012de8 <_Bfree+0x3c>)
 8012dc4:	4809      	ldr	r0, [pc, #36]	; (8012dec <_Bfree+0x40>)
 8012dc6:	218f      	movs	r1, #143	; 0x8f
 8012dc8:	f001 ff0a 	bl	8014be0 <__assert_func>
 8012dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012dd0:	6006      	str	r6, [r0, #0]
 8012dd2:	60c6      	str	r6, [r0, #12]
 8012dd4:	b13c      	cbz	r4, 8012de6 <_Bfree+0x3a>
 8012dd6:	69eb      	ldr	r3, [r5, #28]
 8012dd8:	6862      	ldr	r2, [r4, #4]
 8012dda:	68db      	ldr	r3, [r3, #12]
 8012ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012de0:	6021      	str	r1, [r4, #0]
 8012de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012de6:	bd70      	pop	{r4, r5, r6, pc}
 8012de8:	080184ec 	.word	0x080184ec
 8012dec:	0801856c 	.word	0x0801856c

08012df0 <__multadd>:
 8012df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012df4:	690d      	ldr	r5, [r1, #16]
 8012df6:	4607      	mov	r7, r0
 8012df8:	460c      	mov	r4, r1
 8012dfa:	461e      	mov	r6, r3
 8012dfc:	f101 0c14 	add.w	ip, r1, #20
 8012e00:	2000      	movs	r0, #0
 8012e02:	f8dc 3000 	ldr.w	r3, [ip]
 8012e06:	b299      	uxth	r1, r3
 8012e08:	fb02 6101 	mla	r1, r2, r1, r6
 8012e0c:	0c1e      	lsrs	r6, r3, #16
 8012e0e:	0c0b      	lsrs	r3, r1, #16
 8012e10:	fb02 3306 	mla	r3, r2, r6, r3
 8012e14:	b289      	uxth	r1, r1
 8012e16:	3001      	adds	r0, #1
 8012e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e1c:	4285      	cmp	r5, r0
 8012e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8012e22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e26:	dcec      	bgt.n	8012e02 <__multadd+0x12>
 8012e28:	b30e      	cbz	r6, 8012e6e <__multadd+0x7e>
 8012e2a:	68a3      	ldr	r3, [r4, #8]
 8012e2c:	42ab      	cmp	r3, r5
 8012e2e:	dc19      	bgt.n	8012e64 <__multadd+0x74>
 8012e30:	6861      	ldr	r1, [r4, #4]
 8012e32:	4638      	mov	r0, r7
 8012e34:	3101      	adds	r1, #1
 8012e36:	f7ff ff79 	bl	8012d2c <_Balloc>
 8012e3a:	4680      	mov	r8, r0
 8012e3c:	b928      	cbnz	r0, 8012e4a <__multadd+0x5a>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	4b0c      	ldr	r3, [pc, #48]	; (8012e74 <__multadd+0x84>)
 8012e42:	480d      	ldr	r0, [pc, #52]	; (8012e78 <__multadd+0x88>)
 8012e44:	21ba      	movs	r1, #186	; 0xba
 8012e46:	f001 fecb 	bl	8014be0 <__assert_func>
 8012e4a:	6922      	ldr	r2, [r4, #16]
 8012e4c:	3202      	adds	r2, #2
 8012e4e:	f104 010c 	add.w	r1, r4, #12
 8012e52:	0092      	lsls	r2, r2, #2
 8012e54:	300c      	adds	r0, #12
 8012e56:	f7ff f88e 	bl	8011f76 <memcpy>
 8012e5a:	4621      	mov	r1, r4
 8012e5c:	4638      	mov	r0, r7
 8012e5e:	f7ff ffa5 	bl	8012dac <_Bfree>
 8012e62:	4644      	mov	r4, r8
 8012e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e68:	3501      	adds	r5, #1
 8012e6a:	615e      	str	r6, [r3, #20]
 8012e6c:	6125      	str	r5, [r4, #16]
 8012e6e:	4620      	mov	r0, r4
 8012e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e74:	0801855b 	.word	0x0801855b
 8012e78:	0801856c 	.word	0x0801856c

08012e7c <__s2b>:
 8012e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e80:	460c      	mov	r4, r1
 8012e82:	4615      	mov	r5, r2
 8012e84:	461f      	mov	r7, r3
 8012e86:	2209      	movs	r2, #9
 8012e88:	3308      	adds	r3, #8
 8012e8a:	4606      	mov	r6, r0
 8012e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e90:	2100      	movs	r1, #0
 8012e92:	2201      	movs	r2, #1
 8012e94:	429a      	cmp	r2, r3
 8012e96:	db09      	blt.n	8012eac <__s2b+0x30>
 8012e98:	4630      	mov	r0, r6
 8012e9a:	f7ff ff47 	bl	8012d2c <_Balloc>
 8012e9e:	b940      	cbnz	r0, 8012eb2 <__s2b+0x36>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	4b19      	ldr	r3, [pc, #100]	; (8012f08 <__s2b+0x8c>)
 8012ea4:	4819      	ldr	r0, [pc, #100]	; (8012f0c <__s2b+0x90>)
 8012ea6:	21d3      	movs	r1, #211	; 0xd3
 8012ea8:	f001 fe9a 	bl	8014be0 <__assert_func>
 8012eac:	0052      	lsls	r2, r2, #1
 8012eae:	3101      	adds	r1, #1
 8012eb0:	e7f0      	b.n	8012e94 <__s2b+0x18>
 8012eb2:	9b08      	ldr	r3, [sp, #32]
 8012eb4:	6143      	str	r3, [r0, #20]
 8012eb6:	2d09      	cmp	r5, #9
 8012eb8:	f04f 0301 	mov.w	r3, #1
 8012ebc:	6103      	str	r3, [r0, #16]
 8012ebe:	dd16      	ble.n	8012eee <__s2b+0x72>
 8012ec0:	f104 0909 	add.w	r9, r4, #9
 8012ec4:	46c8      	mov	r8, r9
 8012ec6:	442c      	add	r4, r5
 8012ec8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012ecc:	4601      	mov	r1, r0
 8012ece:	3b30      	subs	r3, #48	; 0x30
 8012ed0:	220a      	movs	r2, #10
 8012ed2:	4630      	mov	r0, r6
 8012ed4:	f7ff ff8c 	bl	8012df0 <__multadd>
 8012ed8:	45a0      	cmp	r8, r4
 8012eda:	d1f5      	bne.n	8012ec8 <__s2b+0x4c>
 8012edc:	f1a5 0408 	sub.w	r4, r5, #8
 8012ee0:	444c      	add	r4, r9
 8012ee2:	1b2d      	subs	r5, r5, r4
 8012ee4:	1963      	adds	r3, r4, r5
 8012ee6:	42bb      	cmp	r3, r7
 8012ee8:	db04      	blt.n	8012ef4 <__s2b+0x78>
 8012eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eee:	340a      	adds	r4, #10
 8012ef0:	2509      	movs	r5, #9
 8012ef2:	e7f6      	b.n	8012ee2 <__s2b+0x66>
 8012ef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ef8:	4601      	mov	r1, r0
 8012efa:	3b30      	subs	r3, #48	; 0x30
 8012efc:	220a      	movs	r2, #10
 8012efe:	4630      	mov	r0, r6
 8012f00:	f7ff ff76 	bl	8012df0 <__multadd>
 8012f04:	e7ee      	b.n	8012ee4 <__s2b+0x68>
 8012f06:	bf00      	nop
 8012f08:	0801855b 	.word	0x0801855b
 8012f0c:	0801856c 	.word	0x0801856c

08012f10 <__hi0bits>:
 8012f10:	0c03      	lsrs	r3, r0, #16
 8012f12:	041b      	lsls	r3, r3, #16
 8012f14:	b9d3      	cbnz	r3, 8012f4c <__hi0bits+0x3c>
 8012f16:	0400      	lsls	r0, r0, #16
 8012f18:	2310      	movs	r3, #16
 8012f1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012f1e:	bf04      	itt	eq
 8012f20:	0200      	lsleq	r0, r0, #8
 8012f22:	3308      	addeq	r3, #8
 8012f24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012f28:	bf04      	itt	eq
 8012f2a:	0100      	lsleq	r0, r0, #4
 8012f2c:	3304      	addeq	r3, #4
 8012f2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012f32:	bf04      	itt	eq
 8012f34:	0080      	lsleq	r0, r0, #2
 8012f36:	3302      	addeq	r3, #2
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	db05      	blt.n	8012f48 <__hi0bits+0x38>
 8012f3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012f40:	f103 0301 	add.w	r3, r3, #1
 8012f44:	bf08      	it	eq
 8012f46:	2320      	moveq	r3, #32
 8012f48:	4618      	mov	r0, r3
 8012f4a:	4770      	bx	lr
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	e7e4      	b.n	8012f1a <__hi0bits+0xa>

08012f50 <__lo0bits>:
 8012f50:	6803      	ldr	r3, [r0, #0]
 8012f52:	f013 0207 	ands.w	r2, r3, #7
 8012f56:	d00c      	beq.n	8012f72 <__lo0bits+0x22>
 8012f58:	07d9      	lsls	r1, r3, #31
 8012f5a:	d422      	bmi.n	8012fa2 <__lo0bits+0x52>
 8012f5c:	079a      	lsls	r2, r3, #30
 8012f5e:	bf49      	itett	mi
 8012f60:	085b      	lsrmi	r3, r3, #1
 8012f62:	089b      	lsrpl	r3, r3, #2
 8012f64:	6003      	strmi	r3, [r0, #0]
 8012f66:	2201      	movmi	r2, #1
 8012f68:	bf5c      	itt	pl
 8012f6a:	6003      	strpl	r3, [r0, #0]
 8012f6c:	2202      	movpl	r2, #2
 8012f6e:	4610      	mov	r0, r2
 8012f70:	4770      	bx	lr
 8012f72:	b299      	uxth	r1, r3
 8012f74:	b909      	cbnz	r1, 8012f7a <__lo0bits+0x2a>
 8012f76:	0c1b      	lsrs	r3, r3, #16
 8012f78:	2210      	movs	r2, #16
 8012f7a:	b2d9      	uxtb	r1, r3
 8012f7c:	b909      	cbnz	r1, 8012f82 <__lo0bits+0x32>
 8012f7e:	3208      	adds	r2, #8
 8012f80:	0a1b      	lsrs	r3, r3, #8
 8012f82:	0719      	lsls	r1, r3, #28
 8012f84:	bf04      	itt	eq
 8012f86:	091b      	lsreq	r3, r3, #4
 8012f88:	3204      	addeq	r2, #4
 8012f8a:	0799      	lsls	r1, r3, #30
 8012f8c:	bf04      	itt	eq
 8012f8e:	089b      	lsreq	r3, r3, #2
 8012f90:	3202      	addeq	r2, #2
 8012f92:	07d9      	lsls	r1, r3, #31
 8012f94:	d403      	bmi.n	8012f9e <__lo0bits+0x4e>
 8012f96:	085b      	lsrs	r3, r3, #1
 8012f98:	f102 0201 	add.w	r2, r2, #1
 8012f9c:	d003      	beq.n	8012fa6 <__lo0bits+0x56>
 8012f9e:	6003      	str	r3, [r0, #0]
 8012fa0:	e7e5      	b.n	8012f6e <__lo0bits+0x1e>
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	e7e3      	b.n	8012f6e <__lo0bits+0x1e>
 8012fa6:	2220      	movs	r2, #32
 8012fa8:	e7e1      	b.n	8012f6e <__lo0bits+0x1e>
	...

08012fac <__i2b>:
 8012fac:	b510      	push	{r4, lr}
 8012fae:	460c      	mov	r4, r1
 8012fb0:	2101      	movs	r1, #1
 8012fb2:	f7ff febb 	bl	8012d2c <_Balloc>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	b928      	cbnz	r0, 8012fc6 <__i2b+0x1a>
 8012fba:	4b05      	ldr	r3, [pc, #20]	; (8012fd0 <__i2b+0x24>)
 8012fbc:	4805      	ldr	r0, [pc, #20]	; (8012fd4 <__i2b+0x28>)
 8012fbe:	f240 1145 	movw	r1, #325	; 0x145
 8012fc2:	f001 fe0d 	bl	8014be0 <__assert_func>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	6144      	str	r4, [r0, #20]
 8012fca:	6103      	str	r3, [r0, #16]
 8012fcc:	bd10      	pop	{r4, pc}
 8012fce:	bf00      	nop
 8012fd0:	0801855b 	.word	0x0801855b
 8012fd4:	0801856c 	.word	0x0801856c

08012fd8 <__multiply>:
 8012fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fdc:	4691      	mov	r9, r2
 8012fde:	690a      	ldr	r2, [r1, #16]
 8012fe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	bfb8      	it	lt
 8012fe8:	460b      	movlt	r3, r1
 8012fea:	460c      	mov	r4, r1
 8012fec:	bfbc      	itt	lt
 8012fee:	464c      	movlt	r4, r9
 8012ff0:	4699      	movlt	r9, r3
 8012ff2:	6927      	ldr	r7, [r4, #16]
 8012ff4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012ff8:	68a3      	ldr	r3, [r4, #8]
 8012ffa:	6861      	ldr	r1, [r4, #4]
 8012ffc:	eb07 060a 	add.w	r6, r7, sl
 8013000:	42b3      	cmp	r3, r6
 8013002:	b085      	sub	sp, #20
 8013004:	bfb8      	it	lt
 8013006:	3101      	addlt	r1, #1
 8013008:	f7ff fe90 	bl	8012d2c <_Balloc>
 801300c:	b930      	cbnz	r0, 801301c <__multiply+0x44>
 801300e:	4602      	mov	r2, r0
 8013010:	4b44      	ldr	r3, [pc, #272]	; (8013124 <__multiply+0x14c>)
 8013012:	4845      	ldr	r0, [pc, #276]	; (8013128 <__multiply+0x150>)
 8013014:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013018:	f001 fde2 	bl	8014be0 <__assert_func>
 801301c:	f100 0514 	add.w	r5, r0, #20
 8013020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013024:	462b      	mov	r3, r5
 8013026:	2200      	movs	r2, #0
 8013028:	4543      	cmp	r3, r8
 801302a:	d321      	bcc.n	8013070 <__multiply+0x98>
 801302c:	f104 0314 	add.w	r3, r4, #20
 8013030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013034:	f109 0314 	add.w	r3, r9, #20
 8013038:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801303c:	9202      	str	r2, [sp, #8]
 801303e:	1b3a      	subs	r2, r7, r4
 8013040:	3a15      	subs	r2, #21
 8013042:	f022 0203 	bic.w	r2, r2, #3
 8013046:	3204      	adds	r2, #4
 8013048:	f104 0115 	add.w	r1, r4, #21
 801304c:	428f      	cmp	r7, r1
 801304e:	bf38      	it	cc
 8013050:	2204      	movcc	r2, #4
 8013052:	9201      	str	r2, [sp, #4]
 8013054:	9a02      	ldr	r2, [sp, #8]
 8013056:	9303      	str	r3, [sp, #12]
 8013058:	429a      	cmp	r2, r3
 801305a:	d80c      	bhi.n	8013076 <__multiply+0x9e>
 801305c:	2e00      	cmp	r6, #0
 801305e:	dd03      	ble.n	8013068 <__multiply+0x90>
 8013060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013064:	2b00      	cmp	r3, #0
 8013066:	d05b      	beq.n	8013120 <__multiply+0x148>
 8013068:	6106      	str	r6, [r0, #16]
 801306a:	b005      	add	sp, #20
 801306c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013070:	f843 2b04 	str.w	r2, [r3], #4
 8013074:	e7d8      	b.n	8013028 <__multiply+0x50>
 8013076:	f8b3 a000 	ldrh.w	sl, [r3]
 801307a:	f1ba 0f00 	cmp.w	sl, #0
 801307e:	d024      	beq.n	80130ca <__multiply+0xf2>
 8013080:	f104 0e14 	add.w	lr, r4, #20
 8013084:	46a9      	mov	r9, r5
 8013086:	f04f 0c00 	mov.w	ip, #0
 801308a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801308e:	f8d9 1000 	ldr.w	r1, [r9]
 8013092:	fa1f fb82 	uxth.w	fp, r2
 8013096:	b289      	uxth	r1, r1
 8013098:	fb0a 110b 	mla	r1, sl, fp, r1
 801309c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80130a0:	f8d9 2000 	ldr.w	r2, [r9]
 80130a4:	4461      	add	r1, ip
 80130a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80130aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80130ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80130b2:	b289      	uxth	r1, r1
 80130b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80130b8:	4577      	cmp	r7, lr
 80130ba:	f849 1b04 	str.w	r1, [r9], #4
 80130be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80130c2:	d8e2      	bhi.n	801308a <__multiply+0xb2>
 80130c4:	9a01      	ldr	r2, [sp, #4]
 80130c6:	f845 c002 	str.w	ip, [r5, r2]
 80130ca:	9a03      	ldr	r2, [sp, #12]
 80130cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80130d0:	3304      	adds	r3, #4
 80130d2:	f1b9 0f00 	cmp.w	r9, #0
 80130d6:	d021      	beq.n	801311c <__multiply+0x144>
 80130d8:	6829      	ldr	r1, [r5, #0]
 80130da:	f104 0c14 	add.w	ip, r4, #20
 80130de:	46ae      	mov	lr, r5
 80130e0:	f04f 0a00 	mov.w	sl, #0
 80130e4:	f8bc b000 	ldrh.w	fp, [ip]
 80130e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80130ec:	fb09 220b 	mla	r2, r9, fp, r2
 80130f0:	4452      	add	r2, sl
 80130f2:	b289      	uxth	r1, r1
 80130f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80130f8:	f84e 1b04 	str.w	r1, [lr], #4
 80130fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013104:	f8be 1000 	ldrh.w	r1, [lr]
 8013108:	fb09 110a 	mla	r1, r9, sl, r1
 801310c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013110:	4567      	cmp	r7, ip
 8013112:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013116:	d8e5      	bhi.n	80130e4 <__multiply+0x10c>
 8013118:	9a01      	ldr	r2, [sp, #4]
 801311a:	50a9      	str	r1, [r5, r2]
 801311c:	3504      	adds	r5, #4
 801311e:	e799      	b.n	8013054 <__multiply+0x7c>
 8013120:	3e01      	subs	r6, #1
 8013122:	e79b      	b.n	801305c <__multiply+0x84>
 8013124:	0801855b 	.word	0x0801855b
 8013128:	0801856c 	.word	0x0801856c

0801312c <__pow5mult>:
 801312c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013130:	4615      	mov	r5, r2
 8013132:	f012 0203 	ands.w	r2, r2, #3
 8013136:	4606      	mov	r6, r0
 8013138:	460f      	mov	r7, r1
 801313a:	d007      	beq.n	801314c <__pow5mult+0x20>
 801313c:	4c25      	ldr	r4, [pc, #148]	; (80131d4 <__pow5mult+0xa8>)
 801313e:	3a01      	subs	r2, #1
 8013140:	2300      	movs	r3, #0
 8013142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013146:	f7ff fe53 	bl	8012df0 <__multadd>
 801314a:	4607      	mov	r7, r0
 801314c:	10ad      	asrs	r5, r5, #2
 801314e:	d03d      	beq.n	80131cc <__pow5mult+0xa0>
 8013150:	69f4      	ldr	r4, [r6, #28]
 8013152:	b97c      	cbnz	r4, 8013174 <__pow5mult+0x48>
 8013154:	2010      	movs	r0, #16
 8013156:	f7fd fe27 	bl	8010da8 <malloc>
 801315a:	4602      	mov	r2, r0
 801315c:	61f0      	str	r0, [r6, #28]
 801315e:	b928      	cbnz	r0, 801316c <__pow5mult+0x40>
 8013160:	4b1d      	ldr	r3, [pc, #116]	; (80131d8 <__pow5mult+0xac>)
 8013162:	481e      	ldr	r0, [pc, #120]	; (80131dc <__pow5mult+0xb0>)
 8013164:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013168:	f001 fd3a 	bl	8014be0 <__assert_func>
 801316c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013170:	6004      	str	r4, [r0, #0]
 8013172:	60c4      	str	r4, [r0, #12]
 8013174:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801317c:	b94c      	cbnz	r4, 8013192 <__pow5mult+0x66>
 801317e:	f240 2171 	movw	r1, #625	; 0x271
 8013182:	4630      	mov	r0, r6
 8013184:	f7ff ff12 	bl	8012fac <__i2b>
 8013188:	2300      	movs	r3, #0
 801318a:	f8c8 0008 	str.w	r0, [r8, #8]
 801318e:	4604      	mov	r4, r0
 8013190:	6003      	str	r3, [r0, #0]
 8013192:	f04f 0900 	mov.w	r9, #0
 8013196:	07eb      	lsls	r3, r5, #31
 8013198:	d50a      	bpl.n	80131b0 <__pow5mult+0x84>
 801319a:	4639      	mov	r1, r7
 801319c:	4622      	mov	r2, r4
 801319e:	4630      	mov	r0, r6
 80131a0:	f7ff ff1a 	bl	8012fd8 <__multiply>
 80131a4:	4639      	mov	r1, r7
 80131a6:	4680      	mov	r8, r0
 80131a8:	4630      	mov	r0, r6
 80131aa:	f7ff fdff 	bl	8012dac <_Bfree>
 80131ae:	4647      	mov	r7, r8
 80131b0:	106d      	asrs	r5, r5, #1
 80131b2:	d00b      	beq.n	80131cc <__pow5mult+0xa0>
 80131b4:	6820      	ldr	r0, [r4, #0]
 80131b6:	b938      	cbnz	r0, 80131c8 <__pow5mult+0x9c>
 80131b8:	4622      	mov	r2, r4
 80131ba:	4621      	mov	r1, r4
 80131bc:	4630      	mov	r0, r6
 80131be:	f7ff ff0b 	bl	8012fd8 <__multiply>
 80131c2:	6020      	str	r0, [r4, #0]
 80131c4:	f8c0 9000 	str.w	r9, [r0]
 80131c8:	4604      	mov	r4, r0
 80131ca:	e7e4      	b.n	8013196 <__pow5mult+0x6a>
 80131cc:	4638      	mov	r0, r7
 80131ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131d2:	bf00      	nop
 80131d4:	080186b8 	.word	0x080186b8
 80131d8:	080184ec 	.word	0x080184ec
 80131dc:	0801856c 	.word	0x0801856c

080131e0 <__lshift>:
 80131e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131e4:	460c      	mov	r4, r1
 80131e6:	6849      	ldr	r1, [r1, #4]
 80131e8:	6923      	ldr	r3, [r4, #16]
 80131ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131ee:	68a3      	ldr	r3, [r4, #8]
 80131f0:	4607      	mov	r7, r0
 80131f2:	4691      	mov	r9, r2
 80131f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80131f8:	f108 0601 	add.w	r6, r8, #1
 80131fc:	42b3      	cmp	r3, r6
 80131fe:	db0b      	blt.n	8013218 <__lshift+0x38>
 8013200:	4638      	mov	r0, r7
 8013202:	f7ff fd93 	bl	8012d2c <_Balloc>
 8013206:	4605      	mov	r5, r0
 8013208:	b948      	cbnz	r0, 801321e <__lshift+0x3e>
 801320a:	4602      	mov	r2, r0
 801320c:	4b28      	ldr	r3, [pc, #160]	; (80132b0 <__lshift+0xd0>)
 801320e:	4829      	ldr	r0, [pc, #164]	; (80132b4 <__lshift+0xd4>)
 8013210:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013214:	f001 fce4 	bl	8014be0 <__assert_func>
 8013218:	3101      	adds	r1, #1
 801321a:	005b      	lsls	r3, r3, #1
 801321c:	e7ee      	b.n	80131fc <__lshift+0x1c>
 801321e:	2300      	movs	r3, #0
 8013220:	f100 0114 	add.w	r1, r0, #20
 8013224:	f100 0210 	add.w	r2, r0, #16
 8013228:	4618      	mov	r0, r3
 801322a:	4553      	cmp	r3, sl
 801322c:	db33      	blt.n	8013296 <__lshift+0xb6>
 801322e:	6920      	ldr	r0, [r4, #16]
 8013230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013234:	f104 0314 	add.w	r3, r4, #20
 8013238:	f019 091f 	ands.w	r9, r9, #31
 801323c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013244:	d02b      	beq.n	801329e <__lshift+0xbe>
 8013246:	f1c9 0e20 	rsb	lr, r9, #32
 801324a:	468a      	mov	sl, r1
 801324c:	2200      	movs	r2, #0
 801324e:	6818      	ldr	r0, [r3, #0]
 8013250:	fa00 f009 	lsl.w	r0, r0, r9
 8013254:	4310      	orrs	r0, r2
 8013256:	f84a 0b04 	str.w	r0, [sl], #4
 801325a:	f853 2b04 	ldr.w	r2, [r3], #4
 801325e:	459c      	cmp	ip, r3
 8013260:	fa22 f20e 	lsr.w	r2, r2, lr
 8013264:	d8f3      	bhi.n	801324e <__lshift+0x6e>
 8013266:	ebac 0304 	sub.w	r3, ip, r4
 801326a:	3b15      	subs	r3, #21
 801326c:	f023 0303 	bic.w	r3, r3, #3
 8013270:	3304      	adds	r3, #4
 8013272:	f104 0015 	add.w	r0, r4, #21
 8013276:	4584      	cmp	ip, r0
 8013278:	bf38      	it	cc
 801327a:	2304      	movcc	r3, #4
 801327c:	50ca      	str	r2, [r1, r3]
 801327e:	b10a      	cbz	r2, 8013284 <__lshift+0xa4>
 8013280:	f108 0602 	add.w	r6, r8, #2
 8013284:	3e01      	subs	r6, #1
 8013286:	4638      	mov	r0, r7
 8013288:	612e      	str	r6, [r5, #16]
 801328a:	4621      	mov	r1, r4
 801328c:	f7ff fd8e 	bl	8012dac <_Bfree>
 8013290:	4628      	mov	r0, r5
 8013292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013296:	f842 0f04 	str.w	r0, [r2, #4]!
 801329a:	3301      	adds	r3, #1
 801329c:	e7c5      	b.n	801322a <__lshift+0x4a>
 801329e:	3904      	subs	r1, #4
 80132a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80132a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80132a8:	459c      	cmp	ip, r3
 80132aa:	d8f9      	bhi.n	80132a0 <__lshift+0xc0>
 80132ac:	e7ea      	b.n	8013284 <__lshift+0xa4>
 80132ae:	bf00      	nop
 80132b0:	0801855b 	.word	0x0801855b
 80132b4:	0801856c 	.word	0x0801856c

080132b8 <__mcmp>:
 80132b8:	b530      	push	{r4, r5, lr}
 80132ba:	6902      	ldr	r2, [r0, #16]
 80132bc:	690c      	ldr	r4, [r1, #16]
 80132be:	1b12      	subs	r2, r2, r4
 80132c0:	d10e      	bne.n	80132e0 <__mcmp+0x28>
 80132c2:	f100 0314 	add.w	r3, r0, #20
 80132c6:	3114      	adds	r1, #20
 80132c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80132cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80132d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80132d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80132d8:	42a5      	cmp	r5, r4
 80132da:	d003      	beq.n	80132e4 <__mcmp+0x2c>
 80132dc:	d305      	bcc.n	80132ea <__mcmp+0x32>
 80132de:	2201      	movs	r2, #1
 80132e0:	4610      	mov	r0, r2
 80132e2:	bd30      	pop	{r4, r5, pc}
 80132e4:	4283      	cmp	r3, r0
 80132e6:	d3f3      	bcc.n	80132d0 <__mcmp+0x18>
 80132e8:	e7fa      	b.n	80132e0 <__mcmp+0x28>
 80132ea:	f04f 32ff 	mov.w	r2, #4294967295
 80132ee:	e7f7      	b.n	80132e0 <__mcmp+0x28>

080132f0 <__mdiff>:
 80132f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132f4:	460c      	mov	r4, r1
 80132f6:	4606      	mov	r6, r0
 80132f8:	4611      	mov	r1, r2
 80132fa:	4620      	mov	r0, r4
 80132fc:	4690      	mov	r8, r2
 80132fe:	f7ff ffdb 	bl	80132b8 <__mcmp>
 8013302:	1e05      	subs	r5, r0, #0
 8013304:	d110      	bne.n	8013328 <__mdiff+0x38>
 8013306:	4629      	mov	r1, r5
 8013308:	4630      	mov	r0, r6
 801330a:	f7ff fd0f 	bl	8012d2c <_Balloc>
 801330e:	b930      	cbnz	r0, 801331e <__mdiff+0x2e>
 8013310:	4b3a      	ldr	r3, [pc, #232]	; (80133fc <__mdiff+0x10c>)
 8013312:	4602      	mov	r2, r0
 8013314:	f240 2137 	movw	r1, #567	; 0x237
 8013318:	4839      	ldr	r0, [pc, #228]	; (8013400 <__mdiff+0x110>)
 801331a:	f001 fc61 	bl	8014be0 <__assert_func>
 801331e:	2301      	movs	r3, #1
 8013320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013328:	bfa4      	itt	ge
 801332a:	4643      	movge	r3, r8
 801332c:	46a0      	movge	r8, r4
 801332e:	4630      	mov	r0, r6
 8013330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013334:	bfa6      	itte	ge
 8013336:	461c      	movge	r4, r3
 8013338:	2500      	movge	r5, #0
 801333a:	2501      	movlt	r5, #1
 801333c:	f7ff fcf6 	bl	8012d2c <_Balloc>
 8013340:	b920      	cbnz	r0, 801334c <__mdiff+0x5c>
 8013342:	4b2e      	ldr	r3, [pc, #184]	; (80133fc <__mdiff+0x10c>)
 8013344:	4602      	mov	r2, r0
 8013346:	f240 2145 	movw	r1, #581	; 0x245
 801334a:	e7e5      	b.n	8013318 <__mdiff+0x28>
 801334c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013350:	6926      	ldr	r6, [r4, #16]
 8013352:	60c5      	str	r5, [r0, #12]
 8013354:	f104 0914 	add.w	r9, r4, #20
 8013358:	f108 0514 	add.w	r5, r8, #20
 801335c:	f100 0e14 	add.w	lr, r0, #20
 8013360:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013364:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013368:	f108 0210 	add.w	r2, r8, #16
 801336c:	46f2      	mov	sl, lr
 801336e:	2100      	movs	r1, #0
 8013370:	f859 3b04 	ldr.w	r3, [r9], #4
 8013374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013378:	fa11 f88b 	uxtah	r8, r1, fp
 801337c:	b299      	uxth	r1, r3
 801337e:	0c1b      	lsrs	r3, r3, #16
 8013380:	eba8 0801 	sub.w	r8, r8, r1
 8013384:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013388:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801338c:	fa1f f888 	uxth.w	r8, r8
 8013390:	1419      	asrs	r1, r3, #16
 8013392:	454e      	cmp	r6, r9
 8013394:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013398:	f84a 3b04 	str.w	r3, [sl], #4
 801339c:	d8e8      	bhi.n	8013370 <__mdiff+0x80>
 801339e:	1b33      	subs	r3, r6, r4
 80133a0:	3b15      	subs	r3, #21
 80133a2:	f023 0303 	bic.w	r3, r3, #3
 80133a6:	3304      	adds	r3, #4
 80133a8:	3415      	adds	r4, #21
 80133aa:	42a6      	cmp	r6, r4
 80133ac:	bf38      	it	cc
 80133ae:	2304      	movcc	r3, #4
 80133b0:	441d      	add	r5, r3
 80133b2:	4473      	add	r3, lr
 80133b4:	469e      	mov	lr, r3
 80133b6:	462e      	mov	r6, r5
 80133b8:	4566      	cmp	r6, ip
 80133ba:	d30e      	bcc.n	80133da <__mdiff+0xea>
 80133bc:	f10c 0203 	add.w	r2, ip, #3
 80133c0:	1b52      	subs	r2, r2, r5
 80133c2:	f022 0203 	bic.w	r2, r2, #3
 80133c6:	3d03      	subs	r5, #3
 80133c8:	45ac      	cmp	ip, r5
 80133ca:	bf38      	it	cc
 80133cc:	2200      	movcc	r2, #0
 80133ce:	4413      	add	r3, r2
 80133d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80133d4:	b17a      	cbz	r2, 80133f6 <__mdiff+0x106>
 80133d6:	6107      	str	r7, [r0, #16]
 80133d8:	e7a4      	b.n	8013324 <__mdiff+0x34>
 80133da:	f856 8b04 	ldr.w	r8, [r6], #4
 80133de:	fa11 f288 	uxtah	r2, r1, r8
 80133e2:	1414      	asrs	r4, r2, #16
 80133e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80133e8:	b292      	uxth	r2, r2
 80133ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80133ee:	f84e 2b04 	str.w	r2, [lr], #4
 80133f2:	1421      	asrs	r1, r4, #16
 80133f4:	e7e0      	b.n	80133b8 <__mdiff+0xc8>
 80133f6:	3f01      	subs	r7, #1
 80133f8:	e7ea      	b.n	80133d0 <__mdiff+0xe0>
 80133fa:	bf00      	nop
 80133fc:	0801855b 	.word	0x0801855b
 8013400:	0801856c 	.word	0x0801856c

08013404 <__ulp>:
 8013404:	b082      	sub	sp, #8
 8013406:	ed8d 0b00 	vstr	d0, [sp]
 801340a:	9a01      	ldr	r2, [sp, #4]
 801340c:	4b0f      	ldr	r3, [pc, #60]	; (801344c <__ulp+0x48>)
 801340e:	4013      	ands	r3, r2
 8013410:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013414:	2b00      	cmp	r3, #0
 8013416:	dc08      	bgt.n	801342a <__ulp+0x26>
 8013418:	425b      	negs	r3, r3
 801341a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801341e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013422:	da04      	bge.n	801342e <__ulp+0x2a>
 8013424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013428:	4113      	asrs	r3, r2
 801342a:	2200      	movs	r2, #0
 801342c:	e008      	b.n	8013440 <__ulp+0x3c>
 801342e:	f1a2 0314 	sub.w	r3, r2, #20
 8013432:	2b1e      	cmp	r3, #30
 8013434:	bfda      	itte	le
 8013436:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801343a:	40da      	lsrle	r2, r3
 801343c:	2201      	movgt	r2, #1
 801343e:	2300      	movs	r3, #0
 8013440:	4619      	mov	r1, r3
 8013442:	4610      	mov	r0, r2
 8013444:	ec41 0b10 	vmov	d0, r0, r1
 8013448:	b002      	add	sp, #8
 801344a:	4770      	bx	lr
 801344c:	7ff00000 	.word	0x7ff00000

08013450 <__b2d>:
 8013450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013454:	6906      	ldr	r6, [r0, #16]
 8013456:	f100 0814 	add.w	r8, r0, #20
 801345a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801345e:	1f37      	subs	r7, r6, #4
 8013460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013464:	4610      	mov	r0, r2
 8013466:	f7ff fd53 	bl	8012f10 <__hi0bits>
 801346a:	f1c0 0320 	rsb	r3, r0, #32
 801346e:	280a      	cmp	r0, #10
 8013470:	600b      	str	r3, [r1, #0]
 8013472:	491b      	ldr	r1, [pc, #108]	; (80134e0 <__b2d+0x90>)
 8013474:	dc15      	bgt.n	80134a2 <__b2d+0x52>
 8013476:	f1c0 0c0b 	rsb	ip, r0, #11
 801347a:	fa22 f30c 	lsr.w	r3, r2, ip
 801347e:	45b8      	cmp	r8, r7
 8013480:	ea43 0501 	orr.w	r5, r3, r1
 8013484:	bf34      	ite	cc
 8013486:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801348a:	2300      	movcs	r3, #0
 801348c:	3015      	adds	r0, #21
 801348e:	fa02 f000 	lsl.w	r0, r2, r0
 8013492:	fa23 f30c 	lsr.w	r3, r3, ip
 8013496:	4303      	orrs	r3, r0
 8013498:	461c      	mov	r4, r3
 801349a:	ec45 4b10 	vmov	d0, r4, r5
 801349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134a2:	45b8      	cmp	r8, r7
 80134a4:	bf3a      	itte	cc
 80134a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80134aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80134ae:	2300      	movcs	r3, #0
 80134b0:	380b      	subs	r0, #11
 80134b2:	d012      	beq.n	80134da <__b2d+0x8a>
 80134b4:	f1c0 0120 	rsb	r1, r0, #32
 80134b8:	fa23 f401 	lsr.w	r4, r3, r1
 80134bc:	4082      	lsls	r2, r0
 80134be:	4322      	orrs	r2, r4
 80134c0:	4547      	cmp	r7, r8
 80134c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80134c6:	bf8c      	ite	hi
 80134c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80134cc:	2200      	movls	r2, #0
 80134ce:	4083      	lsls	r3, r0
 80134d0:	40ca      	lsrs	r2, r1
 80134d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80134d6:	4313      	orrs	r3, r2
 80134d8:	e7de      	b.n	8013498 <__b2d+0x48>
 80134da:	ea42 0501 	orr.w	r5, r2, r1
 80134de:	e7db      	b.n	8013498 <__b2d+0x48>
 80134e0:	3ff00000 	.word	0x3ff00000

080134e4 <__d2b>:
 80134e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134e8:	460f      	mov	r7, r1
 80134ea:	2101      	movs	r1, #1
 80134ec:	ec59 8b10 	vmov	r8, r9, d0
 80134f0:	4616      	mov	r6, r2
 80134f2:	f7ff fc1b 	bl	8012d2c <_Balloc>
 80134f6:	4604      	mov	r4, r0
 80134f8:	b930      	cbnz	r0, 8013508 <__d2b+0x24>
 80134fa:	4602      	mov	r2, r0
 80134fc:	4b24      	ldr	r3, [pc, #144]	; (8013590 <__d2b+0xac>)
 80134fe:	4825      	ldr	r0, [pc, #148]	; (8013594 <__d2b+0xb0>)
 8013500:	f240 310f 	movw	r1, #783	; 0x30f
 8013504:	f001 fb6c 	bl	8014be0 <__assert_func>
 8013508:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801350c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013510:	bb2d      	cbnz	r5, 801355e <__d2b+0x7a>
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	f1b8 0300 	subs.w	r3, r8, #0
 8013518:	d026      	beq.n	8013568 <__d2b+0x84>
 801351a:	4668      	mov	r0, sp
 801351c:	9300      	str	r3, [sp, #0]
 801351e:	f7ff fd17 	bl	8012f50 <__lo0bits>
 8013522:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013526:	b1e8      	cbz	r0, 8013564 <__d2b+0x80>
 8013528:	f1c0 0320 	rsb	r3, r0, #32
 801352c:	fa02 f303 	lsl.w	r3, r2, r3
 8013530:	430b      	orrs	r3, r1
 8013532:	40c2      	lsrs	r2, r0
 8013534:	6163      	str	r3, [r4, #20]
 8013536:	9201      	str	r2, [sp, #4]
 8013538:	9b01      	ldr	r3, [sp, #4]
 801353a:	61a3      	str	r3, [r4, #24]
 801353c:	2b00      	cmp	r3, #0
 801353e:	bf14      	ite	ne
 8013540:	2202      	movne	r2, #2
 8013542:	2201      	moveq	r2, #1
 8013544:	6122      	str	r2, [r4, #16]
 8013546:	b1bd      	cbz	r5, 8013578 <__d2b+0x94>
 8013548:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801354c:	4405      	add	r5, r0
 801354e:	603d      	str	r5, [r7, #0]
 8013550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013554:	6030      	str	r0, [r6, #0]
 8013556:	4620      	mov	r0, r4
 8013558:	b003      	add	sp, #12
 801355a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801355e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013562:	e7d6      	b.n	8013512 <__d2b+0x2e>
 8013564:	6161      	str	r1, [r4, #20]
 8013566:	e7e7      	b.n	8013538 <__d2b+0x54>
 8013568:	a801      	add	r0, sp, #4
 801356a:	f7ff fcf1 	bl	8012f50 <__lo0bits>
 801356e:	9b01      	ldr	r3, [sp, #4]
 8013570:	6163      	str	r3, [r4, #20]
 8013572:	3020      	adds	r0, #32
 8013574:	2201      	movs	r2, #1
 8013576:	e7e5      	b.n	8013544 <__d2b+0x60>
 8013578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801357c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013580:	6038      	str	r0, [r7, #0]
 8013582:	6918      	ldr	r0, [r3, #16]
 8013584:	f7ff fcc4 	bl	8012f10 <__hi0bits>
 8013588:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801358c:	e7e2      	b.n	8013554 <__d2b+0x70>
 801358e:	bf00      	nop
 8013590:	0801855b 	.word	0x0801855b
 8013594:	0801856c 	.word	0x0801856c

08013598 <__ratio>:
 8013598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359c:	4688      	mov	r8, r1
 801359e:	4669      	mov	r1, sp
 80135a0:	4681      	mov	r9, r0
 80135a2:	f7ff ff55 	bl	8013450 <__b2d>
 80135a6:	a901      	add	r1, sp, #4
 80135a8:	4640      	mov	r0, r8
 80135aa:	ec55 4b10 	vmov	r4, r5, d0
 80135ae:	f7ff ff4f 	bl	8013450 <__b2d>
 80135b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80135ba:	eba3 0c02 	sub.w	ip, r3, r2
 80135be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80135c2:	1a9b      	subs	r3, r3, r2
 80135c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80135c8:	ec51 0b10 	vmov	r0, r1, d0
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	bfd6      	itet	le
 80135d0:	460a      	movle	r2, r1
 80135d2:	462a      	movgt	r2, r5
 80135d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80135d8:	468b      	mov	fp, r1
 80135da:	462f      	mov	r7, r5
 80135dc:	bfd4      	ite	le
 80135de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80135e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80135e6:	4620      	mov	r0, r4
 80135e8:	ee10 2a10 	vmov	r2, s0
 80135ec:	465b      	mov	r3, fp
 80135ee:	4639      	mov	r1, r7
 80135f0:	f7ed f95c 	bl	80008ac <__aeabi_ddiv>
 80135f4:	ec41 0b10 	vmov	d0, r0, r1
 80135f8:	b003      	add	sp, #12
 80135fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135fe <__copybits>:
 80135fe:	3901      	subs	r1, #1
 8013600:	b570      	push	{r4, r5, r6, lr}
 8013602:	1149      	asrs	r1, r1, #5
 8013604:	6914      	ldr	r4, [r2, #16]
 8013606:	3101      	adds	r1, #1
 8013608:	f102 0314 	add.w	r3, r2, #20
 801360c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013610:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013614:	1f05      	subs	r5, r0, #4
 8013616:	42a3      	cmp	r3, r4
 8013618:	d30c      	bcc.n	8013634 <__copybits+0x36>
 801361a:	1aa3      	subs	r3, r4, r2
 801361c:	3b11      	subs	r3, #17
 801361e:	f023 0303 	bic.w	r3, r3, #3
 8013622:	3211      	adds	r2, #17
 8013624:	42a2      	cmp	r2, r4
 8013626:	bf88      	it	hi
 8013628:	2300      	movhi	r3, #0
 801362a:	4418      	add	r0, r3
 801362c:	2300      	movs	r3, #0
 801362e:	4288      	cmp	r0, r1
 8013630:	d305      	bcc.n	801363e <__copybits+0x40>
 8013632:	bd70      	pop	{r4, r5, r6, pc}
 8013634:	f853 6b04 	ldr.w	r6, [r3], #4
 8013638:	f845 6f04 	str.w	r6, [r5, #4]!
 801363c:	e7eb      	b.n	8013616 <__copybits+0x18>
 801363e:	f840 3b04 	str.w	r3, [r0], #4
 8013642:	e7f4      	b.n	801362e <__copybits+0x30>

08013644 <__any_on>:
 8013644:	f100 0214 	add.w	r2, r0, #20
 8013648:	6900      	ldr	r0, [r0, #16]
 801364a:	114b      	asrs	r3, r1, #5
 801364c:	4298      	cmp	r0, r3
 801364e:	b510      	push	{r4, lr}
 8013650:	db11      	blt.n	8013676 <__any_on+0x32>
 8013652:	dd0a      	ble.n	801366a <__any_on+0x26>
 8013654:	f011 011f 	ands.w	r1, r1, #31
 8013658:	d007      	beq.n	801366a <__any_on+0x26>
 801365a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801365e:	fa24 f001 	lsr.w	r0, r4, r1
 8013662:	fa00 f101 	lsl.w	r1, r0, r1
 8013666:	428c      	cmp	r4, r1
 8013668:	d10b      	bne.n	8013682 <__any_on+0x3e>
 801366a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801366e:	4293      	cmp	r3, r2
 8013670:	d803      	bhi.n	801367a <__any_on+0x36>
 8013672:	2000      	movs	r0, #0
 8013674:	bd10      	pop	{r4, pc}
 8013676:	4603      	mov	r3, r0
 8013678:	e7f7      	b.n	801366a <__any_on+0x26>
 801367a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801367e:	2900      	cmp	r1, #0
 8013680:	d0f5      	beq.n	801366e <__any_on+0x2a>
 8013682:	2001      	movs	r0, #1
 8013684:	e7f6      	b.n	8013674 <__any_on+0x30>

08013686 <sulp>:
 8013686:	b570      	push	{r4, r5, r6, lr}
 8013688:	4604      	mov	r4, r0
 801368a:	460d      	mov	r5, r1
 801368c:	ec45 4b10 	vmov	d0, r4, r5
 8013690:	4616      	mov	r6, r2
 8013692:	f7ff feb7 	bl	8013404 <__ulp>
 8013696:	ec51 0b10 	vmov	r0, r1, d0
 801369a:	b17e      	cbz	r6, 80136bc <sulp+0x36>
 801369c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80136a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	dd09      	ble.n	80136bc <sulp+0x36>
 80136a8:	051b      	lsls	r3, r3, #20
 80136aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80136ae:	2400      	movs	r4, #0
 80136b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80136b4:	4622      	mov	r2, r4
 80136b6:	462b      	mov	r3, r5
 80136b8:	f7ec ffce 	bl	8000658 <__aeabi_dmul>
 80136bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080136c0 <_strtod_l>:
 80136c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c4:	ed2d 8b02 	vpush	{d8}
 80136c8:	b09b      	sub	sp, #108	; 0x6c
 80136ca:	4604      	mov	r4, r0
 80136cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80136ce:	2200      	movs	r2, #0
 80136d0:	9216      	str	r2, [sp, #88]	; 0x58
 80136d2:	460d      	mov	r5, r1
 80136d4:	f04f 0800 	mov.w	r8, #0
 80136d8:	f04f 0900 	mov.w	r9, #0
 80136dc:	460a      	mov	r2, r1
 80136de:	9215      	str	r2, [sp, #84]	; 0x54
 80136e0:	7811      	ldrb	r1, [r2, #0]
 80136e2:	292b      	cmp	r1, #43	; 0x2b
 80136e4:	d04c      	beq.n	8013780 <_strtod_l+0xc0>
 80136e6:	d83a      	bhi.n	801375e <_strtod_l+0x9e>
 80136e8:	290d      	cmp	r1, #13
 80136ea:	d834      	bhi.n	8013756 <_strtod_l+0x96>
 80136ec:	2908      	cmp	r1, #8
 80136ee:	d834      	bhi.n	801375a <_strtod_l+0x9a>
 80136f0:	2900      	cmp	r1, #0
 80136f2:	d03d      	beq.n	8013770 <_strtod_l+0xb0>
 80136f4:	2200      	movs	r2, #0
 80136f6:	920a      	str	r2, [sp, #40]	; 0x28
 80136f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80136fa:	7832      	ldrb	r2, [r6, #0]
 80136fc:	2a30      	cmp	r2, #48	; 0x30
 80136fe:	f040 80b4 	bne.w	801386a <_strtod_l+0x1aa>
 8013702:	7872      	ldrb	r2, [r6, #1]
 8013704:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013708:	2a58      	cmp	r2, #88	; 0x58
 801370a:	d170      	bne.n	80137ee <_strtod_l+0x12e>
 801370c:	9302      	str	r3, [sp, #8]
 801370e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013710:	9301      	str	r3, [sp, #4]
 8013712:	ab16      	add	r3, sp, #88	; 0x58
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	4a8e      	ldr	r2, [pc, #568]	; (8013950 <_strtod_l+0x290>)
 8013718:	ab17      	add	r3, sp, #92	; 0x5c
 801371a:	a915      	add	r1, sp, #84	; 0x54
 801371c:	4620      	mov	r0, r4
 801371e:	f001 fafb 	bl	8014d18 <__gethex>
 8013722:	f010 070f 	ands.w	r7, r0, #15
 8013726:	4605      	mov	r5, r0
 8013728:	d005      	beq.n	8013736 <_strtod_l+0x76>
 801372a:	2f06      	cmp	r7, #6
 801372c:	d12a      	bne.n	8013784 <_strtod_l+0xc4>
 801372e:	3601      	adds	r6, #1
 8013730:	2300      	movs	r3, #0
 8013732:	9615      	str	r6, [sp, #84]	; 0x54
 8013734:	930a      	str	r3, [sp, #40]	; 0x28
 8013736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013738:	2b00      	cmp	r3, #0
 801373a:	f040 857f 	bne.w	801423c <_strtod_l+0xb7c>
 801373e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013740:	b1db      	cbz	r3, 801377a <_strtod_l+0xba>
 8013742:	4642      	mov	r2, r8
 8013744:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013748:	ec43 2b10 	vmov	d0, r2, r3
 801374c:	b01b      	add	sp, #108	; 0x6c
 801374e:	ecbd 8b02 	vpop	{d8}
 8013752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013756:	2920      	cmp	r1, #32
 8013758:	d1cc      	bne.n	80136f4 <_strtod_l+0x34>
 801375a:	3201      	adds	r2, #1
 801375c:	e7bf      	b.n	80136de <_strtod_l+0x1e>
 801375e:	292d      	cmp	r1, #45	; 0x2d
 8013760:	d1c8      	bne.n	80136f4 <_strtod_l+0x34>
 8013762:	2101      	movs	r1, #1
 8013764:	910a      	str	r1, [sp, #40]	; 0x28
 8013766:	1c51      	adds	r1, r2, #1
 8013768:	9115      	str	r1, [sp, #84]	; 0x54
 801376a:	7852      	ldrb	r2, [r2, #1]
 801376c:	2a00      	cmp	r2, #0
 801376e:	d1c3      	bne.n	80136f8 <_strtod_l+0x38>
 8013770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013772:	9515      	str	r5, [sp, #84]	; 0x54
 8013774:	2b00      	cmp	r3, #0
 8013776:	f040 855f 	bne.w	8014238 <_strtod_l+0xb78>
 801377a:	4642      	mov	r2, r8
 801377c:	464b      	mov	r3, r9
 801377e:	e7e3      	b.n	8013748 <_strtod_l+0x88>
 8013780:	2100      	movs	r1, #0
 8013782:	e7ef      	b.n	8013764 <_strtod_l+0xa4>
 8013784:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013786:	b13a      	cbz	r2, 8013798 <_strtod_l+0xd8>
 8013788:	2135      	movs	r1, #53	; 0x35
 801378a:	a818      	add	r0, sp, #96	; 0x60
 801378c:	f7ff ff37 	bl	80135fe <__copybits>
 8013790:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013792:	4620      	mov	r0, r4
 8013794:	f7ff fb0a 	bl	8012dac <_Bfree>
 8013798:	3f01      	subs	r7, #1
 801379a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801379c:	2f04      	cmp	r7, #4
 801379e:	d806      	bhi.n	80137ae <_strtod_l+0xee>
 80137a0:	e8df f007 	tbb	[pc, r7]
 80137a4:	201d0314 	.word	0x201d0314
 80137a8:	14          	.byte	0x14
 80137a9:	00          	.byte	0x00
 80137aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80137ae:	05e9      	lsls	r1, r5, #23
 80137b0:	bf48      	it	mi
 80137b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80137b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80137ba:	0d1b      	lsrs	r3, r3, #20
 80137bc:	051b      	lsls	r3, r3, #20
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d1b9      	bne.n	8013736 <_strtod_l+0x76>
 80137c2:	f7fe fba3 	bl	8011f0c <__errno>
 80137c6:	2322      	movs	r3, #34	; 0x22
 80137c8:	6003      	str	r3, [r0, #0]
 80137ca:	e7b4      	b.n	8013736 <_strtod_l+0x76>
 80137cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80137d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80137d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80137d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80137dc:	e7e7      	b.n	80137ae <_strtod_l+0xee>
 80137de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013958 <_strtod_l+0x298>
 80137e2:	e7e4      	b.n	80137ae <_strtod_l+0xee>
 80137e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80137e8:	f04f 38ff 	mov.w	r8, #4294967295
 80137ec:	e7df      	b.n	80137ae <_strtod_l+0xee>
 80137ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137f0:	1c5a      	adds	r2, r3, #1
 80137f2:	9215      	str	r2, [sp, #84]	; 0x54
 80137f4:	785b      	ldrb	r3, [r3, #1]
 80137f6:	2b30      	cmp	r3, #48	; 0x30
 80137f8:	d0f9      	beq.n	80137ee <_strtod_l+0x12e>
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d09b      	beq.n	8013736 <_strtod_l+0x76>
 80137fe:	2301      	movs	r3, #1
 8013800:	f04f 0a00 	mov.w	sl, #0
 8013804:	9304      	str	r3, [sp, #16]
 8013806:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013808:	930b      	str	r3, [sp, #44]	; 0x2c
 801380a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801380e:	46d3      	mov	fp, sl
 8013810:	220a      	movs	r2, #10
 8013812:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013814:	7806      	ldrb	r6, [r0, #0]
 8013816:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801381a:	b2d9      	uxtb	r1, r3
 801381c:	2909      	cmp	r1, #9
 801381e:	d926      	bls.n	801386e <_strtod_l+0x1ae>
 8013820:	494c      	ldr	r1, [pc, #304]	; (8013954 <_strtod_l+0x294>)
 8013822:	2201      	movs	r2, #1
 8013824:	f001 f9c0 	bl	8014ba8 <strncmp>
 8013828:	2800      	cmp	r0, #0
 801382a:	d030      	beq.n	801388e <_strtod_l+0x1ce>
 801382c:	2000      	movs	r0, #0
 801382e:	4632      	mov	r2, r6
 8013830:	9005      	str	r0, [sp, #20]
 8013832:	465e      	mov	r6, fp
 8013834:	4603      	mov	r3, r0
 8013836:	2a65      	cmp	r2, #101	; 0x65
 8013838:	d001      	beq.n	801383e <_strtod_l+0x17e>
 801383a:	2a45      	cmp	r2, #69	; 0x45
 801383c:	d113      	bne.n	8013866 <_strtod_l+0x1a6>
 801383e:	b91e      	cbnz	r6, 8013848 <_strtod_l+0x188>
 8013840:	9a04      	ldr	r2, [sp, #16]
 8013842:	4302      	orrs	r2, r0
 8013844:	d094      	beq.n	8013770 <_strtod_l+0xb0>
 8013846:	2600      	movs	r6, #0
 8013848:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801384a:	1c6a      	adds	r2, r5, #1
 801384c:	9215      	str	r2, [sp, #84]	; 0x54
 801384e:	786a      	ldrb	r2, [r5, #1]
 8013850:	2a2b      	cmp	r2, #43	; 0x2b
 8013852:	d074      	beq.n	801393e <_strtod_l+0x27e>
 8013854:	2a2d      	cmp	r2, #45	; 0x2d
 8013856:	d078      	beq.n	801394a <_strtod_l+0x28a>
 8013858:	f04f 0c00 	mov.w	ip, #0
 801385c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013860:	2909      	cmp	r1, #9
 8013862:	d97f      	bls.n	8013964 <_strtod_l+0x2a4>
 8013864:	9515      	str	r5, [sp, #84]	; 0x54
 8013866:	2700      	movs	r7, #0
 8013868:	e09e      	b.n	80139a8 <_strtod_l+0x2e8>
 801386a:	2300      	movs	r3, #0
 801386c:	e7c8      	b.n	8013800 <_strtod_l+0x140>
 801386e:	f1bb 0f08 	cmp.w	fp, #8
 8013872:	bfd8      	it	le
 8013874:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013876:	f100 0001 	add.w	r0, r0, #1
 801387a:	bfda      	itte	le
 801387c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013880:	9309      	strle	r3, [sp, #36]	; 0x24
 8013882:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013886:	f10b 0b01 	add.w	fp, fp, #1
 801388a:	9015      	str	r0, [sp, #84]	; 0x54
 801388c:	e7c1      	b.n	8013812 <_strtod_l+0x152>
 801388e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013890:	1c5a      	adds	r2, r3, #1
 8013892:	9215      	str	r2, [sp, #84]	; 0x54
 8013894:	785a      	ldrb	r2, [r3, #1]
 8013896:	f1bb 0f00 	cmp.w	fp, #0
 801389a:	d037      	beq.n	801390c <_strtod_l+0x24c>
 801389c:	9005      	str	r0, [sp, #20]
 801389e:	465e      	mov	r6, fp
 80138a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80138a4:	2b09      	cmp	r3, #9
 80138a6:	d912      	bls.n	80138ce <_strtod_l+0x20e>
 80138a8:	2301      	movs	r3, #1
 80138aa:	e7c4      	b.n	8013836 <_strtod_l+0x176>
 80138ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138ae:	1c5a      	adds	r2, r3, #1
 80138b0:	9215      	str	r2, [sp, #84]	; 0x54
 80138b2:	785a      	ldrb	r2, [r3, #1]
 80138b4:	3001      	adds	r0, #1
 80138b6:	2a30      	cmp	r2, #48	; 0x30
 80138b8:	d0f8      	beq.n	80138ac <_strtod_l+0x1ec>
 80138ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80138be:	2b08      	cmp	r3, #8
 80138c0:	f200 84c1 	bhi.w	8014246 <_strtod_l+0xb86>
 80138c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138c6:	9005      	str	r0, [sp, #20]
 80138c8:	2000      	movs	r0, #0
 80138ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80138cc:	4606      	mov	r6, r0
 80138ce:	3a30      	subs	r2, #48	; 0x30
 80138d0:	f100 0301 	add.w	r3, r0, #1
 80138d4:	d014      	beq.n	8013900 <_strtod_l+0x240>
 80138d6:	9905      	ldr	r1, [sp, #20]
 80138d8:	4419      	add	r1, r3
 80138da:	9105      	str	r1, [sp, #20]
 80138dc:	4633      	mov	r3, r6
 80138de:	eb00 0c06 	add.w	ip, r0, r6
 80138e2:	210a      	movs	r1, #10
 80138e4:	4563      	cmp	r3, ip
 80138e6:	d113      	bne.n	8013910 <_strtod_l+0x250>
 80138e8:	1833      	adds	r3, r6, r0
 80138ea:	2b08      	cmp	r3, #8
 80138ec:	f106 0601 	add.w	r6, r6, #1
 80138f0:	4406      	add	r6, r0
 80138f2:	dc1a      	bgt.n	801392a <_strtod_l+0x26a>
 80138f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138f6:	230a      	movs	r3, #10
 80138f8:	fb03 2301 	mla	r3, r3, r1, r2
 80138fc:	9309      	str	r3, [sp, #36]	; 0x24
 80138fe:	2300      	movs	r3, #0
 8013900:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013902:	1c51      	adds	r1, r2, #1
 8013904:	9115      	str	r1, [sp, #84]	; 0x54
 8013906:	7852      	ldrb	r2, [r2, #1]
 8013908:	4618      	mov	r0, r3
 801390a:	e7c9      	b.n	80138a0 <_strtod_l+0x1e0>
 801390c:	4658      	mov	r0, fp
 801390e:	e7d2      	b.n	80138b6 <_strtod_l+0x1f6>
 8013910:	2b08      	cmp	r3, #8
 8013912:	f103 0301 	add.w	r3, r3, #1
 8013916:	dc03      	bgt.n	8013920 <_strtod_l+0x260>
 8013918:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801391a:	434f      	muls	r7, r1
 801391c:	9709      	str	r7, [sp, #36]	; 0x24
 801391e:	e7e1      	b.n	80138e4 <_strtod_l+0x224>
 8013920:	2b10      	cmp	r3, #16
 8013922:	bfd8      	it	le
 8013924:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013928:	e7dc      	b.n	80138e4 <_strtod_l+0x224>
 801392a:	2e10      	cmp	r6, #16
 801392c:	bfdc      	itt	le
 801392e:	230a      	movle	r3, #10
 8013930:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013934:	e7e3      	b.n	80138fe <_strtod_l+0x23e>
 8013936:	2300      	movs	r3, #0
 8013938:	9305      	str	r3, [sp, #20]
 801393a:	2301      	movs	r3, #1
 801393c:	e780      	b.n	8013840 <_strtod_l+0x180>
 801393e:	f04f 0c00 	mov.w	ip, #0
 8013942:	1caa      	adds	r2, r5, #2
 8013944:	9215      	str	r2, [sp, #84]	; 0x54
 8013946:	78aa      	ldrb	r2, [r5, #2]
 8013948:	e788      	b.n	801385c <_strtod_l+0x19c>
 801394a:	f04f 0c01 	mov.w	ip, #1
 801394e:	e7f8      	b.n	8013942 <_strtod_l+0x282>
 8013950:	080186c8 	.word	0x080186c8
 8013954:	080186c4 	.word	0x080186c4
 8013958:	7ff00000 	.word	0x7ff00000
 801395c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801395e:	1c51      	adds	r1, r2, #1
 8013960:	9115      	str	r1, [sp, #84]	; 0x54
 8013962:	7852      	ldrb	r2, [r2, #1]
 8013964:	2a30      	cmp	r2, #48	; 0x30
 8013966:	d0f9      	beq.n	801395c <_strtod_l+0x29c>
 8013968:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801396c:	2908      	cmp	r1, #8
 801396e:	f63f af7a 	bhi.w	8013866 <_strtod_l+0x1a6>
 8013972:	3a30      	subs	r2, #48	; 0x30
 8013974:	9208      	str	r2, [sp, #32]
 8013976:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013978:	920c      	str	r2, [sp, #48]	; 0x30
 801397a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801397c:	1c57      	adds	r7, r2, #1
 801397e:	9715      	str	r7, [sp, #84]	; 0x54
 8013980:	7852      	ldrb	r2, [r2, #1]
 8013982:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013986:	f1be 0f09 	cmp.w	lr, #9
 801398a:	d938      	bls.n	80139fe <_strtod_l+0x33e>
 801398c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801398e:	1a7f      	subs	r7, r7, r1
 8013990:	2f08      	cmp	r7, #8
 8013992:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013996:	dc03      	bgt.n	80139a0 <_strtod_l+0x2e0>
 8013998:	9908      	ldr	r1, [sp, #32]
 801399a:	428f      	cmp	r7, r1
 801399c:	bfa8      	it	ge
 801399e:	460f      	movge	r7, r1
 80139a0:	f1bc 0f00 	cmp.w	ip, #0
 80139a4:	d000      	beq.n	80139a8 <_strtod_l+0x2e8>
 80139a6:	427f      	negs	r7, r7
 80139a8:	2e00      	cmp	r6, #0
 80139aa:	d14f      	bne.n	8013a4c <_strtod_l+0x38c>
 80139ac:	9904      	ldr	r1, [sp, #16]
 80139ae:	4301      	orrs	r1, r0
 80139b0:	f47f aec1 	bne.w	8013736 <_strtod_l+0x76>
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f47f aedb 	bne.w	8013770 <_strtod_l+0xb0>
 80139ba:	2a69      	cmp	r2, #105	; 0x69
 80139bc:	d029      	beq.n	8013a12 <_strtod_l+0x352>
 80139be:	dc26      	bgt.n	8013a0e <_strtod_l+0x34e>
 80139c0:	2a49      	cmp	r2, #73	; 0x49
 80139c2:	d026      	beq.n	8013a12 <_strtod_l+0x352>
 80139c4:	2a4e      	cmp	r2, #78	; 0x4e
 80139c6:	f47f aed3 	bne.w	8013770 <_strtod_l+0xb0>
 80139ca:	499b      	ldr	r1, [pc, #620]	; (8013c38 <_strtod_l+0x578>)
 80139cc:	a815      	add	r0, sp, #84	; 0x54
 80139ce:	f001 fbe3 	bl	8015198 <__match>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	f43f aecc 	beq.w	8013770 <_strtod_l+0xb0>
 80139d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	2b28      	cmp	r3, #40	; 0x28
 80139de:	d12f      	bne.n	8013a40 <_strtod_l+0x380>
 80139e0:	4996      	ldr	r1, [pc, #600]	; (8013c3c <_strtod_l+0x57c>)
 80139e2:	aa18      	add	r2, sp, #96	; 0x60
 80139e4:	a815      	add	r0, sp, #84	; 0x54
 80139e6:	f001 fbeb 	bl	80151c0 <__hexnan>
 80139ea:	2805      	cmp	r0, #5
 80139ec:	d128      	bne.n	8013a40 <_strtod_l+0x380>
 80139ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80139f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80139f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80139fc:	e69b      	b.n	8013736 <_strtod_l+0x76>
 80139fe:	9f08      	ldr	r7, [sp, #32]
 8013a00:	210a      	movs	r1, #10
 8013a02:	fb01 2107 	mla	r1, r1, r7, r2
 8013a06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013a0a:	9208      	str	r2, [sp, #32]
 8013a0c:	e7b5      	b.n	801397a <_strtod_l+0x2ba>
 8013a0e:	2a6e      	cmp	r2, #110	; 0x6e
 8013a10:	e7d9      	b.n	80139c6 <_strtod_l+0x306>
 8013a12:	498b      	ldr	r1, [pc, #556]	; (8013c40 <_strtod_l+0x580>)
 8013a14:	a815      	add	r0, sp, #84	; 0x54
 8013a16:	f001 fbbf 	bl	8015198 <__match>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	f43f aea8 	beq.w	8013770 <_strtod_l+0xb0>
 8013a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a22:	4988      	ldr	r1, [pc, #544]	; (8013c44 <_strtod_l+0x584>)
 8013a24:	3b01      	subs	r3, #1
 8013a26:	a815      	add	r0, sp, #84	; 0x54
 8013a28:	9315      	str	r3, [sp, #84]	; 0x54
 8013a2a:	f001 fbb5 	bl	8015198 <__match>
 8013a2e:	b910      	cbnz	r0, 8013a36 <_strtod_l+0x376>
 8013a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a32:	3301      	adds	r3, #1
 8013a34:	9315      	str	r3, [sp, #84]	; 0x54
 8013a36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013c54 <_strtod_l+0x594>
 8013a3a:	f04f 0800 	mov.w	r8, #0
 8013a3e:	e67a      	b.n	8013736 <_strtod_l+0x76>
 8013a40:	4881      	ldr	r0, [pc, #516]	; (8013c48 <_strtod_l+0x588>)
 8013a42:	f001 f8c5 	bl	8014bd0 <nan>
 8013a46:	ec59 8b10 	vmov	r8, r9, d0
 8013a4a:	e674      	b.n	8013736 <_strtod_l+0x76>
 8013a4c:	9b05      	ldr	r3, [sp, #20]
 8013a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a50:	1afb      	subs	r3, r7, r3
 8013a52:	f1bb 0f00 	cmp.w	fp, #0
 8013a56:	bf08      	it	eq
 8013a58:	46b3      	moveq	fp, r6
 8013a5a:	2e10      	cmp	r6, #16
 8013a5c:	9308      	str	r3, [sp, #32]
 8013a5e:	4635      	mov	r5, r6
 8013a60:	bfa8      	it	ge
 8013a62:	2510      	movge	r5, #16
 8013a64:	f7ec fd7e 	bl	8000564 <__aeabi_ui2d>
 8013a68:	2e09      	cmp	r6, #9
 8013a6a:	4680      	mov	r8, r0
 8013a6c:	4689      	mov	r9, r1
 8013a6e:	dd13      	ble.n	8013a98 <_strtod_l+0x3d8>
 8013a70:	4b76      	ldr	r3, [pc, #472]	; (8013c4c <_strtod_l+0x58c>)
 8013a72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013a76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013a7a:	f7ec fded 	bl	8000658 <__aeabi_dmul>
 8013a7e:	4680      	mov	r8, r0
 8013a80:	4650      	mov	r0, sl
 8013a82:	4689      	mov	r9, r1
 8013a84:	f7ec fd6e 	bl	8000564 <__aeabi_ui2d>
 8013a88:	4602      	mov	r2, r0
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	4640      	mov	r0, r8
 8013a8e:	4649      	mov	r1, r9
 8013a90:	f7ec fc2c 	bl	80002ec <__adddf3>
 8013a94:	4680      	mov	r8, r0
 8013a96:	4689      	mov	r9, r1
 8013a98:	2e0f      	cmp	r6, #15
 8013a9a:	dc38      	bgt.n	8013b0e <_strtod_l+0x44e>
 8013a9c:	9b08      	ldr	r3, [sp, #32]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	f43f ae49 	beq.w	8013736 <_strtod_l+0x76>
 8013aa4:	dd24      	ble.n	8013af0 <_strtod_l+0x430>
 8013aa6:	2b16      	cmp	r3, #22
 8013aa8:	dc0b      	bgt.n	8013ac2 <_strtod_l+0x402>
 8013aaa:	4968      	ldr	r1, [pc, #416]	; (8013c4c <_strtod_l+0x58c>)
 8013aac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ab4:	4642      	mov	r2, r8
 8013ab6:	464b      	mov	r3, r9
 8013ab8:	f7ec fdce 	bl	8000658 <__aeabi_dmul>
 8013abc:	4680      	mov	r8, r0
 8013abe:	4689      	mov	r9, r1
 8013ac0:	e639      	b.n	8013736 <_strtod_l+0x76>
 8013ac2:	9a08      	ldr	r2, [sp, #32]
 8013ac4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	db20      	blt.n	8013b0e <_strtod_l+0x44e>
 8013acc:	4c5f      	ldr	r4, [pc, #380]	; (8013c4c <_strtod_l+0x58c>)
 8013ace:	f1c6 060f 	rsb	r6, r6, #15
 8013ad2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013ad6:	4642      	mov	r2, r8
 8013ad8:	464b      	mov	r3, r9
 8013ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ade:	f7ec fdbb 	bl	8000658 <__aeabi_dmul>
 8013ae2:	9b08      	ldr	r3, [sp, #32]
 8013ae4:	1b9e      	subs	r6, r3, r6
 8013ae6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013aea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013aee:	e7e3      	b.n	8013ab8 <_strtod_l+0x3f8>
 8013af0:	9b08      	ldr	r3, [sp, #32]
 8013af2:	3316      	adds	r3, #22
 8013af4:	db0b      	blt.n	8013b0e <_strtod_l+0x44e>
 8013af6:	9b05      	ldr	r3, [sp, #20]
 8013af8:	1bdf      	subs	r7, r3, r7
 8013afa:	4b54      	ldr	r3, [pc, #336]	; (8013c4c <_strtod_l+0x58c>)
 8013afc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b04:	4640      	mov	r0, r8
 8013b06:	4649      	mov	r1, r9
 8013b08:	f7ec fed0 	bl	80008ac <__aeabi_ddiv>
 8013b0c:	e7d6      	b.n	8013abc <_strtod_l+0x3fc>
 8013b0e:	9b08      	ldr	r3, [sp, #32]
 8013b10:	1b75      	subs	r5, r6, r5
 8013b12:	441d      	add	r5, r3
 8013b14:	2d00      	cmp	r5, #0
 8013b16:	dd70      	ble.n	8013bfa <_strtod_l+0x53a>
 8013b18:	f015 030f 	ands.w	r3, r5, #15
 8013b1c:	d00a      	beq.n	8013b34 <_strtod_l+0x474>
 8013b1e:	494b      	ldr	r1, [pc, #300]	; (8013c4c <_strtod_l+0x58c>)
 8013b20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b24:	4642      	mov	r2, r8
 8013b26:	464b      	mov	r3, r9
 8013b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b2c:	f7ec fd94 	bl	8000658 <__aeabi_dmul>
 8013b30:	4680      	mov	r8, r0
 8013b32:	4689      	mov	r9, r1
 8013b34:	f035 050f 	bics.w	r5, r5, #15
 8013b38:	d04d      	beq.n	8013bd6 <_strtod_l+0x516>
 8013b3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013b3e:	dd22      	ble.n	8013b86 <_strtod_l+0x4c6>
 8013b40:	2500      	movs	r5, #0
 8013b42:	46ab      	mov	fp, r5
 8013b44:	9509      	str	r5, [sp, #36]	; 0x24
 8013b46:	9505      	str	r5, [sp, #20]
 8013b48:	2322      	movs	r3, #34	; 0x22
 8013b4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013c54 <_strtod_l+0x594>
 8013b4e:	6023      	str	r3, [r4, #0]
 8013b50:	f04f 0800 	mov.w	r8, #0
 8013b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	f43f aded 	beq.w	8013736 <_strtod_l+0x76>
 8013b5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013b5e:	4620      	mov	r0, r4
 8013b60:	f7ff f924 	bl	8012dac <_Bfree>
 8013b64:	9905      	ldr	r1, [sp, #20]
 8013b66:	4620      	mov	r0, r4
 8013b68:	f7ff f920 	bl	8012dac <_Bfree>
 8013b6c:	4659      	mov	r1, fp
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f7ff f91c 	bl	8012dac <_Bfree>
 8013b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b76:	4620      	mov	r0, r4
 8013b78:	f7ff f918 	bl	8012dac <_Bfree>
 8013b7c:	4629      	mov	r1, r5
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f7ff f914 	bl	8012dac <_Bfree>
 8013b84:	e5d7      	b.n	8013736 <_strtod_l+0x76>
 8013b86:	4b32      	ldr	r3, [pc, #200]	; (8013c50 <_strtod_l+0x590>)
 8013b88:	9304      	str	r3, [sp, #16]
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	112d      	asrs	r5, r5, #4
 8013b8e:	4640      	mov	r0, r8
 8013b90:	4649      	mov	r1, r9
 8013b92:	469a      	mov	sl, r3
 8013b94:	2d01      	cmp	r5, #1
 8013b96:	dc21      	bgt.n	8013bdc <_strtod_l+0x51c>
 8013b98:	b10b      	cbz	r3, 8013b9e <_strtod_l+0x4de>
 8013b9a:	4680      	mov	r8, r0
 8013b9c:	4689      	mov	r9, r1
 8013b9e:	492c      	ldr	r1, [pc, #176]	; (8013c50 <_strtod_l+0x590>)
 8013ba0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013ba4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013ba8:	4642      	mov	r2, r8
 8013baa:	464b      	mov	r3, r9
 8013bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bb0:	f7ec fd52 	bl	8000658 <__aeabi_dmul>
 8013bb4:	4b27      	ldr	r3, [pc, #156]	; (8013c54 <_strtod_l+0x594>)
 8013bb6:	460a      	mov	r2, r1
 8013bb8:	400b      	ands	r3, r1
 8013bba:	4927      	ldr	r1, [pc, #156]	; (8013c58 <_strtod_l+0x598>)
 8013bbc:	428b      	cmp	r3, r1
 8013bbe:	4680      	mov	r8, r0
 8013bc0:	d8be      	bhi.n	8013b40 <_strtod_l+0x480>
 8013bc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013bc6:	428b      	cmp	r3, r1
 8013bc8:	bf86      	itte	hi
 8013bca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013c5c <_strtod_l+0x59c>
 8013bce:	f04f 38ff 	movhi.w	r8, #4294967295
 8013bd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	9304      	str	r3, [sp, #16]
 8013bda:	e07b      	b.n	8013cd4 <_strtod_l+0x614>
 8013bdc:	07ea      	lsls	r2, r5, #31
 8013bde:	d505      	bpl.n	8013bec <_strtod_l+0x52c>
 8013be0:	9b04      	ldr	r3, [sp, #16]
 8013be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be6:	f7ec fd37 	bl	8000658 <__aeabi_dmul>
 8013bea:	2301      	movs	r3, #1
 8013bec:	9a04      	ldr	r2, [sp, #16]
 8013bee:	3208      	adds	r2, #8
 8013bf0:	f10a 0a01 	add.w	sl, sl, #1
 8013bf4:	106d      	asrs	r5, r5, #1
 8013bf6:	9204      	str	r2, [sp, #16]
 8013bf8:	e7cc      	b.n	8013b94 <_strtod_l+0x4d4>
 8013bfa:	d0ec      	beq.n	8013bd6 <_strtod_l+0x516>
 8013bfc:	426d      	negs	r5, r5
 8013bfe:	f015 020f 	ands.w	r2, r5, #15
 8013c02:	d00a      	beq.n	8013c1a <_strtod_l+0x55a>
 8013c04:	4b11      	ldr	r3, [pc, #68]	; (8013c4c <_strtod_l+0x58c>)
 8013c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c0a:	4640      	mov	r0, r8
 8013c0c:	4649      	mov	r1, r9
 8013c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c12:	f7ec fe4b 	bl	80008ac <__aeabi_ddiv>
 8013c16:	4680      	mov	r8, r0
 8013c18:	4689      	mov	r9, r1
 8013c1a:	112d      	asrs	r5, r5, #4
 8013c1c:	d0db      	beq.n	8013bd6 <_strtod_l+0x516>
 8013c1e:	2d1f      	cmp	r5, #31
 8013c20:	dd1e      	ble.n	8013c60 <_strtod_l+0x5a0>
 8013c22:	2500      	movs	r5, #0
 8013c24:	46ab      	mov	fp, r5
 8013c26:	9509      	str	r5, [sp, #36]	; 0x24
 8013c28:	9505      	str	r5, [sp, #20]
 8013c2a:	2322      	movs	r3, #34	; 0x22
 8013c2c:	f04f 0800 	mov.w	r8, #0
 8013c30:	f04f 0900 	mov.w	r9, #0
 8013c34:	6023      	str	r3, [r4, #0]
 8013c36:	e78d      	b.n	8013b54 <_strtod_l+0x494>
 8013c38:	080184b3 	.word	0x080184b3
 8013c3c:	080186dc 	.word	0x080186dc
 8013c40:	080184ab 	.word	0x080184ab
 8013c44:	080184e2 	.word	0x080184e2
 8013c48:	0801886d 	.word	0x0801886d
 8013c4c:	080185f0 	.word	0x080185f0
 8013c50:	080185c8 	.word	0x080185c8
 8013c54:	7ff00000 	.word	0x7ff00000
 8013c58:	7ca00000 	.word	0x7ca00000
 8013c5c:	7fefffff 	.word	0x7fefffff
 8013c60:	f015 0310 	ands.w	r3, r5, #16
 8013c64:	bf18      	it	ne
 8013c66:	236a      	movne	r3, #106	; 0x6a
 8013c68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801400c <_strtod_l+0x94c>
 8013c6c:	9304      	str	r3, [sp, #16]
 8013c6e:	4640      	mov	r0, r8
 8013c70:	4649      	mov	r1, r9
 8013c72:	2300      	movs	r3, #0
 8013c74:	07ea      	lsls	r2, r5, #31
 8013c76:	d504      	bpl.n	8013c82 <_strtod_l+0x5c2>
 8013c78:	e9da 2300 	ldrd	r2, r3, [sl]
 8013c7c:	f7ec fcec 	bl	8000658 <__aeabi_dmul>
 8013c80:	2301      	movs	r3, #1
 8013c82:	106d      	asrs	r5, r5, #1
 8013c84:	f10a 0a08 	add.w	sl, sl, #8
 8013c88:	d1f4      	bne.n	8013c74 <_strtod_l+0x5b4>
 8013c8a:	b10b      	cbz	r3, 8013c90 <_strtod_l+0x5d0>
 8013c8c:	4680      	mov	r8, r0
 8013c8e:	4689      	mov	r9, r1
 8013c90:	9b04      	ldr	r3, [sp, #16]
 8013c92:	b1bb      	cbz	r3, 8013cc4 <_strtod_l+0x604>
 8013c94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013c98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	4649      	mov	r1, r9
 8013ca0:	dd10      	ble.n	8013cc4 <_strtod_l+0x604>
 8013ca2:	2b1f      	cmp	r3, #31
 8013ca4:	f340 811e 	ble.w	8013ee4 <_strtod_l+0x824>
 8013ca8:	2b34      	cmp	r3, #52	; 0x34
 8013caa:	bfde      	ittt	le
 8013cac:	f04f 33ff 	movle.w	r3, #4294967295
 8013cb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013cb4:	4093      	lslle	r3, r2
 8013cb6:	f04f 0800 	mov.w	r8, #0
 8013cba:	bfcc      	ite	gt
 8013cbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013cc0:	ea03 0901 	andle.w	r9, r3, r1
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	4640      	mov	r0, r8
 8013cca:	4649      	mov	r1, r9
 8013ccc:	f7ec ff2c 	bl	8000b28 <__aeabi_dcmpeq>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d1a6      	bne.n	8013c22 <_strtod_l+0x562>
 8013cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cd6:	9300      	str	r3, [sp, #0]
 8013cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013cda:	4633      	mov	r3, r6
 8013cdc:	465a      	mov	r2, fp
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f7ff f8cc 	bl	8012e7c <__s2b>
 8013ce4:	9009      	str	r0, [sp, #36]	; 0x24
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	f43f af2a 	beq.w	8013b40 <_strtod_l+0x480>
 8013cec:	9a08      	ldr	r2, [sp, #32]
 8013cee:	9b05      	ldr	r3, [sp, #20]
 8013cf0:	2a00      	cmp	r2, #0
 8013cf2:	eba3 0307 	sub.w	r3, r3, r7
 8013cf6:	bfa8      	it	ge
 8013cf8:	2300      	movge	r3, #0
 8013cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8013cfc:	2500      	movs	r5, #0
 8013cfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013d02:	9312      	str	r3, [sp, #72]	; 0x48
 8013d04:	46ab      	mov	fp, r5
 8013d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d08:	4620      	mov	r0, r4
 8013d0a:	6859      	ldr	r1, [r3, #4]
 8013d0c:	f7ff f80e 	bl	8012d2c <_Balloc>
 8013d10:	9005      	str	r0, [sp, #20]
 8013d12:	2800      	cmp	r0, #0
 8013d14:	f43f af18 	beq.w	8013b48 <_strtod_l+0x488>
 8013d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d1a:	691a      	ldr	r2, [r3, #16]
 8013d1c:	3202      	adds	r2, #2
 8013d1e:	f103 010c 	add.w	r1, r3, #12
 8013d22:	0092      	lsls	r2, r2, #2
 8013d24:	300c      	adds	r0, #12
 8013d26:	f7fe f926 	bl	8011f76 <memcpy>
 8013d2a:	ec49 8b10 	vmov	d0, r8, r9
 8013d2e:	aa18      	add	r2, sp, #96	; 0x60
 8013d30:	a917      	add	r1, sp, #92	; 0x5c
 8013d32:	4620      	mov	r0, r4
 8013d34:	f7ff fbd6 	bl	80134e4 <__d2b>
 8013d38:	ec49 8b18 	vmov	d8, r8, r9
 8013d3c:	9016      	str	r0, [sp, #88]	; 0x58
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	f43f af02 	beq.w	8013b48 <_strtod_l+0x488>
 8013d44:	2101      	movs	r1, #1
 8013d46:	4620      	mov	r0, r4
 8013d48:	f7ff f930 	bl	8012fac <__i2b>
 8013d4c:	4683      	mov	fp, r0
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	f43f aefa 	beq.w	8013b48 <_strtod_l+0x488>
 8013d54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013d56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013d58:	2e00      	cmp	r6, #0
 8013d5a:	bfab      	itete	ge
 8013d5c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013d5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013d60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013d62:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013d66:	bfac      	ite	ge
 8013d68:	eb06 0a03 	addge.w	sl, r6, r3
 8013d6c:	1b9f      	sublt	r7, r3, r6
 8013d6e:	9b04      	ldr	r3, [sp, #16]
 8013d70:	1af6      	subs	r6, r6, r3
 8013d72:	4416      	add	r6, r2
 8013d74:	4ba0      	ldr	r3, [pc, #640]	; (8013ff8 <_strtod_l+0x938>)
 8013d76:	3e01      	subs	r6, #1
 8013d78:	429e      	cmp	r6, r3
 8013d7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013d7e:	f280 80c4 	bge.w	8013f0a <_strtod_l+0x84a>
 8013d82:	1b9b      	subs	r3, r3, r6
 8013d84:	2b1f      	cmp	r3, #31
 8013d86:	eba2 0203 	sub.w	r2, r2, r3
 8013d8a:	f04f 0101 	mov.w	r1, #1
 8013d8e:	f300 80b0 	bgt.w	8013ef2 <_strtod_l+0x832>
 8013d92:	fa01 f303 	lsl.w	r3, r1, r3
 8013d96:	930e      	str	r3, [sp, #56]	; 0x38
 8013d98:	2300      	movs	r3, #0
 8013d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8013d9c:	eb0a 0602 	add.w	r6, sl, r2
 8013da0:	9b04      	ldr	r3, [sp, #16]
 8013da2:	45b2      	cmp	sl, r6
 8013da4:	4417      	add	r7, r2
 8013da6:	441f      	add	r7, r3
 8013da8:	4653      	mov	r3, sl
 8013daa:	bfa8      	it	ge
 8013dac:	4633      	movge	r3, r6
 8013dae:	42bb      	cmp	r3, r7
 8013db0:	bfa8      	it	ge
 8013db2:	463b      	movge	r3, r7
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	bfc2      	ittt	gt
 8013db8:	1af6      	subgt	r6, r6, r3
 8013dba:	1aff      	subgt	r7, r7, r3
 8013dbc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	dd17      	ble.n	8013df6 <_strtod_l+0x736>
 8013dc6:	4659      	mov	r1, fp
 8013dc8:	461a      	mov	r2, r3
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f7ff f9ae 	bl	801312c <__pow5mult>
 8013dd0:	4683      	mov	fp, r0
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	f43f aeb8 	beq.w	8013b48 <_strtod_l+0x488>
 8013dd8:	4601      	mov	r1, r0
 8013dda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f7ff f8fb 	bl	8012fd8 <__multiply>
 8013de2:	900b      	str	r0, [sp, #44]	; 0x2c
 8013de4:	2800      	cmp	r0, #0
 8013de6:	f43f aeaf 	beq.w	8013b48 <_strtod_l+0x488>
 8013dea:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013dec:	4620      	mov	r0, r4
 8013dee:	f7fe ffdd 	bl	8012dac <_Bfree>
 8013df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013df4:	9316      	str	r3, [sp, #88]	; 0x58
 8013df6:	2e00      	cmp	r6, #0
 8013df8:	f300 808c 	bgt.w	8013f14 <_strtod_l+0x854>
 8013dfc:	9b08      	ldr	r3, [sp, #32]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	dd08      	ble.n	8013e14 <_strtod_l+0x754>
 8013e02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e04:	9905      	ldr	r1, [sp, #20]
 8013e06:	4620      	mov	r0, r4
 8013e08:	f7ff f990 	bl	801312c <__pow5mult>
 8013e0c:	9005      	str	r0, [sp, #20]
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	f43f ae9a 	beq.w	8013b48 <_strtod_l+0x488>
 8013e14:	2f00      	cmp	r7, #0
 8013e16:	dd08      	ble.n	8013e2a <_strtod_l+0x76a>
 8013e18:	9905      	ldr	r1, [sp, #20]
 8013e1a:	463a      	mov	r2, r7
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	f7ff f9df 	bl	80131e0 <__lshift>
 8013e22:	9005      	str	r0, [sp, #20]
 8013e24:	2800      	cmp	r0, #0
 8013e26:	f43f ae8f 	beq.w	8013b48 <_strtod_l+0x488>
 8013e2a:	f1ba 0f00 	cmp.w	sl, #0
 8013e2e:	dd08      	ble.n	8013e42 <_strtod_l+0x782>
 8013e30:	4659      	mov	r1, fp
 8013e32:	4652      	mov	r2, sl
 8013e34:	4620      	mov	r0, r4
 8013e36:	f7ff f9d3 	bl	80131e0 <__lshift>
 8013e3a:	4683      	mov	fp, r0
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	f43f ae83 	beq.w	8013b48 <_strtod_l+0x488>
 8013e42:	9a05      	ldr	r2, [sp, #20]
 8013e44:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013e46:	4620      	mov	r0, r4
 8013e48:	f7ff fa52 	bl	80132f0 <__mdiff>
 8013e4c:	4605      	mov	r5, r0
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	f43f ae7a 	beq.w	8013b48 <_strtod_l+0x488>
 8013e54:	68c3      	ldr	r3, [r0, #12]
 8013e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e58:	2300      	movs	r3, #0
 8013e5a:	60c3      	str	r3, [r0, #12]
 8013e5c:	4659      	mov	r1, fp
 8013e5e:	f7ff fa2b 	bl	80132b8 <__mcmp>
 8013e62:	2800      	cmp	r0, #0
 8013e64:	da60      	bge.n	8013f28 <_strtod_l+0x868>
 8013e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e68:	ea53 0308 	orrs.w	r3, r3, r8
 8013e6c:	f040 8084 	bne.w	8013f78 <_strtod_l+0x8b8>
 8013e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d17f      	bne.n	8013f78 <_strtod_l+0x8b8>
 8013e78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013e7c:	0d1b      	lsrs	r3, r3, #20
 8013e7e:	051b      	lsls	r3, r3, #20
 8013e80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013e84:	d978      	bls.n	8013f78 <_strtod_l+0x8b8>
 8013e86:	696b      	ldr	r3, [r5, #20]
 8013e88:	b913      	cbnz	r3, 8013e90 <_strtod_l+0x7d0>
 8013e8a:	692b      	ldr	r3, [r5, #16]
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	dd73      	ble.n	8013f78 <_strtod_l+0x8b8>
 8013e90:	4629      	mov	r1, r5
 8013e92:	2201      	movs	r2, #1
 8013e94:	4620      	mov	r0, r4
 8013e96:	f7ff f9a3 	bl	80131e0 <__lshift>
 8013e9a:	4659      	mov	r1, fp
 8013e9c:	4605      	mov	r5, r0
 8013e9e:	f7ff fa0b 	bl	80132b8 <__mcmp>
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	dd68      	ble.n	8013f78 <_strtod_l+0x8b8>
 8013ea6:	9904      	ldr	r1, [sp, #16]
 8013ea8:	4a54      	ldr	r2, [pc, #336]	; (8013ffc <_strtod_l+0x93c>)
 8013eaa:	464b      	mov	r3, r9
 8013eac:	2900      	cmp	r1, #0
 8013eae:	f000 8084 	beq.w	8013fba <_strtod_l+0x8fa>
 8013eb2:	ea02 0109 	and.w	r1, r2, r9
 8013eb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013eba:	dc7e      	bgt.n	8013fba <_strtod_l+0x8fa>
 8013ebc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013ec0:	f77f aeb3 	ble.w	8013c2a <_strtod_l+0x56a>
 8013ec4:	4b4e      	ldr	r3, [pc, #312]	; (8014000 <_strtod_l+0x940>)
 8013ec6:	4640      	mov	r0, r8
 8013ec8:	4649      	mov	r1, r9
 8013eca:	2200      	movs	r2, #0
 8013ecc:	f7ec fbc4 	bl	8000658 <__aeabi_dmul>
 8013ed0:	4b4a      	ldr	r3, [pc, #296]	; (8013ffc <_strtod_l+0x93c>)
 8013ed2:	400b      	ands	r3, r1
 8013ed4:	4680      	mov	r8, r0
 8013ed6:	4689      	mov	r9, r1
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	f47f ae3f 	bne.w	8013b5c <_strtod_l+0x49c>
 8013ede:	2322      	movs	r3, #34	; 0x22
 8013ee0:	6023      	str	r3, [r4, #0]
 8013ee2:	e63b      	b.n	8013b5c <_strtod_l+0x49c>
 8013ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8013eec:	ea03 0808 	and.w	r8, r3, r8
 8013ef0:	e6e8      	b.n	8013cc4 <_strtod_l+0x604>
 8013ef2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013ef6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013efa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013efe:	36e2      	adds	r6, #226	; 0xe2
 8013f00:	fa01 f306 	lsl.w	r3, r1, r6
 8013f04:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013f08:	e748      	b.n	8013d9c <_strtod_l+0x6dc>
 8013f0a:	2100      	movs	r1, #0
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013f12:	e743      	b.n	8013d9c <_strtod_l+0x6dc>
 8013f14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013f16:	4632      	mov	r2, r6
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f7ff f961 	bl	80131e0 <__lshift>
 8013f1e:	9016      	str	r0, [sp, #88]	; 0x58
 8013f20:	2800      	cmp	r0, #0
 8013f22:	f47f af6b 	bne.w	8013dfc <_strtod_l+0x73c>
 8013f26:	e60f      	b.n	8013b48 <_strtod_l+0x488>
 8013f28:	46ca      	mov	sl, r9
 8013f2a:	d171      	bne.n	8014010 <_strtod_l+0x950>
 8013f2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f32:	b352      	cbz	r2, 8013f8a <_strtod_l+0x8ca>
 8013f34:	4a33      	ldr	r2, [pc, #204]	; (8014004 <_strtod_l+0x944>)
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d12a      	bne.n	8013f90 <_strtod_l+0x8d0>
 8013f3a:	9b04      	ldr	r3, [sp, #16]
 8013f3c:	4641      	mov	r1, r8
 8013f3e:	b1fb      	cbz	r3, 8013f80 <_strtod_l+0x8c0>
 8013f40:	4b2e      	ldr	r3, [pc, #184]	; (8013ffc <_strtod_l+0x93c>)
 8013f42:	ea09 0303 	and.w	r3, r9, r3
 8013f46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f4e:	d81a      	bhi.n	8013f86 <_strtod_l+0x8c6>
 8013f50:	0d1b      	lsrs	r3, r3, #20
 8013f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f56:	fa02 f303 	lsl.w	r3, r2, r3
 8013f5a:	4299      	cmp	r1, r3
 8013f5c:	d118      	bne.n	8013f90 <_strtod_l+0x8d0>
 8013f5e:	4b2a      	ldr	r3, [pc, #168]	; (8014008 <_strtod_l+0x948>)
 8013f60:	459a      	cmp	sl, r3
 8013f62:	d102      	bne.n	8013f6a <_strtod_l+0x8aa>
 8013f64:	3101      	adds	r1, #1
 8013f66:	f43f adef 	beq.w	8013b48 <_strtod_l+0x488>
 8013f6a:	4b24      	ldr	r3, [pc, #144]	; (8013ffc <_strtod_l+0x93c>)
 8013f6c:	ea0a 0303 	and.w	r3, sl, r3
 8013f70:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013f74:	f04f 0800 	mov.w	r8, #0
 8013f78:	9b04      	ldr	r3, [sp, #16]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d1a2      	bne.n	8013ec4 <_strtod_l+0x804>
 8013f7e:	e5ed      	b.n	8013b5c <_strtod_l+0x49c>
 8013f80:	f04f 33ff 	mov.w	r3, #4294967295
 8013f84:	e7e9      	b.n	8013f5a <_strtod_l+0x89a>
 8013f86:	4613      	mov	r3, r2
 8013f88:	e7e7      	b.n	8013f5a <_strtod_l+0x89a>
 8013f8a:	ea53 0308 	orrs.w	r3, r3, r8
 8013f8e:	d08a      	beq.n	8013ea6 <_strtod_l+0x7e6>
 8013f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f92:	b1e3      	cbz	r3, 8013fce <_strtod_l+0x90e>
 8013f94:	ea13 0f0a 	tst.w	r3, sl
 8013f98:	d0ee      	beq.n	8013f78 <_strtod_l+0x8b8>
 8013f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f9c:	9a04      	ldr	r2, [sp, #16]
 8013f9e:	4640      	mov	r0, r8
 8013fa0:	4649      	mov	r1, r9
 8013fa2:	b1c3      	cbz	r3, 8013fd6 <_strtod_l+0x916>
 8013fa4:	f7ff fb6f 	bl	8013686 <sulp>
 8013fa8:	4602      	mov	r2, r0
 8013faa:	460b      	mov	r3, r1
 8013fac:	ec51 0b18 	vmov	r0, r1, d8
 8013fb0:	f7ec f99c 	bl	80002ec <__adddf3>
 8013fb4:	4680      	mov	r8, r0
 8013fb6:	4689      	mov	r9, r1
 8013fb8:	e7de      	b.n	8013f78 <_strtod_l+0x8b8>
 8013fba:	4013      	ands	r3, r2
 8013fbc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013fc0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013fc4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013fc8:	f04f 38ff 	mov.w	r8, #4294967295
 8013fcc:	e7d4      	b.n	8013f78 <_strtod_l+0x8b8>
 8013fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fd0:	ea13 0f08 	tst.w	r3, r8
 8013fd4:	e7e0      	b.n	8013f98 <_strtod_l+0x8d8>
 8013fd6:	f7ff fb56 	bl	8013686 <sulp>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	460b      	mov	r3, r1
 8013fde:	ec51 0b18 	vmov	r0, r1, d8
 8013fe2:	f7ec f981 	bl	80002e8 <__aeabi_dsub>
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	2300      	movs	r3, #0
 8013fea:	4680      	mov	r8, r0
 8013fec:	4689      	mov	r9, r1
 8013fee:	f7ec fd9b 	bl	8000b28 <__aeabi_dcmpeq>
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	d0c0      	beq.n	8013f78 <_strtod_l+0x8b8>
 8013ff6:	e618      	b.n	8013c2a <_strtod_l+0x56a>
 8013ff8:	fffffc02 	.word	0xfffffc02
 8013ffc:	7ff00000 	.word	0x7ff00000
 8014000:	39500000 	.word	0x39500000
 8014004:	000fffff 	.word	0x000fffff
 8014008:	7fefffff 	.word	0x7fefffff
 801400c:	080186f0 	.word	0x080186f0
 8014010:	4659      	mov	r1, fp
 8014012:	4628      	mov	r0, r5
 8014014:	f7ff fac0 	bl	8013598 <__ratio>
 8014018:	ec57 6b10 	vmov	r6, r7, d0
 801401c:	ee10 0a10 	vmov	r0, s0
 8014020:	2200      	movs	r2, #0
 8014022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014026:	4639      	mov	r1, r7
 8014028:	f7ec fd92 	bl	8000b50 <__aeabi_dcmple>
 801402c:	2800      	cmp	r0, #0
 801402e:	d071      	beq.n	8014114 <_strtod_l+0xa54>
 8014030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014032:	2b00      	cmp	r3, #0
 8014034:	d17c      	bne.n	8014130 <_strtod_l+0xa70>
 8014036:	f1b8 0f00 	cmp.w	r8, #0
 801403a:	d15a      	bne.n	80140f2 <_strtod_l+0xa32>
 801403c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014040:	2b00      	cmp	r3, #0
 8014042:	d15d      	bne.n	8014100 <_strtod_l+0xa40>
 8014044:	4b90      	ldr	r3, [pc, #576]	; (8014288 <_strtod_l+0xbc8>)
 8014046:	2200      	movs	r2, #0
 8014048:	4630      	mov	r0, r6
 801404a:	4639      	mov	r1, r7
 801404c:	f7ec fd76 	bl	8000b3c <__aeabi_dcmplt>
 8014050:	2800      	cmp	r0, #0
 8014052:	d15c      	bne.n	801410e <_strtod_l+0xa4e>
 8014054:	4630      	mov	r0, r6
 8014056:	4639      	mov	r1, r7
 8014058:	4b8c      	ldr	r3, [pc, #560]	; (801428c <_strtod_l+0xbcc>)
 801405a:	2200      	movs	r2, #0
 801405c:	f7ec fafc 	bl	8000658 <__aeabi_dmul>
 8014060:	4606      	mov	r6, r0
 8014062:	460f      	mov	r7, r1
 8014064:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014068:	9606      	str	r6, [sp, #24]
 801406a:	9307      	str	r3, [sp, #28]
 801406c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014070:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014074:	4b86      	ldr	r3, [pc, #536]	; (8014290 <_strtod_l+0xbd0>)
 8014076:	ea0a 0303 	and.w	r3, sl, r3
 801407a:	930d      	str	r3, [sp, #52]	; 0x34
 801407c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801407e:	4b85      	ldr	r3, [pc, #532]	; (8014294 <_strtod_l+0xbd4>)
 8014080:	429a      	cmp	r2, r3
 8014082:	f040 8090 	bne.w	80141a6 <_strtod_l+0xae6>
 8014086:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801408a:	ec49 8b10 	vmov	d0, r8, r9
 801408e:	f7ff f9b9 	bl	8013404 <__ulp>
 8014092:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014096:	ec51 0b10 	vmov	r0, r1, d0
 801409a:	f7ec fadd 	bl	8000658 <__aeabi_dmul>
 801409e:	4642      	mov	r2, r8
 80140a0:	464b      	mov	r3, r9
 80140a2:	f7ec f923 	bl	80002ec <__adddf3>
 80140a6:	460b      	mov	r3, r1
 80140a8:	4979      	ldr	r1, [pc, #484]	; (8014290 <_strtod_l+0xbd0>)
 80140aa:	4a7b      	ldr	r2, [pc, #492]	; (8014298 <_strtod_l+0xbd8>)
 80140ac:	4019      	ands	r1, r3
 80140ae:	4291      	cmp	r1, r2
 80140b0:	4680      	mov	r8, r0
 80140b2:	d944      	bls.n	801413e <_strtod_l+0xa7e>
 80140b4:	ee18 2a90 	vmov	r2, s17
 80140b8:	4b78      	ldr	r3, [pc, #480]	; (801429c <_strtod_l+0xbdc>)
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d104      	bne.n	80140c8 <_strtod_l+0xa08>
 80140be:	ee18 3a10 	vmov	r3, s16
 80140c2:	3301      	adds	r3, #1
 80140c4:	f43f ad40 	beq.w	8013b48 <_strtod_l+0x488>
 80140c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801429c <_strtod_l+0xbdc>
 80140cc:	f04f 38ff 	mov.w	r8, #4294967295
 80140d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80140d2:	4620      	mov	r0, r4
 80140d4:	f7fe fe6a 	bl	8012dac <_Bfree>
 80140d8:	9905      	ldr	r1, [sp, #20]
 80140da:	4620      	mov	r0, r4
 80140dc:	f7fe fe66 	bl	8012dac <_Bfree>
 80140e0:	4659      	mov	r1, fp
 80140e2:	4620      	mov	r0, r4
 80140e4:	f7fe fe62 	bl	8012dac <_Bfree>
 80140e8:	4629      	mov	r1, r5
 80140ea:	4620      	mov	r0, r4
 80140ec:	f7fe fe5e 	bl	8012dac <_Bfree>
 80140f0:	e609      	b.n	8013d06 <_strtod_l+0x646>
 80140f2:	f1b8 0f01 	cmp.w	r8, #1
 80140f6:	d103      	bne.n	8014100 <_strtod_l+0xa40>
 80140f8:	f1b9 0f00 	cmp.w	r9, #0
 80140fc:	f43f ad95 	beq.w	8013c2a <_strtod_l+0x56a>
 8014100:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014258 <_strtod_l+0xb98>
 8014104:	4f60      	ldr	r7, [pc, #384]	; (8014288 <_strtod_l+0xbc8>)
 8014106:	ed8d 7b06 	vstr	d7, [sp, #24]
 801410a:	2600      	movs	r6, #0
 801410c:	e7ae      	b.n	801406c <_strtod_l+0x9ac>
 801410e:	4f5f      	ldr	r7, [pc, #380]	; (801428c <_strtod_l+0xbcc>)
 8014110:	2600      	movs	r6, #0
 8014112:	e7a7      	b.n	8014064 <_strtod_l+0x9a4>
 8014114:	4b5d      	ldr	r3, [pc, #372]	; (801428c <_strtod_l+0xbcc>)
 8014116:	4630      	mov	r0, r6
 8014118:	4639      	mov	r1, r7
 801411a:	2200      	movs	r2, #0
 801411c:	f7ec fa9c 	bl	8000658 <__aeabi_dmul>
 8014120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014122:	4606      	mov	r6, r0
 8014124:	460f      	mov	r7, r1
 8014126:	2b00      	cmp	r3, #0
 8014128:	d09c      	beq.n	8014064 <_strtod_l+0x9a4>
 801412a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801412e:	e79d      	b.n	801406c <_strtod_l+0x9ac>
 8014130:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014260 <_strtod_l+0xba0>
 8014134:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014138:	ec57 6b17 	vmov	r6, r7, d7
 801413c:	e796      	b.n	801406c <_strtod_l+0x9ac>
 801413e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014142:	9b04      	ldr	r3, [sp, #16]
 8014144:	46ca      	mov	sl, r9
 8014146:	2b00      	cmp	r3, #0
 8014148:	d1c2      	bne.n	80140d0 <_strtod_l+0xa10>
 801414a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801414e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014150:	0d1b      	lsrs	r3, r3, #20
 8014152:	051b      	lsls	r3, r3, #20
 8014154:	429a      	cmp	r2, r3
 8014156:	d1bb      	bne.n	80140d0 <_strtod_l+0xa10>
 8014158:	4630      	mov	r0, r6
 801415a:	4639      	mov	r1, r7
 801415c:	f7ec fddc 	bl	8000d18 <__aeabi_d2lz>
 8014160:	f7ec fa4c 	bl	80005fc <__aeabi_l2d>
 8014164:	4602      	mov	r2, r0
 8014166:	460b      	mov	r3, r1
 8014168:	4630      	mov	r0, r6
 801416a:	4639      	mov	r1, r7
 801416c:	f7ec f8bc 	bl	80002e8 <__aeabi_dsub>
 8014170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014172:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014176:	ea43 0308 	orr.w	r3, r3, r8
 801417a:	4313      	orrs	r3, r2
 801417c:	4606      	mov	r6, r0
 801417e:	460f      	mov	r7, r1
 8014180:	d054      	beq.n	801422c <_strtod_l+0xb6c>
 8014182:	a339      	add	r3, pc, #228	; (adr r3, 8014268 <_strtod_l+0xba8>)
 8014184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014188:	f7ec fcd8 	bl	8000b3c <__aeabi_dcmplt>
 801418c:	2800      	cmp	r0, #0
 801418e:	f47f ace5 	bne.w	8013b5c <_strtod_l+0x49c>
 8014192:	a337      	add	r3, pc, #220	; (adr r3, 8014270 <_strtod_l+0xbb0>)
 8014194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014198:	4630      	mov	r0, r6
 801419a:	4639      	mov	r1, r7
 801419c:	f7ec fcec 	bl	8000b78 <__aeabi_dcmpgt>
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d095      	beq.n	80140d0 <_strtod_l+0xa10>
 80141a4:	e4da      	b.n	8013b5c <_strtod_l+0x49c>
 80141a6:	9b04      	ldr	r3, [sp, #16]
 80141a8:	b333      	cbz	r3, 80141f8 <_strtod_l+0xb38>
 80141aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80141b0:	d822      	bhi.n	80141f8 <_strtod_l+0xb38>
 80141b2:	a331      	add	r3, pc, #196	; (adr r3, 8014278 <_strtod_l+0xbb8>)
 80141b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b8:	4630      	mov	r0, r6
 80141ba:	4639      	mov	r1, r7
 80141bc:	f7ec fcc8 	bl	8000b50 <__aeabi_dcmple>
 80141c0:	b1a0      	cbz	r0, 80141ec <_strtod_l+0xb2c>
 80141c2:	4639      	mov	r1, r7
 80141c4:	4630      	mov	r0, r6
 80141c6:	f7ec fd1f 	bl	8000c08 <__aeabi_d2uiz>
 80141ca:	2801      	cmp	r0, #1
 80141cc:	bf38      	it	cc
 80141ce:	2001      	movcc	r0, #1
 80141d0:	f7ec f9c8 	bl	8000564 <__aeabi_ui2d>
 80141d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141d6:	4606      	mov	r6, r0
 80141d8:	460f      	mov	r7, r1
 80141da:	bb23      	cbnz	r3, 8014226 <_strtod_l+0xb66>
 80141dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141e0:	9010      	str	r0, [sp, #64]	; 0x40
 80141e2:	9311      	str	r3, [sp, #68]	; 0x44
 80141e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80141e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80141ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80141f4:	1a9b      	subs	r3, r3, r2
 80141f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80141f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80141fc:	eeb0 0a48 	vmov.f32	s0, s16
 8014200:	eef0 0a68 	vmov.f32	s1, s17
 8014204:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014208:	f7ff f8fc 	bl	8013404 <__ulp>
 801420c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014210:	ec53 2b10 	vmov	r2, r3, d0
 8014214:	f7ec fa20 	bl	8000658 <__aeabi_dmul>
 8014218:	ec53 2b18 	vmov	r2, r3, d8
 801421c:	f7ec f866 	bl	80002ec <__adddf3>
 8014220:	4680      	mov	r8, r0
 8014222:	4689      	mov	r9, r1
 8014224:	e78d      	b.n	8014142 <_strtod_l+0xa82>
 8014226:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801422a:	e7db      	b.n	80141e4 <_strtod_l+0xb24>
 801422c:	a314      	add	r3, pc, #80	; (adr r3, 8014280 <_strtod_l+0xbc0>)
 801422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014232:	f7ec fc83 	bl	8000b3c <__aeabi_dcmplt>
 8014236:	e7b3      	b.n	80141a0 <_strtod_l+0xae0>
 8014238:	2300      	movs	r3, #0
 801423a:	930a      	str	r3, [sp, #40]	; 0x28
 801423c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801423e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014240:	6013      	str	r3, [r2, #0]
 8014242:	f7ff ba7c 	b.w	801373e <_strtod_l+0x7e>
 8014246:	2a65      	cmp	r2, #101	; 0x65
 8014248:	f43f ab75 	beq.w	8013936 <_strtod_l+0x276>
 801424c:	2a45      	cmp	r2, #69	; 0x45
 801424e:	f43f ab72 	beq.w	8013936 <_strtod_l+0x276>
 8014252:	2301      	movs	r3, #1
 8014254:	f7ff bbaa 	b.w	80139ac <_strtod_l+0x2ec>
 8014258:	00000000 	.word	0x00000000
 801425c:	bff00000 	.word	0xbff00000
 8014260:	00000000 	.word	0x00000000
 8014264:	3ff00000 	.word	0x3ff00000
 8014268:	94a03595 	.word	0x94a03595
 801426c:	3fdfffff 	.word	0x3fdfffff
 8014270:	35afe535 	.word	0x35afe535
 8014274:	3fe00000 	.word	0x3fe00000
 8014278:	ffc00000 	.word	0xffc00000
 801427c:	41dfffff 	.word	0x41dfffff
 8014280:	94a03595 	.word	0x94a03595
 8014284:	3fcfffff 	.word	0x3fcfffff
 8014288:	3ff00000 	.word	0x3ff00000
 801428c:	3fe00000 	.word	0x3fe00000
 8014290:	7ff00000 	.word	0x7ff00000
 8014294:	7fe00000 	.word	0x7fe00000
 8014298:	7c9fffff 	.word	0x7c9fffff
 801429c:	7fefffff 	.word	0x7fefffff

080142a0 <_strtod_r>:
 80142a0:	4b01      	ldr	r3, [pc, #4]	; (80142a8 <_strtod_r+0x8>)
 80142a2:	f7ff ba0d 	b.w	80136c0 <_strtod_l>
 80142a6:	bf00      	nop
 80142a8:	20000080 	.word	0x20000080

080142ac <_strtol_l.constprop.0>:
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142b2:	d001      	beq.n	80142b8 <_strtol_l.constprop.0+0xc>
 80142b4:	2b24      	cmp	r3, #36	; 0x24
 80142b6:	d906      	bls.n	80142c6 <_strtol_l.constprop.0+0x1a>
 80142b8:	f7fd fe28 	bl	8011f0c <__errno>
 80142bc:	2316      	movs	r3, #22
 80142be:	6003      	str	r3, [r0, #0]
 80142c0:	2000      	movs	r0, #0
 80142c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80143ac <_strtol_l.constprop.0+0x100>
 80142ca:	460d      	mov	r5, r1
 80142cc:	462e      	mov	r6, r5
 80142ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80142d6:	f017 0708 	ands.w	r7, r7, #8
 80142da:	d1f7      	bne.n	80142cc <_strtol_l.constprop.0+0x20>
 80142dc:	2c2d      	cmp	r4, #45	; 0x2d
 80142de:	d132      	bne.n	8014346 <_strtol_l.constprop.0+0x9a>
 80142e0:	782c      	ldrb	r4, [r5, #0]
 80142e2:	2701      	movs	r7, #1
 80142e4:	1cb5      	adds	r5, r6, #2
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d05b      	beq.n	80143a2 <_strtol_l.constprop.0+0xf6>
 80142ea:	2b10      	cmp	r3, #16
 80142ec:	d109      	bne.n	8014302 <_strtol_l.constprop.0+0x56>
 80142ee:	2c30      	cmp	r4, #48	; 0x30
 80142f0:	d107      	bne.n	8014302 <_strtol_l.constprop.0+0x56>
 80142f2:	782c      	ldrb	r4, [r5, #0]
 80142f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80142f8:	2c58      	cmp	r4, #88	; 0x58
 80142fa:	d14d      	bne.n	8014398 <_strtol_l.constprop.0+0xec>
 80142fc:	786c      	ldrb	r4, [r5, #1]
 80142fe:	2310      	movs	r3, #16
 8014300:	3502      	adds	r5, #2
 8014302:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014306:	f108 38ff 	add.w	r8, r8, #4294967295
 801430a:	f04f 0e00 	mov.w	lr, #0
 801430e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014312:	4676      	mov	r6, lr
 8014314:	fb03 8a19 	mls	sl, r3, r9, r8
 8014318:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801431c:	f1bc 0f09 	cmp.w	ip, #9
 8014320:	d816      	bhi.n	8014350 <_strtol_l.constprop.0+0xa4>
 8014322:	4664      	mov	r4, ip
 8014324:	42a3      	cmp	r3, r4
 8014326:	dd24      	ble.n	8014372 <_strtol_l.constprop.0+0xc6>
 8014328:	f1be 3fff 	cmp.w	lr, #4294967295
 801432c:	d008      	beq.n	8014340 <_strtol_l.constprop.0+0x94>
 801432e:	45b1      	cmp	r9, r6
 8014330:	d31c      	bcc.n	801436c <_strtol_l.constprop.0+0xc0>
 8014332:	d101      	bne.n	8014338 <_strtol_l.constprop.0+0x8c>
 8014334:	45a2      	cmp	sl, r4
 8014336:	db19      	blt.n	801436c <_strtol_l.constprop.0+0xc0>
 8014338:	fb06 4603 	mla	r6, r6, r3, r4
 801433c:	f04f 0e01 	mov.w	lr, #1
 8014340:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014344:	e7e8      	b.n	8014318 <_strtol_l.constprop.0+0x6c>
 8014346:	2c2b      	cmp	r4, #43	; 0x2b
 8014348:	bf04      	itt	eq
 801434a:	782c      	ldrbeq	r4, [r5, #0]
 801434c:	1cb5      	addeq	r5, r6, #2
 801434e:	e7ca      	b.n	80142e6 <_strtol_l.constprop.0+0x3a>
 8014350:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014354:	f1bc 0f19 	cmp.w	ip, #25
 8014358:	d801      	bhi.n	801435e <_strtol_l.constprop.0+0xb2>
 801435a:	3c37      	subs	r4, #55	; 0x37
 801435c:	e7e2      	b.n	8014324 <_strtol_l.constprop.0+0x78>
 801435e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014362:	f1bc 0f19 	cmp.w	ip, #25
 8014366:	d804      	bhi.n	8014372 <_strtol_l.constprop.0+0xc6>
 8014368:	3c57      	subs	r4, #87	; 0x57
 801436a:	e7db      	b.n	8014324 <_strtol_l.constprop.0+0x78>
 801436c:	f04f 3eff 	mov.w	lr, #4294967295
 8014370:	e7e6      	b.n	8014340 <_strtol_l.constprop.0+0x94>
 8014372:	f1be 3fff 	cmp.w	lr, #4294967295
 8014376:	d105      	bne.n	8014384 <_strtol_l.constprop.0+0xd8>
 8014378:	2322      	movs	r3, #34	; 0x22
 801437a:	6003      	str	r3, [r0, #0]
 801437c:	4646      	mov	r6, r8
 801437e:	b942      	cbnz	r2, 8014392 <_strtol_l.constprop.0+0xe6>
 8014380:	4630      	mov	r0, r6
 8014382:	e79e      	b.n	80142c2 <_strtol_l.constprop.0+0x16>
 8014384:	b107      	cbz	r7, 8014388 <_strtol_l.constprop.0+0xdc>
 8014386:	4276      	negs	r6, r6
 8014388:	2a00      	cmp	r2, #0
 801438a:	d0f9      	beq.n	8014380 <_strtol_l.constprop.0+0xd4>
 801438c:	f1be 0f00 	cmp.w	lr, #0
 8014390:	d000      	beq.n	8014394 <_strtol_l.constprop.0+0xe8>
 8014392:	1e69      	subs	r1, r5, #1
 8014394:	6011      	str	r1, [r2, #0]
 8014396:	e7f3      	b.n	8014380 <_strtol_l.constprop.0+0xd4>
 8014398:	2430      	movs	r4, #48	; 0x30
 801439a:	2b00      	cmp	r3, #0
 801439c:	d1b1      	bne.n	8014302 <_strtol_l.constprop.0+0x56>
 801439e:	2308      	movs	r3, #8
 80143a0:	e7af      	b.n	8014302 <_strtol_l.constprop.0+0x56>
 80143a2:	2c30      	cmp	r4, #48	; 0x30
 80143a4:	d0a5      	beq.n	80142f2 <_strtol_l.constprop.0+0x46>
 80143a6:	230a      	movs	r3, #10
 80143a8:	e7ab      	b.n	8014302 <_strtol_l.constprop.0+0x56>
 80143aa:	bf00      	nop
 80143ac:	08018719 	.word	0x08018719

080143b0 <_strtol_r>:
 80143b0:	f7ff bf7c 	b.w	80142ac <_strtol_l.constprop.0>

080143b4 <__ssputs_r>:
 80143b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143b8:	688e      	ldr	r6, [r1, #8]
 80143ba:	461f      	mov	r7, r3
 80143bc:	42be      	cmp	r6, r7
 80143be:	680b      	ldr	r3, [r1, #0]
 80143c0:	4682      	mov	sl, r0
 80143c2:	460c      	mov	r4, r1
 80143c4:	4690      	mov	r8, r2
 80143c6:	d82c      	bhi.n	8014422 <__ssputs_r+0x6e>
 80143c8:	898a      	ldrh	r2, [r1, #12]
 80143ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143ce:	d026      	beq.n	801441e <__ssputs_r+0x6a>
 80143d0:	6965      	ldr	r5, [r4, #20]
 80143d2:	6909      	ldr	r1, [r1, #16]
 80143d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143d8:	eba3 0901 	sub.w	r9, r3, r1
 80143dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80143e0:	1c7b      	adds	r3, r7, #1
 80143e2:	444b      	add	r3, r9
 80143e4:	106d      	asrs	r5, r5, #1
 80143e6:	429d      	cmp	r5, r3
 80143e8:	bf38      	it	cc
 80143ea:	461d      	movcc	r5, r3
 80143ec:	0553      	lsls	r3, r2, #21
 80143ee:	d527      	bpl.n	8014440 <__ssputs_r+0x8c>
 80143f0:	4629      	mov	r1, r5
 80143f2:	f7fc fd01 	bl	8010df8 <_malloc_r>
 80143f6:	4606      	mov	r6, r0
 80143f8:	b360      	cbz	r0, 8014454 <__ssputs_r+0xa0>
 80143fa:	6921      	ldr	r1, [r4, #16]
 80143fc:	464a      	mov	r2, r9
 80143fe:	f7fd fdba 	bl	8011f76 <memcpy>
 8014402:	89a3      	ldrh	r3, [r4, #12]
 8014404:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801440c:	81a3      	strh	r3, [r4, #12]
 801440e:	6126      	str	r6, [r4, #16]
 8014410:	6165      	str	r5, [r4, #20]
 8014412:	444e      	add	r6, r9
 8014414:	eba5 0509 	sub.w	r5, r5, r9
 8014418:	6026      	str	r6, [r4, #0]
 801441a:	60a5      	str	r5, [r4, #8]
 801441c:	463e      	mov	r6, r7
 801441e:	42be      	cmp	r6, r7
 8014420:	d900      	bls.n	8014424 <__ssputs_r+0x70>
 8014422:	463e      	mov	r6, r7
 8014424:	6820      	ldr	r0, [r4, #0]
 8014426:	4632      	mov	r2, r6
 8014428:	4641      	mov	r1, r8
 801442a:	f000 fba3 	bl	8014b74 <memmove>
 801442e:	68a3      	ldr	r3, [r4, #8]
 8014430:	1b9b      	subs	r3, r3, r6
 8014432:	60a3      	str	r3, [r4, #8]
 8014434:	6823      	ldr	r3, [r4, #0]
 8014436:	4433      	add	r3, r6
 8014438:	6023      	str	r3, [r4, #0]
 801443a:	2000      	movs	r0, #0
 801443c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014440:	462a      	mov	r2, r5
 8014442:	f000 ff6a 	bl	801531a <_realloc_r>
 8014446:	4606      	mov	r6, r0
 8014448:	2800      	cmp	r0, #0
 801444a:	d1e0      	bne.n	801440e <__ssputs_r+0x5a>
 801444c:	6921      	ldr	r1, [r4, #16]
 801444e:	4650      	mov	r0, sl
 8014450:	f7fe fc20 	bl	8012c94 <_free_r>
 8014454:	230c      	movs	r3, #12
 8014456:	f8ca 3000 	str.w	r3, [sl]
 801445a:	89a3      	ldrh	r3, [r4, #12]
 801445c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014460:	81a3      	strh	r3, [r4, #12]
 8014462:	f04f 30ff 	mov.w	r0, #4294967295
 8014466:	e7e9      	b.n	801443c <__ssputs_r+0x88>

08014468 <_svfiprintf_r>:
 8014468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801446c:	4698      	mov	r8, r3
 801446e:	898b      	ldrh	r3, [r1, #12]
 8014470:	061b      	lsls	r3, r3, #24
 8014472:	b09d      	sub	sp, #116	; 0x74
 8014474:	4607      	mov	r7, r0
 8014476:	460d      	mov	r5, r1
 8014478:	4614      	mov	r4, r2
 801447a:	d50e      	bpl.n	801449a <_svfiprintf_r+0x32>
 801447c:	690b      	ldr	r3, [r1, #16]
 801447e:	b963      	cbnz	r3, 801449a <_svfiprintf_r+0x32>
 8014480:	2140      	movs	r1, #64	; 0x40
 8014482:	f7fc fcb9 	bl	8010df8 <_malloc_r>
 8014486:	6028      	str	r0, [r5, #0]
 8014488:	6128      	str	r0, [r5, #16]
 801448a:	b920      	cbnz	r0, 8014496 <_svfiprintf_r+0x2e>
 801448c:	230c      	movs	r3, #12
 801448e:	603b      	str	r3, [r7, #0]
 8014490:	f04f 30ff 	mov.w	r0, #4294967295
 8014494:	e0d0      	b.n	8014638 <_svfiprintf_r+0x1d0>
 8014496:	2340      	movs	r3, #64	; 0x40
 8014498:	616b      	str	r3, [r5, #20]
 801449a:	2300      	movs	r3, #0
 801449c:	9309      	str	r3, [sp, #36]	; 0x24
 801449e:	2320      	movs	r3, #32
 80144a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80144a8:	2330      	movs	r3, #48	; 0x30
 80144aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014650 <_svfiprintf_r+0x1e8>
 80144ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144b2:	f04f 0901 	mov.w	r9, #1
 80144b6:	4623      	mov	r3, r4
 80144b8:	469a      	mov	sl, r3
 80144ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144be:	b10a      	cbz	r2, 80144c4 <_svfiprintf_r+0x5c>
 80144c0:	2a25      	cmp	r2, #37	; 0x25
 80144c2:	d1f9      	bne.n	80144b8 <_svfiprintf_r+0x50>
 80144c4:	ebba 0b04 	subs.w	fp, sl, r4
 80144c8:	d00b      	beq.n	80144e2 <_svfiprintf_r+0x7a>
 80144ca:	465b      	mov	r3, fp
 80144cc:	4622      	mov	r2, r4
 80144ce:	4629      	mov	r1, r5
 80144d0:	4638      	mov	r0, r7
 80144d2:	f7ff ff6f 	bl	80143b4 <__ssputs_r>
 80144d6:	3001      	adds	r0, #1
 80144d8:	f000 80a9 	beq.w	801462e <_svfiprintf_r+0x1c6>
 80144dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144de:	445a      	add	r2, fp
 80144e0:	9209      	str	r2, [sp, #36]	; 0x24
 80144e2:	f89a 3000 	ldrb.w	r3, [sl]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f000 80a1 	beq.w	801462e <_svfiprintf_r+0x1c6>
 80144ec:	2300      	movs	r3, #0
 80144ee:	f04f 32ff 	mov.w	r2, #4294967295
 80144f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144f6:	f10a 0a01 	add.w	sl, sl, #1
 80144fa:	9304      	str	r3, [sp, #16]
 80144fc:	9307      	str	r3, [sp, #28]
 80144fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014502:	931a      	str	r3, [sp, #104]	; 0x68
 8014504:	4654      	mov	r4, sl
 8014506:	2205      	movs	r2, #5
 8014508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801450c:	4850      	ldr	r0, [pc, #320]	; (8014650 <_svfiprintf_r+0x1e8>)
 801450e:	f7eb fe8f 	bl	8000230 <memchr>
 8014512:	9a04      	ldr	r2, [sp, #16]
 8014514:	b9d8      	cbnz	r0, 801454e <_svfiprintf_r+0xe6>
 8014516:	06d0      	lsls	r0, r2, #27
 8014518:	bf44      	itt	mi
 801451a:	2320      	movmi	r3, #32
 801451c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014520:	0711      	lsls	r1, r2, #28
 8014522:	bf44      	itt	mi
 8014524:	232b      	movmi	r3, #43	; 0x2b
 8014526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801452a:	f89a 3000 	ldrb.w	r3, [sl]
 801452e:	2b2a      	cmp	r3, #42	; 0x2a
 8014530:	d015      	beq.n	801455e <_svfiprintf_r+0xf6>
 8014532:	9a07      	ldr	r2, [sp, #28]
 8014534:	4654      	mov	r4, sl
 8014536:	2000      	movs	r0, #0
 8014538:	f04f 0c0a 	mov.w	ip, #10
 801453c:	4621      	mov	r1, r4
 801453e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014542:	3b30      	subs	r3, #48	; 0x30
 8014544:	2b09      	cmp	r3, #9
 8014546:	d94d      	bls.n	80145e4 <_svfiprintf_r+0x17c>
 8014548:	b1b0      	cbz	r0, 8014578 <_svfiprintf_r+0x110>
 801454a:	9207      	str	r2, [sp, #28]
 801454c:	e014      	b.n	8014578 <_svfiprintf_r+0x110>
 801454e:	eba0 0308 	sub.w	r3, r0, r8
 8014552:	fa09 f303 	lsl.w	r3, r9, r3
 8014556:	4313      	orrs	r3, r2
 8014558:	9304      	str	r3, [sp, #16]
 801455a:	46a2      	mov	sl, r4
 801455c:	e7d2      	b.n	8014504 <_svfiprintf_r+0x9c>
 801455e:	9b03      	ldr	r3, [sp, #12]
 8014560:	1d19      	adds	r1, r3, #4
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	9103      	str	r1, [sp, #12]
 8014566:	2b00      	cmp	r3, #0
 8014568:	bfbb      	ittet	lt
 801456a:	425b      	neglt	r3, r3
 801456c:	f042 0202 	orrlt.w	r2, r2, #2
 8014570:	9307      	strge	r3, [sp, #28]
 8014572:	9307      	strlt	r3, [sp, #28]
 8014574:	bfb8      	it	lt
 8014576:	9204      	strlt	r2, [sp, #16]
 8014578:	7823      	ldrb	r3, [r4, #0]
 801457a:	2b2e      	cmp	r3, #46	; 0x2e
 801457c:	d10c      	bne.n	8014598 <_svfiprintf_r+0x130>
 801457e:	7863      	ldrb	r3, [r4, #1]
 8014580:	2b2a      	cmp	r3, #42	; 0x2a
 8014582:	d134      	bne.n	80145ee <_svfiprintf_r+0x186>
 8014584:	9b03      	ldr	r3, [sp, #12]
 8014586:	1d1a      	adds	r2, r3, #4
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	9203      	str	r2, [sp, #12]
 801458c:	2b00      	cmp	r3, #0
 801458e:	bfb8      	it	lt
 8014590:	f04f 33ff 	movlt.w	r3, #4294967295
 8014594:	3402      	adds	r4, #2
 8014596:	9305      	str	r3, [sp, #20]
 8014598:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014660 <_svfiprintf_r+0x1f8>
 801459c:	7821      	ldrb	r1, [r4, #0]
 801459e:	2203      	movs	r2, #3
 80145a0:	4650      	mov	r0, sl
 80145a2:	f7eb fe45 	bl	8000230 <memchr>
 80145a6:	b138      	cbz	r0, 80145b8 <_svfiprintf_r+0x150>
 80145a8:	9b04      	ldr	r3, [sp, #16]
 80145aa:	eba0 000a 	sub.w	r0, r0, sl
 80145ae:	2240      	movs	r2, #64	; 0x40
 80145b0:	4082      	lsls	r2, r0
 80145b2:	4313      	orrs	r3, r2
 80145b4:	3401      	adds	r4, #1
 80145b6:	9304      	str	r3, [sp, #16]
 80145b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145bc:	4825      	ldr	r0, [pc, #148]	; (8014654 <_svfiprintf_r+0x1ec>)
 80145be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145c2:	2206      	movs	r2, #6
 80145c4:	f7eb fe34 	bl	8000230 <memchr>
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d038      	beq.n	801463e <_svfiprintf_r+0x1d6>
 80145cc:	4b22      	ldr	r3, [pc, #136]	; (8014658 <_svfiprintf_r+0x1f0>)
 80145ce:	bb1b      	cbnz	r3, 8014618 <_svfiprintf_r+0x1b0>
 80145d0:	9b03      	ldr	r3, [sp, #12]
 80145d2:	3307      	adds	r3, #7
 80145d4:	f023 0307 	bic.w	r3, r3, #7
 80145d8:	3308      	adds	r3, #8
 80145da:	9303      	str	r3, [sp, #12]
 80145dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145de:	4433      	add	r3, r6
 80145e0:	9309      	str	r3, [sp, #36]	; 0x24
 80145e2:	e768      	b.n	80144b6 <_svfiprintf_r+0x4e>
 80145e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80145e8:	460c      	mov	r4, r1
 80145ea:	2001      	movs	r0, #1
 80145ec:	e7a6      	b.n	801453c <_svfiprintf_r+0xd4>
 80145ee:	2300      	movs	r3, #0
 80145f0:	3401      	adds	r4, #1
 80145f2:	9305      	str	r3, [sp, #20]
 80145f4:	4619      	mov	r1, r3
 80145f6:	f04f 0c0a 	mov.w	ip, #10
 80145fa:	4620      	mov	r0, r4
 80145fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014600:	3a30      	subs	r2, #48	; 0x30
 8014602:	2a09      	cmp	r2, #9
 8014604:	d903      	bls.n	801460e <_svfiprintf_r+0x1a6>
 8014606:	2b00      	cmp	r3, #0
 8014608:	d0c6      	beq.n	8014598 <_svfiprintf_r+0x130>
 801460a:	9105      	str	r1, [sp, #20]
 801460c:	e7c4      	b.n	8014598 <_svfiprintf_r+0x130>
 801460e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014612:	4604      	mov	r4, r0
 8014614:	2301      	movs	r3, #1
 8014616:	e7f0      	b.n	80145fa <_svfiprintf_r+0x192>
 8014618:	ab03      	add	r3, sp, #12
 801461a:	9300      	str	r3, [sp, #0]
 801461c:	462a      	mov	r2, r5
 801461e:	4b0f      	ldr	r3, [pc, #60]	; (801465c <_svfiprintf_r+0x1f4>)
 8014620:	a904      	add	r1, sp, #16
 8014622:	4638      	mov	r0, r7
 8014624:	f7fc fd14 	bl	8011050 <_printf_float>
 8014628:	1c42      	adds	r2, r0, #1
 801462a:	4606      	mov	r6, r0
 801462c:	d1d6      	bne.n	80145dc <_svfiprintf_r+0x174>
 801462e:	89ab      	ldrh	r3, [r5, #12]
 8014630:	065b      	lsls	r3, r3, #25
 8014632:	f53f af2d 	bmi.w	8014490 <_svfiprintf_r+0x28>
 8014636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014638:	b01d      	add	sp, #116	; 0x74
 801463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463e:	ab03      	add	r3, sp, #12
 8014640:	9300      	str	r3, [sp, #0]
 8014642:	462a      	mov	r2, r5
 8014644:	4b05      	ldr	r3, [pc, #20]	; (801465c <_svfiprintf_r+0x1f4>)
 8014646:	a904      	add	r1, sp, #16
 8014648:	4638      	mov	r0, r7
 801464a:	f7fc ffa5 	bl	8011598 <_printf_i>
 801464e:	e7eb      	b.n	8014628 <_svfiprintf_r+0x1c0>
 8014650:	08018819 	.word	0x08018819
 8014654:	08018823 	.word	0x08018823
 8014658:	08011051 	.word	0x08011051
 801465c:	080143b5 	.word	0x080143b5
 8014660:	0801881f 	.word	0x0801881f

08014664 <__sfputc_r>:
 8014664:	6893      	ldr	r3, [r2, #8]
 8014666:	3b01      	subs	r3, #1
 8014668:	2b00      	cmp	r3, #0
 801466a:	b410      	push	{r4}
 801466c:	6093      	str	r3, [r2, #8]
 801466e:	da08      	bge.n	8014682 <__sfputc_r+0x1e>
 8014670:	6994      	ldr	r4, [r2, #24]
 8014672:	42a3      	cmp	r3, r4
 8014674:	db01      	blt.n	801467a <__sfputc_r+0x16>
 8014676:	290a      	cmp	r1, #10
 8014678:	d103      	bne.n	8014682 <__sfputc_r+0x1e>
 801467a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801467e:	f000 b9e3 	b.w	8014a48 <__swbuf_r>
 8014682:	6813      	ldr	r3, [r2, #0]
 8014684:	1c58      	adds	r0, r3, #1
 8014686:	6010      	str	r0, [r2, #0]
 8014688:	7019      	strb	r1, [r3, #0]
 801468a:	4608      	mov	r0, r1
 801468c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014690:	4770      	bx	lr

08014692 <__sfputs_r>:
 8014692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014694:	4606      	mov	r6, r0
 8014696:	460f      	mov	r7, r1
 8014698:	4614      	mov	r4, r2
 801469a:	18d5      	adds	r5, r2, r3
 801469c:	42ac      	cmp	r4, r5
 801469e:	d101      	bne.n	80146a4 <__sfputs_r+0x12>
 80146a0:	2000      	movs	r0, #0
 80146a2:	e007      	b.n	80146b4 <__sfputs_r+0x22>
 80146a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146a8:	463a      	mov	r2, r7
 80146aa:	4630      	mov	r0, r6
 80146ac:	f7ff ffda 	bl	8014664 <__sfputc_r>
 80146b0:	1c43      	adds	r3, r0, #1
 80146b2:	d1f3      	bne.n	801469c <__sfputs_r+0xa>
 80146b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080146b8 <_vfiprintf_r>:
 80146b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146bc:	460d      	mov	r5, r1
 80146be:	b09d      	sub	sp, #116	; 0x74
 80146c0:	4614      	mov	r4, r2
 80146c2:	4698      	mov	r8, r3
 80146c4:	4606      	mov	r6, r0
 80146c6:	b118      	cbz	r0, 80146d0 <_vfiprintf_r+0x18>
 80146c8:	6a03      	ldr	r3, [r0, #32]
 80146ca:	b90b      	cbnz	r3, 80146d0 <_vfiprintf_r+0x18>
 80146cc:	f7fd fb22 	bl	8011d14 <__sinit>
 80146d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146d2:	07d9      	lsls	r1, r3, #31
 80146d4:	d405      	bmi.n	80146e2 <_vfiprintf_r+0x2a>
 80146d6:	89ab      	ldrh	r3, [r5, #12]
 80146d8:	059a      	lsls	r2, r3, #22
 80146da:	d402      	bmi.n	80146e2 <_vfiprintf_r+0x2a>
 80146dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146de:	f7fd fc40 	bl	8011f62 <__retarget_lock_acquire_recursive>
 80146e2:	89ab      	ldrh	r3, [r5, #12]
 80146e4:	071b      	lsls	r3, r3, #28
 80146e6:	d501      	bpl.n	80146ec <_vfiprintf_r+0x34>
 80146e8:	692b      	ldr	r3, [r5, #16]
 80146ea:	b99b      	cbnz	r3, 8014714 <_vfiprintf_r+0x5c>
 80146ec:	4629      	mov	r1, r5
 80146ee:	4630      	mov	r0, r6
 80146f0:	f000 f9e8 	bl	8014ac4 <__swsetup_r>
 80146f4:	b170      	cbz	r0, 8014714 <_vfiprintf_r+0x5c>
 80146f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146f8:	07dc      	lsls	r4, r3, #31
 80146fa:	d504      	bpl.n	8014706 <_vfiprintf_r+0x4e>
 80146fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014700:	b01d      	add	sp, #116	; 0x74
 8014702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014706:	89ab      	ldrh	r3, [r5, #12]
 8014708:	0598      	lsls	r0, r3, #22
 801470a:	d4f7      	bmi.n	80146fc <_vfiprintf_r+0x44>
 801470c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801470e:	f7fd fc29 	bl	8011f64 <__retarget_lock_release_recursive>
 8014712:	e7f3      	b.n	80146fc <_vfiprintf_r+0x44>
 8014714:	2300      	movs	r3, #0
 8014716:	9309      	str	r3, [sp, #36]	; 0x24
 8014718:	2320      	movs	r3, #32
 801471a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801471e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014722:	2330      	movs	r3, #48	; 0x30
 8014724:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80148d8 <_vfiprintf_r+0x220>
 8014728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801472c:	f04f 0901 	mov.w	r9, #1
 8014730:	4623      	mov	r3, r4
 8014732:	469a      	mov	sl, r3
 8014734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014738:	b10a      	cbz	r2, 801473e <_vfiprintf_r+0x86>
 801473a:	2a25      	cmp	r2, #37	; 0x25
 801473c:	d1f9      	bne.n	8014732 <_vfiprintf_r+0x7a>
 801473e:	ebba 0b04 	subs.w	fp, sl, r4
 8014742:	d00b      	beq.n	801475c <_vfiprintf_r+0xa4>
 8014744:	465b      	mov	r3, fp
 8014746:	4622      	mov	r2, r4
 8014748:	4629      	mov	r1, r5
 801474a:	4630      	mov	r0, r6
 801474c:	f7ff ffa1 	bl	8014692 <__sfputs_r>
 8014750:	3001      	adds	r0, #1
 8014752:	f000 80a9 	beq.w	80148a8 <_vfiprintf_r+0x1f0>
 8014756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014758:	445a      	add	r2, fp
 801475a:	9209      	str	r2, [sp, #36]	; 0x24
 801475c:	f89a 3000 	ldrb.w	r3, [sl]
 8014760:	2b00      	cmp	r3, #0
 8014762:	f000 80a1 	beq.w	80148a8 <_vfiprintf_r+0x1f0>
 8014766:	2300      	movs	r3, #0
 8014768:	f04f 32ff 	mov.w	r2, #4294967295
 801476c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014770:	f10a 0a01 	add.w	sl, sl, #1
 8014774:	9304      	str	r3, [sp, #16]
 8014776:	9307      	str	r3, [sp, #28]
 8014778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801477c:	931a      	str	r3, [sp, #104]	; 0x68
 801477e:	4654      	mov	r4, sl
 8014780:	2205      	movs	r2, #5
 8014782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014786:	4854      	ldr	r0, [pc, #336]	; (80148d8 <_vfiprintf_r+0x220>)
 8014788:	f7eb fd52 	bl	8000230 <memchr>
 801478c:	9a04      	ldr	r2, [sp, #16]
 801478e:	b9d8      	cbnz	r0, 80147c8 <_vfiprintf_r+0x110>
 8014790:	06d1      	lsls	r1, r2, #27
 8014792:	bf44      	itt	mi
 8014794:	2320      	movmi	r3, #32
 8014796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801479a:	0713      	lsls	r3, r2, #28
 801479c:	bf44      	itt	mi
 801479e:	232b      	movmi	r3, #43	; 0x2b
 80147a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147a4:	f89a 3000 	ldrb.w	r3, [sl]
 80147a8:	2b2a      	cmp	r3, #42	; 0x2a
 80147aa:	d015      	beq.n	80147d8 <_vfiprintf_r+0x120>
 80147ac:	9a07      	ldr	r2, [sp, #28]
 80147ae:	4654      	mov	r4, sl
 80147b0:	2000      	movs	r0, #0
 80147b2:	f04f 0c0a 	mov.w	ip, #10
 80147b6:	4621      	mov	r1, r4
 80147b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147bc:	3b30      	subs	r3, #48	; 0x30
 80147be:	2b09      	cmp	r3, #9
 80147c0:	d94d      	bls.n	801485e <_vfiprintf_r+0x1a6>
 80147c2:	b1b0      	cbz	r0, 80147f2 <_vfiprintf_r+0x13a>
 80147c4:	9207      	str	r2, [sp, #28]
 80147c6:	e014      	b.n	80147f2 <_vfiprintf_r+0x13a>
 80147c8:	eba0 0308 	sub.w	r3, r0, r8
 80147cc:	fa09 f303 	lsl.w	r3, r9, r3
 80147d0:	4313      	orrs	r3, r2
 80147d2:	9304      	str	r3, [sp, #16]
 80147d4:	46a2      	mov	sl, r4
 80147d6:	e7d2      	b.n	801477e <_vfiprintf_r+0xc6>
 80147d8:	9b03      	ldr	r3, [sp, #12]
 80147da:	1d19      	adds	r1, r3, #4
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	9103      	str	r1, [sp, #12]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	bfbb      	ittet	lt
 80147e4:	425b      	neglt	r3, r3
 80147e6:	f042 0202 	orrlt.w	r2, r2, #2
 80147ea:	9307      	strge	r3, [sp, #28]
 80147ec:	9307      	strlt	r3, [sp, #28]
 80147ee:	bfb8      	it	lt
 80147f0:	9204      	strlt	r2, [sp, #16]
 80147f2:	7823      	ldrb	r3, [r4, #0]
 80147f4:	2b2e      	cmp	r3, #46	; 0x2e
 80147f6:	d10c      	bne.n	8014812 <_vfiprintf_r+0x15a>
 80147f8:	7863      	ldrb	r3, [r4, #1]
 80147fa:	2b2a      	cmp	r3, #42	; 0x2a
 80147fc:	d134      	bne.n	8014868 <_vfiprintf_r+0x1b0>
 80147fe:	9b03      	ldr	r3, [sp, #12]
 8014800:	1d1a      	adds	r2, r3, #4
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	9203      	str	r2, [sp, #12]
 8014806:	2b00      	cmp	r3, #0
 8014808:	bfb8      	it	lt
 801480a:	f04f 33ff 	movlt.w	r3, #4294967295
 801480e:	3402      	adds	r4, #2
 8014810:	9305      	str	r3, [sp, #20]
 8014812:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80148e8 <_vfiprintf_r+0x230>
 8014816:	7821      	ldrb	r1, [r4, #0]
 8014818:	2203      	movs	r2, #3
 801481a:	4650      	mov	r0, sl
 801481c:	f7eb fd08 	bl	8000230 <memchr>
 8014820:	b138      	cbz	r0, 8014832 <_vfiprintf_r+0x17a>
 8014822:	9b04      	ldr	r3, [sp, #16]
 8014824:	eba0 000a 	sub.w	r0, r0, sl
 8014828:	2240      	movs	r2, #64	; 0x40
 801482a:	4082      	lsls	r2, r0
 801482c:	4313      	orrs	r3, r2
 801482e:	3401      	adds	r4, #1
 8014830:	9304      	str	r3, [sp, #16]
 8014832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014836:	4829      	ldr	r0, [pc, #164]	; (80148dc <_vfiprintf_r+0x224>)
 8014838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801483c:	2206      	movs	r2, #6
 801483e:	f7eb fcf7 	bl	8000230 <memchr>
 8014842:	2800      	cmp	r0, #0
 8014844:	d03f      	beq.n	80148c6 <_vfiprintf_r+0x20e>
 8014846:	4b26      	ldr	r3, [pc, #152]	; (80148e0 <_vfiprintf_r+0x228>)
 8014848:	bb1b      	cbnz	r3, 8014892 <_vfiprintf_r+0x1da>
 801484a:	9b03      	ldr	r3, [sp, #12]
 801484c:	3307      	adds	r3, #7
 801484e:	f023 0307 	bic.w	r3, r3, #7
 8014852:	3308      	adds	r3, #8
 8014854:	9303      	str	r3, [sp, #12]
 8014856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014858:	443b      	add	r3, r7
 801485a:	9309      	str	r3, [sp, #36]	; 0x24
 801485c:	e768      	b.n	8014730 <_vfiprintf_r+0x78>
 801485e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014862:	460c      	mov	r4, r1
 8014864:	2001      	movs	r0, #1
 8014866:	e7a6      	b.n	80147b6 <_vfiprintf_r+0xfe>
 8014868:	2300      	movs	r3, #0
 801486a:	3401      	adds	r4, #1
 801486c:	9305      	str	r3, [sp, #20]
 801486e:	4619      	mov	r1, r3
 8014870:	f04f 0c0a 	mov.w	ip, #10
 8014874:	4620      	mov	r0, r4
 8014876:	f810 2b01 	ldrb.w	r2, [r0], #1
 801487a:	3a30      	subs	r2, #48	; 0x30
 801487c:	2a09      	cmp	r2, #9
 801487e:	d903      	bls.n	8014888 <_vfiprintf_r+0x1d0>
 8014880:	2b00      	cmp	r3, #0
 8014882:	d0c6      	beq.n	8014812 <_vfiprintf_r+0x15a>
 8014884:	9105      	str	r1, [sp, #20]
 8014886:	e7c4      	b.n	8014812 <_vfiprintf_r+0x15a>
 8014888:	fb0c 2101 	mla	r1, ip, r1, r2
 801488c:	4604      	mov	r4, r0
 801488e:	2301      	movs	r3, #1
 8014890:	e7f0      	b.n	8014874 <_vfiprintf_r+0x1bc>
 8014892:	ab03      	add	r3, sp, #12
 8014894:	9300      	str	r3, [sp, #0]
 8014896:	462a      	mov	r2, r5
 8014898:	4b12      	ldr	r3, [pc, #72]	; (80148e4 <_vfiprintf_r+0x22c>)
 801489a:	a904      	add	r1, sp, #16
 801489c:	4630      	mov	r0, r6
 801489e:	f7fc fbd7 	bl	8011050 <_printf_float>
 80148a2:	4607      	mov	r7, r0
 80148a4:	1c78      	adds	r0, r7, #1
 80148a6:	d1d6      	bne.n	8014856 <_vfiprintf_r+0x19e>
 80148a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148aa:	07d9      	lsls	r1, r3, #31
 80148ac:	d405      	bmi.n	80148ba <_vfiprintf_r+0x202>
 80148ae:	89ab      	ldrh	r3, [r5, #12]
 80148b0:	059a      	lsls	r2, r3, #22
 80148b2:	d402      	bmi.n	80148ba <_vfiprintf_r+0x202>
 80148b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148b6:	f7fd fb55 	bl	8011f64 <__retarget_lock_release_recursive>
 80148ba:	89ab      	ldrh	r3, [r5, #12]
 80148bc:	065b      	lsls	r3, r3, #25
 80148be:	f53f af1d 	bmi.w	80146fc <_vfiprintf_r+0x44>
 80148c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148c4:	e71c      	b.n	8014700 <_vfiprintf_r+0x48>
 80148c6:	ab03      	add	r3, sp, #12
 80148c8:	9300      	str	r3, [sp, #0]
 80148ca:	462a      	mov	r2, r5
 80148cc:	4b05      	ldr	r3, [pc, #20]	; (80148e4 <_vfiprintf_r+0x22c>)
 80148ce:	a904      	add	r1, sp, #16
 80148d0:	4630      	mov	r0, r6
 80148d2:	f7fc fe61 	bl	8011598 <_printf_i>
 80148d6:	e7e4      	b.n	80148a2 <_vfiprintf_r+0x1ea>
 80148d8:	08018819 	.word	0x08018819
 80148dc:	08018823 	.word	0x08018823
 80148e0:	08011051 	.word	0x08011051
 80148e4:	08014693 	.word	0x08014693
 80148e8:	0801881f 	.word	0x0801881f

080148ec <__sflush_r>:
 80148ec:	898a      	ldrh	r2, [r1, #12]
 80148ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f2:	4605      	mov	r5, r0
 80148f4:	0710      	lsls	r0, r2, #28
 80148f6:	460c      	mov	r4, r1
 80148f8:	d458      	bmi.n	80149ac <__sflush_r+0xc0>
 80148fa:	684b      	ldr	r3, [r1, #4]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	dc05      	bgt.n	801490c <__sflush_r+0x20>
 8014900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014902:	2b00      	cmp	r3, #0
 8014904:	dc02      	bgt.n	801490c <__sflush_r+0x20>
 8014906:	2000      	movs	r0, #0
 8014908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801490c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801490e:	2e00      	cmp	r6, #0
 8014910:	d0f9      	beq.n	8014906 <__sflush_r+0x1a>
 8014912:	2300      	movs	r3, #0
 8014914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014918:	682f      	ldr	r7, [r5, #0]
 801491a:	6a21      	ldr	r1, [r4, #32]
 801491c:	602b      	str	r3, [r5, #0]
 801491e:	d032      	beq.n	8014986 <__sflush_r+0x9a>
 8014920:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014922:	89a3      	ldrh	r3, [r4, #12]
 8014924:	075a      	lsls	r2, r3, #29
 8014926:	d505      	bpl.n	8014934 <__sflush_r+0x48>
 8014928:	6863      	ldr	r3, [r4, #4]
 801492a:	1ac0      	subs	r0, r0, r3
 801492c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801492e:	b10b      	cbz	r3, 8014934 <__sflush_r+0x48>
 8014930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014932:	1ac0      	subs	r0, r0, r3
 8014934:	2300      	movs	r3, #0
 8014936:	4602      	mov	r2, r0
 8014938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801493a:	6a21      	ldr	r1, [r4, #32]
 801493c:	4628      	mov	r0, r5
 801493e:	47b0      	blx	r6
 8014940:	1c43      	adds	r3, r0, #1
 8014942:	89a3      	ldrh	r3, [r4, #12]
 8014944:	d106      	bne.n	8014954 <__sflush_r+0x68>
 8014946:	6829      	ldr	r1, [r5, #0]
 8014948:	291d      	cmp	r1, #29
 801494a:	d82b      	bhi.n	80149a4 <__sflush_r+0xb8>
 801494c:	4a29      	ldr	r2, [pc, #164]	; (80149f4 <__sflush_r+0x108>)
 801494e:	410a      	asrs	r2, r1
 8014950:	07d6      	lsls	r6, r2, #31
 8014952:	d427      	bmi.n	80149a4 <__sflush_r+0xb8>
 8014954:	2200      	movs	r2, #0
 8014956:	6062      	str	r2, [r4, #4]
 8014958:	04d9      	lsls	r1, r3, #19
 801495a:	6922      	ldr	r2, [r4, #16]
 801495c:	6022      	str	r2, [r4, #0]
 801495e:	d504      	bpl.n	801496a <__sflush_r+0x7e>
 8014960:	1c42      	adds	r2, r0, #1
 8014962:	d101      	bne.n	8014968 <__sflush_r+0x7c>
 8014964:	682b      	ldr	r3, [r5, #0]
 8014966:	b903      	cbnz	r3, 801496a <__sflush_r+0x7e>
 8014968:	6560      	str	r0, [r4, #84]	; 0x54
 801496a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801496c:	602f      	str	r7, [r5, #0]
 801496e:	2900      	cmp	r1, #0
 8014970:	d0c9      	beq.n	8014906 <__sflush_r+0x1a>
 8014972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014976:	4299      	cmp	r1, r3
 8014978:	d002      	beq.n	8014980 <__sflush_r+0x94>
 801497a:	4628      	mov	r0, r5
 801497c:	f7fe f98a 	bl	8012c94 <_free_r>
 8014980:	2000      	movs	r0, #0
 8014982:	6360      	str	r0, [r4, #52]	; 0x34
 8014984:	e7c0      	b.n	8014908 <__sflush_r+0x1c>
 8014986:	2301      	movs	r3, #1
 8014988:	4628      	mov	r0, r5
 801498a:	47b0      	blx	r6
 801498c:	1c41      	adds	r1, r0, #1
 801498e:	d1c8      	bne.n	8014922 <__sflush_r+0x36>
 8014990:	682b      	ldr	r3, [r5, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d0c5      	beq.n	8014922 <__sflush_r+0x36>
 8014996:	2b1d      	cmp	r3, #29
 8014998:	d001      	beq.n	801499e <__sflush_r+0xb2>
 801499a:	2b16      	cmp	r3, #22
 801499c:	d101      	bne.n	80149a2 <__sflush_r+0xb6>
 801499e:	602f      	str	r7, [r5, #0]
 80149a0:	e7b1      	b.n	8014906 <__sflush_r+0x1a>
 80149a2:	89a3      	ldrh	r3, [r4, #12]
 80149a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149a8:	81a3      	strh	r3, [r4, #12]
 80149aa:	e7ad      	b.n	8014908 <__sflush_r+0x1c>
 80149ac:	690f      	ldr	r7, [r1, #16]
 80149ae:	2f00      	cmp	r7, #0
 80149b0:	d0a9      	beq.n	8014906 <__sflush_r+0x1a>
 80149b2:	0793      	lsls	r3, r2, #30
 80149b4:	680e      	ldr	r6, [r1, #0]
 80149b6:	bf08      	it	eq
 80149b8:	694b      	ldreq	r3, [r1, #20]
 80149ba:	600f      	str	r7, [r1, #0]
 80149bc:	bf18      	it	ne
 80149be:	2300      	movne	r3, #0
 80149c0:	eba6 0807 	sub.w	r8, r6, r7
 80149c4:	608b      	str	r3, [r1, #8]
 80149c6:	f1b8 0f00 	cmp.w	r8, #0
 80149ca:	dd9c      	ble.n	8014906 <__sflush_r+0x1a>
 80149cc:	6a21      	ldr	r1, [r4, #32]
 80149ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80149d0:	4643      	mov	r3, r8
 80149d2:	463a      	mov	r2, r7
 80149d4:	4628      	mov	r0, r5
 80149d6:	47b0      	blx	r6
 80149d8:	2800      	cmp	r0, #0
 80149da:	dc06      	bgt.n	80149ea <__sflush_r+0xfe>
 80149dc:	89a3      	ldrh	r3, [r4, #12]
 80149de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149e2:	81a3      	strh	r3, [r4, #12]
 80149e4:	f04f 30ff 	mov.w	r0, #4294967295
 80149e8:	e78e      	b.n	8014908 <__sflush_r+0x1c>
 80149ea:	4407      	add	r7, r0
 80149ec:	eba8 0800 	sub.w	r8, r8, r0
 80149f0:	e7e9      	b.n	80149c6 <__sflush_r+0xda>
 80149f2:	bf00      	nop
 80149f4:	dfbffffe 	.word	0xdfbffffe

080149f8 <_fflush_r>:
 80149f8:	b538      	push	{r3, r4, r5, lr}
 80149fa:	690b      	ldr	r3, [r1, #16]
 80149fc:	4605      	mov	r5, r0
 80149fe:	460c      	mov	r4, r1
 8014a00:	b913      	cbnz	r3, 8014a08 <_fflush_r+0x10>
 8014a02:	2500      	movs	r5, #0
 8014a04:	4628      	mov	r0, r5
 8014a06:	bd38      	pop	{r3, r4, r5, pc}
 8014a08:	b118      	cbz	r0, 8014a12 <_fflush_r+0x1a>
 8014a0a:	6a03      	ldr	r3, [r0, #32]
 8014a0c:	b90b      	cbnz	r3, 8014a12 <_fflush_r+0x1a>
 8014a0e:	f7fd f981 	bl	8011d14 <__sinit>
 8014a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d0f3      	beq.n	8014a02 <_fflush_r+0xa>
 8014a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014a1c:	07d0      	lsls	r0, r2, #31
 8014a1e:	d404      	bmi.n	8014a2a <_fflush_r+0x32>
 8014a20:	0599      	lsls	r1, r3, #22
 8014a22:	d402      	bmi.n	8014a2a <_fflush_r+0x32>
 8014a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a26:	f7fd fa9c 	bl	8011f62 <__retarget_lock_acquire_recursive>
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	4621      	mov	r1, r4
 8014a2e:	f7ff ff5d 	bl	80148ec <__sflush_r>
 8014a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a34:	07da      	lsls	r2, r3, #31
 8014a36:	4605      	mov	r5, r0
 8014a38:	d4e4      	bmi.n	8014a04 <_fflush_r+0xc>
 8014a3a:	89a3      	ldrh	r3, [r4, #12]
 8014a3c:	059b      	lsls	r3, r3, #22
 8014a3e:	d4e1      	bmi.n	8014a04 <_fflush_r+0xc>
 8014a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a42:	f7fd fa8f 	bl	8011f64 <__retarget_lock_release_recursive>
 8014a46:	e7dd      	b.n	8014a04 <_fflush_r+0xc>

08014a48 <__swbuf_r>:
 8014a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4a:	460e      	mov	r6, r1
 8014a4c:	4614      	mov	r4, r2
 8014a4e:	4605      	mov	r5, r0
 8014a50:	b118      	cbz	r0, 8014a5a <__swbuf_r+0x12>
 8014a52:	6a03      	ldr	r3, [r0, #32]
 8014a54:	b90b      	cbnz	r3, 8014a5a <__swbuf_r+0x12>
 8014a56:	f7fd f95d 	bl	8011d14 <__sinit>
 8014a5a:	69a3      	ldr	r3, [r4, #24]
 8014a5c:	60a3      	str	r3, [r4, #8]
 8014a5e:	89a3      	ldrh	r3, [r4, #12]
 8014a60:	071a      	lsls	r2, r3, #28
 8014a62:	d525      	bpl.n	8014ab0 <__swbuf_r+0x68>
 8014a64:	6923      	ldr	r3, [r4, #16]
 8014a66:	b31b      	cbz	r3, 8014ab0 <__swbuf_r+0x68>
 8014a68:	6823      	ldr	r3, [r4, #0]
 8014a6a:	6922      	ldr	r2, [r4, #16]
 8014a6c:	1a98      	subs	r0, r3, r2
 8014a6e:	6963      	ldr	r3, [r4, #20]
 8014a70:	b2f6      	uxtb	r6, r6
 8014a72:	4283      	cmp	r3, r0
 8014a74:	4637      	mov	r7, r6
 8014a76:	dc04      	bgt.n	8014a82 <__swbuf_r+0x3a>
 8014a78:	4621      	mov	r1, r4
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7ff ffbc 	bl	80149f8 <_fflush_r>
 8014a80:	b9e0      	cbnz	r0, 8014abc <__swbuf_r+0x74>
 8014a82:	68a3      	ldr	r3, [r4, #8]
 8014a84:	3b01      	subs	r3, #1
 8014a86:	60a3      	str	r3, [r4, #8]
 8014a88:	6823      	ldr	r3, [r4, #0]
 8014a8a:	1c5a      	adds	r2, r3, #1
 8014a8c:	6022      	str	r2, [r4, #0]
 8014a8e:	701e      	strb	r6, [r3, #0]
 8014a90:	6962      	ldr	r2, [r4, #20]
 8014a92:	1c43      	adds	r3, r0, #1
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d004      	beq.n	8014aa2 <__swbuf_r+0x5a>
 8014a98:	89a3      	ldrh	r3, [r4, #12]
 8014a9a:	07db      	lsls	r3, r3, #31
 8014a9c:	d506      	bpl.n	8014aac <__swbuf_r+0x64>
 8014a9e:	2e0a      	cmp	r6, #10
 8014aa0:	d104      	bne.n	8014aac <__swbuf_r+0x64>
 8014aa2:	4621      	mov	r1, r4
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	f7ff ffa7 	bl	80149f8 <_fflush_r>
 8014aaa:	b938      	cbnz	r0, 8014abc <__swbuf_r+0x74>
 8014aac:	4638      	mov	r0, r7
 8014aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ab0:	4621      	mov	r1, r4
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	f000 f806 	bl	8014ac4 <__swsetup_r>
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	d0d5      	beq.n	8014a68 <__swbuf_r+0x20>
 8014abc:	f04f 37ff 	mov.w	r7, #4294967295
 8014ac0:	e7f4      	b.n	8014aac <__swbuf_r+0x64>
	...

08014ac4 <__swsetup_r>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	4b2a      	ldr	r3, [pc, #168]	; (8014b70 <__swsetup_r+0xac>)
 8014ac8:	4605      	mov	r5, r0
 8014aca:	6818      	ldr	r0, [r3, #0]
 8014acc:	460c      	mov	r4, r1
 8014ace:	b118      	cbz	r0, 8014ad8 <__swsetup_r+0x14>
 8014ad0:	6a03      	ldr	r3, [r0, #32]
 8014ad2:	b90b      	cbnz	r3, 8014ad8 <__swsetup_r+0x14>
 8014ad4:	f7fd f91e 	bl	8011d14 <__sinit>
 8014ad8:	89a3      	ldrh	r3, [r4, #12]
 8014ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ade:	0718      	lsls	r0, r3, #28
 8014ae0:	d422      	bmi.n	8014b28 <__swsetup_r+0x64>
 8014ae2:	06d9      	lsls	r1, r3, #27
 8014ae4:	d407      	bmi.n	8014af6 <__swsetup_r+0x32>
 8014ae6:	2309      	movs	r3, #9
 8014ae8:	602b      	str	r3, [r5, #0]
 8014aea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014aee:	81a3      	strh	r3, [r4, #12]
 8014af0:	f04f 30ff 	mov.w	r0, #4294967295
 8014af4:	e034      	b.n	8014b60 <__swsetup_r+0x9c>
 8014af6:	0758      	lsls	r0, r3, #29
 8014af8:	d512      	bpl.n	8014b20 <__swsetup_r+0x5c>
 8014afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014afc:	b141      	cbz	r1, 8014b10 <__swsetup_r+0x4c>
 8014afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b02:	4299      	cmp	r1, r3
 8014b04:	d002      	beq.n	8014b0c <__swsetup_r+0x48>
 8014b06:	4628      	mov	r0, r5
 8014b08:	f7fe f8c4 	bl	8012c94 <_free_r>
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	6363      	str	r3, [r4, #52]	; 0x34
 8014b10:	89a3      	ldrh	r3, [r4, #12]
 8014b12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b16:	81a3      	strh	r3, [r4, #12]
 8014b18:	2300      	movs	r3, #0
 8014b1a:	6063      	str	r3, [r4, #4]
 8014b1c:	6923      	ldr	r3, [r4, #16]
 8014b1e:	6023      	str	r3, [r4, #0]
 8014b20:	89a3      	ldrh	r3, [r4, #12]
 8014b22:	f043 0308 	orr.w	r3, r3, #8
 8014b26:	81a3      	strh	r3, [r4, #12]
 8014b28:	6923      	ldr	r3, [r4, #16]
 8014b2a:	b94b      	cbnz	r3, 8014b40 <__swsetup_r+0x7c>
 8014b2c:	89a3      	ldrh	r3, [r4, #12]
 8014b2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b36:	d003      	beq.n	8014b40 <__swsetup_r+0x7c>
 8014b38:	4621      	mov	r1, r4
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	f000 fc62 	bl	8015404 <__smakebuf_r>
 8014b40:	89a0      	ldrh	r0, [r4, #12]
 8014b42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b46:	f010 0301 	ands.w	r3, r0, #1
 8014b4a:	d00a      	beq.n	8014b62 <__swsetup_r+0x9e>
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	60a3      	str	r3, [r4, #8]
 8014b50:	6963      	ldr	r3, [r4, #20]
 8014b52:	425b      	negs	r3, r3
 8014b54:	61a3      	str	r3, [r4, #24]
 8014b56:	6923      	ldr	r3, [r4, #16]
 8014b58:	b943      	cbnz	r3, 8014b6c <__swsetup_r+0xa8>
 8014b5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b5e:	d1c4      	bne.n	8014aea <__swsetup_r+0x26>
 8014b60:	bd38      	pop	{r3, r4, r5, pc}
 8014b62:	0781      	lsls	r1, r0, #30
 8014b64:	bf58      	it	pl
 8014b66:	6963      	ldrpl	r3, [r4, #20]
 8014b68:	60a3      	str	r3, [r4, #8]
 8014b6a:	e7f4      	b.n	8014b56 <__swsetup_r+0x92>
 8014b6c:	2000      	movs	r0, #0
 8014b6e:	e7f7      	b.n	8014b60 <__swsetup_r+0x9c>
 8014b70:	2000007c 	.word	0x2000007c

08014b74 <memmove>:
 8014b74:	4288      	cmp	r0, r1
 8014b76:	b510      	push	{r4, lr}
 8014b78:	eb01 0402 	add.w	r4, r1, r2
 8014b7c:	d902      	bls.n	8014b84 <memmove+0x10>
 8014b7e:	4284      	cmp	r4, r0
 8014b80:	4623      	mov	r3, r4
 8014b82:	d807      	bhi.n	8014b94 <memmove+0x20>
 8014b84:	1e43      	subs	r3, r0, #1
 8014b86:	42a1      	cmp	r1, r4
 8014b88:	d008      	beq.n	8014b9c <memmove+0x28>
 8014b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b92:	e7f8      	b.n	8014b86 <memmove+0x12>
 8014b94:	4402      	add	r2, r0
 8014b96:	4601      	mov	r1, r0
 8014b98:	428a      	cmp	r2, r1
 8014b9a:	d100      	bne.n	8014b9e <memmove+0x2a>
 8014b9c:	bd10      	pop	{r4, pc}
 8014b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ba6:	e7f7      	b.n	8014b98 <memmove+0x24>

08014ba8 <strncmp>:
 8014ba8:	b510      	push	{r4, lr}
 8014baa:	b16a      	cbz	r2, 8014bc8 <strncmp+0x20>
 8014bac:	3901      	subs	r1, #1
 8014bae:	1884      	adds	r4, r0, r2
 8014bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d103      	bne.n	8014bc4 <strncmp+0x1c>
 8014bbc:	42a0      	cmp	r0, r4
 8014bbe:	d001      	beq.n	8014bc4 <strncmp+0x1c>
 8014bc0:	2a00      	cmp	r2, #0
 8014bc2:	d1f5      	bne.n	8014bb0 <strncmp+0x8>
 8014bc4:	1ad0      	subs	r0, r2, r3
 8014bc6:	bd10      	pop	{r4, pc}
 8014bc8:	4610      	mov	r0, r2
 8014bca:	e7fc      	b.n	8014bc6 <strncmp+0x1e>
 8014bcc:	0000      	movs	r0, r0
	...

08014bd0 <nan>:
 8014bd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014bd8 <nan+0x8>
 8014bd4:	4770      	bx	lr
 8014bd6:	bf00      	nop
 8014bd8:	00000000 	.word	0x00000000
 8014bdc:	7ff80000 	.word	0x7ff80000

08014be0 <__assert_func>:
 8014be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014be2:	4614      	mov	r4, r2
 8014be4:	461a      	mov	r2, r3
 8014be6:	4b09      	ldr	r3, [pc, #36]	; (8014c0c <__assert_func+0x2c>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	4605      	mov	r5, r0
 8014bec:	68d8      	ldr	r0, [r3, #12]
 8014bee:	b14c      	cbz	r4, 8014c04 <__assert_func+0x24>
 8014bf0:	4b07      	ldr	r3, [pc, #28]	; (8014c10 <__assert_func+0x30>)
 8014bf2:	9100      	str	r1, [sp, #0]
 8014bf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014bf8:	4906      	ldr	r1, [pc, #24]	; (8014c14 <__assert_func+0x34>)
 8014bfa:	462b      	mov	r3, r5
 8014bfc:	f000 fbca 	bl	8015394 <fiprintf>
 8014c00:	f000 fc5e 	bl	80154c0 <abort>
 8014c04:	4b04      	ldr	r3, [pc, #16]	; (8014c18 <__assert_func+0x38>)
 8014c06:	461c      	mov	r4, r3
 8014c08:	e7f3      	b.n	8014bf2 <__assert_func+0x12>
 8014c0a:	bf00      	nop
 8014c0c:	2000007c 	.word	0x2000007c
 8014c10:	08018832 	.word	0x08018832
 8014c14:	0801883f 	.word	0x0801883f
 8014c18:	0801886d 	.word	0x0801886d

08014c1c <_calloc_r>:
 8014c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c1e:	fba1 2402 	umull	r2, r4, r1, r2
 8014c22:	b94c      	cbnz	r4, 8014c38 <_calloc_r+0x1c>
 8014c24:	4611      	mov	r1, r2
 8014c26:	9201      	str	r2, [sp, #4]
 8014c28:	f7fc f8e6 	bl	8010df8 <_malloc_r>
 8014c2c:	9a01      	ldr	r2, [sp, #4]
 8014c2e:	4605      	mov	r5, r0
 8014c30:	b930      	cbnz	r0, 8014c40 <_calloc_r+0x24>
 8014c32:	4628      	mov	r0, r5
 8014c34:	b003      	add	sp, #12
 8014c36:	bd30      	pop	{r4, r5, pc}
 8014c38:	220c      	movs	r2, #12
 8014c3a:	6002      	str	r2, [r0, #0]
 8014c3c:	2500      	movs	r5, #0
 8014c3e:	e7f8      	b.n	8014c32 <_calloc_r+0x16>
 8014c40:	4621      	mov	r1, r4
 8014c42:	f7fd f900 	bl	8011e46 <memset>
 8014c46:	e7f4      	b.n	8014c32 <_calloc_r+0x16>

08014c48 <rshift>:
 8014c48:	6903      	ldr	r3, [r0, #16]
 8014c4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014c4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014c56:	f100 0414 	add.w	r4, r0, #20
 8014c5a:	dd45      	ble.n	8014ce8 <rshift+0xa0>
 8014c5c:	f011 011f 	ands.w	r1, r1, #31
 8014c60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014c64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014c68:	d10c      	bne.n	8014c84 <rshift+0x3c>
 8014c6a:	f100 0710 	add.w	r7, r0, #16
 8014c6e:	4629      	mov	r1, r5
 8014c70:	42b1      	cmp	r1, r6
 8014c72:	d334      	bcc.n	8014cde <rshift+0x96>
 8014c74:	1a9b      	subs	r3, r3, r2
 8014c76:	009b      	lsls	r3, r3, #2
 8014c78:	1eea      	subs	r2, r5, #3
 8014c7a:	4296      	cmp	r6, r2
 8014c7c:	bf38      	it	cc
 8014c7e:	2300      	movcc	r3, #0
 8014c80:	4423      	add	r3, r4
 8014c82:	e015      	b.n	8014cb0 <rshift+0x68>
 8014c84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014c88:	f1c1 0820 	rsb	r8, r1, #32
 8014c8c:	40cf      	lsrs	r7, r1
 8014c8e:	f105 0e04 	add.w	lr, r5, #4
 8014c92:	46a1      	mov	r9, r4
 8014c94:	4576      	cmp	r6, lr
 8014c96:	46f4      	mov	ip, lr
 8014c98:	d815      	bhi.n	8014cc6 <rshift+0x7e>
 8014c9a:	1a9a      	subs	r2, r3, r2
 8014c9c:	0092      	lsls	r2, r2, #2
 8014c9e:	3a04      	subs	r2, #4
 8014ca0:	3501      	adds	r5, #1
 8014ca2:	42ae      	cmp	r6, r5
 8014ca4:	bf38      	it	cc
 8014ca6:	2200      	movcc	r2, #0
 8014ca8:	18a3      	adds	r3, r4, r2
 8014caa:	50a7      	str	r7, [r4, r2]
 8014cac:	b107      	cbz	r7, 8014cb0 <rshift+0x68>
 8014cae:	3304      	adds	r3, #4
 8014cb0:	1b1a      	subs	r2, r3, r4
 8014cb2:	42a3      	cmp	r3, r4
 8014cb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014cb8:	bf08      	it	eq
 8014cba:	2300      	moveq	r3, #0
 8014cbc:	6102      	str	r2, [r0, #16]
 8014cbe:	bf08      	it	eq
 8014cc0:	6143      	streq	r3, [r0, #20]
 8014cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cc6:	f8dc c000 	ldr.w	ip, [ip]
 8014cca:	fa0c fc08 	lsl.w	ip, ip, r8
 8014cce:	ea4c 0707 	orr.w	r7, ip, r7
 8014cd2:	f849 7b04 	str.w	r7, [r9], #4
 8014cd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014cda:	40cf      	lsrs	r7, r1
 8014cdc:	e7da      	b.n	8014c94 <rshift+0x4c>
 8014cde:	f851 cb04 	ldr.w	ip, [r1], #4
 8014ce2:	f847 cf04 	str.w	ip, [r7, #4]!
 8014ce6:	e7c3      	b.n	8014c70 <rshift+0x28>
 8014ce8:	4623      	mov	r3, r4
 8014cea:	e7e1      	b.n	8014cb0 <rshift+0x68>

08014cec <__hexdig_fun>:
 8014cec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014cf0:	2b09      	cmp	r3, #9
 8014cf2:	d802      	bhi.n	8014cfa <__hexdig_fun+0xe>
 8014cf4:	3820      	subs	r0, #32
 8014cf6:	b2c0      	uxtb	r0, r0
 8014cf8:	4770      	bx	lr
 8014cfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014cfe:	2b05      	cmp	r3, #5
 8014d00:	d801      	bhi.n	8014d06 <__hexdig_fun+0x1a>
 8014d02:	3847      	subs	r0, #71	; 0x47
 8014d04:	e7f7      	b.n	8014cf6 <__hexdig_fun+0xa>
 8014d06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014d0a:	2b05      	cmp	r3, #5
 8014d0c:	d801      	bhi.n	8014d12 <__hexdig_fun+0x26>
 8014d0e:	3827      	subs	r0, #39	; 0x27
 8014d10:	e7f1      	b.n	8014cf6 <__hexdig_fun+0xa>
 8014d12:	2000      	movs	r0, #0
 8014d14:	4770      	bx	lr
	...

08014d18 <__gethex>:
 8014d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1c:	4617      	mov	r7, r2
 8014d1e:	680a      	ldr	r2, [r1, #0]
 8014d20:	b085      	sub	sp, #20
 8014d22:	f102 0b02 	add.w	fp, r2, #2
 8014d26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014d2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014d2e:	4681      	mov	r9, r0
 8014d30:	468a      	mov	sl, r1
 8014d32:	9302      	str	r3, [sp, #8]
 8014d34:	32fe      	adds	r2, #254	; 0xfe
 8014d36:	eb02 030b 	add.w	r3, r2, fp
 8014d3a:	46d8      	mov	r8, fp
 8014d3c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014d40:	9301      	str	r3, [sp, #4]
 8014d42:	2830      	cmp	r0, #48	; 0x30
 8014d44:	d0f7      	beq.n	8014d36 <__gethex+0x1e>
 8014d46:	f7ff ffd1 	bl	8014cec <__hexdig_fun>
 8014d4a:	4604      	mov	r4, r0
 8014d4c:	2800      	cmp	r0, #0
 8014d4e:	d138      	bne.n	8014dc2 <__gethex+0xaa>
 8014d50:	49a7      	ldr	r1, [pc, #668]	; (8014ff0 <__gethex+0x2d8>)
 8014d52:	2201      	movs	r2, #1
 8014d54:	4640      	mov	r0, r8
 8014d56:	f7ff ff27 	bl	8014ba8 <strncmp>
 8014d5a:	4606      	mov	r6, r0
 8014d5c:	2800      	cmp	r0, #0
 8014d5e:	d169      	bne.n	8014e34 <__gethex+0x11c>
 8014d60:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014d64:	465d      	mov	r5, fp
 8014d66:	f7ff ffc1 	bl	8014cec <__hexdig_fun>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d064      	beq.n	8014e38 <__gethex+0x120>
 8014d6e:	465a      	mov	r2, fp
 8014d70:	7810      	ldrb	r0, [r2, #0]
 8014d72:	2830      	cmp	r0, #48	; 0x30
 8014d74:	4690      	mov	r8, r2
 8014d76:	f102 0201 	add.w	r2, r2, #1
 8014d7a:	d0f9      	beq.n	8014d70 <__gethex+0x58>
 8014d7c:	f7ff ffb6 	bl	8014cec <__hexdig_fun>
 8014d80:	2301      	movs	r3, #1
 8014d82:	fab0 f480 	clz	r4, r0
 8014d86:	0964      	lsrs	r4, r4, #5
 8014d88:	465e      	mov	r6, fp
 8014d8a:	9301      	str	r3, [sp, #4]
 8014d8c:	4642      	mov	r2, r8
 8014d8e:	4615      	mov	r5, r2
 8014d90:	3201      	adds	r2, #1
 8014d92:	7828      	ldrb	r0, [r5, #0]
 8014d94:	f7ff ffaa 	bl	8014cec <__hexdig_fun>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d1f8      	bne.n	8014d8e <__gethex+0x76>
 8014d9c:	4994      	ldr	r1, [pc, #592]	; (8014ff0 <__gethex+0x2d8>)
 8014d9e:	2201      	movs	r2, #1
 8014da0:	4628      	mov	r0, r5
 8014da2:	f7ff ff01 	bl	8014ba8 <strncmp>
 8014da6:	b978      	cbnz	r0, 8014dc8 <__gethex+0xb0>
 8014da8:	b946      	cbnz	r6, 8014dbc <__gethex+0xa4>
 8014daa:	1c6e      	adds	r6, r5, #1
 8014dac:	4632      	mov	r2, r6
 8014dae:	4615      	mov	r5, r2
 8014db0:	3201      	adds	r2, #1
 8014db2:	7828      	ldrb	r0, [r5, #0]
 8014db4:	f7ff ff9a 	bl	8014cec <__hexdig_fun>
 8014db8:	2800      	cmp	r0, #0
 8014dba:	d1f8      	bne.n	8014dae <__gethex+0x96>
 8014dbc:	1b73      	subs	r3, r6, r5
 8014dbe:	009e      	lsls	r6, r3, #2
 8014dc0:	e004      	b.n	8014dcc <__gethex+0xb4>
 8014dc2:	2400      	movs	r4, #0
 8014dc4:	4626      	mov	r6, r4
 8014dc6:	e7e1      	b.n	8014d8c <__gethex+0x74>
 8014dc8:	2e00      	cmp	r6, #0
 8014dca:	d1f7      	bne.n	8014dbc <__gethex+0xa4>
 8014dcc:	782b      	ldrb	r3, [r5, #0]
 8014dce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014dd2:	2b50      	cmp	r3, #80	; 0x50
 8014dd4:	d13d      	bne.n	8014e52 <__gethex+0x13a>
 8014dd6:	786b      	ldrb	r3, [r5, #1]
 8014dd8:	2b2b      	cmp	r3, #43	; 0x2b
 8014dda:	d02f      	beq.n	8014e3c <__gethex+0x124>
 8014ddc:	2b2d      	cmp	r3, #45	; 0x2d
 8014dde:	d031      	beq.n	8014e44 <__gethex+0x12c>
 8014de0:	1c69      	adds	r1, r5, #1
 8014de2:	f04f 0b00 	mov.w	fp, #0
 8014de6:	7808      	ldrb	r0, [r1, #0]
 8014de8:	f7ff ff80 	bl	8014cec <__hexdig_fun>
 8014dec:	1e42      	subs	r2, r0, #1
 8014dee:	b2d2      	uxtb	r2, r2
 8014df0:	2a18      	cmp	r2, #24
 8014df2:	d82e      	bhi.n	8014e52 <__gethex+0x13a>
 8014df4:	f1a0 0210 	sub.w	r2, r0, #16
 8014df8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014dfc:	f7ff ff76 	bl	8014cec <__hexdig_fun>
 8014e00:	f100 3cff 	add.w	ip, r0, #4294967295
 8014e04:	fa5f fc8c 	uxtb.w	ip, ip
 8014e08:	f1bc 0f18 	cmp.w	ip, #24
 8014e0c:	d91d      	bls.n	8014e4a <__gethex+0x132>
 8014e0e:	f1bb 0f00 	cmp.w	fp, #0
 8014e12:	d000      	beq.n	8014e16 <__gethex+0xfe>
 8014e14:	4252      	negs	r2, r2
 8014e16:	4416      	add	r6, r2
 8014e18:	f8ca 1000 	str.w	r1, [sl]
 8014e1c:	b1dc      	cbz	r4, 8014e56 <__gethex+0x13e>
 8014e1e:	9b01      	ldr	r3, [sp, #4]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	bf14      	ite	ne
 8014e24:	f04f 0800 	movne.w	r8, #0
 8014e28:	f04f 0806 	moveq.w	r8, #6
 8014e2c:	4640      	mov	r0, r8
 8014e2e:	b005      	add	sp, #20
 8014e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e34:	4645      	mov	r5, r8
 8014e36:	4626      	mov	r6, r4
 8014e38:	2401      	movs	r4, #1
 8014e3a:	e7c7      	b.n	8014dcc <__gethex+0xb4>
 8014e3c:	f04f 0b00 	mov.w	fp, #0
 8014e40:	1ca9      	adds	r1, r5, #2
 8014e42:	e7d0      	b.n	8014de6 <__gethex+0xce>
 8014e44:	f04f 0b01 	mov.w	fp, #1
 8014e48:	e7fa      	b.n	8014e40 <__gethex+0x128>
 8014e4a:	230a      	movs	r3, #10
 8014e4c:	fb03 0002 	mla	r0, r3, r2, r0
 8014e50:	e7d0      	b.n	8014df4 <__gethex+0xdc>
 8014e52:	4629      	mov	r1, r5
 8014e54:	e7e0      	b.n	8014e18 <__gethex+0x100>
 8014e56:	eba5 0308 	sub.w	r3, r5, r8
 8014e5a:	3b01      	subs	r3, #1
 8014e5c:	4621      	mov	r1, r4
 8014e5e:	2b07      	cmp	r3, #7
 8014e60:	dc0a      	bgt.n	8014e78 <__gethex+0x160>
 8014e62:	4648      	mov	r0, r9
 8014e64:	f7fd ff62 	bl	8012d2c <_Balloc>
 8014e68:	4604      	mov	r4, r0
 8014e6a:	b940      	cbnz	r0, 8014e7e <__gethex+0x166>
 8014e6c:	4b61      	ldr	r3, [pc, #388]	; (8014ff4 <__gethex+0x2dc>)
 8014e6e:	4602      	mov	r2, r0
 8014e70:	21e4      	movs	r1, #228	; 0xe4
 8014e72:	4861      	ldr	r0, [pc, #388]	; (8014ff8 <__gethex+0x2e0>)
 8014e74:	f7ff feb4 	bl	8014be0 <__assert_func>
 8014e78:	3101      	adds	r1, #1
 8014e7a:	105b      	asrs	r3, r3, #1
 8014e7c:	e7ef      	b.n	8014e5e <__gethex+0x146>
 8014e7e:	f100 0a14 	add.w	sl, r0, #20
 8014e82:	2300      	movs	r3, #0
 8014e84:	495a      	ldr	r1, [pc, #360]	; (8014ff0 <__gethex+0x2d8>)
 8014e86:	f8cd a004 	str.w	sl, [sp, #4]
 8014e8a:	469b      	mov	fp, r3
 8014e8c:	45a8      	cmp	r8, r5
 8014e8e:	d342      	bcc.n	8014f16 <__gethex+0x1fe>
 8014e90:	9801      	ldr	r0, [sp, #4]
 8014e92:	f840 bb04 	str.w	fp, [r0], #4
 8014e96:	eba0 000a 	sub.w	r0, r0, sl
 8014e9a:	1080      	asrs	r0, r0, #2
 8014e9c:	6120      	str	r0, [r4, #16]
 8014e9e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014ea2:	4658      	mov	r0, fp
 8014ea4:	f7fe f834 	bl	8012f10 <__hi0bits>
 8014ea8:	683d      	ldr	r5, [r7, #0]
 8014eaa:	eba8 0000 	sub.w	r0, r8, r0
 8014eae:	42a8      	cmp	r0, r5
 8014eb0:	dd59      	ble.n	8014f66 <__gethex+0x24e>
 8014eb2:	eba0 0805 	sub.w	r8, r0, r5
 8014eb6:	4641      	mov	r1, r8
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f7fe fbc3 	bl	8013644 <__any_on>
 8014ebe:	4683      	mov	fp, r0
 8014ec0:	b1b8      	cbz	r0, 8014ef2 <__gethex+0x1da>
 8014ec2:	f108 33ff 	add.w	r3, r8, #4294967295
 8014ec6:	1159      	asrs	r1, r3, #5
 8014ec8:	f003 021f 	and.w	r2, r3, #31
 8014ecc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014ed0:	f04f 0b01 	mov.w	fp, #1
 8014ed4:	fa0b f202 	lsl.w	r2, fp, r2
 8014ed8:	420a      	tst	r2, r1
 8014eda:	d00a      	beq.n	8014ef2 <__gethex+0x1da>
 8014edc:	455b      	cmp	r3, fp
 8014ede:	dd06      	ble.n	8014eee <__gethex+0x1d6>
 8014ee0:	f1a8 0102 	sub.w	r1, r8, #2
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	f7fe fbad 	bl	8013644 <__any_on>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d138      	bne.n	8014f60 <__gethex+0x248>
 8014eee:	f04f 0b02 	mov.w	fp, #2
 8014ef2:	4641      	mov	r1, r8
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	f7ff fea7 	bl	8014c48 <rshift>
 8014efa:	4446      	add	r6, r8
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	42b3      	cmp	r3, r6
 8014f00:	da41      	bge.n	8014f86 <__gethex+0x26e>
 8014f02:	4621      	mov	r1, r4
 8014f04:	4648      	mov	r0, r9
 8014f06:	f7fd ff51 	bl	8012dac <_Bfree>
 8014f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	6013      	str	r3, [r2, #0]
 8014f10:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014f14:	e78a      	b.n	8014e2c <__gethex+0x114>
 8014f16:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014f1a:	2a2e      	cmp	r2, #46	; 0x2e
 8014f1c:	d014      	beq.n	8014f48 <__gethex+0x230>
 8014f1e:	2b20      	cmp	r3, #32
 8014f20:	d106      	bne.n	8014f30 <__gethex+0x218>
 8014f22:	9b01      	ldr	r3, [sp, #4]
 8014f24:	f843 bb04 	str.w	fp, [r3], #4
 8014f28:	f04f 0b00 	mov.w	fp, #0
 8014f2c:	9301      	str	r3, [sp, #4]
 8014f2e:	465b      	mov	r3, fp
 8014f30:	7828      	ldrb	r0, [r5, #0]
 8014f32:	9303      	str	r3, [sp, #12]
 8014f34:	f7ff feda 	bl	8014cec <__hexdig_fun>
 8014f38:	9b03      	ldr	r3, [sp, #12]
 8014f3a:	f000 000f 	and.w	r0, r0, #15
 8014f3e:	4098      	lsls	r0, r3
 8014f40:	ea4b 0b00 	orr.w	fp, fp, r0
 8014f44:	3304      	adds	r3, #4
 8014f46:	e7a1      	b.n	8014e8c <__gethex+0x174>
 8014f48:	45a8      	cmp	r8, r5
 8014f4a:	d8e8      	bhi.n	8014f1e <__gethex+0x206>
 8014f4c:	2201      	movs	r2, #1
 8014f4e:	4628      	mov	r0, r5
 8014f50:	9303      	str	r3, [sp, #12]
 8014f52:	f7ff fe29 	bl	8014ba8 <strncmp>
 8014f56:	4926      	ldr	r1, [pc, #152]	; (8014ff0 <__gethex+0x2d8>)
 8014f58:	9b03      	ldr	r3, [sp, #12]
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	d1df      	bne.n	8014f1e <__gethex+0x206>
 8014f5e:	e795      	b.n	8014e8c <__gethex+0x174>
 8014f60:	f04f 0b03 	mov.w	fp, #3
 8014f64:	e7c5      	b.n	8014ef2 <__gethex+0x1da>
 8014f66:	da0b      	bge.n	8014f80 <__gethex+0x268>
 8014f68:	eba5 0800 	sub.w	r8, r5, r0
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	4642      	mov	r2, r8
 8014f70:	4648      	mov	r0, r9
 8014f72:	f7fe f935 	bl	80131e0 <__lshift>
 8014f76:	eba6 0608 	sub.w	r6, r6, r8
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	f100 0a14 	add.w	sl, r0, #20
 8014f80:	f04f 0b00 	mov.w	fp, #0
 8014f84:	e7ba      	b.n	8014efc <__gethex+0x1e4>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	42b3      	cmp	r3, r6
 8014f8a:	dd73      	ble.n	8015074 <__gethex+0x35c>
 8014f8c:	1b9e      	subs	r6, r3, r6
 8014f8e:	42b5      	cmp	r5, r6
 8014f90:	dc34      	bgt.n	8014ffc <__gethex+0x2e4>
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	2b02      	cmp	r3, #2
 8014f96:	d023      	beq.n	8014fe0 <__gethex+0x2c8>
 8014f98:	2b03      	cmp	r3, #3
 8014f9a:	d025      	beq.n	8014fe8 <__gethex+0x2d0>
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d115      	bne.n	8014fcc <__gethex+0x2b4>
 8014fa0:	42b5      	cmp	r5, r6
 8014fa2:	d113      	bne.n	8014fcc <__gethex+0x2b4>
 8014fa4:	2d01      	cmp	r5, #1
 8014fa6:	d10b      	bne.n	8014fc0 <__gethex+0x2a8>
 8014fa8:	9a02      	ldr	r2, [sp, #8]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6013      	str	r3, [r2, #0]
 8014fae:	2301      	movs	r3, #1
 8014fb0:	6123      	str	r3, [r4, #16]
 8014fb2:	f8ca 3000 	str.w	r3, [sl]
 8014fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fb8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014fbc:	601c      	str	r4, [r3, #0]
 8014fbe:	e735      	b.n	8014e2c <__gethex+0x114>
 8014fc0:	1e69      	subs	r1, r5, #1
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	f7fe fb3e 	bl	8013644 <__any_on>
 8014fc8:	2800      	cmp	r0, #0
 8014fca:	d1ed      	bne.n	8014fa8 <__gethex+0x290>
 8014fcc:	4621      	mov	r1, r4
 8014fce:	4648      	mov	r0, r9
 8014fd0:	f7fd feec 	bl	8012dac <_Bfree>
 8014fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	6013      	str	r3, [r2, #0]
 8014fda:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014fde:	e725      	b.n	8014e2c <__gethex+0x114>
 8014fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d1f2      	bne.n	8014fcc <__gethex+0x2b4>
 8014fe6:	e7df      	b.n	8014fa8 <__gethex+0x290>
 8014fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d1dc      	bne.n	8014fa8 <__gethex+0x290>
 8014fee:	e7ed      	b.n	8014fcc <__gethex+0x2b4>
 8014ff0:	080186c4 	.word	0x080186c4
 8014ff4:	0801855b 	.word	0x0801855b
 8014ff8:	0801886e 	.word	0x0801886e
 8014ffc:	f106 38ff 	add.w	r8, r6, #4294967295
 8015000:	f1bb 0f00 	cmp.w	fp, #0
 8015004:	d133      	bne.n	801506e <__gethex+0x356>
 8015006:	f1b8 0f00 	cmp.w	r8, #0
 801500a:	d004      	beq.n	8015016 <__gethex+0x2fe>
 801500c:	4641      	mov	r1, r8
 801500e:	4620      	mov	r0, r4
 8015010:	f7fe fb18 	bl	8013644 <__any_on>
 8015014:	4683      	mov	fp, r0
 8015016:	ea4f 1268 	mov.w	r2, r8, asr #5
 801501a:	2301      	movs	r3, #1
 801501c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015020:	f008 081f 	and.w	r8, r8, #31
 8015024:	fa03 f308 	lsl.w	r3, r3, r8
 8015028:	4213      	tst	r3, r2
 801502a:	4631      	mov	r1, r6
 801502c:	4620      	mov	r0, r4
 801502e:	bf18      	it	ne
 8015030:	f04b 0b02 	orrne.w	fp, fp, #2
 8015034:	1bad      	subs	r5, r5, r6
 8015036:	f7ff fe07 	bl	8014c48 <rshift>
 801503a:	687e      	ldr	r6, [r7, #4]
 801503c:	f04f 0802 	mov.w	r8, #2
 8015040:	f1bb 0f00 	cmp.w	fp, #0
 8015044:	d04a      	beq.n	80150dc <__gethex+0x3c4>
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b02      	cmp	r3, #2
 801504a:	d016      	beq.n	801507a <__gethex+0x362>
 801504c:	2b03      	cmp	r3, #3
 801504e:	d018      	beq.n	8015082 <__gethex+0x36a>
 8015050:	2b01      	cmp	r3, #1
 8015052:	d109      	bne.n	8015068 <__gethex+0x350>
 8015054:	f01b 0f02 	tst.w	fp, #2
 8015058:	d006      	beq.n	8015068 <__gethex+0x350>
 801505a:	f8da 3000 	ldr.w	r3, [sl]
 801505e:	ea4b 0b03 	orr.w	fp, fp, r3
 8015062:	f01b 0f01 	tst.w	fp, #1
 8015066:	d10f      	bne.n	8015088 <__gethex+0x370>
 8015068:	f048 0810 	orr.w	r8, r8, #16
 801506c:	e036      	b.n	80150dc <__gethex+0x3c4>
 801506e:	f04f 0b01 	mov.w	fp, #1
 8015072:	e7d0      	b.n	8015016 <__gethex+0x2fe>
 8015074:	f04f 0801 	mov.w	r8, #1
 8015078:	e7e2      	b.n	8015040 <__gethex+0x328>
 801507a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801507c:	f1c3 0301 	rsb	r3, r3, #1
 8015080:	930f      	str	r3, [sp, #60]	; 0x3c
 8015082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015084:	2b00      	cmp	r3, #0
 8015086:	d0ef      	beq.n	8015068 <__gethex+0x350>
 8015088:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801508c:	f104 0214 	add.w	r2, r4, #20
 8015090:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015094:	9301      	str	r3, [sp, #4]
 8015096:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801509a:	2300      	movs	r3, #0
 801509c:	4694      	mov	ip, r2
 801509e:	f852 1b04 	ldr.w	r1, [r2], #4
 80150a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80150a6:	d01e      	beq.n	80150e6 <__gethex+0x3ce>
 80150a8:	3101      	adds	r1, #1
 80150aa:	f8cc 1000 	str.w	r1, [ip]
 80150ae:	f1b8 0f02 	cmp.w	r8, #2
 80150b2:	f104 0214 	add.w	r2, r4, #20
 80150b6:	d13d      	bne.n	8015134 <__gethex+0x41c>
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	3b01      	subs	r3, #1
 80150bc:	42ab      	cmp	r3, r5
 80150be:	d10b      	bne.n	80150d8 <__gethex+0x3c0>
 80150c0:	1169      	asrs	r1, r5, #5
 80150c2:	2301      	movs	r3, #1
 80150c4:	f005 051f 	and.w	r5, r5, #31
 80150c8:	fa03 f505 	lsl.w	r5, r3, r5
 80150cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150d0:	421d      	tst	r5, r3
 80150d2:	bf18      	it	ne
 80150d4:	f04f 0801 	movne.w	r8, #1
 80150d8:	f048 0820 	orr.w	r8, r8, #32
 80150dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150de:	601c      	str	r4, [r3, #0]
 80150e0:	9b02      	ldr	r3, [sp, #8]
 80150e2:	601e      	str	r6, [r3, #0]
 80150e4:	e6a2      	b.n	8014e2c <__gethex+0x114>
 80150e6:	4290      	cmp	r0, r2
 80150e8:	f842 3c04 	str.w	r3, [r2, #-4]
 80150ec:	d8d6      	bhi.n	801509c <__gethex+0x384>
 80150ee:	68a2      	ldr	r2, [r4, #8]
 80150f0:	4593      	cmp	fp, r2
 80150f2:	db17      	blt.n	8015124 <__gethex+0x40c>
 80150f4:	6861      	ldr	r1, [r4, #4]
 80150f6:	4648      	mov	r0, r9
 80150f8:	3101      	adds	r1, #1
 80150fa:	f7fd fe17 	bl	8012d2c <_Balloc>
 80150fe:	4682      	mov	sl, r0
 8015100:	b918      	cbnz	r0, 801510a <__gethex+0x3f2>
 8015102:	4b1b      	ldr	r3, [pc, #108]	; (8015170 <__gethex+0x458>)
 8015104:	4602      	mov	r2, r0
 8015106:	2184      	movs	r1, #132	; 0x84
 8015108:	e6b3      	b.n	8014e72 <__gethex+0x15a>
 801510a:	6922      	ldr	r2, [r4, #16]
 801510c:	3202      	adds	r2, #2
 801510e:	f104 010c 	add.w	r1, r4, #12
 8015112:	0092      	lsls	r2, r2, #2
 8015114:	300c      	adds	r0, #12
 8015116:	f7fc ff2e 	bl	8011f76 <memcpy>
 801511a:	4621      	mov	r1, r4
 801511c:	4648      	mov	r0, r9
 801511e:	f7fd fe45 	bl	8012dac <_Bfree>
 8015122:	4654      	mov	r4, sl
 8015124:	6922      	ldr	r2, [r4, #16]
 8015126:	1c51      	adds	r1, r2, #1
 8015128:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801512c:	6121      	str	r1, [r4, #16]
 801512e:	2101      	movs	r1, #1
 8015130:	6151      	str	r1, [r2, #20]
 8015132:	e7bc      	b.n	80150ae <__gethex+0x396>
 8015134:	6921      	ldr	r1, [r4, #16]
 8015136:	4559      	cmp	r1, fp
 8015138:	dd0b      	ble.n	8015152 <__gethex+0x43a>
 801513a:	2101      	movs	r1, #1
 801513c:	4620      	mov	r0, r4
 801513e:	f7ff fd83 	bl	8014c48 <rshift>
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	3601      	adds	r6, #1
 8015146:	42b3      	cmp	r3, r6
 8015148:	f6ff aedb 	blt.w	8014f02 <__gethex+0x1ea>
 801514c:	f04f 0801 	mov.w	r8, #1
 8015150:	e7c2      	b.n	80150d8 <__gethex+0x3c0>
 8015152:	f015 051f 	ands.w	r5, r5, #31
 8015156:	d0f9      	beq.n	801514c <__gethex+0x434>
 8015158:	9b01      	ldr	r3, [sp, #4]
 801515a:	441a      	add	r2, r3
 801515c:	f1c5 0520 	rsb	r5, r5, #32
 8015160:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015164:	f7fd fed4 	bl	8012f10 <__hi0bits>
 8015168:	42a8      	cmp	r0, r5
 801516a:	dbe6      	blt.n	801513a <__gethex+0x422>
 801516c:	e7ee      	b.n	801514c <__gethex+0x434>
 801516e:	bf00      	nop
 8015170:	0801855b 	.word	0x0801855b

08015174 <L_shift>:
 8015174:	f1c2 0208 	rsb	r2, r2, #8
 8015178:	0092      	lsls	r2, r2, #2
 801517a:	b570      	push	{r4, r5, r6, lr}
 801517c:	f1c2 0620 	rsb	r6, r2, #32
 8015180:	6843      	ldr	r3, [r0, #4]
 8015182:	6804      	ldr	r4, [r0, #0]
 8015184:	fa03 f506 	lsl.w	r5, r3, r6
 8015188:	432c      	orrs	r4, r5
 801518a:	40d3      	lsrs	r3, r2
 801518c:	6004      	str	r4, [r0, #0]
 801518e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015192:	4288      	cmp	r0, r1
 8015194:	d3f4      	bcc.n	8015180 <L_shift+0xc>
 8015196:	bd70      	pop	{r4, r5, r6, pc}

08015198 <__match>:
 8015198:	b530      	push	{r4, r5, lr}
 801519a:	6803      	ldr	r3, [r0, #0]
 801519c:	3301      	adds	r3, #1
 801519e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151a2:	b914      	cbnz	r4, 80151aa <__match+0x12>
 80151a4:	6003      	str	r3, [r0, #0]
 80151a6:	2001      	movs	r0, #1
 80151a8:	bd30      	pop	{r4, r5, pc}
 80151aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80151b2:	2d19      	cmp	r5, #25
 80151b4:	bf98      	it	ls
 80151b6:	3220      	addls	r2, #32
 80151b8:	42a2      	cmp	r2, r4
 80151ba:	d0f0      	beq.n	801519e <__match+0x6>
 80151bc:	2000      	movs	r0, #0
 80151be:	e7f3      	b.n	80151a8 <__match+0x10>

080151c0 <__hexnan>:
 80151c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151c4:	680b      	ldr	r3, [r1, #0]
 80151c6:	6801      	ldr	r1, [r0, #0]
 80151c8:	115e      	asrs	r6, r3, #5
 80151ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80151ce:	f013 031f 	ands.w	r3, r3, #31
 80151d2:	b087      	sub	sp, #28
 80151d4:	bf18      	it	ne
 80151d6:	3604      	addne	r6, #4
 80151d8:	2500      	movs	r5, #0
 80151da:	1f37      	subs	r7, r6, #4
 80151dc:	4682      	mov	sl, r0
 80151de:	4690      	mov	r8, r2
 80151e0:	9301      	str	r3, [sp, #4]
 80151e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80151e6:	46b9      	mov	r9, r7
 80151e8:	463c      	mov	r4, r7
 80151ea:	9502      	str	r5, [sp, #8]
 80151ec:	46ab      	mov	fp, r5
 80151ee:	784a      	ldrb	r2, [r1, #1]
 80151f0:	1c4b      	adds	r3, r1, #1
 80151f2:	9303      	str	r3, [sp, #12]
 80151f4:	b342      	cbz	r2, 8015248 <__hexnan+0x88>
 80151f6:	4610      	mov	r0, r2
 80151f8:	9105      	str	r1, [sp, #20]
 80151fa:	9204      	str	r2, [sp, #16]
 80151fc:	f7ff fd76 	bl	8014cec <__hexdig_fun>
 8015200:	2800      	cmp	r0, #0
 8015202:	d14f      	bne.n	80152a4 <__hexnan+0xe4>
 8015204:	9a04      	ldr	r2, [sp, #16]
 8015206:	9905      	ldr	r1, [sp, #20]
 8015208:	2a20      	cmp	r2, #32
 801520a:	d818      	bhi.n	801523e <__hexnan+0x7e>
 801520c:	9b02      	ldr	r3, [sp, #8]
 801520e:	459b      	cmp	fp, r3
 8015210:	dd13      	ble.n	801523a <__hexnan+0x7a>
 8015212:	454c      	cmp	r4, r9
 8015214:	d206      	bcs.n	8015224 <__hexnan+0x64>
 8015216:	2d07      	cmp	r5, #7
 8015218:	dc04      	bgt.n	8015224 <__hexnan+0x64>
 801521a:	462a      	mov	r2, r5
 801521c:	4649      	mov	r1, r9
 801521e:	4620      	mov	r0, r4
 8015220:	f7ff ffa8 	bl	8015174 <L_shift>
 8015224:	4544      	cmp	r4, r8
 8015226:	d950      	bls.n	80152ca <__hexnan+0x10a>
 8015228:	2300      	movs	r3, #0
 801522a:	f1a4 0904 	sub.w	r9, r4, #4
 801522e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015232:	f8cd b008 	str.w	fp, [sp, #8]
 8015236:	464c      	mov	r4, r9
 8015238:	461d      	mov	r5, r3
 801523a:	9903      	ldr	r1, [sp, #12]
 801523c:	e7d7      	b.n	80151ee <__hexnan+0x2e>
 801523e:	2a29      	cmp	r2, #41	; 0x29
 8015240:	d155      	bne.n	80152ee <__hexnan+0x12e>
 8015242:	3102      	adds	r1, #2
 8015244:	f8ca 1000 	str.w	r1, [sl]
 8015248:	f1bb 0f00 	cmp.w	fp, #0
 801524c:	d04f      	beq.n	80152ee <__hexnan+0x12e>
 801524e:	454c      	cmp	r4, r9
 8015250:	d206      	bcs.n	8015260 <__hexnan+0xa0>
 8015252:	2d07      	cmp	r5, #7
 8015254:	dc04      	bgt.n	8015260 <__hexnan+0xa0>
 8015256:	462a      	mov	r2, r5
 8015258:	4649      	mov	r1, r9
 801525a:	4620      	mov	r0, r4
 801525c:	f7ff ff8a 	bl	8015174 <L_shift>
 8015260:	4544      	cmp	r4, r8
 8015262:	d934      	bls.n	80152ce <__hexnan+0x10e>
 8015264:	f1a8 0204 	sub.w	r2, r8, #4
 8015268:	4623      	mov	r3, r4
 801526a:	f853 1b04 	ldr.w	r1, [r3], #4
 801526e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015272:	429f      	cmp	r7, r3
 8015274:	d2f9      	bcs.n	801526a <__hexnan+0xaa>
 8015276:	1b3b      	subs	r3, r7, r4
 8015278:	f023 0303 	bic.w	r3, r3, #3
 801527c:	3304      	adds	r3, #4
 801527e:	3e03      	subs	r6, #3
 8015280:	3401      	adds	r4, #1
 8015282:	42a6      	cmp	r6, r4
 8015284:	bf38      	it	cc
 8015286:	2304      	movcc	r3, #4
 8015288:	4443      	add	r3, r8
 801528a:	2200      	movs	r2, #0
 801528c:	f843 2b04 	str.w	r2, [r3], #4
 8015290:	429f      	cmp	r7, r3
 8015292:	d2fb      	bcs.n	801528c <__hexnan+0xcc>
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	b91b      	cbnz	r3, 80152a0 <__hexnan+0xe0>
 8015298:	4547      	cmp	r7, r8
 801529a:	d126      	bne.n	80152ea <__hexnan+0x12a>
 801529c:	2301      	movs	r3, #1
 801529e:	603b      	str	r3, [r7, #0]
 80152a0:	2005      	movs	r0, #5
 80152a2:	e025      	b.n	80152f0 <__hexnan+0x130>
 80152a4:	3501      	adds	r5, #1
 80152a6:	2d08      	cmp	r5, #8
 80152a8:	f10b 0b01 	add.w	fp, fp, #1
 80152ac:	dd06      	ble.n	80152bc <__hexnan+0xfc>
 80152ae:	4544      	cmp	r4, r8
 80152b0:	d9c3      	bls.n	801523a <__hexnan+0x7a>
 80152b2:	2300      	movs	r3, #0
 80152b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80152b8:	2501      	movs	r5, #1
 80152ba:	3c04      	subs	r4, #4
 80152bc:	6822      	ldr	r2, [r4, #0]
 80152be:	f000 000f 	and.w	r0, r0, #15
 80152c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80152c6:	6020      	str	r0, [r4, #0]
 80152c8:	e7b7      	b.n	801523a <__hexnan+0x7a>
 80152ca:	2508      	movs	r5, #8
 80152cc:	e7b5      	b.n	801523a <__hexnan+0x7a>
 80152ce:	9b01      	ldr	r3, [sp, #4]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d0df      	beq.n	8015294 <__hexnan+0xd4>
 80152d4:	f1c3 0320 	rsb	r3, r3, #32
 80152d8:	f04f 32ff 	mov.w	r2, #4294967295
 80152dc:	40da      	lsrs	r2, r3
 80152de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80152e2:	4013      	ands	r3, r2
 80152e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80152e8:	e7d4      	b.n	8015294 <__hexnan+0xd4>
 80152ea:	3f04      	subs	r7, #4
 80152ec:	e7d2      	b.n	8015294 <__hexnan+0xd4>
 80152ee:	2004      	movs	r0, #4
 80152f0:	b007      	add	sp, #28
 80152f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152f6 <__ascii_mbtowc>:
 80152f6:	b082      	sub	sp, #8
 80152f8:	b901      	cbnz	r1, 80152fc <__ascii_mbtowc+0x6>
 80152fa:	a901      	add	r1, sp, #4
 80152fc:	b142      	cbz	r2, 8015310 <__ascii_mbtowc+0x1a>
 80152fe:	b14b      	cbz	r3, 8015314 <__ascii_mbtowc+0x1e>
 8015300:	7813      	ldrb	r3, [r2, #0]
 8015302:	600b      	str	r3, [r1, #0]
 8015304:	7812      	ldrb	r2, [r2, #0]
 8015306:	1e10      	subs	r0, r2, #0
 8015308:	bf18      	it	ne
 801530a:	2001      	movne	r0, #1
 801530c:	b002      	add	sp, #8
 801530e:	4770      	bx	lr
 8015310:	4610      	mov	r0, r2
 8015312:	e7fb      	b.n	801530c <__ascii_mbtowc+0x16>
 8015314:	f06f 0001 	mvn.w	r0, #1
 8015318:	e7f8      	b.n	801530c <__ascii_mbtowc+0x16>

0801531a <_realloc_r>:
 801531a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801531e:	4680      	mov	r8, r0
 8015320:	4614      	mov	r4, r2
 8015322:	460e      	mov	r6, r1
 8015324:	b921      	cbnz	r1, 8015330 <_realloc_r+0x16>
 8015326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801532a:	4611      	mov	r1, r2
 801532c:	f7fb bd64 	b.w	8010df8 <_malloc_r>
 8015330:	b92a      	cbnz	r2, 801533e <_realloc_r+0x24>
 8015332:	f7fd fcaf 	bl	8012c94 <_free_r>
 8015336:	4625      	mov	r5, r4
 8015338:	4628      	mov	r0, r5
 801533a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801533e:	f000 f8c6 	bl	80154ce <_malloc_usable_size_r>
 8015342:	4284      	cmp	r4, r0
 8015344:	4607      	mov	r7, r0
 8015346:	d802      	bhi.n	801534e <_realloc_r+0x34>
 8015348:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801534c:	d812      	bhi.n	8015374 <_realloc_r+0x5a>
 801534e:	4621      	mov	r1, r4
 8015350:	4640      	mov	r0, r8
 8015352:	f7fb fd51 	bl	8010df8 <_malloc_r>
 8015356:	4605      	mov	r5, r0
 8015358:	2800      	cmp	r0, #0
 801535a:	d0ed      	beq.n	8015338 <_realloc_r+0x1e>
 801535c:	42bc      	cmp	r4, r7
 801535e:	4622      	mov	r2, r4
 8015360:	4631      	mov	r1, r6
 8015362:	bf28      	it	cs
 8015364:	463a      	movcs	r2, r7
 8015366:	f7fc fe06 	bl	8011f76 <memcpy>
 801536a:	4631      	mov	r1, r6
 801536c:	4640      	mov	r0, r8
 801536e:	f7fd fc91 	bl	8012c94 <_free_r>
 8015372:	e7e1      	b.n	8015338 <_realloc_r+0x1e>
 8015374:	4635      	mov	r5, r6
 8015376:	e7df      	b.n	8015338 <_realloc_r+0x1e>

08015378 <__ascii_wctomb>:
 8015378:	b149      	cbz	r1, 801538e <__ascii_wctomb+0x16>
 801537a:	2aff      	cmp	r2, #255	; 0xff
 801537c:	bf85      	ittet	hi
 801537e:	238a      	movhi	r3, #138	; 0x8a
 8015380:	6003      	strhi	r3, [r0, #0]
 8015382:	700a      	strbls	r2, [r1, #0]
 8015384:	f04f 30ff 	movhi.w	r0, #4294967295
 8015388:	bf98      	it	ls
 801538a:	2001      	movls	r0, #1
 801538c:	4770      	bx	lr
 801538e:	4608      	mov	r0, r1
 8015390:	4770      	bx	lr
	...

08015394 <fiprintf>:
 8015394:	b40e      	push	{r1, r2, r3}
 8015396:	b503      	push	{r0, r1, lr}
 8015398:	4601      	mov	r1, r0
 801539a:	ab03      	add	r3, sp, #12
 801539c:	4805      	ldr	r0, [pc, #20]	; (80153b4 <fiprintf+0x20>)
 801539e:	f853 2b04 	ldr.w	r2, [r3], #4
 80153a2:	6800      	ldr	r0, [r0, #0]
 80153a4:	9301      	str	r3, [sp, #4]
 80153a6:	f7ff f987 	bl	80146b8 <_vfiprintf_r>
 80153aa:	b002      	add	sp, #8
 80153ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80153b0:	b003      	add	sp, #12
 80153b2:	4770      	bx	lr
 80153b4:	2000007c 	.word	0x2000007c

080153b8 <__swhatbuf_r>:
 80153b8:	b570      	push	{r4, r5, r6, lr}
 80153ba:	460c      	mov	r4, r1
 80153bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153c0:	2900      	cmp	r1, #0
 80153c2:	b096      	sub	sp, #88	; 0x58
 80153c4:	4615      	mov	r5, r2
 80153c6:	461e      	mov	r6, r3
 80153c8:	da0d      	bge.n	80153e6 <__swhatbuf_r+0x2e>
 80153ca:	89a3      	ldrh	r3, [r4, #12]
 80153cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80153d0:	f04f 0100 	mov.w	r1, #0
 80153d4:	bf0c      	ite	eq
 80153d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80153da:	2340      	movne	r3, #64	; 0x40
 80153dc:	2000      	movs	r0, #0
 80153de:	6031      	str	r1, [r6, #0]
 80153e0:	602b      	str	r3, [r5, #0]
 80153e2:	b016      	add	sp, #88	; 0x58
 80153e4:	bd70      	pop	{r4, r5, r6, pc}
 80153e6:	466a      	mov	r2, sp
 80153e8:	f000 f848 	bl	801547c <_fstat_r>
 80153ec:	2800      	cmp	r0, #0
 80153ee:	dbec      	blt.n	80153ca <__swhatbuf_r+0x12>
 80153f0:	9901      	ldr	r1, [sp, #4]
 80153f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80153f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80153fa:	4259      	negs	r1, r3
 80153fc:	4159      	adcs	r1, r3
 80153fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015402:	e7eb      	b.n	80153dc <__swhatbuf_r+0x24>

08015404 <__smakebuf_r>:
 8015404:	898b      	ldrh	r3, [r1, #12]
 8015406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015408:	079d      	lsls	r5, r3, #30
 801540a:	4606      	mov	r6, r0
 801540c:	460c      	mov	r4, r1
 801540e:	d507      	bpl.n	8015420 <__smakebuf_r+0x1c>
 8015410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015414:	6023      	str	r3, [r4, #0]
 8015416:	6123      	str	r3, [r4, #16]
 8015418:	2301      	movs	r3, #1
 801541a:	6163      	str	r3, [r4, #20]
 801541c:	b002      	add	sp, #8
 801541e:	bd70      	pop	{r4, r5, r6, pc}
 8015420:	ab01      	add	r3, sp, #4
 8015422:	466a      	mov	r2, sp
 8015424:	f7ff ffc8 	bl	80153b8 <__swhatbuf_r>
 8015428:	9900      	ldr	r1, [sp, #0]
 801542a:	4605      	mov	r5, r0
 801542c:	4630      	mov	r0, r6
 801542e:	f7fb fce3 	bl	8010df8 <_malloc_r>
 8015432:	b948      	cbnz	r0, 8015448 <__smakebuf_r+0x44>
 8015434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015438:	059a      	lsls	r2, r3, #22
 801543a:	d4ef      	bmi.n	801541c <__smakebuf_r+0x18>
 801543c:	f023 0303 	bic.w	r3, r3, #3
 8015440:	f043 0302 	orr.w	r3, r3, #2
 8015444:	81a3      	strh	r3, [r4, #12]
 8015446:	e7e3      	b.n	8015410 <__smakebuf_r+0xc>
 8015448:	89a3      	ldrh	r3, [r4, #12]
 801544a:	6020      	str	r0, [r4, #0]
 801544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015450:	81a3      	strh	r3, [r4, #12]
 8015452:	9b00      	ldr	r3, [sp, #0]
 8015454:	6163      	str	r3, [r4, #20]
 8015456:	9b01      	ldr	r3, [sp, #4]
 8015458:	6120      	str	r0, [r4, #16]
 801545a:	b15b      	cbz	r3, 8015474 <__smakebuf_r+0x70>
 801545c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015460:	4630      	mov	r0, r6
 8015462:	f000 f81d 	bl	80154a0 <_isatty_r>
 8015466:	b128      	cbz	r0, 8015474 <__smakebuf_r+0x70>
 8015468:	89a3      	ldrh	r3, [r4, #12]
 801546a:	f023 0303 	bic.w	r3, r3, #3
 801546e:	f043 0301 	orr.w	r3, r3, #1
 8015472:	81a3      	strh	r3, [r4, #12]
 8015474:	89a3      	ldrh	r3, [r4, #12]
 8015476:	431d      	orrs	r5, r3
 8015478:	81a5      	strh	r5, [r4, #12]
 801547a:	e7cf      	b.n	801541c <__smakebuf_r+0x18>

0801547c <_fstat_r>:
 801547c:	b538      	push	{r3, r4, r5, lr}
 801547e:	4d07      	ldr	r5, [pc, #28]	; (801549c <_fstat_r+0x20>)
 8015480:	2300      	movs	r3, #0
 8015482:	4604      	mov	r4, r0
 8015484:	4608      	mov	r0, r1
 8015486:	4611      	mov	r1, r2
 8015488:	602b      	str	r3, [r5, #0]
 801548a:	f7ee fffe 	bl	800448a <_fstat>
 801548e:	1c43      	adds	r3, r0, #1
 8015490:	d102      	bne.n	8015498 <_fstat_r+0x1c>
 8015492:	682b      	ldr	r3, [r5, #0]
 8015494:	b103      	cbz	r3, 8015498 <_fstat_r+0x1c>
 8015496:	6023      	str	r3, [r4, #0]
 8015498:	bd38      	pop	{r3, r4, r5, pc}
 801549a:	bf00      	nop
 801549c:	20000f68 	.word	0x20000f68

080154a0 <_isatty_r>:
 80154a0:	b538      	push	{r3, r4, r5, lr}
 80154a2:	4d06      	ldr	r5, [pc, #24]	; (80154bc <_isatty_r+0x1c>)
 80154a4:	2300      	movs	r3, #0
 80154a6:	4604      	mov	r4, r0
 80154a8:	4608      	mov	r0, r1
 80154aa:	602b      	str	r3, [r5, #0]
 80154ac:	f7ee fffd 	bl	80044aa <_isatty>
 80154b0:	1c43      	adds	r3, r0, #1
 80154b2:	d102      	bne.n	80154ba <_isatty_r+0x1a>
 80154b4:	682b      	ldr	r3, [r5, #0]
 80154b6:	b103      	cbz	r3, 80154ba <_isatty_r+0x1a>
 80154b8:	6023      	str	r3, [r4, #0]
 80154ba:	bd38      	pop	{r3, r4, r5, pc}
 80154bc:	20000f68 	.word	0x20000f68

080154c0 <abort>:
 80154c0:	b508      	push	{r3, lr}
 80154c2:	2006      	movs	r0, #6
 80154c4:	f000 f834 	bl	8015530 <raise>
 80154c8:	2001      	movs	r0, #1
 80154ca:	f7ee ff8f 	bl	80043ec <_exit>

080154ce <_malloc_usable_size_r>:
 80154ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154d2:	1f18      	subs	r0, r3, #4
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	bfbc      	itt	lt
 80154d8:	580b      	ldrlt	r3, [r1, r0]
 80154da:	18c0      	addlt	r0, r0, r3
 80154dc:	4770      	bx	lr

080154de <_raise_r>:
 80154de:	291f      	cmp	r1, #31
 80154e0:	b538      	push	{r3, r4, r5, lr}
 80154e2:	4604      	mov	r4, r0
 80154e4:	460d      	mov	r5, r1
 80154e6:	d904      	bls.n	80154f2 <_raise_r+0x14>
 80154e8:	2316      	movs	r3, #22
 80154ea:	6003      	str	r3, [r0, #0]
 80154ec:	f04f 30ff 	mov.w	r0, #4294967295
 80154f0:	bd38      	pop	{r3, r4, r5, pc}
 80154f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80154f4:	b112      	cbz	r2, 80154fc <_raise_r+0x1e>
 80154f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154fa:	b94b      	cbnz	r3, 8015510 <_raise_r+0x32>
 80154fc:	4620      	mov	r0, r4
 80154fe:	f000 f831 	bl	8015564 <_getpid_r>
 8015502:	462a      	mov	r2, r5
 8015504:	4601      	mov	r1, r0
 8015506:	4620      	mov	r0, r4
 8015508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801550c:	f000 b818 	b.w	8015540 <_kill_r>
 8015510:	2b01      	cmp	r3, #1
 8015512:	d00a      	beq.n	801552a <_raise_r+0x4c>
 8015514:	1c59      	adds	r1, r3, #1
 8015516:	d103      	bne.n	8015520 <_raise_r+0x42>
 8015518:	2316      	movs	r3, #22
 801551a:	6003      	str	r3, [r0, #0]
 801551c:	2001      	movs	r0, #1
 801551e:	e7e7      	b.n	80154f0 <_raise_r+0x12>
 8015520:	2400      	movs	r4, #0
 8015522:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015526:	4628      	mov	r0, r5
 8015528:	4798      	blx	r3
 801552a:	2000      	movs	r0, #0
 801552c:	e7e0      	b.n	80154f0 <_raise_r+0x12>
	...

08015530 <raise>:
 8015530:	4b02      	ldr	r3, [pc, #8]	; (801553c <raise+0xc>)
 8015532:	4601      	mov	r1, r0
 8015534:	6818      	ldr	r0, [r3, #0]
 8015536:	f7ff bfd2 	b.w	80154de <_raise_r>
 801553a:	bf00      	nop
 801553c:	2000007c 	.word	0x2000007c

08015540 <_kill_r>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	4d07      	ldr	r5, [pc, #28]	; (8015560 <_kill_r+0x20>)
 8015544:	2300      	movs	r3, #0
 8015546:	4604      	mov	r4, r0
 8015548:	4608      	mov	r0, r1
 801554a:	4611      	mov	r1, r2
 801554c:	602b      	str	r3, [r5, #0]
 801554e:	f7ee ff3d 	bl	80043cc <_kill>
 8015552:	1c43      	adds	r3, r0, #1
 8015554:	d102      	bne.n	801555c <_kill_r+0x1c>
 8015556:	682b      	ldr	r3, [r5, #0]
 8015558:	b103      	cbz	r3, 801555c <_kill_r+0x1c>
 801555a:	6023      	str	r3, [r4, #0]
 801555c:	bd38      	pop	{r3, r4, r5, pc}
 801555e:	bf00      	nop
 8015560:	20000f68 	.word	0x20000f68

08015564 <_getpid_r>:
 8015564:	f7ee bf2a 	b.w	80043bc <_getpid>

08015568 <log>:
 8015568:	b538      	push	{r3, r4, r5, lr}
 801556a:	ed2d 8b02 	vpush	{d8}
 801556e:	ec55 4b10 	vmov	r4, r5, d0
 8015572:	f000 f839 	bl	80155e8 <__ieee754_log>
 8015576:	4622      	mov	r2, r4
 8015578:	462b      	mov	r3, r5
 801557a:	4620      	mov	r0, r4
 801557c:	4629      	mov	r1, r5
 801557e:	eeb0 8a40 	vmov.f32	s16, s0
 8015582:	eef0 8a60 	vmov.f32	s17, s1
 8015586:	f7eb fb01 	bl	8000b8c <__aeabi_dcmpun>
 801558a:	b998      	cbnz	r0, 80155b4 <log+0x4c>
 801558c:	2200      	movs	r2, #0
 801558e:	2300      	movs	r3, #0
 8015590:	4620      	mov	r0, r4
 8015592:	4629      	mov	r1, r5
 8015594:	f7eb faf0 	bl	8000b78 <__aeabi_dcmpgt>
 8015598:	b960      	cbnz	r0, 80155b4 <log+0x4c>
 801559a:	2200      	movs	r2, #0
 801559c:	2300      	movs	r3, #0
 801559e:	4620      	mov	r0, r4
 80155a0:	4629      	mov	r1, r5
 80155a2:	f7eb fac1 	bl	8000b28 <__aeabi_dcmpeq>
 80155a6:	b160      	cbz	r0, 80155c2 <log+0x5a>
 80155a8:	f7fc fcb0 	bl	8011f0c <__errno>
 80155ac:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80155d8 <log+0x70>
 80155b0:	2322      	movs	r3, #34	; 0x22
 80155b2:	6003      	str	r3, [r0, #0]
 80155b4:	eeb0 0a48 	vmov.f32	s0, s16
 80155b8:	eef0 0a68 	vmov.f32	s1, s17
 80155bc:	ecbd 8b02 	vpop	{d8}
 80155c0:	bd38      	pop	{r3, r4, r5, pc}
 80155c2:	f7fc fca3 	bl	8011f0c <__errno>
 80155c6:	ecbd 8b02 	vpop	{d8}
 80155ca:	2321      	movs	r3, #33	; 0x21
 80155cc:	6003      	str	r3, [r0, #0]
 80155ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155d2:	4803      	ldr	r0, [pc, #12]	; (80155e0 <log+0x78>)
 80155d4:	f7ff bafc 	b.w	8014bd0 <nan>
 80155d8:	00000000 	.word	0x00000000
 80155dc:	fff00000 	.word	0xfff00000
 80155e0:	0801886d 	.word	0x0801886d
 80155e4:	00000000 	.word	0x00000000

080155e8 <__ieee754_log>:
 80155e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ec:	ec51 0b10 	vmov	r0, r1, d0
 80155f0:	ed2d 8b04 	vpush	{d8-d9}
 80155f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80155f8:	b083      	sub	sp, #12
 80155fa:	460d      	mov	r5, r1
 80155fc:	da29      	bge.n	8015652 <__ieee754_log+0x6a>
 80155fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015602:	4303      	orrs	r3, r0
 8015604:	ee10 2a10 	vmov	r2, s0
 8015608:	d10c      	bne.n	8015624 <__ieee754_log+0x3c>
 801560a:	49cf      	ldr	r1, [pc, #828]	; (8015948 <__ieee754_log+0x360>)
 801560c:	2200      	movs	r2, #0
 801560e:	2300      	movs	r3, #0
 8015610:	2000      	movs	r0, #0
 8015612:	f7eb f94b 	bl	80008ac <__aeabi_ddiv>
 8015616:	ec41 0b10 	vmov	d0, r0, r1
 801561a:	b003      	add	sp, #12
 801561c:	ecbd 8b04 	vpop	{d8-d9}
 8015620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015624:	2900      	cmp	r1, #0
 8015626:	da05      	bge.n	8015634 <__ieee754_log+0x4c>
 8015628:	460b      	mov	r3, r1
 801562a:	f7ea fe5d 	bl	80002e8 <__aeabi_dsub>
 801562e:	2200      	movs	r2, #0
 8015630:	2300      	movs	r3, #0
 8015632:	e7ee      	b.n	8015612 <__ieee754_log+0x2a>
 8015634:	4bc5      	ldr	r3, [pc, #788]	; (801594c <__ieee754_log+0x364>)
 8015636:	2200      	movs	r2, #0
 8015638:	f7eb f80e 	bl	8000658 <__aeabi_dmul>
 801563c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8015640:	460d      	mov	r5, r1
 8015642:	4ac3      	ldr	r2, [pc, #780]	; (8015950 <__ieee754_log+0x368>)
 8015644:	4295      	cmp	r5, r2
 8015646:	dd06      	ble.n	8015656 <__ieee754_log+0x6e>
 8015648:	4602      	mov	r2, r0
 801564a:	460b      	mov	r3, r1
 801564c:	f7ea fe4e 	bl	80002ec <__adddf3>
 8015650:	e7e1      	b.n	8015616 <__ieee754_log+0x2e>
 8015652:	2300      	movs	r3, #0
 8015654:	e7f5      	b.n	8015642 <__ieee754_log+0x5a>
 8015656:	152c      	asrs	r4, r5, #20
 8015658:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801565c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015660:	441c      	add	r4, r3
 8015662:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8015666:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801566a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801566e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8015672:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8015676:	ea42 0105 	orr.w	r1, r2, r5
 801567a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801567e:	2200      	movs	r2, #0
 8015680:	4bb4      	ldr	r3, [pc, #720]	; (8015954 <__ieee754_log+0x36c>)
 8015682:	f7ea fe31 	bl	80002e8 <__aeabi_dsub>
 8015686:	1cab      	adds	r3, r5, #2
 8015688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801568c:	2b02      	cmp	r3, #2
 801568e:	4682      	mov	sl, r0
 8015690:	468b      	mov	fp, r1
 8015692:	f04f 0200 	mov.w	r2, #0
 8015696:	dc53      	bgt.n	8015740 <__ieee754_log+0x158>
 8015698:	2300      	movs	r3, #0
 801569a:	f7eb fa45 	bl	8000b28 <__aeabi_dcmpeq>
 801569e:	b1d0      	cbz	r0, 80156d6 <__ieee754_log+0xee>
 80156a0:	2c00      	cmp	r4, #0
 80156a2:	f000 8122 	beq.w	80158ea <__ieee754_log+0x302>
 80156a6:	4620      	mov	r0, r4
 80156a8:	f7ea ff6c 	bl	8000584 <__aeabi_i2d>
 80156ac:	a390      	add	r3, pc, #576	; (adr r3, 80158f0 <__ieee754_log+0x308>)
 80156ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b2:	4606      	mov	r6, r0
 80156b4:	460f      	mov	r7, r1
 80156b6:	f7ea ffcf 	bl	8000658 <__aeabi_dmul>
 80156ba:	a38f      	add	r3, pc, #572	; (adr r3, 80158f8 <__ieee754_log+0x310>)
 80156bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c0:	4604      	mov	r4, r0
 80156c2:	460d      	mov	r5, r1
 80156c4:	4630      	mov	r0, r6
 80156c6:	4639      	mov	r1, r7
 80156c8:	f7ea ffc6 	bl	8000658 <__aeabi_dmul>
 80156cc:	4602      	mov	r2, r0
 80156ce:	460b      	mov	r3, r1
 80156d0:	4620      	mov	r0, r4
 80156d2:	4629      	mov	r1, r5
 80156d4:	e7ba      	b.n	801564c <__ieee754_log+0x64>
 80156d6:	a38a      	add	r3, pc, #552	; (adr r3, 8015900 <__ieee754_log+0x318>)
 80156d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156dc:	4650      	mov	r0, sl
 80156de:	4659      	mov	r1, fp
 80156e0:	f7ea ffba 	bl	8000658 <__aeabi_dmul>
 80156e4:	4602      	mov	r2, r0
 80156e6:	460b      	mov	r3, r1
 80156e8:	2000      	movs	r0, #0
 80156ea:	499b      	ldr	r1, [pc, #620]	; (8015958 <__ieee754_log+0x370>)
 80156ec:	f7ea fdfc 	bl	80002e8 <__aeabi_dsub>
 80156f0:	4652      	mov	r2, sl
 80156f2:	4606      	mov	r6, r0
 80156f4:	460f      	mov	r7, r1
 80156f6:	465b      	mov	r3, fp
 80156f8:	4650      	mov	r0, sl
 80156fa:	4659      	mov	r1, fp
 80156fc:	f7ea ffac 	bl	8000658 <__aeabi_dmul>
 8015700:	4602      	mov	r2, r0
 8015702:	460b      	mov	r3, r1
 8015704:	4630      	mov	r0, r6
 8015706:	4639      	mov	r1, r7
 8015708:	f7ea ffa6 	bl	8000658 <__aeabi_dmul>
 801570c:	4606      	mov	r6, r0
 801570e:	460f      	mov	r7, r1
 8015710:	b914      	cbnz	r4, 8015718 <__ieee754_log+0x130>
 8015712:	4632      	mov	r2, r6
 8015714:	463b      	mov	r3, r7
 8015716:	e0a2      	b.n	801585e <__ieee754_log+0x276>
 8015718:	4620      	mov	r0, r4
 801571a:	f7ea ff33 	bl	8000584 <__aeabi_i2d>
 801571e:	a374      	add	r3, pc, #464	; (adr r3, 80158f0 <__ieee754_log+0x308>)
 8015720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015724:	4680      	mov	r8, r0
 8015726:	4689      	mov	r9, r1
 8015728:	f7ea ff96 	bl	8000658 <__aeabi_dmul>
 801572c:	a372      	add	r3, pc, #456	; (adr r3, 80158f8 <__ieee754_log+0x310>)
 801572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015732:	4604      	mov	r4, r0
 8015734:	460d      	mov	r5, r1
 8015736:	4640      	mov	r0, r8
 8015738:	4649      	mov	r1, r9
 801573a:	f7ea ff8d 	bl	8000658 <__aeabi_dmul>
 801573e:	e0a7      	b.n	8015890 <__ieee754_log+0x2a8>
 8015740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015744:	f7ea fdd2 	bl	80002ec <__adddf3>
 8015748:	4602      	mov	r2, r0
 801574a:	460b      	mov	r3, r1
 801574c:	4650      	mov	r0, sl
 801574e:	4659      	mov	r1, fp
 8015750:	f7eb f8ac 	bl	80008ac <__aeabi_ddiv>
 8015754:	ec41 0b18 	vmov	d8, r0, r1
 8015758:	4620      	mov	r0, r4
 801575a:	f7ea ff13 	bl	8000584 <__aeabi_i2d>
 801575e:	ec53 2b18 	vmov	r2, r3, d8
 8015762:	ec41 0b19 	vmov	d9, r0, r1
 8015766:	ec51 0b18 	vmov	r0, r1, d8
 801576a:	f7ea ff75 	bl	8000658 <__aeabi_dmul>
 801576e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8015772:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8015776:	9301      	str	r3, [sp, #4]
 8015778:	4602      	mov	r2, r0
 801577a:	460b      	mov	r3, r1
 801577c:	4680      	mov	r8, r0
 801577e:	4689      	mov	r9, r1
 8015780:	f7ea ff6a 	bl	8000658 <__aeabi_dmul>
 8015784:	a360      	add	r3, pc, #384	; (adr r3, 8015908 <__ieee754_log+0x320>)
 8015786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801578a:	4606      	mov	r6, r0
 801578c:	460f      	mov	r7, r1
 801578e:	f7ea ff63 	bl	8000658 <__aeabi_dmul>
 8015792:	a35f      	add	r3, pc, #380	; (adr r3, 8015910 <__ieee754_log+0x328>)
 8015794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015798:	f7ea fda8 	bl	80002ec <__adddf3>
 801579c:	4632      	mov	r2, r6
 801579e:	463b      	mov	r3, r7
 80157a0:	f7ea ff5a 	bl	8000658 <__aeabi_dmul>
 80157a4:	a35c      	add	r3, pc, #368	; (adr r3, 8015918 <__ieee754_log+0x330>)
 80157a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157aa:	f7ea fd9f 	bl	80002ec <__adddf3>
 80157ae:	4632      	mov	r2, r6
 80157b0:	463b      	mov	r3, r7
 80157b2:	f7ea ff51 	bl	8000658 <__aeabi_dmul>
 80157b6:	a35a      	add	r3, pc, #360	; (adr r3, 8015920 <__ieee754_log+0x338>)
 80157b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157bc:	f7ea fd96 	bl	80002ec <__adddf3>
 80157c0:	4642      	mov	r2, r8
 80157c2:	464b      	mov	r3, r9
 80157c4:	f7ea ff48 	bl	8000658 <__aeabi_dmul>
 80157c8:	a357      	add	r3, pc, #348	; (adr r3, 8015928 <__ieee754_log+0x340>)
 80157ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ce:	4680      	mov	r8, r0
 80157d0:	4689      	mov	r9, r1
 80157d2:	4630      	mov	r0, r6
 80157d4:	4639      	mov	r1, r7
 80157d6:	f7ea ff3f 	bl	8000658 <__aeabi_dmul>
 80157da:	a355      	add	r3, pc, #340	; (adr r3, 8015930 <__ieee754_log+0x348>)
 80157dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e0:	f7ea fd84 	bl	80002ec <__adddf3>
 80157e4:	4632      	mov	r2, r6
 80157e6:	463b      	mov	r3, r7
 80157e8:	f7ea ff36 	bl	8000658 <__aeabi_dmul>
 80157ec:	a352      	add	r3, pc, #328	; (adr r3, 8015938 <__ieee754_log+0x350>)
 80157ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f2:	f7ea fd7b 	bl	80002ec <__adddf3>
 80157f6:	4632      	mov	r2, r6
 80157f8:	463b      	mov	r3, r7
 80157fa:	f7ea ff2d 	bl	8000658 <__aeabi_dmul>
 80157fe:	460b      	mov	r3, r1
 8015800:	4602      	mov	r2, r0
 8015802:	4649      	mov	r1, r9
 8015804:	4640      	mov	r0, r8
 8015806:	f7ea fd71 	bl	80002ec <__adddf3>
 801580a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801580e:	9b01      	ldr	r3, [sp, #4]
 8015810:	3551      	adds	r5, #81	; 0x51
 8015812:	431d      	orrs	r5, r3
 8015814:	2d00      	cmp	r5, #0
 8015816:	4680      	mov	r8, r0
 8015818:	4689      	mov	r9, r1
 801581a:	dd48      	ble.n	80158ae <__ieee754_log+0x2c6>
 801581c:	4b4e      	ldr	r3, [pc, #312]	; (8015958 <__ieee754_log+0x370>)
 801581e:	2200      	movs	r2, #0
 8015820:	4650      	mov	r0, sl
 8015822:	4659      	mov	r1, fp
 8015824:	f7ea ff18 	bl	8000658 <__aeabi_dmul>
 8015828:	4652      	mov	r2, sl
 801582a:	465b      	mov	r3, fp
 801582c:	f7ea ff14 	bl	8000658 <__aeabi_dmul>
 8015830:	4602      	mov	r2, r0
 8015832:	460b      	mov	r3, r1
 8015834:	4606      	mov	r6, r0
 8015836:	460f      	mov	r7, r1
 8015838:	4640      	mov	r0, r8
 801583a:	4649      	mov	r1, r9
 801583c:	f7ea fd56 	bl	80002ec <__adddf3>
 8015840:	ec53 2b18 	vmov	r2, r3, d8
 8015844:	f7ea ff08 	bl	8000658 <__aeabi_dmul>
 8015848:	4680      	mov	r8, r0
 801584a:	4689      	mov	r9, r1
 801584c:	b964      	cbnz	r4, 8015868 <__ieee754_log+0x280>
 801584e:	4602      	mov	r2, r0
 8015850:	460b      	mov	r3, r1
 8015852:	4630      	mov	r0, r6
 8015854:	4639      	mov	r1, r7
 8015856:	f7ea fd47 	bl	80002e8 <__aeabi_dsub>
 801585a:	4602      	mov	r2, r0
 801585c:	460b      	mov	r3, r1
 801585e:	4650      	mov	r0, sl
 8015860:	4659      	mov	r1, fp
 8015862:	f7ea fd41 	bl	80002e8 <__aeabi_dsub>
 8015866:	e6d6      	b.n	8015616 <__ieee754_log+0x2e>
 8015868:	a321      	add	r3, pc, #132	; (adr r3, 80158f0 <__ieee754_log+0x308>)
 801586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801586e:	ec51 0b19 	vmov	r0, r1, d9
 8015872:	f7ea fef1 	bl	8000658 <__aeabi_dmul>
 8015876:	a320      	add	r3, pc, #128	; (adr r3, 80158f8 <__ieee754_log+0x310>)
 8015878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801587c:	4604      	mov	r4, r0
 801587e:	460d      	mov	r5, r1
 8015880:	ec51 0b19 	vmov	r0, r1, d9
 8015884:	f7ea fee8 	bl	8000658 <__aeabi_dmul>
 8015888:	4642      	mov	r2, r8
 801588a:	464b      	mov	r3, r9
 801588c:	f7ea fd2e 	bl	80002ec <__adddf3>
 8015890:	4602      	mov	r2, r0
 8015892:	460b      	mov	r3, r1
 8015894:	4630      	mov	r0, r6
 8015896:	4639      	mov	r1, r7
 8015898:	f7ea fd26 	bl	80002e8 <__aeabi_dsub>
 801589c:	4652      	mov	r2, sl
 801589e:	465b      	mov	r3, fp
 80158a0:	f7ea fd22 	bl	80002e8 <__aeabi_dsub>
 80158a4:	4602      	mov	r2, r0
 80158a6:	460b      	mov	r3, r1
 80158a8:	4620      	mov	r0, r4
 80158aa:	4629      	mov	r1, r5
 80158ac:	e7d9      	b.n	8015862 <__ieee754_log+0x27a>
 80158ae:	4602      	mov	r2, r0
 80158b0:	460b      	mov	r3, r1
 80158b2:	4650      	mov	r0, sl
 80158b4:	4659      	mov	r1, fp
 80158b6:	f7ea fd17 	bl	80002e8 <__aeabi_dsub>
 80158ba:	ec53 2b18 	vmov	r2, r3, d8
 80158be:	f7ea fecb 	bl	8000658 <__aeabi_dmul>
 80158c2:	4606      	mov	r6, r0
 80158c4:	460f      	mov	r7, r1
 80158c6:	2c00      	cmp	r4, #0
 80158c8:	f43f af23 	beq.w	8015712 <__ieee754_log+0x12a>
 80158cc:	a308      	add	r3, pc, #32	; (adr r3, 80158f0 <__ieee754_log+0x308>)
 80158ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158d2:	ec51 0b19 	vmov	r0, r1, d9
 80158d6:	f7ea febf 	bl	8000658 <__aeabi_dmul>
 80158da:	a307      	add	r3, pc, #28	; (adr r3, 80158f8 <__ieee754_log+0x310>)
 80158dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e0:	4604      	mov	r4, r0
 80158e2:	460d      	mov	r5, r1
 80158e4:	ec51 0b19 	vmov	r0, r1, d9
 80158e8:	e727      	b.n	801573a <__ieee754_log+0x152>
 80158ea:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8015940 <__ieee754_log+0x358>
 80158ee:	e694      	b.n	801561a <__ieee754_log+0x32>
 80158f0:	fee00000 	.word	0xfee00000
 80158f4:	3fe62e42 	.word	0x3fe62e42
 80158f8:	35793c76 	.word	0x35793c76
 80158fc:	3dea39ef 	.word	0x3dea39ef
 8015900:	55555555 	.word	0x55555555
 8015904:	3fd55555 	.word	0x3fd55555
 8015908:	df3e5244 	.word	0xdf3e5244
 801590c:	3fc2f112 	.word	0x3fc2f112
 8015910:	96cb03de 	.word	0x96cb03de
 8015914:	3fc74664 	.word	0x3fc74664
 8015918:	94229359 	.word	0x94229359
 801591c:	3fd24924 	.word	0x3fd24924
 8015920:	55555593 	.word	0x55555593
 8015924:	3fe55555 	.word	0x3fe55555
 8015928:	d078c69f 	.word	0xd078c69f
 801592c:	3fc39a09 	.word	0x3fc39a09
 8015930:	1d8e78af 	.word	0x1d8e78af
 8015934:	3fcc71c5 	.word	0x3fcc71c5
 8015938:	9997fa04 	.word	0x9997fa04
 801593c:	3fd99999 	.word	0x3fd99999
	...
 8015948:	c3500000 	.word	0xc3500000
 801594c:	43500000 	.word	0x43500000
 8015950:	7fefffff 	.word	0x7fefffff
 8015954:	3ff00000 	.word	0x3ff00000
 8015958:	3fe00000 	.word	0x3fe00000

0801595c <_init>:
 801595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801595e:	bf00      	nop
 8015960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015962:	bc08      	pop	{r3}
 8015964:	469e      	mov	lr, r3
 8015966:	4770      	bx	lr

08015968 <_fini>:
 8015968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801596a:	bf00      	nop
 801596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801596e:	bc08      	pop	{r3}
 8015970:	469e      	mov	lr, r3
 8015972:	4770      	bx	lr
