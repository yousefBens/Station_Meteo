
Station_meteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f40  08015888  08015888  00025888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080187c8  080187c8  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080187c8  080187c8  000287c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080187d0  080187d0  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080187d0  080187d0  000287d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080187d4  080187d4  000287d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080187d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  200001ec  080189c4  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000f70  080189c4  00030f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002eaa5  00000000  00000000  0003025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c34  00000000  00000000  0005ed04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002678  00000000  00000000  00065938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d7d  00000000  00000000  00067fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031794  00000000  00000000  00069d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035e82  00000000  00000000  0009b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011298b  00000000  00000000  000d1343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b500  00000000  00000000  001e3cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001ef1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801586c 	.word	0x0801586c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0801586c 	.word	0x0801586c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a6 	b.w	800104c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9e08      	ldr	r6, [sp, #32]
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4694      	mov	ip, r2
 8000d98:	d965      	bls.n	8000e66 <__udivmoddi4+0xe2>
 8000d9a:	fab2 f382 	clz	r3, r2
 8000d9e:	b143      	cbz	r3, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	f1c3 0220 	rsb	r2, r3, #32
 8000da8:	409f      	lsls	r7, r3
 8000daa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dae:	4317      	orrs	r7, r2
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db6:	fa1f f58c 	uxth.w	r5, ip
 8000dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc8:	fb01 f005 	mul.w	r0, r1, r5
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd8:	f080 811c 	bcs.w	8001014 <__udivmoddi4+0x290>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f240 8119 	bls.w	8001014 <__udivmoddi4+0x290>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4462      	add	r2, ip
 8000de6:	1a12      	subs	r2, r2, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df6:	fb00 f505 	mul.w	r5, r0, r5
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x90>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e06:	f080 8107 	bcs.w	8001018 <__udivmoddi4+0x294>
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	f240 8104 	bls.w	8001018 <__udivmoddi4+0x294>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11e      	cbz	r6, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40dc      	lsrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	e9c6 4300 	strd	r4, r3, [r6]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0xbc>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	f000 80ed 	beq.w	800100e <__udivmoddi4+0x28a>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	fab3 f183 	clz	r1, r3
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d149      	bne.n	8000edc <__udivmoddi4+0x158>
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	d302      	bcc.n	8000e52 <__udivmoddi4+0xce>
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	f200 80f8 	bhi.w	8001042 <__udivmoddi4+0x2be>
 8000e52:	1a84      	subs	r4, r0, r2
 8000e54:	eb65 0203 	sbc.w	r2, r5, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d0e2      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	e9c6 4700 	strd	r4, r7, [r6]
 8000e64:	e7df      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xe6>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f382 	clz	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x210>
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e84:	fb07 2015 	mls	r0, r7, r5, r2
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e8e:	fb0e f005 	mul.w	r0, lr, r5
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x124>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x122>
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f200 80cb 	bhi.w	800103c <__udivmoddi4+0x2b8>
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	b2a4      	uxth	r4, r4
 8000eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x14e>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec8:	d202      	bcs.n	8000ed0 <__udivmoddi4+0x14c>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f200 80bb 	bhi.w	8001046 <__udivmoddi4+0x2c2>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	eba4 040e 	sub.w	r4, r4, lr
 8000ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eda:	e79f      	b.n	8000e1c <__udivmoddi4+0x98>
 8000edc:	f1c1 0720 	rsb	r7, r1, #32
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eea:	fa05 f401 	lsl.w	r4, r5, r1
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	40fd      	lsrs	r5, r7
 8000ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef8:	4323      	orrs	r3, r4
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fb09 5518 	mls	r5, r9, r8, r5
 8000f06:	0c1c      	lsrs	r4, r3, #16
 8000f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	fa00 f001 	lsl.w	r0, r0, r1
 8000f1a:	d90b      	bls.n	8000f34 <__udivmoddi4+0x1b0>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f24:	f080 8088 	bcs.w	8001038 <__udivmoddi4+0x2b4>
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f240 8085 	bls.w	8001038 <__udivmoddi4+0x2b4>
 8000f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f32:	4464      	add	r4, ip
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	b29d      	uxth	r5, r3
 8000f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x1da>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f54:	d26c      	bcs.n	8001030 <__udivmoddi4+0x2ac>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	d96a      	bls.n	8001030 <__udivmoddi4+0x2ac>
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f62:	fba3 9502 	umull	r9, r5, r3, r2
 8000f66:	eba4 040e 	sub.w	r4, r4, lr
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	46c8      	mov	r8, r9
 8000f6e:	46ae      	mov	lr, r5
 8000f70:	d356      	bcc.n	8001020 <__udivmoddi4+0x29c>
 8000f72:	d053      	beq.n	800101c <__udivmoddi4+0x298>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x208>
 8000f76:	ebb0 0208 	subs.w	r2, r0, r8
 8000f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	40cc      	lsrs	r4, r1
 8000f86:	4317      	orrs	r7, r2
 8000f88:	e9c6 7400 	strd	r7, r4, [r6]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	f1c3 0120 	rsb	r1, r3, #32
 8000f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	432a      	orrs	r2, r5
 8000fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000fc2:	428d      	cmp	r5, r1
 8000fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x258>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fd2:	d22f      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d92d      	bls.n	8001034 <__udivmoddi4+0x2b0>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1b49      	subs	r1, r1, r5
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x282>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffc:	d216      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d914      	bls.n	800102c <__udivmoddi4+0x2a8>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	1a52      	subs	r2, r2, r1
 8001008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800100c:	e738      	b.n	8000e80 <__udivmoddi4+0xfc>
 800100e:	4631      	mov	r1, r6
 8001010:	4630      	mov	r0, r6
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xa2>
 8001014:	4639      	mov	r1, r7
 8001016:	e6e6      	b.n	8000de6 <__udivmoddi4+0x62>
 8001018:	4610      	mov	r0, r2
 800101a:	e6fb      	b.n	8000e14 <__udivmoddi4+0x90>
 800101c:	4548      	cmp	r0, r9
 800101e:	d2a9      	bcs.n	8000f74 <__udivmoddi4+0x1f0>
 8001020:	ebb9 0802 	subs.w	r8, r9, r2
 8001024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001028:	3b01      	subs	r3, #1
 800102a:	e7a3      	b.n	8000f74 <__udivmoddi4+0x1f0>
 800102c:	4645      	mov	r5, r8
 800102e:	e7ea      	b.n	8001006 <__udivmoddi4+0x282>
 8001030:	462b      	mov	r3, r5
 8001032:	e794      	b.n	8000f5e <__udivmoddi4+0x1da>
 8001034:	4640      	mov	r0, r8
 8001036:	e7d1      	b.n	8000fdc <__udivmoddi4+0x258>
 8001038:	46d0      	mov	r8, sl
 800103a:	e77b      	b.n	8000f34 <__udivmoddi4+0x1b0>
 800103c:	3d02      	subs	r5, #2
 800103e:	4462      	add	r2, ip
 8001040:	e732      	b.n	8000ea8 <__udivmoddi4+0x124>
 8001042:	4608      	mov	r0, r1
 8001044:	e70a      	b.n	8000e5c <__udivmoddi4+0xd8>
 8001046:	4464      	add	r4, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e742      	b.n	8000ed2 <__udivmoddi4+0x14e>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <AfficherCase>:




// Fonction pour afficher une case avec titre et variable
void AfficherCase(char *titre, float valeur, uint16_t posX, uint16_t posY) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	ed87 0a02 	vstr	s0, [r7, #8]
 800105c:	460b      	mov	r3, r1
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	4613      	mov	r3, r2
 8001062:	80bb      	strh	r3, [r7, #4]
	char msg[20];
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001064:	482b      	ldr	r0, [pc, #172]	; (8001114 <AfficherCase+0xc4>)
 8001066:	f003 fe0f 	bl	8004c88 <BSP_LCD_SetTextColor>
	sprintf(msg, titre);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	4618      	mov	r0, r3
 8001072:	f010 fe0d 	bl	8011c90 <siprintf>
	BSP_LCD_DrawRect(posX, posY, 130, 25);
 8001076:	88b9      	ldrh	r1, [r7, #4]
 8001078:	88f8      	ldrh	r0, [r7, #6]
 800107a:	2319      	movs	r3, #25
 800107c:	2282      	movs	r2, #130	; 0x82
 800107e:	f004 f90f 	bl	80052a0 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(posX, posY, 130, 25);
 8001082:	88b9      	ldrh	r1, [r7, #4]
 8001084:	88f8      	ldrh	r0, [r7, #6]
 8001086:	2319      	movs	r3, #25
 8001088:	2282      	movs	r2, #130	; 0x82
 800108a:	f004 fa6d 	bl	8005568 <BSP_LCD_FillRect>
	BSP_LCD_SetFont(&Font16);
 800108e:	4822      	ldr	r0, [pc, #136]	; (8001118 <AfficherCase+0xc8>)
 8001090:	f003 fe2c 	bl	8004cec <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001094:	481f      	ldr	r0, [pc, #124]	; (8001114 <AfficherCase+0xc4>)
 8001096:	f003 fe0f 	bl	8004cb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800109a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800109e:	f003 fdf3 	bl	8004c88 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(posX + 10, posY + 5, (uint8_t *)msg, LEFT_MODE);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	330a      	adds	r3, #10
 80010a6:	b298      	uxth	r0, r3
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	3305      	adds	r3, #5
 80010ac:	b299      	uxth	r1, r3
 80010ae:	f107 0214 	add.w	r2, r7, #20
 80010b2:	2303      	movs	r3, #3
 80010b4:	f003 fea0 	bl	8004df8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <AfficherCase+0xc4>)
 80010ba:	f003 fde5 	bl	8004c88 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(posX, posY, 130, 90);
 80010be:	88b9      	ldrh	r1, [r7, #4]
 80010c0:	88f8      	ldrh	r0, [r7, #6]
 80010c2:	235a      	movs	r3, #90	; 0x5a
 80010c4:	2282      	movs	r2, #130	; 0x82
 80010c6:	f004 f8eb 	bl	80052a0 <BSP_LCD_DrawRect>
	sprintf(msg, "%6.2f", ( float)valeur);
 80010ca:	68b8      	ldr	r0, [r7, #8]
 80010cc:	f7ff fa6c 	bl	80005a8 <__aeabi_f2d>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	f107 0014 	add.w	r0, r7, #20
 80010d8:	4910      	ldr	r1, [pc, #64]	; (800111c <AfficherCase+0xcc>)
 80010da:	f010 fdd9 	bl	8011c90 <siprintf>
	//humidity_measure();
	BSP_LCD_SetFont(&Font16);
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <AfficherCase+0xc8>)
 80010e0:	f003 fe04 	bl	8004cec <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f003 fde6 	bl	8004cb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80010ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010f0:	f003 fdca 	bl	8004c88 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(posX + 10,posY + 45, (uint8_t *)msg, LEFT_MODE);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	330a      	adds	r3, #10
 80010f8:	b298      	uxth	r0, r3
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	332d      	adds	r3, #45	; 0x2d
 80010fe:	b299      	uxth	r1, r3
 8001100:	f107 0214 	add.w	r2, r7, #20
 8001104:	2303      	movs	r3, #3
 8001106:	f003 fe77 	bl	8004df8 <BSP_LCD_DisplayStringAt>
  //strValue[0] = valeur;

  // Afficher la chaîne de caractères représentant la valeur
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
  BSP_LCD_DisplayStringAt(posX + 10, posY + 45, (uint8_t *)strValue, LEFT_MODE);*/
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	ff0000ff 	.word	0xff0000ff
 8001118:	20000010 	.word	0x20000010
 800111c:	08015888 	.word	0x08015888

08001120 <AfficherCaseD>:

void AfficherCaseD(char *titre, char* valeur, uint16_t posX, uint16_t posY) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	460b      	mov	r3, r1
 8001130:	80fb      	strh	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	80bb      	strh	r3, [r7, #4]

	char msg[20];
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001136:	482a      	ldr	r0, [pc, #168]	; (80011e0 <AfficherCaseD+0xc0>)
 8001138:	f003 fda6 	bl	8004c88 <BSP_LCD_SetTextColor>
	sprintf(msg, titre);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	4618      	mov	r0, r3
 8001144:	f010 fda4 	bl	8011c90 <siprintf>
	BSP_LCD_DrawRect(posX, posY, 130, 25);
 8001148:	88b9      	ldrh	r1, [r7, #4]
 800114a:	88f8      	ldrh	r0, [r7, #6]
 800114c:	2319      	movs	r3, #25
 800114e:	2282      	movs	r2, #130	; 0x82
 8001150:	f004 f8a6 	bl	80052a0 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(posX, posY, 130, 25);
 8001154:	88b9      	ldrh	r1, [r7, #4]
 8001156:	88f8      	ldrh	r0, [r7, #6]
 8001158:	2319      	movs	r3, #25
 800115a:	2282      	movs	r2, #130	; 0x82
 800115c:	f004 fa04 	bl	8005568 <BSP_LCD_FillRect>
	BSP_LCD_SetFont(&Font16);
 8001160:	4820      	ldr	r0, [pc, #128]	; (80011e4 <AfficherCaseD+0xc4>)
 8001162:	f003 fdc3 	bl	8004cec <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <AfficherCaseD+0xc0>)
 8001168:	f003 fda6 	bl	8004cb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800116c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001170:	f003 fd8a 	bl	8004c88 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(posX + 10, posY + 5, (uint8_t *)msg, LEFT_MODE);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	330a      	adds	r3, #10
 8001178:	b298      	uxth	r0, r3
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	3305      	adds	r3, #5
 800117e:	b299      	uxth	r1, r3
 8001180:	f107 0214 	add.w	r2, r7, #20
 8001184:	2303      	movs	r3, #3
 8001186:	f003 fe37 	bl	8004df8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800118a:	4815      	ldr	r0, [pc, #84]	; (80011e0 <AfficherCaseD+0xc0>)
 800118c:	f003 fd7c 	bl	8004c88 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(posX, posY, 130, 90);
 8001190:	88b9      	ldrh	r1, [r7, #4]
 8001192:	88f8      	ldrh	r0, [r7, #6]
 8001194:	235a      	movs	r3, #90	; 0x5a
 8001196:	2282      	movs	r2, #130	; 0x82
 8001198:	f004 f882 	bl	80052a0 <BSP_LCD_DrawRect>
	sprintf(msg, "%s", valeur);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	4911      	ldr	r1, [pc, #68]	; (80011e8 <AfficherCaseD+0xc8>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f010 fd73 	bl	8011c90 <siprintf>
	//humidity_measure();
	BSP_LCD_SetFont(&Font16);
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <AfficherCaseD+0xc4>)
 80011ac:	f003 fd9e 	bl	8004cec <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f003 fd80 	bl	8004cb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011bc:	f003 fd64 	bl	8004c88 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(posX + 10,posY + 45, (uint8_t *)msg, LEFT_MODE);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	330a      	adds	r3, #10
 80011c4:	b298      	uxth	r0, r3
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	332d      	adds	r3, #45	; 0x2d
 80011ca:	b299      	uxth	r1, r3
 80011cc:	f107 0214 	add.w	r2, r7, #20
 80011d0:	2303      	movs	r3, #3
 80011d2:	f003 fe11 	bl	8004df8 <BSP_LCD_DisplayStringAt>

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	ff0000ff 	.word	0xff0000ff
 80011e4:	20000010 	.word	0x20000010
 80011e8:	08015890 	.word	0x08015890

080011ec <AfficherBouton>:

void AfficherBouton(char *texte, uint16_t posX, uint16_t posY) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001200:	f003 fd42 	bl	8004c88 <BSP_LCD_SetTextColor>
  //BSP_LCD_DrawRect(posX, posY, 80, 30);
  BSP_LCD_DisplayStringAt(posX + 10, posY + 10, (uint8_t *)texte, LEFT_MODE);
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	330a      	adds	r3, #10
 8001208:	b298      	uxth	r0, r3
 800120a:	883b      	ldrh	r3, [r7, #0]
 800120c:	330a      	adds	r3, #10
 800120e:	b299      	uxth	r1, r3
 8001210:	2303      	movs	r3, #3
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	f003 fdf0 	bl	8004df8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);  // Revenir à la couleur par défaut
 8001218:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800121c:	f003 fd34 	bl	8004c88 <BSP_LCD_SetTextColor>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <init_page>:

void init_page(float* T, float* H, float* P, char** D, float* V, float* Pl, int taille) {
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
	  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 8001236:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800123a:	2001      	movs	r0, #1
 800123c:	f003 fc76 	bl	8004b2c <BSP_LCD_LayerDefaultInit>
	  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 8001240:	2101      	movs	r1, #1
 8001242:	2001      	movs	r0, #1
 8001244:	f003 fce2 	bl	8004c0c <BSP_LCD_SetLayerVisible>
	  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8001248:	2001      	movs	r0, #1
 800124a:	f003 fccf 	bl	8004bec <BSP_LCD_SelectLayer>
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800124e:	f04f 30ff 	mov.w	r0, #4294967295
 8001252:	f003 fd65 	bl	8004d20 <BSP_LCD_Clear>
	  char titre[] = "Accueil";
 8001256:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <init_page+0x16c>)
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001260:	e883 0003 	stmia.w	r3, {r0, r1}
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001264:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001268:	f003 fd0e 	bl	8004c88 <BSP_LCD_SetTextColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800126c:	484a      	ldr	r0, [pc, #296]	; (8001398 <init_page+0x170>)
 800126e:	f003 fd0b 	bl	8004c88 <BSP_LCD_SetTextColor>
		//sprintf(msg, " MENU PRINCIPALE");
		BSP_LCD_FillRect(0, 0,480,30);
 8001272:	231e      	movs	r3, #30
 8001274:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001278:	2100      	movs	r1, #0
 800127a:	2000      	movs	r0, #0
 800127c:	f004 f974 	bl	8005568 <BSP_LCD_FillRect>
		BSP_LCD_SetFont(&Font16);
 8001280:	4846      	ldr	r0, [pc, #280]	; (800139c <init_page+0x174>)
 8001282:	f003 fd33 	bl	8004cec <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001286:	4844      	ldr	r0, [pc, #272]	; (8001398 <init_page+0x170>)
 8001288:	f003 fd16 	bl	8004cb8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800128c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001290:	f003 fcfa 	bl	8004c88 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001294:	f107 0210 	add.w	r2, r7, #16
 8001298:	2301      	movs	r3, #1
 800129a:	2105      	movs	r1, #5
 800129c:	2000      	movs	r0, #0
 800129e:	f003 fdab 	bl	8004df8 <BSP_LCD_DisplayStringAt>
	  	  AfficherCase("Tempera", T[taille -1], 5, 50);
 80012a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	2232      	movs	r2, #50	; 0x32
 80012b6:	2105      	movs	r1, #5
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	4838      	ldr	r0, [pc, #224]	; (80013a0 <init_page+0x178>)
 80012be:	f7ff fec7 	bl	8001050 <AfficherCase>
	  	    AfficherCase("Humidite", H[taille -1], 180, 50);
 80012c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	4413      	add	r3, r2
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	2232      	movs	r2, #50	; 0x32
 80012d6:	21b4      	movs	r1, #180	; 0xb4
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	4831      	ldr	r0, [pc, #196]	; (80013a4 <init_page+0x17c>)
 80012de:	f7ff feb7 	bl	8001050 <AfficherCase>
	  	    AfficherCase("Pression", P[taille -1], 330, 50);
 80012e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	2232      	movs	r2, #50	; 0x32
 80012f6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	482a      	ldr	r0, [pc, #168]	; (80013a8 <init_page+0x180>)
 8001300:	f7ff fea6 	bl	8001050 <AfficherCase>
	  	    AfficherCaseD("Direction", D[taille -1], 5, 160);
 8001304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001306:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	23a0      	movs	r3, #160	; 0xa0
 8001316:	2205      	movs	r2, #5
 8001318:	4824      	ldr	r0, [pc, #144]	; (80013ac <init_page+0x184>)
 800131a:	f7ff ff01 	bl	8001120 <AfficherCaseD>
	  	    AfficherCase("Vitesse", V[taille -1], 180, 160);
 800131e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001320:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800132a:	4413      	add	r3, r2
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	22a0      	movs	r2, #160	; 0xa0
 8001332:	21b4      	movs	r1, #180	; 0xb4
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	481d      	ldr	r0, [pc, #116]	; (80013b0 <init_page+0x188>)
 800133a:	f7ff fe89 	bl	8001050 <AfficherCase>
	  	    AfficherCase("Pluie", Pl[taille -1] * 100, 330, 160);
 800133e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001340:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800134a:	4413      	add	r3, r2
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80013b4 <init_page+0x18c>
 8001354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001358:	22a0      	movs	r2, #160	; 0xa0
 800135a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800135e:	eeb0 0a67 	vmov.f32	s0, s15
 8001362:	4815      	ldr	r0, [pc, #84]	; (80013b8 <init_page+0x190>)
 8001364:	f7ff fe74 	bl	8001050 <AfficherCase>

	  // Afficher le bouton de changement de page
	      AfficherBouton("Next", BSP_LCD_GetXSize() - 90, BSP_LCD_GetYSize() - 30);
 8001368:	f003 fbb8 	bl	8004adc <BSP_LCD_GetXSize>
 800136c:	4603      	mov	r3, r0
 800136e:	b29b      	uxth	r3, r3
 8001370:	3b5a      	subs	r3, #90	; 0x5a
 8001372:	b29c      	uxth	r4, r3
 8001374:	f003 fbc6 	bl	8004b04 <BSP_LCD_GetYSize>
 8001378:	4603      	mov	r3, r0
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b1e      	subs	r3, #30
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4621      	mov	r1, r4
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <init_page+0x194>)
 8001386:	f7ff ff31 	bl	80011ec <AfficherBouton>

}
 800138a:	bf00      	nop
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	bf00      	nop
 8001394:	080158d8 	.word	0x080158d8
 8001398:	ff0000ff 	.word	0xff0000ff
 800139c:	20000010 	.word	0x20000010
 80013a0:	08015894 	.word	0x08015894
 80013a4:	0801589c 	.word	0x0801589c
 80013a8:	080158a8 	.word	0x080158a8
 80013ac:	080158b4 	.word	0x080158b4
 80013b0:	080158c0 	.word	0x080158c0
 80013b4:	42c80000 	.word	0x42c80000
 80013b8:	080158c8 	.word	0x080158c8
 80013bc:	080158d0 	.word	0x080158d0

080013c0 <DessinerAxeX>:

void DessinerAxeX(void) {
 80013c0:	b598      	push	{r3, r4, r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  // Dessiner l'axe horizontal (X)
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013c4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013c8:	f003 fc5e 	bl	8004c88 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawHLine(10, BSP_LCD_GetYSize() -100, BSP_LCD_GetXSize() - 20);
 80013cc:	f003 fb9a 	bl	8004b04 <BSP_LCD_GetYSize>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3b64      	subs	r3, #100	; 0x64
 80013d6:	b29c      	uxth	r4, r3
 80013d8:	f003 fb80 	bl	8004adc <BSP_LCD_GetXSize>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3b14      	subs	r3, #20
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	4621      	mov	r1, r4
 80013e8:	200a      	movs	r0, #10
 80013ea:	f003 fdcd 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -110, 10);
 80013ee:	f003 fb89 	bl	8004b04 <BSP_LCD_GetYSize>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3b6e      	subs	r3, #110	; 0x6e
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	220a      	movs	r2, #10
 80013fc:	4619      	mov	r1, r3
 80013fe:	205f      	movs	r0, #95	; 0x5f
 8001400:	f003 fdc2 	bl	8004f88 <BSP_LCD_DrawHLine>

  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -120, 10);
 8001404:	f003 fb7e 	bl	8004b04 <BSP_LCD_GetYSize>
 8001408:	4603      	mov	r3, r0
 800140a:	b29b      	uxth	r3, r3
 800140c:	3b78      	subs	r3, #120	; 0x78
 800140e:	b29b      	uxth	r3, r3
 8001410:	220a      	movs	r2, #10
 8001412:	4619      	mov	r1, r3
 8001414:	205f      	movs	r0, #95	; 0x5f
 8001416:	f003 fdb7 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -130, 10);
 800141a:	f003 fb73 	bl	8004b04 <BSP_LCD_GetYSize>
 800141e:	4603      	mov	r3, r0
 8001420:	b29b      	uxth	r3, r3
 8001422:	3b82      	subs	r3, #130	; 0x82
 8001424:	b29b      	uxth	r3, r3
 8001426:	220a      	movs	r2, #10
 8001428:	4619      	mov	r1, r3
 800142a:	205f      	movs	r0, #95	; 0x5f
 800142c:	f003 fdac 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -140, 10);
 8001430:	f003 fb68 	bl	8004b04 <BSP_LCD_GetYSize>
 8001434:	4603      	mov	r3, r0
 8001436:	b29b      	uxth	r3, r3
 8001438:	3b8c      	subs	r3, #140	; 0x8c
 800143a:	b29b      	uxth	r3, r3
 800143c:	220a      	movs	r2, #10
 800143e:	4619      	mov	r1, r3
 8001440:	205f      	movs	r0, #95	; 0x5f
 8001442:	f003 fda1 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -150, 10);
 8001446:	f003 fb5d 	bl	8004b04 <BSP_LCD_GetYSize>
 800144a:	4603      	mov	r3, r0
 800144c:	b29b      	uxth	r3, r3
 800144e:	3b96      	subs	r3, #150	; 0x96
 8001450:	b29b      	uxth	r3, r3
 8001452:	220a      	movs	r2, #10
 8001454:	4619      	mov	r1, r3
 8001456:	205f      	movs	r0, #95	; 0x5f
 8001458:	f003 fd96 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -160, 10);
 800145c:	f003 fb52 	bl	8004b04 <BSP_LCD_GetYSize>
 8001460:	4603      	mov	r3, r0
 8001462:	b29b      	uxth	r3, r3
 8001464:	3ba0      	subs	r3, #160	; 0xa0
 8001466:	b29b      	uxth	r3, r3
 8001468:	220a      	movs	r2, #10
 800146a:	4619      	mov	r1, r3
 800146c:	205f      	movs	r0, #95	; 0x5f
 800146e:	f003 fd8b 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -170, 10);
 8001472:	f003 fb47 	bl	8004b04 <BSP_LCD_GetYSize>
 8001476:	4603      	mov	r3, r0
 8001478:	b29b      	uxth	r3, r3
 800147a:	3baa      	subs	r3, #170	; 0xaa
 800147c:	b29b      	uxth	r3, r3
 800147e:	220a      	movs	r2, #10
 8001480:	4619      	mov	r1, r3
 8001482:	205f      	movs	r0, #95	; 0x5f
 8001484:	f003 fd80 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -180, 10);
 8001488:	f003 fb3c 	bl	8004b04 <BSP_LCD_GetYSize>
 800148c:	4603      	mov	r3, r0
 800148e:	b29b      	uxth	r3, r3
 8001490:	3bb4      	subs	r3, #180	; 0xb4
 8001492:	b29b      	uxth	r3, r3
 8001494:	220a      	movs	r2, #10
 8001496:	4619      	mov	r1, r3
 8001498:	205f      	movs	r0, #95	; 0x5f
 800149a:	f003 fd75 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -190, 10);
 800149e:	f003 fb31 	bl	8004b04 <BSP_LCD_GetYSize>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	3bbe      	subs	r3, #190	; 0xbe
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	220a      	movs	r2, #10
 80014ac:	4619      	mov	r1, r3
 80014ae:	205f      	movs	r0, #95	; 0x5f
 80014b0:	f003 fd6a 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -200, 10);
 80014b4:	f003 fb26 	bl	8004b04 <BSP_LCD_GetYSize>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3bc8      	subs	r3, #200	; 0xc8
 80014be:	b29b      	uxth	r3, r3
 80014c0:	220a      	movs	r2, #10
 80014c2:	4619      	mov	r1, r3
 80014c4:	205f      	movs	r0, #95	; 0x5f
 80014c6:	f003 fd5f 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -210, 10);
 80014ca:	f003 fb1b 	bl	8004b04 <BSP_LCD_GetYSize>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3bd2      	subs	r3, #210	; 0xd2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	220a      	movs	r2, #10
 80014d8:	4619      	mov	r1, r3
 80014da:	205f      	movs	r0, #95	; 0x5f
 80014dc:	f003 fd54 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -220, 10);
 80014e0:	f003 fb10 	bl	8004b04 <BSP_LCD_GetYSize>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	3bdc      	subs	r3, #220	; 0xdc
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	220a      	movs	r2, #10
 80014ee:	4619      	mov	r1, r3
 80014f0:	205f      	movs	r0, #95	; 0x5f
 80014f2:	f003 fd49 	bl	8004f88 <BSP_LCD_DrawHLine>
}
 80014f6:	bf00      	nop
 80014f8:	bd98      	pop	{r3, r4, r7, pc}

080014fa <DessinerAxeXD>:
void DessinerAxeXD(void) {
 80014fa:	b598      	push	{r3, r4, r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  // Dessiner l'axe horizontal (X)
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80014fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001502:	f003 fbc1 	bl	8004c88 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawHLine(10, BSP_LCD_GetYSize() -50, BSP_LCD_GetXSize() - 20);
 8001506:	f003 fafd 	bl	8004b04 <BSP_LCD_GetYSize>
 800150a:	4603      	mov	r3, r0
 800150c:	b29b      	uxth	r3, r3
 800150e:	3b32      	subs	r3, #50	; 0x32
 8001510:	b29c      	uxth	r4, r3
 8001512:	f003 fae3 	bl	8004adc <BSP_LCD_GetXSize>
 8001516:	4603      	mov	r3, r0
 8001518:	b29b      	uxth	r3, r3
 800151a:	3b14      	subs	r3, #20
 800151c:	b29b      	uxth	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	4621      	mov	r1, r4
 8001522:	200a      	movs	r0, #10
 8001524:	f003 fd30 	bl	8004f88 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -110, 10);

  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -70, 10);
 8001528:	f003 faec 	bl	8004b04 <BSP_LCD_GetYSize>
 800152c:	4603      	mov	r3, r0
 800152e:	b29b      	uxth	r3, r3
 8001530:	3b46      	subs	r3, #70	; 0x46
 8001532:	b29b      	uxth	r3, r3
 8001534:	220a      	movs	r2, #10
 8001536:	4619      	mov	r1, r3
 8001538:	205f      	movs	r0, #95	; 0x5f
 800153a:	f003 fd25 	bl	8004f88 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -130, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -90, 10);
 800153e:	f003 fae1 	bl	8004b04 <BSP_LCD_GetYSize>
 8001542:	4603      	mov	r3, r0
 8001544:	b29b      	uxth	r3, r3
 8001546:	3b5a      	subs	r3, #90	; 0x5a
 8001548:	b29b      	uxth	r3, r3
 800154a:	220a      	movs	r2, #10
 800154c:	4619      	mov	r1, r3
 800154e:	205f      	movs	r0, #95	; 0x5f
 8001550:	f003 fd1a 	bl	8004f88 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -150, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -110, 10);
 8001554:	f003 fad6 	bl	8004b04 <BSP_LCD_GetYSize>
 8001558:	4603      	mov	r3, r0
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b6e      	subs	r3, #110	; 0x6e
 800155e:	b29b      	uxth	r3, r3
 8001560:	220a      	movs	r2, #10
 8001562:	4619      	mov	r1, r3
 8001564:	205f      	movs	r0, #95	; 0x5f
 8001566:	f003 fd0f 	bl	8004f88 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -170, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -130, 10);
 800156a:	f003 facb 	bl	8004b04 <BSP_LCD_GetYSize>
 800156e:	4603      	mov	r3, r0
 8001570:	b29b      	uxth	r3, r3
 8001572:	3b82      	subs	r3, #130	; 0x82
 8001574:	b29b      	uxth	r3, r3
 8001576:	220a      	movs	r2, #10
 8001578:	4619      	mov	r1, r3
 800157a:	205f      	movs	r0, #95	; 0x5f
 800157c:	f003 fd04 	bl	8004f88 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -190, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -150, 10);
 8001580:	f003 fac0 	bl	8004b04 <BSP_LCD_GetYSize>
 8001584:	4603      	mov	r3, r0
 8001586:	b29b      	uxth	r3, r3
 8001588:	3b96      	subs	r3, #150	; 0x96
 800158a:	b29b      	uxth	r3, r3
 800158c:	220a      	movs	r2, #10
 800158e:	4619      	mov	r1, r3
 8001590:	205f      	movs	r0, #95	; 0x5f
 8001592:	f003 fcf9 	bl	8004f88 <BSP_LCD_DrawHLine>
  //BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -210, 10);
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -170, 10);
 8001596:	f003 fab5 	bl	8004b04 <BSP_LCD_GetYSize>
 800159a:	4603      	mov	r3, r0
 800159c:	b29b      	uxth	r3, r3
 800159e:	3baa      	subs	r3, #170	; 0xaa
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	220a      	movs	r2, #10
 80015a4:	4619      	mov	r1, r3
 80015a6:	205f      	movs	r0, #95	; 0x5f
 80015a8:	f003 fcee 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -190, 10);
 80015ac:	f003 faaa 	bl	8004b04 <BSP_LCD_GetYSize>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3bbe      	subs	r3, #190	; 0xbe
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	220a      	movs	r2, #10
 80015ba:	4619      	mov	r1, r3
 80015bc:	205f      	movs	r0, #95	; 0x5f
 80015be:	f003 fce3 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(95, BSP_LCD_GetYSize() -210, 10);
 80015c2:	f003 fa9f 	bl	8004b04 <BSP_LCD_GetYSize>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	3bd2      	subs	r3, #210	; 0xd2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	220a      	movs	r2, #10
 80015d0:	4619      	mov	r1, r3
 80015d2:	205f      	movs	r0, #95	; 0x5f
 80015d4:	f003 fcd8 	bl	8004f88 <BSP_LCD_DrawHLine>
}
 80015d8:	bf00      	nop
 80015da:	bd98      	pop	{r3, r4, r7, pc}

080015dc <DessinerAxeY>:

void DessinerAxeY(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  // Dessiner l'axe vertical (Y)
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80015e0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80015e4:	f003 fb50 	bl	8004c88 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawVLine(100, 30, BSP_LCD_GetYSize() - 20);
 80015e8:	f003 fa8c 	bl	8004b04 <BSP_LCD_GetYSize>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3b14      	subs	r3, #20
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	211e      	movs	r1, #30
 80015f8:	2064      	movs	r0, #100	; 0x64
 80015fa:	f003 fd23 	bl	8005044 <BSP_LCD_DrawVLine>

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <DessinerGraphePl>:

void DessinerGraphePl(float* y) {
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b0a1      	sub	sp, #132	; 0x84
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 800160c:	4a4f      	ldr	r2, [pc, #316]	; (800174c <DessinerGraphePl+0x148>)
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4611      	mov	r1, r2
 8001614:	2260      	movs	r2, #96	; 0x60
 8001616:	4618      	mov	r0, r3
 8001618:	f010 fc35 	bl	8011e86 <memcpy>
  //int y[] = {100, 50, 130, 80, 160, 120};
  uint16_t pointSize = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  // Trouver le milieu de l'écran
  int midX = 100;
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	673b      	str	r3, [r7, #112]	; 0x70
  int midY = BSP_LCD_GetYSize() -100;
 8001626:	f003 fa6d 	bl	8004b04 <BSP_LCD_GetYSize>
 800162a:	4603      	mov	r3, r0
 800162c:	3b64      	subs	r3, #100	; 0x64
 800162e:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001630:	4847      	ldr	r0, [pc, #284]	; (8001750 <DessinerGraphePl+0x14c>)
 8001632:	f003 fb29 	bl	8004c88 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 24; ++i) {
 8001636:	2300      	movs	r3, #0
 8001638:	67fb      	str	r3, [r7, #124]	; 0x7c
 800163a:	e028      	b.n	800168e <DessinerGraphePl+0x8a>
    BSP_LCD_FillCircle(midX + x[i], midY - (y[i]*100), pointSize);
 800163c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	3380      	adds	r3, #128	; 0x80
 8001642:	443b      	add	r3, r7
 8001644:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001648:	b29a      	uxth	r2, r3
 800164a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800164c:	b29b      	uxth	r3, r3
 800164e:	4413      	add	r3, r2
 8001650:	b298      	uxth	r0, r3
 8001652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001754 <DessinerGraphePl+0x150>
 800166c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001678:	ee17 3a90 	vmov	r3, s15
 800167c:	b29b      	uxth	r3, r3
 800167e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001682:	4619      	mov	r1, r3
 8001684:	f003 ffea 	bl	800565c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 8001688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800168a:	3301      	adds	r3, #1
 800168c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800168e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001690:	2b17      	cmp	r3, #23
 8001692:	ddd3      	ble.n	800163c <DessinerGraphePl+0x38>
  }

  // Dessiner la ligne connectant les points
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001694:	482e      	ldr	r0, [pc, #184]	; (8001750 <DessinerGraphePl+0x14c>)
 8001696:	f003 faf7 	bl	8004c88 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 23; ++i) {
 800169a:	2300      	movs	r3, #0
 800169c:	67bb      	str	r3, [r7, #120]	; 0x78
 800169e:	e049      	b.n	8001734 <DessinerGraphePl+0x130>
    BSP_LCD_DrawLine(midX + x[i], midY - (y[i]*100), midX + x[i + 1], midY - (y[i + 1]*100));
 80016a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	3380      	adds	r3, #128	; 0x80
 80016a6:	443b      	add	r3, r7
 80016a8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b298      	uxth	r0, r3
 80016b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001754 <DessinerGraphePl+0x150>
 80016d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	b299      	uxth	r1, r3
 80016e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016e4:	3301      	adds	r3, #1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	3380      	adds	r3, #128	; 0x80
 80016ea:	443b      	add	r3, r7
 80016ec:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	b29c      	uxth	r4, r3
 80016fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001706:	3301      	adds	r3, #1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001754 <DessinerGraphePl+0x150>
 8001716:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800171a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	ee17 3a90 	vmov	r3, s15
 8001726:	b29b      	uxth	r3, r3
 8001728:	4622      	mov	r2, r4
 800172a:	f003 fced 	bl	8005108 <BSP_LCD_DrawLine>
  for (int i = 0; i < 23; ++i) {
 800172e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001730:	3301      	adds	r3, #1
 8001732:	67bb      	str	r3, [r7, #120]	; 0x78
 8001734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001736:	2b16      	cmp	r3, #22
 8001738:	ddb2      	ble.n	80016a0 <DessinerGraphePl+0x9c>
  }

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800173a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800173e:	f003 faa3 	bl	8004c88 <BSP_LCD_SetTextColor>
}
 8001742:	bf00      	nop
 8001744:	3784      	adds	r7, #132	; 0x84
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	080158e0 	.word	0x080158e0
 8001750:	ff0000ff 	.word	0xff0000ff
 8001754:	42c80000 	.word	0x42c80000

08001758 <DessinerGraphe>:

void DessinerGraphe(float* y) {
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b0a1      	sub	sp, #132	; 0x84
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <DessinerGraphe+0x13c>)
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4611      	mov	r1, r2
 8001768:	2260      	movs	r2, #96	; 0x60
 800176a:	4618      	mov	r0, r3
 800176c:	f010 fb8b 	bl	8011e86 <memcpy>
  //int y[] = {100, 50, 130, 80, 160, 120};
  uint16_t pointSize = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  // Trouver le milieu de l'écran
  int midX = 100;
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	673b      	str	r3, [r7, #112]	; 0x70
  int midY = BSP_LCD_GetYSize() -100;
 800177a:	f003 f9c3 	bl	8004b04 <BSP_LCD_GetYSize>
 800177e:	4603      	mov	r3, r0
 8001780:	3b64      	subs	r3, #100	; 0x64
 8001782:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001784:	4844      	ldr	r0, [pc, #272]	; (8001898 <DessinerGraphe+0x140>)
 8001786:	f003 fa7f 	bl	8004c88 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 24; ++i) {
 800178a:	2300      	movs	r3, #0
 800178c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800178e:	e026      	b.n	80017de <DessinerGraphe+0x86>
    BSP_LCD_FillCircle(midX + x[i], midY - (y[i]*2), pointSize);
 8001790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	3380      	adds	r3, #128	; 0x80
 8001796:	443b      	add	r3, r7
 8001798:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800179c:	b29a      	uxth	r2, r3
 800179e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	b298      	uxth	r0, r3
 80017a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c8:	ee17 3a90 	vmov	r3, s15
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80017d2:	4619      	mov	r1, r3
 80017d4:	f003 ff42 	bl	800565c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 80017d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017da:	3301      	adds	r3, #1
 80017dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017e0:	2b17      	cmp	r3, #23
 80017e2:	ddd5      	ble.n	8001790 <DessinerGraphe+0x38>
  }

  // Dessiner la ligne connectant les points
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80017e4:	482c      	ldr	r0, [pc, #176]	; (8001898 <DessinerGraphe+0x140>)
 80017e6:	f003 fa4f 	bl	8004c88 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 23; ++i) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80017ee:	e045      	b.n	800187c <DessinerGraphe+0x124>
    BSP_LCD_DrawLine(midX + x[i], midY - (y[i]*2), midX + x[i + 1], midY - (y[i + 1]*2));
 80017f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	3380      	adds	r3, #128	; 0x80
 80017f6:	443b      	add	r3, r7
 80017f8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b298      	uxth	r0, r3
 8001806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001828:	ee17 3a90 	vmov	r3, s15
 800182c:	b299      	uxth	r1, r3
 800182e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001830:	3301      	adds	r3, #1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	3380      	adds	r3, #128	; 0x80
 8001836:	443b      	add	r3, r7
 8001838:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800183c:	b29a      	uxth	r2, r3
 800183e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001840:	b29b      	uxth	r3, r3
 8001842:	4413      	add	r3, r2
 8001844:	b29c      	uxth	r4, r3
 8001846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001852:	3301      	adds	r3, #1
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186a:	ee17 3a90 	vmov	r3, s15
 800186e:	b29b      	uxth	r3, r3
 8001870:	4622      	mov	r2, r4
 8001872:	f003 fc49 	bl	8005108 <BSP_LCD_DrawLine>
  for (int i = 0; i < 23; ++i) {
 8001876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001878:	3301      	adds	r3, #1
 800187a:	67bb      	str	r3, [r7, #120]	; 0x78
 800187c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800187e:	2b16      	cmp	r3, #22
 8001880:	ddb6      	ble.n	80017f0 <DessinerGraphe+0x98>
  }

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001882:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001886:	f003 f9ff 	bl	8004c88 <BSP_LCD_SetTextColor>
}
 800188a:	bf00      	nop
 800188c:	3784      	adds	r7, #132	; 0x84
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop
 8001894:	080158e0 	.word	0x080158e0
 8001898:	ff0000ff 	.word	0xff0000ff

0800189c <DessinerGrapheH>:
void DessinerGrapheH(float* y) {
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b0a1      	sub	sp, #132	; 0x84
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 80018a4:	4a4f      	ldr	r2, [pc, #316]	; (80019e4 <DessinerGrapheH+0x148>)
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4611      	mov	r1, r2
 80018ac:	2260      	movs	r2, #96	; 0x60
 80018ae:	4618      	mov	r0, r3
 80018b0:	f010 fae9 	bl	8011e86 <memcpy>
  //int y[] = {100, 50, 130, 80, 160, 120};
  uint16_t pointSize = 4;
 80018b4:	2304      	movs	r3, #4
 80018b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  // Trouver le milieu de l'écran
  int midX = 100;
 80018ba:	2364      	movs	r3, #100	; 0x64
 80018bc:	673b      	str	r3, [r7, #112]	; 0x70
  int midY = BSP_LCD_GetYSize() -100;
 80018be:	f003 f921 	bl	8004b04 <BSP_LCD_GetYSize>
 80018c2:	4603      	mov	r3, r0
 80018c4:	3b64      	subs	r3, #100	; 0x64
 80018c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80018c8:	4847      	ldr	r0, [pc, #284]	; (80019e8 <DessinerGrapheH+0x14c>)
 80018ca:	f003 f9dd 	bl	8004c88 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 24; ++i) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018d2:	e028      	b.n	8001926 <DessinerGrapheH+0x8a>
    BSP_LCD_FillCircle(midX + x[i], midY - (y[i]-30), pointSize);
 80018d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	3380      	adds	r3, #128	; 0x80
 80018da:	443b      	add	r3, r7
 80018dc:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	b298      	uxth	r0, r3
 80018ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001904:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001910:	ee17 3a90 	vmov	r3, s15
 8001914:	b29b      	uxth	r3, r3
 8001916:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800191a:	4619      	mov	r1, r3
 800191c:	f003 fe9e 	bl	800565c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 8001920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001922:	3301      	adds	r3, #1
 8001924:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001928:	2b17      	cmp	r3, #23
 800192a:	ddd3      	ble.n	80018d4 <DessinerGrapheH+0x38>
  }

  // Dessiner la ligne connectant les points
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800192c:	482e      	ldr	r0, [pc, #184]	; (80019e8 <DessinerGrapheH+0x14c>)
 800192e:	f003 f9ab 	bl	8004c88 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 23; ++i) {
 8001932:	2300      	movs	r3, #0
 8001934:	67bb      	str	r3, [r7, #120]	; 0x78
 8001936:	e049      	b.n	80019cc <DessinerGrapheH+0x130>
    BSP_LCD_DrawLine(midX + x[i], midY - (y[i]-30), midX + x[i + 1], midY - (y[i + 1]-30));
 8001938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	3380      	adds	r3, #128	; 0x80
 800193e:	443b      	add	r3, r7
 8001940:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001944:	b29a      	uxth	r2, r3
 8001946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001948:	b29b      	uxth	r3, r3
 800194a:	4413      	add	r3, r2
 800194c:	b298      	uxth	r0, r3
 800194e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001968:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800196c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001974:	ee17 3a90 	vmov	r3, s15
 8001978:	b299      	uxth	r1, r3
 800197a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800197c:	3301      	adds	r3, #1
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	3380      	adds	r3, #128	; 0x80
 8001982:	443b      	add	r3, r7
 8001984:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001988:	b29a      	uxth	r2, r3
 800198a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800198c:	b29b      	uxth	r3, r3
 800198e:	4413      	add	r3, r2
 8001990:	b29c      	uxth	r4, r3
 8001992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800199e:	3301      	adds	r3, #1
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80019ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80019b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ba:	ee17 3a90 	vmov	r3, s15
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4622      	mov	r2, r4
 80019c2:	f003 fba1 	bl	8005108 <BSP_LCD_DrawLine>
  for (int i = 0; i < 23; ++i) {
 80019c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c8:	3301      	adds	r3, #1
 80019ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80019cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ce:	2b16      	cmp	r3, #22
 80019d0:	ddb2      	ble.n	8001938 <DessinerGrapheH+0x9c>
  }

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019d2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80019d6:	f003 f957 	bl	8004c88 <BSP_LCD_SetTextColor>
}
 80019da:	bf00      	nop
 80019dc:	3784      	adds	r7, #132	; 0x84
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	080158e0 	.word	0x080158e0
 80019e8:	ff0000ff 	.word	0xff0000ff

080019ec <DessinerGrapheD>:


void DessinerGrapheD(char** y) {
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b09f      	sub	sp, #124	; 0x7c
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 80019f4:	4aa6      	ldr	r2, [pc, #664]	; (8001c90 <DessinerGrapheD+0x2a4>)
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	4611      	mov	r1, r2
 80019fc:	2260      	movs	r2, #96	; 0x60
 80019fe:	4618      	mov	r0, r3
 8001a00:	f010 fa41 	bl	8011e86 <memcpy>

  uint16_t pointSize = 4;
 8001a04:	2304      	movs	r3, #4
 8001a06:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

  // Trouver le milieu de l'écran
  int midX = 100;
 8001a0a:	2364      	movs	r3, #100	; 0x64
 8001a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  int midY = BSP_LCD_GetYSize() -50;
 8001a0e:	f003 f879 	bl	8004b04 <BSP_LCD_GetYSize>
 8001a12:	4603      	mov	r3, r0
 8001a14:	3b32      	subs	r3, #50	; 0x32
 8001a16:	66bb      	str	r3, [r7, #104]	; 0x68

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001a18:	489e      	ldr	r0, [pc, #632]	; (8001c94 <DessinerGrapheD+0x2a8>)
 8001a1a:	f003 f935 	bl	8004c88 <BSP_LCD_SetTextColor>
  char* ne = "Nord-Est";
  char* se = "Sud-Est";
  char* so = "Sud-Ouest";
  char* no = "Nord-Ouest";*/

  for (int i = 0; i < 24; ++i) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	677b      	str	r3, [r7, #116]	; 0x74
 8001a22:	e11c      	b.n	8001c5e <DessinerGrapheD+0x272>
      if (strcmp(y[i], "Nord") == 0) {
 8001a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	499a      	ldr	r1, [pc, #616]	; (8001c98 <DessinerGrapheD+0x2ac>)
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fbed 	bl	8000210 <strcmp>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d114      	bne.n	8001a66 <DessinerGrapheD+0x7a>
          BSP_LCD_FillCircle(midX + x[i], midY - 20, pointSize);
 8001a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	3378      	adds	r3, #120	; 0x78
 8001a42:	443b      	add	r3, r7
 8001a44:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	b298      	uxth	r0, r3
 8001a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b14      	subs	r3, #20
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f003 fdfc 	bl	800565c <BSP_LCD_FillCircle>
 8001a64:	e0f8      	b.n	8001c58 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Sud") == 0) {
 8001a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	498a      	ldr	r1, [pc, #552]	; (8001c9c <DessinerGrapheD+0x2b0>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fbcc 	bl	8000210 <strcmp>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d114      	bne.n	8001aa8 <DessinerGrapheD+0xbc>
          BSP_LCD_FillCircle(midX + x[i], midY - 40, pointSize);
 8001a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	3378      	adds	r3, #120	; 0x78
 8001a84:	443b      	add	r3, r7
 8001a86:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	b298      	uxth	r0, r3
 8001a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b28      	subs	r3, #40	; 0x28
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f003 fddb 	bl	800565c <BSP_LCD_FillCircle>
 8001aa6:	e0d7      	b.n	8001c58 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Est") == 0) {
 8001aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	497b      	ldr	r1, [pc, #492]	; (8001ca0 <DessinerGrapheD+0x2b4>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fbab 	bl	8000210 <strcmp>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d114      	bne.n	8001aea <DessinerGrapheD+0xfe>
          BSP_LCD_FillCircle(midX + x[i], midY - 60, pointSize);
 8001ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	3378      	adds	r3, #120	; 0x78
 8001ac6:	443b      	add	r3, r7
 8001ac8:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b298      	uxth	r0, r3
 8001ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b3c      	subs	r3, #60	; 0x3c
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f003 fdba 	bl	800565c <BSP_LCD_FillCircle>
 8001ae8:	e0b6      	b.n	8001c58 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Ouest") == 0) {
 8001aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	496b      	ldr	r1, [pc, #428]	; (8001ca4 <DessinerGrapheD+0x2b8>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fb8a 	bl	8000210 <strcmp>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d114      	bne.n	8001b2c <DessinerGrapheD+0x140>
          BSP_LCD_FillCircle(midX + x[i], midY - 80, pointSize);
 8001b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	3378      	adds	r3, #120	; 0x78
 8001b08:	443b      	add	r3, r7
 8001b0a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	b298      	uxth	r0, r3
 8001b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b50      	subs	r3, #80	; 0x50
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001b24:	4619      	mov	r1, r3
 8001b26:	f003 fd99 	bl	800565c <BSP_LCD_FillCircle>
 8001b2a:	e095      	b.n	8001c58 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Nord-Est") == 0) {
 8001b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	495c      	ldr	r1, [pc, #368]	; (8001ca8 <DessinerGrapheD+0x2bc>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fb69 	bl	8000210 <strcmp>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d114      	bne.n	8001b6e <DessinerGrapheD+0x182>
          BSP_LCD_FillCircle(midX + x[i], midY - 100, pointSize);
 8001b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	3378      	adds	r3, #120	; 0x78
 8001b4a:	443b      	add	r3, r7
 8001b4c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b298      	uxth	r0, r3
 8001b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b64      	subs	r3, #100	; 0x64
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001b66:	4619      	mov	r1, r3
 8001b68:	f003 fd78 	bl	800565c <BSP_LCD_FillCircle>
 8001b6c:	e074      	b.n	8001c58 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Sud-Est") == 0) {
 8001b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	494c      	ldr	r1, [pc, #304]	; (8001cac <DessinerGrapheD+0x2c0>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fb48 	bl	8000210 <strcmp>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d114      	bne.n	8001bb0 <DessinerGrapheD+0x1c4>
          BSP_LCD_FillCircle(midX + x[i], midY - 120, pointSize);
 8001b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	3378      	adds	r3, #120	; 0x78
 8001b8c:	443b      	add	r3, r7
 8001b8e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	b298      	uxth	r0, r3
 8001b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b78      	subs	r3, #120	; 0x78
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f003 fd57 	bl	800565c <BSP_LCD_FillCircle>
 8001bae:	e053      	b.n	8001c58 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Sud-Ouest") == 0) {
 8001bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	493d      	ldr	r1, [pc, #244]	; (8001cb0 <DessinerGrapheD+0x2c4>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fb27 	bl	8000210 <strcmp>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d114      	bne.n	8001bf2 <DessinerGrapheD+0x206>
          BSP_LCD_FillCircle(midX + x[i], midY - 140, pointSize);
 8001bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	3378      	adds	r3, #120	; 0x78
 8001bce:	443b      	add	r3, r7
 8001bd0:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	b298      	uxth	r0, r3
 8001bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b8c      	subs	r3, #140	; 0x8c
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001bea:	4619      	mov	r1, r3
 8001bec:	f003 fd36 	bl	800565c <BSP_LCD_FillCircle>
 8001bf0:	e032      	b.n	8001c58 <DessinerGrapheD+0x26c>
      } else if (strcmp(y[i], "Nord-Ouest") == 0) {
 8001bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	492d      	ldr	r1, [pc, #180]	; (8001cb4 <DessinerGrapheD+0x2c8>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fb06 	bl	8000210 <strcmp>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d114      	bne.n	8001c34 <DessinerGrapheD+0x248>
          BSP_LCD_FillCircle(midX + x[i], midY - 160, pointSize);
 8001c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	3378      	adds	r3, #120	; 0x78
 8001c10:	443b      	add	r3, r7
 8001c12:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b298      	uxth	r0, r3
 8001c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3ba0      	subs	r3, #160	; 0xa0
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f003 fd15 	bl	800565c <BSP_LCD_FillCircle>
 8001c32:	e011      	b.n	8001c58 <DessinerGrapheD+0x26c>
      } else {
          BSP_LCD_FillCircle(midX + x[i], midY, pointSize);
 8001c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	3378      	adds	r3, #120	; 0x78
 8001c3a:	443b      	add	r3, r7
 8001c3c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c4c:	b291      	uxth	r1, r2
 8001c4e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 fd02 	bl	800565c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 8001c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	677b      	str	r3, [r7, #116]	; 0x74
 8001c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c60:	2b17      	cmp	r3, #23
 8001c62:	f77f aedf 	ble.w	8001a24 <DessinerGrapheD+0x38>
  /*for (int i = 0; i < sizeof(x) / sizeof(x[0]) - 1; ++i) {
    BSP_LCD_DrawLine(midX + x[i], midY - (y[i]*2), midX + x[i + 1], midY - (y[i + 1]*2));
  }*/

  //BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
  AfficherBouton("Next", BSP_LCD_GetXSize() - 90, BSP_LCD_GetYSize() - 40);
 8001c66:	f002 ff39 	bl	8004adc <BSP_LCD_GetXSize>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b5a      	subs	r3, #90	; 0x5a
 8001c70:	b29c      	uxth	r4, r3
 8001c72:	f002 ff47 	bl	8004b04 <BSP_LCD_GetYSize>
 8001c76:	4603      	mov	r3, r0
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b28      	subs	r3, #40	; 0x28
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4621      	mov	r1, r4
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <DessinerGrapheD+0x2cc>)
 8001c84:	f7ff fab2 	bl	80011ec <AfficherBouton>

}
 8001c88:	bf00      	nop
 8001c8a:	377c      	adds	r7, #124	; 0x7c
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	080158e0 	.word	0x080158e0
 8001c94:	ff0000ff 	.word	0xff0000ff
 8001c98:	08015940 	.word	0x08015940
 8001c9c:	08015948 	.word	0x08015948
 8001ca0:	0801594c 	.word	0x0801594c
 8001ca4:	08015950 	.word	0x08015950
 8001ca8:	08015958 	.word	0x08015958
 8001cac:	08015964 	.word	0x08015964
 8001cb0:	0801596c 	.word	0x0801596c
 8001cb4:	08015978 	.word	0x08015978
 8001cb8:	080158d0 	.word	0x080158d0

08001cbc <DessinerGrapheP>:


void DessinerGrapheP(float* y) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0a0      	sub	sp, #128	; 0x80
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  // Exemple de coordonnées X et Y
  int x[] = {0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345};
 8001cc4:	4a2b      	ldr	r2, [pc, #172]	; (8001d74 <DessinerGrapheP+0xb8>)
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4611      	mov	r1, r2
 8001ccc:	2260      	movs	r2, #96	; 0x60
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f010 f8d9 	bl	8011e86 <memcpy>
  //int y[] = {100, 50, 130, 80, 160, 120};
  uint16_t pointSize = 4;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  // Trouver le milieu de l'écran
  int midX = 100;
 8001cda:	2364      	movs	r3, #100	; 0x64
 8001cdc:	673b      	str	r3, [r7, #112]	; 0x70
  int midY = BSP_LCD_GetYSize() -100;
 8001cde:	f002 ff11 	bl	8004b04 <BSP_LCD_GetYSize>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	3b64      	subs	r3, #100	; 0x64
 8001ce6:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Dessiner le graphe centré
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001ce8:	4823      	ldr	r0, [pc, #140]	; (8001d78 <DessinerGrapheP+0xbc>)
 8001cea:	f002 ffcd 	bl	8004c88 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 24; ++i) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cf2:	e028      	b.n	8001d46 <DessinerGrapheP+0x8a>
    BSP_LCD_FillCircle(midX + x[i], midY - (y[i]-930), pointSize);
 8001cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	3380      	adds	r3, #128	; 0x80
 8001cfa:	443b      	add	r3, r7
 8001cfc:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	b298      	uxth	r0, r3
 8001d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001d7c <DessinerGrapheP+0xc0>
 8001d24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d30:	ee17 3a90 	vmov	r3, s15
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f003 fc8e 	bl	800565c <BSP_LCD_FillCircle>
  for (int i = 0; i < 24; ++i) {
 8001d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d42:	3301      	adds	r3, #1
 8001d44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d48:	2b17      	cmp	r3, #23
 8001d4a:	ddd3      	ble.n	8001cf4 <DessinerGrapheP+0x38>
  }

  // Dessiner la ligne connectant les points
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d4c:	480a      	ldr	r0, [pc, #40]	; (8001d78 <DessinerGrapheP+0xbc>)
 8001d4e:	f002 ff9b 	bl	8004c88 <BSP_LCD_SetTextColor>
  for (int i = 0; i < 22; ++i) {
 8001d52:	2300      	movs	r3, #0
 8001d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d56:	e002      	b.n	8001d5e <DessinerGrapheP+0xa2>
 8001d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d60:	2b15      	cmp	r3, #21
 8001d62:	ddf9      	ble.n	8001d58 <DessinerGrapheP+0x9c>
    //BSP_LCD_DrawLine(midX + x[i], midY - (y[i]-930), midX + x[i + 1], midY - (y[i + 1]-930));
  }

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001d64:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001d68:	f002 ff8e 	bl	8004c88 <BSP_LCD_SetTextColor>
}
 8001d6c:	bf00      	nop
 8001d6e:	3780      	adds	r7, #128	; 0x80
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	080158e0 	.word	0x080158e0
 8001d78:	ff0000ff 	.word	0xff0000ff
 8001d7c:	44688000 	.word	0x44688000

08001d80 <ChangerDePage>:



void ChangerDePage(float* T, float* H, float* P, char** D, float* V, float* Pl, int taille) {
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b0aa      	sub	sp, #168	; 0xa8
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  // Mettre à jour la page actuelle
  if (currentPage == PAGE_1) {
 8001d8e:	4bad      	ldr	r3, [pc, #692]	; (8002044 <ChangerDePage+0x2c4>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <ChangerDePage+0x1e>
    currentPage = PAGE_2;
 8001d96:	4bab      	ldr	r3, [pc, #684]	; (8002044 <ChangerDePage+0x2c4>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e02e      	b.n	8001dfc <ChangerDePage+0x7c>
  }else{
	  if(currentPage == PAGE_2){
 8001d9e:	4ba9      	ldr	r3, [pc, #676]	; (8002044 <ChangerDePage+0x2c4>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d103      	bne.n	8001dae <ChangerDePage+0x2e>
		  	currentPage = PAGE_3;
 8001da6:	4ba7      	ldr	r3, [pc, #668]	; (8002044 <ChangerDePage+0x2c4>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	e026      	b.n	8001dfc <ChangerDePage+0x7c>
	  }else {
		  if(currentPage == PAGE_3){
 8001dae:	4ba5      	ldr	r3, [pc, #660]	; (8002044 <ChangerDePage+0x2c4>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d103      	bne.n	8001dbe <ChangerDePage+0x3e>
			  	currentPage = PAGE_4;
 8001db6:	4ba3      	ldr	r3, [pc, #652]	; (8002044 <ChangerDePage+0x2c4>)
 8001db8:	2203      	movs	r2, #3
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e01e      	b.n	8001dfc <ChangerDePage+0x7c>
		  }else{
			  if(currentPage == PAGE_4){
 8001dbe:	4ba1      	ldr	r3, [pc, #644]	; (8002044 <ChangerDePage+0x2c4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d103      	bne.n	8001dce <ChangerDePage+0x4e>
				  	currentPage = PAGE_5;
 8001dc6:	4b9f      	ldr	r3, [pc, #636]	; (8002044 <ChangerDePage+0x2c4>)
 8001dc8:	2204      	movs	r2, #4
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e016      	b.n	8001dfc <ChangerDePage+0x7c>
			  }else{
				  if(currentPage == PAGE_5){
 8001dce:	4b9d      	ldr	r3, [pc, #628]	; (8002044 <ChangerDePage+0x2c4>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d103      	bne.n	8001dde <ChangerDePage+0x5e>
					  	currentPage = PAGE_6;
 8001dd6:	4b9b      	ldr	r3, [pc, #620]	; (8002044 <ChangerDePage+0x2c4>)
 8001dd8:	2205      	movs	r2, #5
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e00e      	b.n	8001dfc <ChangerDePage+0x7c>
				  }else{
					  if(currentPage == PAGE_6){
 8001dde:	4b99      	ldr	r3, [pc, #612]	; (8002044 <ChangerDePage+0x2c4>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d103      	bne.n	8001dee <ChangerDePage+0x6e>
						  	currentPage = PAGE_7;
 8001de6:	4b97      	ldr	r3, [pc, #604]	; (8002044 <ChangerDePage+0x2c4>)
 8001de8:	2206      	movs	r2, #6
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e006      	b.n	8001dfc <ChangerDePage+0x7c>
					  }else{
						   if(currentPage == PAGE_7){
 8001dee:	4b95      	ldr	r3, [pc, #596]	; (8002044 <ChangerDePage+0x2c4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d102      	bne.n	8001dfc <ChangerDePage+0x7c>
							  	currentPage = PAGE_1;
 8001df6:	4b93      	ldr	r3, [pc, #588]	; (8002044 <ChangerDePage+0x2c4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]




  // Effacer l'écran
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f002 ff8e 	bl	8004d20 <BSP_LCD_Clear>

  // Afficher le contenu de la nouvelle page
  if (currentPage == PAGE_1) {
 8001e04:	4b8f      	ldr	r3, [pc, #572]	; (8002044 <ChangerDePage+0x2c4>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d110      	bne.n	8001e2e <ChangerDePage+0xae>
	  	    AfficherCase("Humidite", H[taille -1], 180, 30);
	  	    AfficherCase("Pression", P[taille -1], 330, 30);
	  	    AfficherCaseD("Direction", D[taille -1], 5, 160);
	  	    AfficherCase("Vitesse", V[taille -1], 180, 160);
	  	    AfficherCase("Pluie", Pl[taille -1], 330, 160);*/
	  init_page(T, H, Pl, D, V, Pl, taille);
 8001e0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff f9fe 	bl	8001228 <init_page>
	  }
  }

  // Afficher le bouton de changement de page
  //AfficherBouton("Next", BSP_LCD_GetXSize() - 90, BSP_LCD_GetYSize() - 40);
}
 8001e2c:	e14b      	b.n	80020c6 <ChangerDePage+0x346>
  } else {if (currentPage == PAGE_2){
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <ChangerDePage+0x2c4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d131      	bne.n	8001e9a <ChangerDePage+0x11a>
	  char titre[] = "Graphe de Temperature";
 8001e36:	4b84      	ldr	r3, [pc, #528]	; (8002048 <ChangerDePage+0x2c8>)
 8001e38:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e46:	6020      	str	r0, [r4, #0]
 8001e48:	3404      	adds	r4, #4
 8001e4a:	8021      	strh	r1, [r4, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001e4c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001e50:	f002 ff1a 	bl	8004c88 <BSP_LCD_SetTextColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001e54:	487d      	ldr	r0, [pc, #500]	; (800204c <ChangerDePage+0x2cc>)
 8001e56:	f002 ff17 	bl	8004c88 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(0, 0,480,30);
 8001e5a:	231e      	movs	r3, #30
 8001e5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2000      	movs	r0, #0
 8001e64:	f003 fb80 	bl	8005568 <BSP_LCD_FillRect>
		BSP_LCD_SetFont(&Font16);
 8001e68:	4879      	ldr	r0, [pc, #484]	; (8002050 <ChangerDePage+0x2d0>)
 8001e6a:	f002 ff3f 	bl	8004cec <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001e6e:	4877      	ldr	r0, [pc, #476]	; (800204c <ChangerDePage+0x2cc>)
 8001e70:	f002 ff22 	bl	8004cb8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e74:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e78:	f002 ff06 	bl	8004c88 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001e7c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001e80:	2301      	movs	r3, #1
 8001e82:	2105      	movs	r1, #5
 8001e84:	2000      	movs	r0, #0
 8001e86:	f002 ffb7 	bl	8004df8 <BSP_LCD_DisplayStringAt>
	  DessinerAxeX();
 8001e8a:	f7ff fa99 	bl	80013c0 <DessinerAxeX>
	  DessinerAxeY();
 8001e8e:	f7ff fba5 	bl	80015dc <DessinerAxeY>
	  DessinerGraphe(T);
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff fc60 	bl	8001758 <DessinerGraphe>
}
 8001e98:	e115      	b.n	80020c6 <ChangerDePage+0x346>
  }else {if (currentPage == PAGE_3){
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <ChangerDePage+0x2c4>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d12e      	bne.n	8001f00 <ChangerDePage+0x180>
	  char titre[] = "Graphe d'Humidite";
 8001ea2:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <ChangerDePage+0x2d4>)
 8001ea4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	8023      	strh	r3, [r4, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001eb2:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001eb6:	f002 fee7 	bl	8004c88 <BSP_LCD_SetTextColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001eba:	4864      	ldr	r0, [pc, #400]	; (800204c <ChangerDePage+0x2cc>)
 8001ebc:	f002 fee4 	bl	8004c88 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(0, 0,480,30);
 8001ec0:	231e      	movs	r3, #30
 8001ec2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f003 fb4d 	bl	8005568 <BSP_LCD_FillRect>
		BSP_LCD_SetFont(&Font16);
 8001ece:	4860      	ldr	r0, [pc, #384]	; (8002050 <ChangerDePage+0x2d0>)
 8001ed0:	f002 ff0c 	bl	8004cec <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001ed4:	485d      	ldr	r0, [pc, #372]	; (800204c <ChangerDePage+0x2cc>)
 8001ed6:	f002 feef 	bl	8004cb8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001eda:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ede:	f002 fed3 	bl	8004c88 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001ee2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	2105      	movs	r1, #5
 8001eea:	2000      	movs	r0, #0
 8001eec:	f002 ff84 	bl	8004df8 <BSP_LCD_DisplayStringAt>
		  DessinerAxeX();
 8001ef0:	f7ff fa66 	bl	80013c0 <DessinerAxeX>
		  DessinerAxeY();
 8001ef4:	f7ff fb72 	bl	80015dc <DessinerAxeY>
		  DessinerGrapheH(H);
 8001ef8:	68b8      	ldr	r0, [r7, #8]
 8001efa:	f7ff fccf 	bl	800189c <DessinerGrapheH>
}
 8001efe:	e0e2      	b.n	80020c6 <ChangerDePage+0x346>
	  }else {if (currentPage == PAGE_4){
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <ChangerDePage+0x2c4>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d132      	bne.n	8001f6e <ChangerDePage+0x1ee>
		  char titre[] = "Graphe de Pression";
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <ChangerDePage+0x2d8>)
 8001f0a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001f0e:	461d      	mov	r5, r3
 8001f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f14:	682b      	ldr	r3, [r5, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	8022      	strh	r2, [r4, #0]
 8001f1a:	3402      	adds	r4, #2
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	7023      	strb	r3, [r4, #0]
		  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001f20:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001f24:	f002 feb0 	bl	8004c88 <BSP_LCD_SetTextColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001f28:	4848      	ldr	r0, [pc, #288]	; (800204c <ChangerDePage+0x2cc>)
 8001f2a:	f002 fead 	bl	8004c88 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(0, 0,480,30);
 8001f2e:	231e      	movs	r3, #30
 8001f30:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2000      	movs	r0, #0
 8001f38:	f003 fb16 	bl	8005568 <BSP_LCD_FillRect>
			BSP_LCD_SetFont(&Font16);
 8001f3c:	4844      	ldr	r0, [pc, #272]	; (8002050 <ChangerDePage+0x2d0>)
 8001f3e:	f002 fed5 	bl	8004cec <BSP_LCD_SetFont>
			BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001f42:	4842      	ldr	r0, [pc, #264]	; (800204c <ChangerDePage+0x2cc>)
 8001f44:	f002 feb8 	bl	8004cb8 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f48:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f4c:	f002 fe9c 	bl	8004c88 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001f50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f54:	2301      	movs	r3, #1
 8001f56:	2105      	movs	r1, #5
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f002 ff4d 	bl	8004df8 <BSP_LCD_DisplayStringAt>
			  DessinerAxeX();
 8001f5e:	f7ff fa2f 	bl	80013c0 <DessinerAxeX>
			  DessinerAxeY();
 8001f62:	f7ff fb3b 	bl	80015dc <DessinerAxeY>
			  DessinerGrapheP(P);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fea8 	bl	8001cbc <DessinerGrapheP>
}
 8001f6c:	e0ab      	b.n	80020c6 <ChangerDePage+0x346>
		  }else {if (currentPage == PAGE_5){
 8001f6e:	4b35      	ldr	r3, [pc, #212]	; (8002044 <ChangerDePage+0x2c4>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d130      	bne.n	8001fd8 <ChangerDePage+0x258>
			  char titre[] = "Graphe de Direction de vent";
 8001f76:	4b39      	ldr	r3, [pc, #228]	; (800205c <ChangerDePage+0x2dc>)
 8001f78:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001f8a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001f8e:	f002 fe7b 	bl	8004c88 <BSP_LCD_SetTextColor>
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001f92:	482e      	ldr	r0, [pc, #184]	; (800204c <ChangerDePage+0x2cc>)
 8001f94:	f002 fe78 	bl	8004c88 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(0, 0,480,30);
 8001f98:	231e      	movs	r3, #30
 8001f9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f003 fae1 	bl	8005568 <BSP_LCD_FillRect>
				BSP_LCD_SetFont(&Font16);
 8001fa6:	482a      	ldr	r0, [pc, #168]	; (8002050 <ChangerDePage+0x2d0>)
 8001fa8:	f002 fea0 	bl	8004cec <BSP_LCD_SetFont>
				BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001fac:	4827      	ldr	r0, [pc, #156]	; (800204c <ChangerDePage+0x2cc>)
 8001fae:	f002 fe83 	bl	8004cb8 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001fb2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001fb6:	f002 fe67 	bl	8004c88 <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8001fba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f002 ff18 	bl	8004df8 <BSP_LCD_DisplayStringAt>
				  DessinerAxeXD();
 8001fc8:	f7ff fa97 	bl	80014fa <DessinerAxeXD>
				  DessinerAxeY();
 8001fcc:	f7ff fb06 	bl	80015dc <DessinerAxeY>
				  DessinerGrapheD(D);
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f7ff fd0b 	bl	80019ec <DessinerGrapheD>
}
 8001fd6:	e076      	b.n	80020c6 <ChangerDePage+0x346>
			  }else {if (currentPage == PAGE_6){
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <ChangerDePage+0x2c4>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d141      	bne.n	8002064 <ChangerDePage+0x2e4>
				  char titre[] = "Graphe de Vitesse de vent";
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <ChangerDePage+0x2e0>)
 8001fe2:	f107 0420 	add.w	r4, r7, #32
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ff0:	c403      	stmia	r4!, {r0, r1}
 8001ff2:	8022      	strh	r2, [r4, #0]
				  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001ff4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001ff8:	f002 fe46 	bl	8004c88 <BSP_LCD_SetTextColor>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001ffc:	4813      	ldr	r0, [pc, #76]	; (800204c <ChangerDePage+0x2cc>)
 8001ffe:	f002 fe43 	bl	8004c88 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0, 0,480,30);
 8002002:	231e      	movs	r3, #30
 8002004:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002008:	2100      	movs	r1, #0
 800200a:	2000      	movs	r0, #0
 800200c:	f003 faac 	bl	8005568 <BSP_LCD_FillRect>
					BSP_LCD_SetFont(&Font16);
 8002010:	480f      	ldr	r0, [pc, #60]	; (8002050 <ChangerDePage+0x2d0>)
 8002012:	f002 fe6b 	bl	8004cec <BSP_LCD_SetFont>
					BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <ChangerDePage+0x2cc>)
 8002018:	f002 fe4e 	bl	8004cb8 <BSP_LCD_SetBackColor>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800201c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002020:	f002 fe32 	bl	8004c88 <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 8002024:	f107 0220 	add.w	r2, r7, #32
 8002028:	2301      	movs	r3, #1
 800202a:	2105      	movs	r1, #5
 800202c:	2000      	movs	r0, #0
 800202e:	f002 fee3 	bl	8004df8 <BSP_LCD_DisplayStringAt>
					  DessinerAxeX();
 8002032:	f7ff f9c5 	bl	80013c0 <DessinerAxeX>
					  DessinerAxeY();
 8002036:	f7ff fad1 	bl	80015dc <DessinerAxeY>
					  DessinerGraphe(V);
 800203a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800203e:	f7ff fb8b 	bl	8001758 <DessinerGraphe>
}
 8002042:	e040      	b.n	80020c6 <ChangerDePage+0x346>
 8002044:	20000208 	.word	0x20000208
 8002048:	08015984 	.word	0x08015984
 800204c:	ff0000ff 	.word	0xff0000ff
 8002050:	20000010 	.word	0x20000010
 8002054:	0801599c 	.word	0x0801599c
 8002058:	080159b0 	.word	0x080159b0
 800205c:	080159c4 	.word	0x080159c4
 8002060:	080159e0 	.word	0x080159e0
				  }else {if (currentPage == PAGE_7){
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <ChangerDePage+0x350>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b06      	cmp	r3, #6
 800206a:	d12c      	bne.n	80020c6 <ChangerDePage+0x346>
					  char titre[] = "Graphe de Pluie";
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <ChangerDePage+0x354>)
 800206e:	f107 0410 	add.w	r4, r7, #16
 8002072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002078:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800207c:	f002 fe04 	bl	8004c88 <BSP_LCD_SetTextColor>
						BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002080:	4815      	ldr	r0, [pc, #84]	; (80020d8 <ChangerDePage+0x358>)
 8002082:	f002 fe01 	bl	8004c88 <BSP_LCD_SetTextColor>
						BSP_LCD_FillRect(0, 0,480,30);
 8002086:	231e      	movs	r3, #30
 8002088:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800208c:	2100      	movs	r1, #0
 800208e:	2000      	movs	r0, #0
 8002090:	f003 fa6a 	bl	8005568 <BSP_LCD_FillRect>
						BSP_LCD_SetFont(&Font16);
 8002094:	4811      	ldr	r0, [pc, #68]	; (80020dc <ChangerDePage+0x35c>)
 8002096:	f002 fe29 	bl	8004cec <BSP_LCD_SetFont>
						BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <ChangerDePage+0x358>)
 800209c:	f002 fe0c 	bl	8004cb8 <BSP_LCD_SetBackColor>
						BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020a4:	f002 fdf0 	bl	8004c88 <BSP_LCD_SetTextColor>
						BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)titre, CENTER_MODE);
 80020a8:	f107 0210 	add.w	r2, r7, #16
 80020ac:	2301      	movs	r3, #1
 80020ae:	2105      	movs	r1, #5
 80020b0:	2000      	movs	r0, #0
 80020b2:	f002 fea1 	bl	8004df8 <BSP_LCD_DisplayStringAt>
						  DessinerAxeX();
 80020b6:	f7ff f983 	bl	80013c0 <DessinerAxeX>
						  DessinerAxeY();
 80020ba:	f7ff fa8f 	bl	80015dc <DessinerAxeY>
						  DessinerGraphePl(Pl);
 80020be:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80020c2:	f7ff fa9f 	bl	8001604 <DessinerGraphePl>
}
 80020c6:	bf00      	nop
 80020c8:	3798      	adds	r7, #152	; 0x98
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bdb0      	pop	{r4, r5, r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000208 	.word	0x20000208
 80020d4:	080159fc 	.word	0x080159fc
 80020d8:	ff0000ff 	.word	0xff0000ff
 80020dc:	20000010 	.word	0x20000010

080020e0 <platform_write>:



static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af04      	add	r7, sp, #16
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	460b      	mov	r3, r1
 80020ee:	72fb      	strb	r3, [r7, #11]
 80020f0:	4613      	mov	r3, r2
 80020f2:	813b      	strh	r3, [r7, #8]
	/* Write multiple command */
	  reg |= 0x80;
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020fa:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	893b      	ldrh	r3, [r7, #8]
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	21bf      	movs	r1, #191	; 0xbf
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f006 f896 	bl	8008244 <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b088      	sub	sp, #32
 8002126:	af04      	add	r7, sp, #16
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	461a      	mov	r2, r3
 800212e:	460b      	mov	r3, r1
 8002130:	72fb      	strb	r3, [r7, #11]
 8002132:	4613      	mov	r3, r2
 8002134:	813b      	strh	r3, [r7, #8]
	 /* Read multiple command */
	  reg |= 0x80;
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800213c:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	b29a      	uxth	r2, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	893b      	ldrh	r3, [r7, #8]
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2301      	movs	r3, #1
 8002152:	21bf      	movs	r1, #191	; 0xbf
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f006 f989 	bl	800846c <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <linear_interpolation>:
  float x1;
  float y1;
} lin_t;

float linear_interpolation(lin_t *lin, int16_t x)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	ed93 7a03 	vldr	s14, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	edd3 7a01 	vldr	s15, [r3, #4]
 800217c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002180:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	edd3 6a02 	vldr	s13, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 7a01 	vldr	s15, [r3, #4]
 800219c:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                     (lin->x0 * lin->y1)))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	ed93 6a00 	vldr	s12, [r3]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80021ac:	ee66 7a27 	vmul.f32	s15, s12, s15
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80021b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021b4:	ee37 7a27 	vadd.f32	s14, s14, s15
         / (lin->x1 - lin->x0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021cc:	eef0 7a66 	vmov.f32	s15, s13
}
 80021d0:	eeb0 0a67 	vmov.f32	s0, s15
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <Humedite>:





float Humedite(){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08e      	sub	sp, #56	; 0x38
 80021e4:	af00      	add	r7, sp, #0
	static uint8_t whoamI;
	  stmdev_ctx_t dev_ctx;
	  dev_ctx.write_reg = platform_write;
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <Humedite+0x174>)
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
	  dev_ctx.read_reg = platform_read;
 80021ea:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <Humedite+0x178>)
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	  dev_ctx.handle = &hi2c1;
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <Humedite+0x17c>)
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
	   whoamI = 0;
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <Humedite+0x180>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
	   hts221_device_id_get(&dev_ctx, &whoamI);
 80021f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fc:	4958      	ldr	r1, [pc, #352]	; (8002360 <Humedite+0x180>)
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 ff7a 	bl	80060f8 <hts221_device_id_get>

	   if ( whoamI != HTS221_ID )
 8002204:	4b56      	ldr	r3, [pc, #344]	; (8002360 <Humedite+0x180>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2bbc      	cmp	r3, #188	; 0xbc
 800220a:	d000      	beq.n	800220e <Humedite+0x2e>
	     while (1); /*manage here device not found */
 800220c:	e7fe      	b.n	800220c <Humedite+0x2c>

	   /* Read humidity calibration coefficient */
	   lin_t lin_hum;
	   hts221_hum_adc_point_0_get(&dev_ctx, &lin_hum.x0);
 800220e:	f107 0218 	add.w	r2, r7, #24
 8002212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f004 f853 	bl	80062c4 <hts221_hum_adc_point_0_get>
	   hts221_hum_rh_point_0_get(&dev_ctx, &lin_hum.y0);
 800221e:	f107 0318 	add.w	r3, r7, #24
 8002222:	1d1a      	adds	r2, r3, #4
 8002224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f003 ffac 	bl	8006188 <hts221_hum_rh_point_0_get>
	   hts221_hum_adc_point_1_get(&dev_ctx, &lin_hum.x1);
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	f103 0208 	add.w	r2, r3, #8
 8002238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f864 	bl	800630c <hts221_hum_adc_point_1_get>
	   hts221_hum_rh_point_1_get(&dev_ctx, &lin_hum.y1);
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	f103 020c 	add.w	r2, r3, #12
 800224c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f003 ffb6 	bl	80061c4 <hts221_hum_rh_point_1_get>
	   /* Read temperature calibration coefficient */
	   lin_t lin_temp;
	   hts221_temp_adc_point_0_get(&dev_ctx, &lin_temp.x0);
 8002258:	f107 0208 	add.w	r2, r7, #8
 800225c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f004 f876 	bl	8006354 <hts221_temp_adc_point_0_get>
	   hts221_temp_deg_point_0_get(&dev_ctx, &lin_temp.y0);
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	1d1a      	adds	r2, r3, #4
 800226e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f003 ffc3 	bl	8006200 <hts221_temp_deg_point_0_get>
	   hts221_temp_adc_point_1_get(&dev_ctx, &lin_temp.x1);
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	f103 0208 	add.w	r2, r3, #8
 8002282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f004 f887 	bl	800639c <hts221_temp_adc_point_1_get>
	   hts221_temp_deg_point_1_get(&dev_ctx, &lin_temp.y1);
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	f103 020c 	add.w	r2, r3, #12
 8002296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f003 ffe0 	bl	8006262 <hts221_temp_deg_point_1_get>
	   /* Enable Block Data Update */
	   hts221_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80022a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 feb9 	bl	8006020 <hts221_block_data_update_set>
	   /* Set Output Data Rate */
	   hts221_data_rate_set(&dev_ctx, HTS221_ODR_1Hz);
 80022ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 fe8d 	bl	8005fd4 <hts221_data_rate_set>
	   /* Device power on */
	   hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 80022ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 ff2a 	bl	800611a <hts221_power_on_set>
    hts221_reg_t reg;
    hts221_status_get(&dev_ctx, &reg.status_reg);
 80022c6:	1d3a      	adds	r2, r7, #4
 80022c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 ff49 	bl	8006166 <hts221_status_get>

    if (reg.status_reg.h_da) {
 80022d4:	793b      	ldrb	r3, [r7, #4]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d02f      	beq.n	8002340 <Humedite+0x160>
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <Humedite+0x184>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]
      /* Read humidity data */
      memset(&data_raw_humidity, 0x00, sizeof(int16_t));
      hts221_humidity_raw_get(&dev_ctx, &data_raw_humidity);
 80022e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ea:	491e      	ldr	r1, [pc, #120]	; (8002364 <Humedite+0x184>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 febd 	bl	800606c <hts221_humidity_raw_get>
      humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <Humedite+0x184>)
 80022f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022f8:	f107 0318 	add.w	r3, r7, #24
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff30 	bl	8002164 <linear_interpolation>
 8002304:	eef0 7a40 	vmov.f32	s15, s0
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <Humedite+0x188>)
 800230a:	edc3 7a00 	vstr	s15, [r3]

      if (humidity_perc < 0) {
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <Humedite+0x188>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d503      	bpl.n	8002326 <Humedite+0x146>
        humidity_perc = 0;
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <Humedite+0x188>)
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
      }

      if (humidity_perc > 100) {
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <Humedite+0x188>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800236c <Humedite+0x18c>
 8002330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	dd02      	ble.n	8002340 <Humedite+0x160>
        humidity_perc = 100;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <Humedite+0x188>)
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <Humedite+0x190>)
 800233e:	601a      	str	r2, [r3, #0]
      }


    }
    return humidity_perc;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <Humedite+0x188>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	ee07 3a90 	vmov	s15, r3
}
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	3738      	adds	r7, #56	; 0x38
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	080020e1 	.word	0x080020e1
 8002358:	08002123 	.word	0x08002123
 800235c:	200002dc 	.word	0x200002dc
 8002360:	20000218 	.word	0x20000218
 8002364:	2000020a 	.word	0x2000020a
 8002368:	20000210 	.word	0x20000210
 800236c:	42c80000 	.word	0x42c80000
 8002370:	42c80000 	.word	0x42c80000

08002374 <Temperature>:
void affich_H(){
    sprintf((char *)tx_buffer, "Humidity [%%]:%3.2f\r\n", Humedite()); // @suppress("Float formatting support")
    printf( (char const *)tx_buffer);
}

float Temperature(){
 8002374:	b580      	push	{r7, lr}
 8002376:	b08e      	sub	sp, #56	; 0x38
 8002378:	af00      	add	r7, sp, #0
	static uint8_t whoamI;
	  stmdev_ctx_t dev_ctx;
	  dev_ctx.write_reg = platform_write;
 800237a:	4b4e      	ldr	r3, [pc, #312]	; (80024b4 <Temperature+0x140>)
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
	  dev_ctx.read_reg = platform_read;
 800237e:	4b4e      	ldr	r3, [pc, #312]	; (80024b8 <Temperature+0x144>)
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
	  dev_ctx.handle = &hi2c1;
 8002382:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <Temperature+0x148>)
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
	   whoamI = 0;
 8002386:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <Temperature+0x14c>)
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
	   hts221_device_id_get(&dev_ctx, &whoamI);
 800238c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002390:	494b      	ldr	r1, [pc, #300]	; (80024c0 <Temperature+0x14c>)
 8002392:	4618      	mov	r0, r3
 8002394:	f003 feb0 	bl	80060f8 <hts221_device_id_get>

	   if ( whoamI != HTS221_ID )
 8002398:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <Temperature+0x14c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2bbc      	cmp	r3, #188	; 0xbc
 800239e:	d000      	beq.n	80023a2 <Temperature+0x2e>
	     while (1); /*manage here device not found */
 80023a0:	e7fe      	b.n	80023a0 <Temperature+0x2c>

	   /* Read humidity calibration coefficient */
	   lin_t lin_hum;
	   hts221_hum_adc_point_0_get(&dev_ctx, &lin_hum.x0);
 80023a2:	f107 0218 	add.w	r2, r7, #24
 80023a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 ff89 	bl	80062c4 <hts221_hum_adc_point_0_get>
	   hts221_hum_rh_point_0_get(&dev_ctx, &lin_hum.y0);
 80023b2:	f107 0318 	add.w	r3, r7, #24
 80023b6:	1d1a      	adds	r2, r3, #4
 80023b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fee2 	bl	8006188 <hts221_hum_rh_point_0_get>
	   hts221_hum_adc_point_1_get(&dev_ctx, &lin_hum.x1);
 80023c4:	f107 0318 	add.w	r3, r7, #24
 80023c8:	f103 0208 	add.w	r2, r3, #8
 80023cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 ff9a 	bl	800630c <hts221_hum_adc_point_1_get>
	   hts221_hum_rh_point_1_get(&dev_ctx, &lin_hum.y1);
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	f103 020c 	add.w	r2, r3, #12
 80023e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 feec 	bl	80061c4 <hts221_hum_rh_point_1_get>
	   /* Read temperature calibration coefficient */
	   lin_t lin_temp;
	   hts221_temp_adc_point_0_get(&dev_ctx, &lin_temp.x0);
 80023ec:	f107 0208 	add.w	r2, r7, #8
 80023f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 ffac 	bl	8006354 <hts221_temp_adc_point_0_get>
	   hts221_temp_deg_point_0_get(&dev_ctx, &lin_temp.y0);
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	1d1a      	adds	r2, r3, #4
 8002402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fef9 	bl	8006200 <hts221_temp_deg_point_0_get>
	   hts221_temp_adc_point_1_get(&dev_ctx, &lin_temp.x1);
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	f103 0208 	add.w	r2, r3, #8
 8002416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f003 ffbd 	bl	800639c <hts221_temp_adc_point_1_get>
	   hts221_temp_deg_point_1_get(&dev_ctx, &lin_temp.y1);
 8002422:	f107 0308 	add.w	r3, r7, #8
 8002426:	f103 020c 	add.w	r2, r3, #12
 800242a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f003 ff16 	bl	8006262 <hts221_temp_deg_point_1_get>
	   /* Enable Block Data Update */
	   hts221_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fdef 	bl	8006020 <hts221_block_data_update_set>
	   /* Set Output Data Rate */
	   hts221_data_rate_set(&dev_ctx, HTS221_ODR_1Hz);
 8002442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fdc3 	bl	8005fd4 <hts221_data_rate_set>
	   /* Device power on */
	   hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 800244e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fe60 	bl	800611a <hts221_power_on_set>
    hts221_reg_t reg;
    hts221_status_get(&dev_ctx, &reg.status_reg);
 800245a:	1d3a      	adds	r2, r7, #4
 800245c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fe7f 	bl	8006166 <hts221_status_get>

    if (reg.status_reg.t_da) {
 8002468:	793b      	ldrb	r3, [r7, #4]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d016      	beq.n	80024a2 <Temperature+0x12e>
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <Temperature+0x150>)
 8002476:	2200      	movs	r2, #0
 8002478:	801a      	strh	r2, [r3, #0]
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      hts221_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800247a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247e:	4911      	ldr	r1, [pc, #68]	; (80024c4 <Temperature+0x150>)
 8002480:	4618      	mov	r0, r3
 8002482:	f003 fe16 	bl	80060b2 <hts221_temperature_raw_get>
      temperature_degC = linear_interpolation(&lin_temp,
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <Temperature+0x150>)
 8002488:	f9b3 2000 	ldrsh.w	r2, [r3]
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fe66 	bl	8002164 <linear_interpolation>
 8002498:	eef0 7a40 	vmov.f32	s15, s0
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <Temperature+0x154>)
 800249e:	edc3 7a00 	vstr	s15, [r3]
                                              data_raw_temperature);

    }

    return temperature_degC;
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <Temperature+0x154>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	ee07 3a90 	vmov	s15, r3
}
 80024aa:	eeb0 0a67 	vmov.f32	s0, s15
 80024ae:	3738      	adds	r7, #56	; 0x38
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	080020e1 	.word	0x080020e1
 80024b8:	08002123 	.word	0x08002123
 80024bc:	200002dc 	.word	0x200002dc
 80024c0:	20000219 	.word	0x20000219
 80024c4:	2000020c 	.word	0x2000020c
 80024c8:	20000214 	.word	0x20000214

080024cc <__io_putchar>:
            Temperature() );
    printf((char const *)tx_buffer);
}

PUTCHAR_PROTOTYPE
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80024d4:	1d39      	adds	r1, r7, #4
 80024d6:	2364      	movs	r3, #100	; 0x64
 80024d8:	2201      	movs	r2, #1
 80024da:	4804      	ldr	r0, [pc, #16]	; (80024ec <__io_putchar+0x20>)
 80024dc:	f00a f8f6 	bl	800c6cc <HAL_UART_Transmit>
return ch;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200006ac 	.word	0x200006ac

080024f0 <SaveDataToCSV>:
//static uint8_t tx_buffer[1000];
int v= 0;

/* Function to save weather data to a CSV file */
FRESULT SaveDataToCSV(char (*heures)[6], float *temperatures, float *pressions, float *humidites, char** directions_vent, float *vitesses_vent, float *pluies)
{
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f4:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
 80024f8:	af0c      	add	r7, sp, #48	; 0x30
 80024fa:	f507 7428 	add.w	r4, r7, #672	; 0x2a0
 80024fe:	f5a4 7421 	sub.w	r4, r4, #644	; 0x284
 8002502:	6020      	str	r0, [r4, #0]
 8002504:	f507 7028 	add.w	r0, r7, #672	; 0x2a0
 8002508:	f5a0 7022 	sub.w	r0, r0, #648	; 0x288
 800250c:	6001      	str	r1, [r0, #0]
 800250e:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8002512:	f5a1 7123 	sub.w	r1, r1, #652	; 0x28c
 8002516:	600a      	str	r2, [r1, #0]
 8002518:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800251c:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8002520:	6013      	str	r3, [r2, #0]
	BSP_LCD_DisplayOff();
 8002522:	f003 f959 	bl	80057d8 <BSP_LCD_DisplayOff>
	IndicationEtatsParLedRGB(TransfertVersSD);
 8002526:	2002      	movs	r0, #2
 8002528:	f000 fa70 	bl	8002a0c <IndicationEtatsParLedRGB>
    FRESULT res; /* FatFs function common result code */
    uint32_t byteswritten; /* File write/read counts */
    uint8_t wtext[100]; /* File write buffer */


    char msg1[] = "Begin\n\r";
 800252c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002530:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8002534:	4a90      	ldr	r2, [pc, #576]	; (8002778 <SaveDataToCSV+0x288>)
 8002536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800253a:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart1, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 800253e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd fec4 	bl	80002d0 <strlen>
 8002548:	4603      	mov	r3, r0
 800254a:	b29a      	uxth	r2, r3
 800254c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
 8002554:	4889      	ldr	r0, [pc, #548]	; (800277c <SaveDataToCSV+0x28c>)
 8002556:	f00a f8b9 	bl	800c6cc <HAL_UART_Transmit>

    /* Mount SD Card */
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800255a:	2200      	movs	r2, #0
 800255c:	4988      	ldr	r1, [pc, #544]	; (8002780 <SaveDataToCSV+0x290>)
 800255e:	4889      	ldr	r0, [pc, #548]	; (8002784 <SaveDataToCSV+0x294>)
 8002560:	f00d fb00 	bl	800fb64 <f_mount>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <SaveDataToCSV+0x7e>
    {
        /* FatFs Initialization Error */
        return FR_INT_ERR;
 800256a:	2302      	movs	r3, #2
 800256c:	e0fe      	b.n	800276c <SaveDataToCSV+0x27c>
    }

    /* Create a FAT file system on the logical drive */
    if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer)) != FR_OK)
 800256e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	2107      	movs	r1, #7
 800257c:	4880      	ldr	r0, [pc, #512]	; (8002780 <SaveDataToCSV+0x290>)
 800257e:	f00d ff13 	bl	80103a8 <f_mkfs>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <SaveDataToCSV+0x9c>
    {
        /* FatFs Format Error */
        return FR_INT_ERR;
 8002588:	2302      	movs	r3, #2
 800258a:	e0ef      	b.n	800276c <SaveDataToCSV+0x27c>
    }

    /* Open or create a CSV file with write access */
    if(f_open(&SDFile, "Mesures.CSV", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800258c:	220a      	movs	r2, #10
 800258e:	497e      	ldr	r1, [pc, #504]	; (8002788 <SaveDataToCSV+0x298>)
 8002590:	487e      	ldr	r0, [pc, #504]	; (800278c <SaveDataToCSV+0x29c>)
 8002592:	f00d fb2d 	bl	800fbf0 <f_open>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <SaveDataToCSV+0xb0>
    {
        /* 'STM32.CSV' file Open for write Error */
        return FR_INT_ERR;
 800259c:	2302      	movs	r3, #2
 800259e:	e0e5      	b.n	800276c <SaveDataToCSV+0x27c>
    }

    /* Write header to the CSV file */
    sprintf((char*)wtext, "Heure;Temperature(degC);Pression(hPA);Humidite(%%);Direction_vent;Vitesse_vent(m/s);Pluie(mm)\n");
 80025a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025a4:	497a      	ldr	r1, [pc, #488]	; (8002790 <SaveDataToCSV+0x2a0>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f00f fb72 	bl	8011c90 <siprintf>
    res = f_write(&SDFile, wtext, strlen((char*)wtext), (void *)&byteswritten);
 80025ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fe8d 	bl	80002d0 <strlen>
 80025b6:	4602      	mov	r2, r0
 80025b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025bc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80025c0:	4872      	ldr	r0, [pc, #456]	; (800278c <SaveDataToCSV+0x29c>)
 80025c2:	f00d fcd3 	bl	800ff6c <f_write>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
    if((byteswritten == 0) || (res != FR_OK))
 80025cc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80025d0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <SaveDataToCSV+0xf2>
 80025da:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <SaveDataToCSV+0xf8>
    {
        /* 'STM32.CSV' file Write or EOF Error */
        return res;
 80025e2:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80025e6:	e0c1      	b.n	800276c <SaveDataToCSV+0x27c>
    }

    /* Write data to the CSV file */
    for(int i = 0; i < 24; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80025ee:	e08f      	b.n	8002710 <SaveDataToCSV+0x220>
    {
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 80025f0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	461a      	mov	r2, r3
 80025fe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002602:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002616:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4413      	add	r3, r2
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ffc1 	bl	80005a8 <__aeabi_f2d>
 8002626:	4604      	mov	r4, r0
 8002628:	460d      	mov	r5, r1
 800262a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002634:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	4413      	add	r3, r2
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ffb2 	bl	80005a8 <__aeabi_f2d>
 8002644:	4680      	mov	r8, r0
 8002646:	4689      	mov	r9, r1
                humidites[i], directions_vent[i], vitesses_vent[i], pluies[i]);
 8002648:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002652:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	681b      	ldr	r3, [r3, #0]
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ffa3 	bl	80005a8 <__aeabi_f2d>
 8002662:	4682      	mov	sl, r0
 8002664:	468b      	mov	fp, r1
                humidites[i], directions_vent[i], vitesses_vent[i], pluies[i]);
 8002666:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8002670:	4413      	add	r3, r2
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 8002672:	681e      	ldr	r6, [r3, #0]
                humidites[i], directions_vent[i], vitesses_vent[i], pluies[i]);
 8002674:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 800267e:	4413      	add	r3, r2
 8002680:	681b      	ldr	r3, [r3, #0]
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff90 	bl	80005a8 <__aeabi_f2d>
 8002688:	e9c7 0100 	strd	r0, r1, [r7]
                humidites[i], directions_vent[i], vitesses_vent[i], pluies[i]);
 800268c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8002696:	4413      	add	r3, r2
 8002698:	681b      	ldr	r3, [r3, #0]
        sprintf((char*)wtext, "%s;%f;%f;%f;%s;%f;%f\n", heures[i], temperatures[i], pressions[i],
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff84 	bl	80005a8 <__aeabi_f2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80026a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80026ac:	ed97 7b00 	vldr	d7, [r7]
 80026b0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80026b4:	9606      	str	r6, [sp, #24]
 80026b6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80026ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80026be:	e9cd 4500 	strd	r4, r5, [sp]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4933      	ldr	r1, [pc, #204]	; (8002794 <SaveDataToCSV+0x2a4>)
 80026c6:	f00f fae3 	bl	8011c90 <siprintf>
        res = f_write(&SDFile, wtext, strlen((char*)wtext), (void *)&byteswritten);
 80026ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fdfe 	bl	80002d0 <strlen>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026da:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026de:	482b      	ldr	r0, [pc, #172]	; (800278c <SaveDataToCSV+0x29c>)
 80026e0:	f00d fc44 	bl	800ff6c <f_write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
        if((byteswritten == 0) || (res != FR_OK))
 80026ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80026ee:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <SaveDataToCSV+0x210>
 80026f8:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <SaveDataToCSV+0x216>
        {
            /* 'STM32.CSV' file Write or EOF Error */
            return res;
 8002700:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8002704:	e032      	b.n	800276c <SaveDataToCSV+0x27c>
    for(int i = 0; i < 24; i++)
 8002706:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800270a:	3301      	adds	r3, #1
 800270c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002710:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002714:	2b17      	cmp	r3, #23
 8002716:	f77f af6b 	ble.w	80025f0 <SaveDataToCSV+0x100>
        }
    }
    char msg2[] = "End\n\r";
 800271a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800271e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <SaveDataToCSV+0x2a8>)
 8002724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002728:	6018      	str	r0, [r3, #0]
 800272a:	3304      	adds	r3, #4
 800272c:	8019      	strh	r1, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 800272e:	f107 0320 	add.w	r3, r7, #32
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd fdcc 	bl	80002d0 <strlen>
 8002738:	4603      	mov	r3, r0
 800273a:	b29a      	uxth	r2, r3
 800273c:	f107 0120 	add.w	r1, r7, #32
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	480d      	ldr	r0, [pc, #52]	; (800277c <SaveDataToCSV+0x28c>)
 8002746:	f009 ffc1 	bl	800c6cc <HAL_UART_Transmit>

    /* Close the open CSV file */
    f_close(&SDFile);
 800274a:	4810      	ldr	r0, [pc, #64]	; (800278c <SaveDataToCSV+0x29c>)
 800274c:	f00d fe01 	bl	8010352 <f_close>

    /* Unmount SD Card */
    f_mount(NULL, (TCHAR const*)SDPath, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	490b      	ldr	r1, [pc, #44]	; (8002780 <SaveDataToCSV+0x290>)
 8002754:	2000      	movs	r0, #0
 8002756:	f00d fa05 	bl	800fb64 <f_mount>
    IndicationEtatsParLedRGB(ExtinctionRGB);
 800275a:	2001      	movs	r0, #1
 800275c:	f000 f956 	bl	8002a0c <IndicationEtatsParLedRGB>
    //FATFS_UnLinkDriver(SDPath);


    //HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);

    IndicationEtatsParLedRGB(ExtinctionRGB);
 8002760:	2001      	movs	r0, #1
 8002762:	f000 f953 	bl	8002a0c <IndicationEtatsParLedRGB>
    BSP_LCD_DisplayOn();
 8002766:	f003 f819 	bl	800579c <BSP_LCD_DisplayOn>
    return FR_OK; /* Function completed successfully */
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	f507 7729 	add.w	r7, r7, #676	; 0x2a4
 8002772:	46bd      	mov	sp, r7
 8002774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002778:	08015a90 	.word	0x08015a90
 800277c:	200006ac 	.word	0x200006ac
 8002780:	20000984 	.word	0x20000984
 8002784:	20000988 	.word	0x20000988
 8002788:	08015a0c 	.word	0x08015a0c
 800278c:	20000bb8 	.word	0x20000bb8
 8002790:	08015a18 	.word	0x08015a18
 8002794:	08015a78 	.word	0x08015a78
 8002798:	08015a98 	.word	0x08015a98

0800279c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027a2:	463b      	mov	r3, r7
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <MX_ADC3_Init+0x98>)
 80027b0:	4a21      	ldr	r2, [pc, #132]	; (8002838 <MX_ADC3_Init+0x9c>)
 80027b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <MX_ADC3_Init+0x98>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <MX_ADC3_Init+0x98>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <MX_ADC3_Init+0x98>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <MX_ADC3_Init+0x98>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <MX_ADC3_Init+0x98>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <MX_ADC3_Init+0x98>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <MX_ADC3_Init+0x98>)
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <MX_ADC3_Init+0xa0>)
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <MX_ADC3_Init+0x98>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <MX_ADC3_Init+0x98>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <MX_ADC3_Init+0x98>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <MX_ADC3_Init+0x98>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80027fa:	480e      	ldr	r0, [pc, #56]	; (8002834 <MX_ADC3_Init+0x98>)
 80027fc:	f003 ff7e 	bl	80066fc <HAL_ADC_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002806:	f001 faff 	bl	8003e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800280a:	2300      	movs	r3, #0
 800280c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800280e:	2301      	movs	r3, #1
 8002810:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002816:	463b      	mov	r3, r7
 8002818:	4619      	mov	r1, r3
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <MX_ADC3_Init+0x98>)
 800281c:	f004 f88e 	bl	800693c <HAL_ADC_ConfigChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002826:	f001 faef 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000021c 	.word	0x2000021c
 8002838:	40012200 	.word	0x40012200
 800283c:	0f000001 	.word	0x0f000001

08002840 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <HAL_ADC_MspInit+0x74>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d123      	bne.n	80028aa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_ADC_MspInit+0x78>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_ADC_MspInit+0x78>)
 8002868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_ADC_MspInit+0x78>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_ADC_MspInit+0x78>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_ADC_MspInit+0x78>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_ADC_MspInit+0x78>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002892:	2301      	movs	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002896:	2303      	movs	r3, #3
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	4805      	ldr	r0, [pc, #20]	; (80028bc <HAL_ADC_MspInit+0x7c>)
 80028a6:	f005 fa3b 	bl	8007d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40012200 	.word	0x40012200
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020000 	.word	0x40020000

080028c0 <GET_Asignal_direction_sensor>:
#include <stdio.h>
#include <string.h>



uint16_t GET_Asignal_direction_sensor(){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
	uint16_t adc;
	HAL_ADC_Start(&hadc3);
 80028c6:	4806      	ldr	r0, [pc, #24]	; (80028e0 <GET_Asignal_direction_sensor+0x20>)
 80028c8:	f003 ff5c 	bl	8006784 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc3);
 80028cc:	4804      	ldr	r0, [pc, #16]	; (80028e0 <GET_Asignal_direction_sensor+0x20>)
 80028ce:	f004 f827 	bl	8006920 <HAL_ADC_GetValue>
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
	return adc;
 80028d6:	88fb      	ldrh	r3, [r7, #6]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	2000021c 	.word	0x2000021c

080028e4 <Get_direction_vent>:
		HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		return;
	}
}

char* Get_direction_vent(){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
	uint16_t signal = GET_Asignal_direction_sensor();
 80028ea:	f7ff ffe9 	bl	80028c0 <GET_Asignal_direction_sensor>
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
	char* msg;
	if((signal <= 768)&&(signal > 256)){
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f8:	d80c      	bhi.n	8002914 <Get_direction_vent+0x30>
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002900:	d908      	bls.n	8002914 <Get_direction_vent+0x30>
		strcpy((char*)msg, "Nord-Est");
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	4939      	ldr	r1, [pc, #228]	; (80029ec <Get_direction_vent+0x108>)
 8002906:	461a      	mov	r2, r3
 8002908:	460b      	mov	r3, r1
 800290a:	cb03      	ldmia	r3!, {r0, r1}
 800290c:	6010      	str	r0, [r2, #0]
 800290e:	6051      	str	r1, [r2, #4]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	7213      	strb	r3, [r2, #8]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);

	}
	if((signal <= 1280)&&(signal > 768)){
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800291a:	d807      	bhi.n	800292c <Get_direction_vent+0x48>
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002922:	d903      	bls.n	800292c <Get_direction_vent+0x48>
		strcpy((char*)msg, "Est");
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4a32      	ldr	r2, [pc, #200]	; (80029f0 <Get_direction_vent+0x10c>)
 8002928:	6810      	ldr	r0, [r2, #0]
 800292a:	6018      	str	r0, [r3, #0]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 1792)&&(signal > 1280)){
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002932:	d80a      	bhi.n	800294a <Get_direction_vent+0x66>
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800293a:	d906      	bls.n	800294a <Get_direction_vent+0x66>
		strcpy((char*)msg, "Sud-Est");
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	492d      	ldr	r1, [pc, #180]	; (80029f4 <Get_direction_vent+0x110>)
 8002940:	461a      	mov	r2, r3
 8002942:	460b      	mov	r3, r1
 8002944:	cb03      	ldmia	r3!, {r0, r1}
 8002946:	6010      	str	r0, [r2, #0]
 8002948:	6051      	str	r1, [r2, #4]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 2304)&&(signal > 1792)){
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002950:	d807      	bhi.n	8002962 <Get_direction_vent+0x7e>
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002958:	d903      	bls.n	8002962 <Get_direction_vent+0x7e>
		strcpy((char*)msg, "Sud");
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <Get_direction_vent+0x114>)
 800295e:	6810      	ldr	r0, [r2, #0]
 8002960:	6018      	str	r0, [r3, #0]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 2816)&&(signal > 2304)){
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002968:	d80c      	bhi.n	8002984 <Get_direction_vent+0xa0>
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002970:	d908      	bls.n	8002984 <Get_direction_vent+0xa0>
		strcpy((char*)msg, "Sud-Ouest");
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4921      	ldr	r1, [pc, #132]	; (80029fc <Get_direction_vent+0x118>)
 8002976:	461a      	mov	r2, r3
 8002978:	460b      	mov	r3, r1
 800297a:	cb03      	ldmia	r3!, {r0, r1}
 800297c:	6010      	str	r0, [r2, #0]
 800297e:	6051      	str	r1, [r2, #4]
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	8113      	strh	r3, [r2, #8]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 3328)&&(signal > 2816)){
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 800298a:	d809      	bhi.n	80029a0 <Get_direction_vent+0xbc>
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002992:	d905      	bls.n	80029a0 <Get_direction_vent+0xbc>
		strcpy((char*)msg, "Ouest");
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <Get_direction_vent+0x11c>)
 8002998:	6810      	ldr	r0, [r2, #0]
 800299a:	6018      	str	r0, [r3, #0]
 800299c:	8892      	ldrh	r2, [r2, #4]
 800299e:	809a      	strh	r2, [r3, #4]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 3840)&&(signal > 3328)){
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029a6:	d809      	bhi.n	80029bc <Get_direction_vent+0xd8>
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80029ae:	d905      	bls.n	80029bc <Get_direction_vent+0xd8>
		strcpy((char*)msg, "Nord");
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <Get_direction_vent+0x120>)
 80029b4:	6810      	ldr	r0, [r2, #0]
 80029b6:	6018      	str	r0, [r3, #0]
 80029b8:	7912      	ldrb	r2, [r2, #4]
 80029ba:	711a      	strb	r2, [r3, #4]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	if((signal <= 4095)&&(signal > 3840)){
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d20e      	bcs.n	80029e2 <Get_direction_vent+0xfe>
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029ca:	d90a      	bls.n	80029e2 <Get_direction_vent+0xfe>
		strcpy((char*)msg, "Nord-Ouest");
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	490e      	ldr	r1, [pc, #56]	; (8002a08 <Get_direction_vent+0x124>)
 80029d0:	461a      	mov	r2, r3
 80029d2:	460b      	mov	r3, r1
 80029d4:	cb03      	ldmia	r3!, {r0, r1}
 80029d6:	6010      	str	r0, [r2, #0]
 80029d8:	6051      	str	r1, [r2, #4]
 80029da:	8819      	ldrh	r1, [r3, #0]
 80029dc:	789b      	ldrb	r3, [r3, #2]
 80029de:	8111      	strh	r1, [r2, #8]
 80029e0:	7293      	strb	r3, [r2, #10]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		//return;
	}
	return msg;
 80029e2:	683b      	ldr	r3, [r7, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	08015af4 	.word	0x08015af4
 80029f0:	08015b00 	.word	0x08015b00
 80029f4:	08015b04 	.word	0x08015b04
 80029f8:	08015b0c 	.word	0x08015b0c
 80029fc:	08015b10 	.word	0x08015b10
 8002a00:	08015b1c 	.word	0x08015b1c
 8002a04:	08015b24 	.word	0x08015b24
 8002a08:	08015b2c 	.word	0x08015b2c

08002a0c <IndicationEtatsParLedRGB>:
#include "controle_led_rgb.h"


// Fonction pour gérer l'état des LEDs
void IndicationEtatsParLedRGB(EtatLed etat) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
    switch (etat) {
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d83f      	bhi.n	8002a9c <IndicationEtatsParLedRGB+0x90>
 8002a1c:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <IndicationEtatsParLedRGB+0x18>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a69 	.word	0x08002a69
 8002a2c:	08002a4f 	.word	0x08002a4f
 8002a30:	08002a83 	.word	0x08002a83
        case PriseDeMesure:
            // Allumer le blanc (Rouge + Vert, Bleu non contrôlable)
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_SET); // Vert ON
 8002a34:	2201      	movs	r2, #1
 8002a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a3a:	481b      	ldr	r0, [pc, #108]	; (8002aa8 <IndicationEtatsParLedRGB+0x9c>)
 8002a3c:	f005 fb34 	bl	80080a8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_SET); // Rouge ON
 8002a40:	2201      	movs	r2, #1
 8002a42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a46:	4818      	ldr	r0, [pc, #96]	; (8002aa8 <IndicationEtatsParLedRGB+0x9c>)
 8002a48:	f005 fb2e 	bl	80080a8 <HAL_GPIO_WritePin>
            break;
 8002a4c:	e027      	b.n	8002a9e <IndicationEtatsParLedRGB+0x92>

        case TransfertVersSD:
            // Allumer le Magenta (Rouge, Bleu)
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_RESET); // Vert OFF
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a54:	4814      	ldr	r0, [pc, #80]	; (8002aa8 <IndicationEtatsParLedRGB+0x9c>)
 8002a56:	f005 fb27 	bl	80080a8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_SET); // Rouge ON
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a60:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <IndicationEtatsParLedRGB+0x9c>)
 8002a62:	f005 fb21 	bl	80080a8 <HAL_GPIO_WritePin>
            break;
 8002a66:	e01a      	b.n	8002a9e <IndicationEtatsParLedRGB+0x92>

        case ExtinctionRGB:
            // Éteindre toutes les couleurs (sauf Bleu)
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_RESET); // Vert OFF
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a6e:	480e      	ldr	r0, [pc, #56]	; (8002aa8 <IndicationEtatsParLedRGB+0x9c>)
 8002a70:	f005 fb1a 	bl	80080a8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_RESET); // Rouge OFF
 8002a74:	2200      	movs	r2, #0
 8002a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a7a:	480b      	ldr	r0, [pc, #44]	; (8002aa8 <IndicationEtatsParLedRGB+0x9c>)
 8002a7c:	f005 fb14 	bl	80080a8 <HAL_GPIO_WritePin>
            break;
 8002a80:	e00d      	b.n	8002a9e <IndicationEtatsParLedRGB+0x92>

        case Navigation:
            // Allumer le Cyan (Vert, Bleu)
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_SET); // Vert ON
 8002a82:	2201      	movs	r2, #1
 8002a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a88:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <IndicationEtatsParLedRGB+0x9c>)
 8002a8a:	f005 fb0d 	bl	80080a8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_RESET); // Rouge OFF
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a94:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <IndicationEtatsParLedRGB+0x9c>)
 8002a96:	f005 fb07 	bl	80080a8 <HAL_GPIO_WritePin>
            break;
 8002a9a:	e000      	b.n	8002a9e <IndicationEtatsParLedRGB+0x92>

        default:
            // Gestion d'état non défini
            break;
 8002a9c:	bf00      	nop
    }
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021c00 	.word	0x40021c00

08002aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <MX_DMA_Init+0x48>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a0f      	ldr	r2, [pc, #60]	; (8002af4 <MX_DMA_Init+0x48>)
 8002ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <MX_DMA_Init+0x48>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	203b      	movs	r0, #59	; 0x3b
 8002ad0:	f004 fa5f 	bl	8006f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002ad4:	203b      	movs	r0, #59	; 0x3b
 8002ad6:	f004 fa78 	bl	8006fca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2045      	movs	r0, #69	; 0x45
 8002ae0:	f004 fa57 	bl	8006f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002ae4:	2045      	movs	r0, #69	; 0x45
 8002ae6:	f004 fa70 	bl	8006fca <HAL_NVIC_EnableIRQ>

}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002afe:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <MX_DMA2D_Init+0x60>)
 8002b00:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002b2c:	4809      	ldr	r0, [pc, #36]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b2e:	f004 fe6b 	bl	8007808 <HAL_DMA2D_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002b38:	f001 f966 	bl	8003e08 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <MX_DMA2D_Init+0x5c>)
 8002b40:	f004 ffc0 	bl	8007ac4 <HAL_DMA2D_ConfigLayer>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002b4a:	f001 f95d 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000264 	.word	0x20000264
 8002b58:	4002b000 	.word	0x4002b000

08002b5c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_DMA2D_MspInit+0x38>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d10b      	bne.n	8002b86 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_DMA2D_MspInit+0x3c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <HAL_DMA2D_MspInit+0x3c>)
 8002b74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_DMA2D_MspInit+0x3c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	4002b000 	.word	0x4002b000
 8002b98:	40023800 	.word	0x40023800

08002b9c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
 8002bb0:	615a      	str	r2, [r3, #20]
 8002bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002bb4:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <MX_FMC_Init+0x98>)
 8002bb8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bc8:	2204      	movs	r2, #4
 8002bca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002bcc:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bce:	2210      	movs	r2, #16
 8002bd0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bd2:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bd4:	2240      	movs	r2, #64	; 0x40
 8002bd6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002bd8:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <MX_FMC_Init+0x94>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <MX_FMC_Init+0x94>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <MX_FMC_Init+0x94>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002c02:	2310      	movs	r3, #16
 8002c04:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002c06:	2310      	movs	r3, #16
 8002c08:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8002c0e:	2310      	movs	r3, #16
 8002c10:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4806      	ldr	r0, [pc, #24]	; (8002c30 <MX_FMC_Init+0x94>)
 8002c18:	f008 fd3e 	bl	800b698 <HAL_SDRAM_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002c22:	f001 f8f1 	bl	8003e08 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200002a4 	.word	0x200002a4
 8002c34:	a0000140 	.word	0xa0000140

08002c38 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002c4c:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <HAL_FMC_MspInit+0xe4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d15e      	bne.n	8002d12 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8002c54:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <HAL_FMC_MspInit+0xe4>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_FMC_MspInit+0xe8>)
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <HAL_FMC_MspInit+0xe8>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6393      	str	r3, [r2, #56]	; 0x38
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_FMC_MspInit+0xe8>)
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8002c72:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c84:	230c      	movs	r3, #12
 8002c86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4825      	ldr	r0, [pc, #148]	; (8002d24 <HAL_FMC_MspInit+0xec>)
 8002c8e:	f005 f847 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8002c92:	f248 1333 	movw	r3, #33075	; 0x8133
 8002c96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ca4:	230c      	movs	r3, #12
 8002ca6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	4619      	mov	r1, r3
 8002cac:	481e      	ldr	r0, [pc, #120]	; (8002d28 <HAL_FMC_MspInit+0xf0>)
 8002cae:	f005 f837 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002cb2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002cb6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4817      	ldr	r0, [pc, #92]	; (8002d2c <HAL_FMC_MspInit+0xf4>)
 8002cce:	f005 f827 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002cd2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002cd6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4810      	ldr	r0, [pc, #64]	; (8002d30 <HAL_FMC_MspInit+0xf8>)
 8002cee:	f005 f817 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8002cf2:	232c      	movs	r3, #44	; 0x2c
 8002cf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d02:	230c      	movs	r3, #12
 8002d04:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	480a      	ldr	r0, [pc, #40]	; (8002d34 <HAL_FMC_MspInit+0xfc>)
 8002d0c:	f005 f808 	bl	8007d20 <HAL_GPIO_Init>
 8002d10:	e000      	b.n	8002d14 <HAL_FMC_MspInit+0xdc>
    return;
 8002d12:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200002d8 	.word	0x200002d8
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40020c00 	.word	0x40020c00
 8002d30:	40021400 	.word	0x40021400
 8002d34:	40021c00 	.word	0x40021c00

08002d38 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002d40:	f7ff ff7a 	bl	8002c38 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b090      	sub	sp, #64	; 0x40
 8002d50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d62:	4ba6      	ldr	r3, [pc, #664]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4aa5      	ldr	r2, [pc, #660]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002d68:	f043 0310 	orr.w	r3, r3, #16
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4ba3      	ldr	r3, [pc, #652]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d7a:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a9f      	ldr	r2, [pc, #636]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b9d      	ldr	r3, [pc, #628]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d92:	4b9a      	ldr	r3, [pc, #616]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a99      	ldr	r2, [pc, #612]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b97      	ldr	r3, [pc, #604]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002daa:	4b94      	ldr	r3, [pc, #592]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a93      	ldr	r2, [pc, #588]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b91      	ldr	r3, [pc, #580]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc2:	4b8e      	ldr	r3, [pc, #568]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a8d      	ldr	r2, [pc, #564]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b8b      	ldr	r3, [pc, #556]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a87      	ldr	r2, [pc, #540]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b85      	ldr	r3, [pc, #532]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002df2:	4b82      	ldr	r3, [pc, #520]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a81      	ldr	r2, [pc, #516]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b7f      	ldr	r3, [pc, #508]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e0a:	4b7c      	ldr	r3, [pc, #496]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a7b      	ldr	r2, [pc, #492]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a75      	ldr	r2, [pc, #468]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e3a:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a6f      	ldr	r2, [pc, #444]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e40:	f043 0320 	orr.w	r3, r3, #32
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e52:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <MX_GPIO_Init+0x2b0>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002e70:	4863      	ldr	r0, [pc, #396]	; (8003000 <MX_GPIO_Init+0x2b4>)
 8002e72:	f005 f919 	bl	80080a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE3 PE2 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8002e76:	237c      	movs	r3, #124	; 0x7c
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e86:	4619      	mov	r1, r3
 8002e88:	485e      	ldr	r0, [pc, #376]	; (8003004 <MX_GPIO_Init+0x2b8>)
 8002e8a:	f004 ff49 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 8002e8e:	f247 238c 	movw	r3, #29324	; 0x728c
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e94:	2303      	movs	r3, #3
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4859      	ldr	r0, [pc, #356]	; (8003008 <MX_GPIO_Init+0x2bc>)
 8002ea4:	f004 ff3c 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB3 PB6
                           PB13 PB12 PB2 PB10
                           PB1 PB0 PB11 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_6
 8002ea8:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4853      	ldr	r0, [pc, #332]	; (800300c <MX_GPIO_Init+0x2c0>)
 8002ebe:	f004 ff2f 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8002ec2:	f643 03f0 	movw	r3, #14576	; 0x38f0
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	484e      	ldr	r0, [pc, #312]	; (8003010 <MX_GPIO_Init+0x2c4>)
 8002ed8:	f004 ff22 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ3
                           PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8002edc:	f64f 73df 	movw	r3, #65503	; 0xffdf
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4848      	ldr	r0, [pc, #288]	; (8003014 <MX_GPIO_Init+0x2c8>)
 8002ef2:	f004 ff15 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 8002ef6:	f64c 63ff 	movw	r3, #52991	; 0xceff
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002efc:	2303      	movs	r3, #3
 8002efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4843      	ldr	r0, [pc, #268]	; (8003018 <MX_GPIO_Init+0x2cc>)
 8002f0c:	f004 ff08 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI2 PI7
                           PI6 PI12 PI13 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7
 8002f10:	f24b 13cc 	movw	r3, #45516	; 0xb1cc
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f16:	2303      	movs	r3, #3
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f22:	4619      	mov	r1, r3
 8002f24:	483d      	ldr	r0, [pc, #244]	; (800301c <MX_GPIO_Init+0x2d0>)
 8002f26:	f004 fefb 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4836      	ldr	r0, [pc, #216]	; (8003018 <MX_GPIO_Init+0x2cc>)
 8002f40:	f004 feee 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK4 PK3 PK1 PK2
                           PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2
 8002f44:	231f      	movs	r3, #31
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f54:	4619      	mov	r1, r3
 8002f56:	4832      	ldr	r0, [pc, #200]	; (8003020 <MX_GPIO_Init+0x2d4>)
 8002f58:	f004 fee2 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA1 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
 8002f5c:	f240 43fe 	movw	r3, #1278	; 0x4fe
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f62:	2303      	movs	r3, #3
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f6e:	4619      	mov	r1, r3
 8002f70:	482c      	ldr	r0, [pc, #176]	; (8003024 <MX_GPIO_Init+0x2d8>)
 8002f72:	f004 fed5 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH4 PH12 PH7
                           PH6 PH8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_7
 8002f76:	f245 13d0 	movw	r3, #20944	; 0x51d0
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	481d      	ldr	r0, [pc, #116]	; (8003000 <MX_GPIO_Init+0x2b4>)
 8002f8c:	f004 fec8 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	481d      	ldr	r0, [pc, #116]	; (800301c <MX_GPIO_Init+0x2d0>)
 8002fa8:	f004 feba 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8002fac:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4819      	ldr	r0, [pc, #100]	; (8003028 <MX_GPIO_Init+0x2dc>)
 8002fc2:	f004 fead 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002fc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4808      	ldr	r0, [pc, #32]	; (8003000 <MX_GPIO_Init+0x2b4>)
 8002fe0:	f004 fe9e 	bl	8007d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2028      	movs	r0, #40	; 0x28
 8002fea:	f003 ffd2 	bl	8006f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fee:	2028      	movs	r0, #40	; 0x28
 8002ff0:	f003 ffeb 	bl	8006fca <HAL_NVIC_EnableIRQ>

}
 8002ff4:	bf00      	nop
 8002ff6:	3740      	adds	r7, #64	; 0x40
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40021c00 	.word	0x40021c00
 8003004:	40021000 	.word	0x40021000
 8003008:	40021800 	.word	0x40021800
 800300c:	40020400 	.word	0x40020400
 8003010:	40020c00 	.word	0x40020c00
 8003014:	40022400 	.word	0x40022400
 8003018:	40020800 	.word	0x40020800
 800301c:	40022000 	.word	0x40022000
 8003020:	40022800 	.word	0x40022800
 8003024:	40020000 	.word	0x40020000
 8003028:	40021400 	.word	0x40021400

0800302c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <MX_I2C1_Init+0x74>)
 8003032:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <MX_I2C1_Init+0x78>)
 8003034:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00302F47;
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <MX_I2C1_Init+0x74>)
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <MX_I2C1_Init+0x7c>)
 800303a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800303c:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <MX_I2C1_Init+0x74>)
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <MX_I2C1_Init+0x74>)
 8003044:	2201      	movs	r2, #1
 8003046:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <MX_I2C1_Init+0x74>)
 800304a:	2200      	movs	r2, #0
 800304c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <MX_I2C1_Init+0x74>)
 8003050:	2200      	movs	r2, #0
 8003052:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <MX_I2C1_Init+0x74>)
 8003056:	2200      	movs	r2, #0
 8003058:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <MX_I2C1_Init+0x74>)
 800305c:	2200      	movs	r2, #0
 800305e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <MX_I2C1_Init+0x74>)
 8003062:	2200      	movs	r2, #0
 8003064:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003066:	480e      	ldr	r0, [pc, #56]	; (80030a0 <MX_I2C1_Init+0x74>)
 8003068:	f005 f85c 	bl	8008124 <HAL_I2C_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003072:	f000 fec9 	bl	8003e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003076:	2100      	movs	r1, #0
 8003078:	4809      	ldr	r0, [pc, #36]	; (80030a0 <MX_I2C1_Init+0x74>)
 800307a:	f005 fdab 	bl	8008bd4 <HAL_I2CEx_ConfigAnalogFilter>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003084:	f000 fec0 	bl	8003e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003088:	2100      	movs	r1, #0
 800308a:	4805      	ldr	r0, [pc, #20]	; (80030a0 <MX_I2C1_Init+0x74>)
 800308c:	f005 fded 	bl	8008c6a <HAL_I2CEx_ConfigDigitalFilter>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003096:	f000 feb7 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200002dc 	.word	0x200002dc
 80030a4:	40005400 	.word	0x40005400
 80030a8:	00302f47 	.word	0x00302f47

080030ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b0aa      	sub	sp, #168	; 0xa8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	2284      	movs	r2, #132	; 0x84
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00e fe42 	bl	8011d56 <memset>
  if(i2cHandle->Instance==I2C1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <HAL_I2C_MspInit+0xb4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d13c      	bne.n	8003156 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e6:	f107 0310 	add.w	r3, r7, #16
 80030ea:	4618      	mov	r0, r3
 80030ec:	f006 fdbc 	bl	8009c68 <HAL_RCCEx_PeriphCLKConfig>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030f6:	f000 fe87 	bl	8003e08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <HAL_I2C_MspInit+0xb8>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_I2C_MspInit+0xb8>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_I2C_MspInit+0xb8>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003112:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800311a:	2312      	movs	r3, #18
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003126:	2303      	movs	r3, #3
 8003128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800312c:	2304      	movs	r3, #4
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003132:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003136:	4619      	mov	r1, r3
 8003138:	480b      	ldr	r0, [pc, #44]	; (8003168 <HAL_I2C_MspInit+0xbc>)
 800313a:	f004 fdf1 	bl	8007d20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_I2C_MspInit+0xb8>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	4a08      	ldr	r2, [pc, #32]	; (8003164 <HAL_I2C_MspInit+0xb8>)
 8003144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003148:	6413      	str	r3, [r2, #64]	; 0x40
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_I2C_MspInit+0xb8>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003156:	bf00      	nop
 8003158:	37a8      	adds	r7, #168	; 0xa8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40005400 	.word	0x40005400
 8003164:	40023800 	.word	0x40023800
 8003168:	40020400 	.word	0x40020400

0800316c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b09a      	sub	sp, #104	; 0x68
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003172:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003176:	2234      	movs	r2, #52	; 0x34
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f00e fdeb 	bl	8011d56 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003180:	463b      	mov	r3, r7
 8003182:	2234      	movs	r2, #52	; 0x34
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f00e fde5 	bl	8011d56 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800318c:	4b4e      	ldr	r3, [pc, #312]	; (80032c8 <MX_LTDC_Init+0x15c>)
 800318e:	4a4f      	ldr	r2, [pc, #316]	; (80032cc <MX_LTDC_Init+0x160>)
 8003190:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003192:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <MX_LTDC_Init+0x15c>)
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003198:	4b4b      	ldr	r3, [pc, #300]	; (80032c8 <MX_LTDC_Init+0x15c>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800319e:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80031a4:	4b48      	ldr	r3, [pc, #288]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80031b0:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031b2:	2203      	movs	r2, #3
 80031b4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80031b6:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031b8:	220e      	movs	r2, #14
 80031ba:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80031bc:	4b42      	ldr	r3, [pc, #264]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031be:	2205      	movs	r2, #5
 80031c0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031c4:	f240 228e 	movw	r2, #654	; 0x28e
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80031ca:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031cc:	f240 12e5 	movw	r2, #485	; 0x1e5
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80031d2:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031d4:	f44f 7225 	mov.w	r2, #660	; 0x294
 80031d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031dc:	f240 12e7 	movw	r2, #487	; 0x1e7
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80031ea:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80031f2:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80031fa:	4833      	ldr	r0, [pc, #204]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80031fc:	f005 fd82 	bl	8008d04 <HAL_LTDC_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003206:	f000 fdff 	bl	8003e08 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800321a:	2300      	movs	r3, #0
 800321c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800322a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800322c:	2305      	movs	r3, #5
 800322e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800324e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003252:	2200      	movs	r2, #0
 8003254:	4619      	mov	r1, r3
 8003256:	481c      	ldr	r0, [pc, #112]	; (80032c8 <MX_LTDC_Init+0x15c>)
 8003258:	f005 fe24 	bl	8008ea4 <HAL_LTDC_ConfigLayer>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003262:	f000 fdd1 	bl	8003e08 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003286:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003288:	2305      	movs	r3, #5
 800328a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80032aa:	463b      	mov	r3, r7
 80032ac:	2201      	movs	r2, #1
 80032ae:	4619      	mov	r1, r3
 80032b0:	4805      	ldr	r0, [pc, #20]	; (80032c8 <MX_LTDC_Init+0x15c>)
 80032b2:	f005 fdf7 	bl	8008ea4 <HAL_LTDC_ConfigLayer>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80032bc:	f000 fda4 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80032c0:	bf00      	nop
 80032c2:	3768      	adds	r7, #104	; 0x68
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000330 	.word	0x20000330
 80032cc:	40016800 	.word	0x40016800

080032d0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0b0      	sub	sp, #192	; 0xc0
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ec:	2284      	movs	r2, #132	; 0x84
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f00e fd30 	bl	8011d56 <memset>
  if(ltdcHandle->Instance==LTDC)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a96      	ldr	r2, [pc, #600]	; (8003554 <HAL_LTDC_MspInit+0x284>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	f040 8125 	bne.w	800354c <HAL_LTDC_MspInit+0x27c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003302:	2308      	movs	r3, #8
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003306:	2332      	movs	r3, #50	; 0x32
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800330a:	2302      	movs	r3, #2
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800330e:	2302      	movs	r3, #2
 8003310:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003312:	2300      	movs	r3, #0
 8003314:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800331a:	2300      	movs	r3, #0
 800331c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800331e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003322:	4618      	mov	r0, r3
 8003324:	f006 fca0 	bl	8009c68 <HAL_RCCEx_PeriphCLKConfig>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800332e:	f000 fd6b 	bl	8003e08 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003332:	4b89      	ldr	r3, [pc, #548]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a88      	ldr	r2, [pc, #544]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003338:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b86      	ldr	r3, [pc, #536]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800334a:	4b83      	ldr	r3, [pc, #524]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a82      	ldr	r2, [pc, #520]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b80      	ldr	r3, [pc, #512]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	623b      	str	r3, [r7, #32]
 8003360:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	4b7d      	ldr	r3, [pc, #500]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a7c      	ldr	r2, [pc, #496]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b7a      	ldr	r3, [pc, #488]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800337a:	4b77      	ldr	r3, [pc, #476]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a76      	ldr	r2, [pc, #472]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b74      	ldr	r3, [pc, #464]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003392:	4b71      	ldr	r3, [pc, #452]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4a70      	ldr	r2, [pc, #448]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 8003398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
 800339e:	4b6e      	ldr	r3, [pc, #440]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033aa:	4b6b      	ldr	r3, [pc, #428]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a6a      	ldr	r2, [pc, #424]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033b0:	f043 0308 	orr.w	r3, r3, #8
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b68      	ldr	r3, [pc, #416]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033c2:	4b65      	ldr	r3, [pc, #404]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a64      	ldr	r2, [pc, #400]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033da:	4b5f      	ldr	r3, [pc, #380]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a5e      	ldr	r2, [pc, #376]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b5c      	ldr	r3, [pc, #368]	; (8003558 <HAL_LTDC_MspInit+0x288>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 80033f2:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80033f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800340c:	230e      	movs	r3, #14
 800340e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003412:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003416:	4619      	mov	r1, r3
 8003418:	4850      	ldr	r0, [pc, #320]	; (800355c <HAL_LTDC_MspInit+0x28c>)
 800341a:	f004 fc81 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800341e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003438:	230e      	movs	r3, #14
 800343a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003442:	4619      	mov	r1, r3
 8003444:	4846      	ldr	r0, [pc, #280]	; (8003560 <HAL_LTDC_MspInit+0x290>)
 8003446:	f004 fc6b 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 800344a:	f244 6333 	movw	r3, #17971	; 0x4633
 800344e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003464:	230e      	movs	r3, #14
 8003466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800346a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800346e:	4619      	mov	r1, r3
 8003470:	483c      	ldr	r0, [pc, #240]	; (8003564 <HAL_LTDC_MspInit+0x294>)
 8003472:	f004 fc55 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003476:	23e0      	movs	r3, #224	; 0xe0
 8003478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800348e:	230e      	movs	r3, #14
 8003490:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003494:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003498:	4619      	mov	r1, r3
 800349a:	4833      	ldr	r0, [pc, #204]	; (8003568 <HAL_LTDC_MspInit+0x298>)
 800349c:	f004 fc40 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034ba:	2309      	movs	r3, #9
 80034bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034c4:	4619      	mov	r1, r3
 80034c6:	4825      	ldr	r0, [pc, #148]	; (800355c <HAL_LTDC_MspInit+0x28c>)
 80034c8:	f004 fc2a 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034cc:	2308      	movs	r3, #8
 80034ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034e4:	230e      	movs	r3, #14
 80034e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034ee:	4619      	mov	r1, r3
 80034f0:	481e      	ldr	r0, [pc, #120]	; (800356c <HAL_LTDC_MspInit+0x29c>)
 80034f2:	f004 fc15 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 80034f6:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 80034fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003510:	230e      	movs	r3, #14
 8003512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003516:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800351a:	4619      	mov	r1, r3
 800351c:	4814      	ldr	r0, [pc, #80]	; (8003570 <HAL_LTDC_MspInit+0x2a0>)
 800351e:	f004 fbff 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003522:	2320      	movs	r3, #32
 8003524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800353a:	230e      	movs	r3, #14
 800353c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003540:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003544:	4619      	mov	r1, r3
 8003546:	480b      	ldr	r0, [pc, #44]	; (8003574 <HAL_LTDC_MspInit+0x2a4>)
 8003548:	f004 fbea 	bl	8007d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800354c:	bf00      	nop
 800354e:	37c0      	adds	r7, #192	; 0xc0
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40016800 	.word	0x40016800
 8003558:	40023800 	.word	0x40023800
 800355c:	40021800 	.word	0x40021800
 8003560:	40020000 	.word	0x40020000
 8003564:	40022000 	.word	0x40022000
 8003568:	40022800 	.word	0x40022800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021c00 	.word	0x40021c00
 8003574:	40022400 	.word	0x40022400

08003578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b0c9      	sub	sp, #292	; 0x124
 800357c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */


	  int taille = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  float* H;
	  char** D;
	  float* P;
	  float* V;
	  float* Pl;
	  char heures[24][6] = {"00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00",
 8003584:	4ac5      	ldr	r2, [pc, #788]	; (800389c <main+0x324>)
 8003586:	f107 0318 	add.w	r3, r7, #24
 800358a:	4611      	mov	r1, r2
 800358c:	2290      	movs	r2, #144	; 0x90
 800358e:	4618      	mov	r0, r3
 8003590:	f00e fc79 	bl	8011e86 <memcpy>
	                        "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"};
	  char temp[20] = "No where";
 8003594:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003598:	f5a3 7486 	sub.w	r4, r3, #268	; 0x10c
 800359c:	4ac0      	ldr	r2, [pc, #768]	; (80038a0 <main+0x328>)
 800359e:	4623      	mov	r3, r4
 80035a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80035a2:	c303      	stmia	r3!, {r0, r1}
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	f104 0309 	add.w	r3, r4, #9
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	f8c3 2007 	str.w	r2, [r3, #7]
	  T = (float*)malloc(24 * sizeof(float));
 80035b4:	2060      	movs	r0, #96	; 0x60
 80035b6:	f00d fb7f 	bl	8010cb8 <malloc>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  H = (float*)malloc(24 * sizeof(float));
 80035c0:	2060      	movs	r0, #96	; 0x60
 80035c2:	f00d fb79 	bl	8010cb8 <malloc>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  D = (char**)malloc(24 * sizeof(char*));
 80035cc:	2060      	movs	r0, #96	; 0x60
 80035ce:	f00d fb73 	bl	8010cb8 <malloc>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  P = (float*)malloc(24 * sizeof(float));
 80035d8:	2060      	movs	r0, #96	; 0x60
 80035da:	f00d fb6d 	bl	8010cb8 <malloc>
 80035de:	4603      	mov	r3, r0
 80035e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  V = (float*)malloc(24 * sizeof(float));
 80035e4:	2060      	movs	r0, #96	; 0x60
 80035e6:	f00d fb67 	bl	8010cb8 <malloc>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  Pl = (float*)malloc(24 * sizeof(float));
 80035f0:	2060      	movs	r0, #96	; 0x60
 80035f2:	f00d fb61 	bl	8010cb8 <malloc>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	  // Remplir le tableau avec 24 valeurs
      for (int i = 0; i < 24; ++i) {
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003602:	e00d      	b.n	8003620 <main+0xa8>
          T[i] = 0.0;
 8003604:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800360e:	4413      	add	r3, r2
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 8003616:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800361a:	3301      	adds	r3, #1
 800361c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003620:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003624:	2b17      	cmp	r3, #23
 8003626:	dded      	ble.n	8003604 <main+0x8c>
      }
      // Remplir le tableau avec 24 valeurs
      for (int i = 0; i < 24; ++i) {
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800362e:	e00c      	b.n	800364a <main+0xd2>
          H[i] = 30.0;
 8003630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800363a:	4413      	add	r3, r2
 800363c:	4a99      	ldr	r2, [pc, #612]	; (80038a4 <main+0x32c>)
 800363e:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 8003640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003644:	3301      	adds	r3, #1
 8003646:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800364e:	2b17      	cmp	r3, #23
 8003650:	ddee      	ble.n	8003630 <main+0xb8>
      }
      // Remplir le tableau avec 24 valeurs
      for (int i = 0; i < 24; ++i) {
 8003652:	2300      	movs	r3, #0
 8003654:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003658:	e01b      	b.n	8003692 <main+0x11a>
    	  //char temp[20] = "No where";
          D[i] = (char*)malloc(50 * sizeof(char));
 800365a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003664:	18d4      	adds	r4, r2, r3
 8003666:	2032      	movs	r0, #50	; 0x32
 8003668:	f00d fb26 	bl	8010cb8 <malloc>
 800366c:	4603      	mov	r3, r0
 800366e:	6023      	str	r3, [r4, #0]
          strcpy(D[i], temp);
 8003670:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800367a:	4413      	add	r3, r2
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1d3a      	adds	r2, r7, #4
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f00e fbf7 	bl	8011e76 <strcpy>
      for (int i = 0; i < 24; ++i) {
 8003688:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800368c:	3301      	adds	r3, #1
 800368e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003692:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003696:	2b17      	cmp	r3, #23
 8003698:	dddf      	ble.n	800365a <main+0xe2>
      }

      // Remplir le tableau avec 24 valeurs
      for (int i = 0; i < 24; ++i) {
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036a0:	e00d      	b.n	80036be <main+0x146>
           P[i] = 0.0;
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80036ac:	4413      	add	r3, r2
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 80036b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b8:	3301      	adds	r3, #1
 80036ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c2:	2b17      	cmp	r3, #23
 80036c4:	dded      	ble.n	80036a2 <main+0x12a>
      }
      // Remplir le tableau avec 24 valeurs
      for (int i = 0; i < 24; ++i) {
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80036cc:	e00d      	b.n	80036ea <main+0x172>
          V[i] = 0.0;
 80036ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036d8:	4413      	add	r3, r2
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 80036e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036e4:	3301      	adds	r3, #1
 80036e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80036ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ee:	2b17      	cmp	r3, #23
 80036f0:	dded      	ble.n	80036ce <main+0x156>
      }
      float* Va = (float*)malloc(24 * sizeof(float));
 80036f2:	2060      	movs	r0, #96	; 0x60
 80036f4:	f00d fae0 	bl	8010cb8 <malloc>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

      // Remplir le tableau avec 24 valeurs
      for (int i = 0; i < 24; ++i) {
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003704:	e00d      	b.n	8003722 <main+0x1aa>
          Va[i] = 0.0;
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003710:	4413      	add	r3, r2
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	3301      	adds	r3, #1
 800371e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	2b17      	cmp	r3, #23
 8003728:	dded      	ble.n	8003706 <main+0x18e>
      }
      // Remplir le tableau avec 24 valeurs
      for (int i = 0; i < 24; ++i) {
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003730:	e00d      	b.n	800374e <main+0x1d6>
          Pl[i] = 0.0;
 8003732:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800373c:	4413      	add	r3, r2
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 24; ++i) {
 8003744:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003748:	3301      	adds	r3, #1
 800374a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800374e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003752:	2b17      	cmp	r3, #23
 8003754:	dded      	ble.n	8003732 <main+0x1ba>
      }

	  float v = 0.0;
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  float va = 0.0;
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  float Te = 5;
 8003766:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <main+0x330>)
 8003768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800376c:	f002 ff45 	bl	80065fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003770:	f000 fa28 	bl	8003bc4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003774:	f7ff faea 	bl	8002d4c <MX_GPIO_Init>
  MX_ADC3_Init();
 8003778:	f7ff f810 	bl	800279c <MX_ADC3_Init>
  MX_DMA2D_Init();
 800377c:	f7ff f9bc 	bl	8002af8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003780:	f7ff fa0c 	bl	8002b9c <MX_FMC_Init>
  MX_I2C1_Init();
 8003784:	f7ff fc52 	bl	800302c <MX_I2C1_Init>
  MX_LTDC_Init();
 8003788:	f7ff fcf0 	bl	800316c <MX_LTDC_Init>
  MX_SDMMC1_SD_Init();
 800378c:	f000 fbc8 	bl	8003f20 <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 8003790:	f000 fe74 	bl	800447c <MX_TIM1_Init>
  MX_TIM6_Init();
 8003794:	f000 ff20 	bl	80045d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003798:	f000 ff56 	bl	8004648 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800379c:	f001 f852 	bl	8004844 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80037a0:	f00a fa50 	bl	800dc44 <MX_FATFS_Init>
  MX_TIM2_Init();
 80037a4:	f000 fec4 	bl	8004530 <MX_TIM2_Init>
  MX_DMA_Init();
 80037a8:	f7ff f980 	bl	8002aac <MX_DMA_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80037ac:	f001 f926 	bl	80049fc <BSP_LCD_Init>
  MX_TIM7_Init();
 80037b0:	f000 ff4a 	bl	8004648 <MX_TIM7_Init>


  HAL_TIM_Base_Start_IT(&htim7);
 80037b4:	483d      	ldr	r0, [pc, #244]	; (80038ac <main+0x334>)
 80037b6:	f008 f857 	bl	800b868 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start_IT(&htim6);
 80037ba:	483d      	ldr	r0, [pc, #244]	; (80038b0 <main+0x338>)
 80037bc:	f008 f854 	bl	800b868 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80037c0:	2100      	movs	r1, #0
 80037c2:	483c      	ldr	r0, [pc, #240]	; (80038b4 <main+0x33c>)
 80037c4:	f008 f920 	bl	800ba08 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80037c8:	2100      	movs	r1, #0
 80037ca:	483b      	ldr	r0, [pc, #236]	; (80038b8 <main+0x340>)
 80037cc:	f008 f91c 	bl	800ba08 <HAL_TIM_IC_Start_IT>



  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 80037d0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80037d4:	2001      	movs	r0, #1
 80037d6:	f001 f9a9 	bl	8004b2c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 80037da:	2101      	movs	r1, #1
 80037dc:	2001      	movs	r0, #1
 80037de:	f001 fa15 	bl	8004c0c <BSP_LCD_SetLayerVisible>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 80037e2:	2001      	movs	r0, #1
 80037e4:	f001 fa02 	bl	8004bec <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f001 fa98 	bl	8004d20 <BSP_LCD_Clear>
  /* USER CODE END 2 */



  /* Infinite loop */
        taille = 1;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

        init_page(T, H, P, D, V, Pl, taille);
 80037f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800380c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003810:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8003814:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003818:	f7fd fd06 	bl	8001228 <init_page>
        taille = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        __HAL_TIM_SET_COUNTER(&htim7, 0);
 8003822:	4b22      	ldr	r3, [pc, #136]	; (80038ac <main+0x334>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2200      	movs	r2, #0
 8003828:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
	    /* USER CODE END WHILE */


	  va = MesureVitesseVent();
 800382a:	f000 fa39 	bl	8003ca0 <MesureVitesseVent>
 800382e:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
	  v = MesureVitesseVent();
 8003832:	f000 fa35 	bl	8003ca0 <MesureVitesseVent>
 8003836:	ed87 0a3b 	vstr	s0, [r7, #236]	; 0xec
	  if(v == 0){
 800383a:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800383e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	d104      	bne.n	8003852 <main+0x2da>
		  v = 0;
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003850:	e035      	b.n	80038be <main+0x346>
	  }else{
		  if((v<=1) && (v>0)){
 8003852:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800385a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	d806      	bhi.n	8003872 <main+0x2fa>
 8003864:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003868:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	dc24      	bgt.n	80038bc <main+0x344>
			  v = v;
		  }else{
			  v = log(v);
 8003872:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003876:	f7fc fe97 	bl	80005a8 <__aeabi_f2d>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	ec43 2b10 	vmov	d0, r2, r3
 8003882:	f011 fdf9 	bl	8015478 <log>
 8003886:	ec53 2b10 	vmov	r2, r3, d0
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f7fd f9db 	bl	8000c48 <__aeabi_d2f>
 8003892:	4603      	mov	r3, r0
 8003894:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003898:	e011      	b.n	80038be <main+0x346>
 800389a:	bf00      	nop
 800389c:	08015b48 	.word	0x08015b48
 80038a0:	08015bd8 	.word	0x08015bd8
 80038a4:	41f00000 	.word	0x41f00000
 80038a8:	40a00000 	.word	0x40a00000
 80038ac:	20000660 	.word	0x20000660
 80038b0:	20000614 	.word	0x20000614
 80038b4:	200005c8 	.word	0x200005c8
 80038b8:	2000057c 	.word	0x2000057c
			  v = v;
 80038bc:	bf00      	nop
	  //sprintf(AffichageVitesseVent, "Vitesse du vent: %.2f km/h\n\r", v);
	  //HAL_Delay(300);
	  //HAL_UART_Transmit(&huart1, (uint8_t*) AffichageVitesseVent, strlen(AffichageVitesseVent), HAL_MAX_DELAY);


	  if (pluieDetected == 1) {
 80038be:	4bb4      	ldr	r3, [pc, #720]	; (8003b90 <main+0x618>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10d      	bne.n	80038e4 <main+0x36c>


		  IndicationEtatsParLedRGB(PriseDeMesure);
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7ff f89f 	bl	8002a0c <IndicationEtatsParLedRGB>

		    impulseCount++;
 80038ce:	4bb1      	ldr	r3, [pc, #708]	; (8003b94 <main+0x61c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4aaf      	ldr	r2, [pc, #700]	; (8003b94 <main+0x61c>)
 80038d6:	6013      	str	r3, [r2, #0]

		    //printf("pluie detected  %d \r \n ", impulseCount  );

		    pluieDetected = 0;
 80038d8:	4bad      	ldr	r3, [pc, #692]	; (8003b90 <main+0x618>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
			  IndicationEtatsParLedRGB(ExtinctionRGB);
 80038de:	2001      	movs	r0, #1
 80038e0:	f7ff f894 	bl	8002a0c <IndicationEtatsParLedRGB>

	  }

		  if(tim6_inter == 1){
 80038e4:	4bac      	ldr	r3, [pc, #688]	; (8003b98 <main+0x620>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 8109 	bne.w	8003b00 <main+0x588>
			  sprintf(AffichageVitesseVent, "Tim6\n\r");
 80038ee:	49ab      	ldr	r1, [pc, #684]	; (8003b9c <main+0x624>)
 80038f0:	48ab      	ldr	r0, [pc, #684]	; (8003ba0 <main+0x628>)
 80038f2:	f00e f9cd 	bl	8011c90 <siprintf>

			  HAL_UART_Transmit(&huart1, (uint8_t*) AffichageVitesseVent, strlen(AffichageVitesseVent), HAL_MAX_DELAY);
 80038f6:	48aa      	ldr	r0, [pc, #680]	; (8003ba0 <main+0x628>)
 80038f8:	f7fc fcea 	bl	80002d0 <strlen>
 80038fc:	4603      	mov	r3, r0
 80038fe:	b29a      	uxth	r2, r3
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
 8003904:	49a6      	ldr	r1, [pc, #664]	; (8003ba0 <main+0x628>)
 8003906:	48a7      	ldr	r0, [pc, #668]	; (8003ba4 <main+0x62c>)
 8003908:	f008 fee0 	bl	800c6cc <HAL_UART_Transmit>
			  if(taille == 24){
 800390c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003910:	2b18      	cmp	r3, #24
 8003912:	d167      	bne.n	80039e4 <main+0x46c>

				  if(SaveDataToCSV(heures, T, P, H, D, V, Pl) !=  FR_OK ) Error_Handler();
 8003914:	f107 0018 	add.w	r0, r7, #24
 8003918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800391c:	9302      	str	r3, [sp, #8]
 800391e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800392e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003932:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003936:	f7fe fddb 	bl	80024f0 <SaveDataToCSV>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <main+0x3cc>
 8003940:	f000 fa62 	bl	8003e08 <Error_Handler>

				  taille = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			      for (int i = 0; i < 24; ++i) {
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003950:	e00d      	b.n	800396e <main+0x3f6>
			          T[i] = 0.0;
 8003952:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800395c:	4413      	add	r3, r2
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 8003964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003968:	3301      	adds	r3, #1
 800396a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800396e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003972:	2b17      	cmp	r3, #23
 8003974:	dded      	ble.n	8003952 <main+0x3da>
			      }
			      for (int i = 0; i < 24; ++i) {
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800397c:	e00c      	b.n	8003998 <main+0x420>
			          H[i] = 30.0;
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003988:	4413      	add	r3, r2
 800398a:	4a87      	ldr	r2, [pc, #540]	; (8003ba8 <main+0x630>)
 800398c:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003992:	3301      	adds	r3, #1
 8003994:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399c:	2b17      	cmp	r3, #23
 800399e:	ddee      	ble.n	800397e <main+0x406>
			      }
			      for (int i = 0; i < 24; ++i) {
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039a6:	e004      	b.n	80039b2 <main+0x43a>
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ac:	3301      	adds	r3, #1
 80039ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b6:	2b17      	cmp	r3, #23
 80039b8:	ddf6      	ble.n	80039a8 <main+0x430>
			    	  //char tempp[20] = "No where";

			          //strcpy(D[i], temp);
			      }
			      for (int i = 0; i < 24; ++i) {
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039c0:	e00c      	b.n	80039dc <main+0x464>
			          P[i] = 930.0;
 80039c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80039cc:	4413      	add	r3, r2
 80039ce:	4a77      	ldr	r2, [pc, #476]	; (8003bac <main+0x634>)
 80039d0:	601a      	str	r2, [r3, #0]
			      for (int i = 0; i < 24; ++i) {
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d6:	3301      	adds	r3, #1
 80039d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e0:	2b17      	cmp	r3, #23
 80039e2:	ddee      	ble.n	80039c2 <main+0x44a>
			      }

			  }

			  IndicationEtatsParLedRGB(PriseDeMesure);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7ff f811 	bl	8002a0c <IndicationEtatsParLedRGB>
			  Te = Temperature();
 80039ea:	f7fe fcc3 	bl	8002374 <Temperature>
 80039ee:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
			  Hu = Humedite();
 80039f2:	f7fe fbf5 	bl	80021e0 <Humedite>
 80039f6:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
			  Pr = MesurePression();
 80039fa:	f000 fa4d 	bl	8003e98 <MesurePression>
 80039fe:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
			  De = Get_direction_vent();
 8003a02:	f7fe ff6f 	bl	80028e4 <Get_direction_vent>
 8003a06:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
			  IndicationEtatsParLedRGB(ExtinctionRGB);
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f7fe fffe 	bl	8002a0c <IndicationEtatsParLedRGB>
			  pluie = impulseCount * 0.279;
 8003a10:	4b60      	ldr	r3, [pc, #384]	; (8003b94 <main+0x61c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fc fda5 	bl	8000564 <__aeabi_ui2d>
 8003a1a:	a35b      	add	r3, pc, #364	; (adr r3, 8003b88 <main+0x610>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fc fe1a 	bl	8000658 <__aeabi_dmul>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7fd f90c 	bl	8000c48 <__aeabi_d2f>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			  impulseCount = 0;
 8003a36:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <main+0x61c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

			  Pl[taille] = pluie;
 8003a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a46:	4413      	add	r3, r2
 8003a48:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a4c:	601a      	str	r2, [r3, #0]
			  T[taille] = Te;
 8003a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003a58:	4413      	add	r3, r2
 8003a5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a5e:	601a      	str	r2, [r3, #0]
			  H[taille] = Hu;
 8003a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a70:	601a      	str	r2, [r3, #0]
			  V[taille] = v;
 8003a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003a82:	601a      	str	r2, [r3, #0]
			  Va[taille] = va;
 8003a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a8e:	4413      	add	r3, r2
 8003a90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a94:	601a      	str	r2, [r3, #0]

			  strcpy(D[taille], De);
 8003a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aa0:	4413      	add	r3, r2
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f00e f9e4 	bl	8011e76 <strcpy>

			  P[taille] = Pr;
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003ab8:	4413      	add	r3, r2
 8003aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003abe:	601a      	str	r2, [r3, #0]

			  taille ++;
 8003ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			  if(currentPage == PAGE_1){
 8003aca:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <main+0x638>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d112      	bne.n	8003af8 <main+0x580>
				  init_page(T, H, P, D, Va, Pl, taille);
 8003ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad6:	9302      	str	r3, [sp, #8]
 8003ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ae8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003aec:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8003af0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003af4:	f7fd fb98 	bl	8001228 <init_page>
			  }




			  tim6_inter = 0;
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <main+0x620>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e003      	b.n	8003b08 <main+0x590>
		  }else{
			  //HAL_SuspendTick();
			  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003b00:	2101      	movs	r1, #1
 8003b02:	2000      	movs	r0, #0
 8003b04:	f005 fbb4 	bl	8009270 <HAL_PWR_EnterSLEEPMode>
		  }



		    if (boton == 1) {
 8003b08:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <main+0x63c>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d11b      	bne.n	8003b48 <main+0x5d0>
		    	BSP_LCD_DisplayOn();
 8003b10:	f001 fe44 	bl	800579c <BSP_LCD_DisplayOn>
		    	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <main+0x640>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
		      // Changer de page en réponse au clic sur le bouton
		      ChangerDePage(T, H, P, D, V, Pl, taille);
 8003b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b20:	9302      	str	r3, [sp, #8]
 8003b22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b32:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003b36:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8003b3a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003b3e:	f7fe f91f 	bl	8001d80 <ChangerDePage>

		      boton = 0;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <main+0x63c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]

		    }

		    if(tim7_inter == 1){
 8003b48:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <main+0x644>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f47f ae6c 	bne.w	800382a <main+0x2b2>
				  sprintf(AffichageVitesseVent, "Tim7\n\r");
 8003b52:	491b      	ldr	r1, [pc, #108]	; (8003bc0 <main+0x648>)
 8003b54:	4812      	ldr	r0, [pc, #72]	; (8003ba0 <main+0x628>)
 8003b56:	f00e f89b 	bl	8011c90 <siprintf>

				  HAL_UART_Transmit(&huart1, (uint8_t*) AffichageVitesseVent, strlen(AffichageVitesseVent), HAL_MAX_DELAY);
 8003b5a:	4811      	ldr	r0, [pc, #68]	; (8003ba0 <main+0x628>)
 8003b5c:	f7fc fbb8 	bl	80002d0 <strlen>
 8003b60:	4603      	mov	r3, r0
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	490d      	ldr	r1, [pc, #52]	; (8003ba0 <main+0x628>)
 8003b6a:	480e      	ldr	r0, [pc, #56]	; (8003ba4 <main+0x62c>)
 8003b6c:	f008 fdae 	bl	800c6cc <HAL_UART_Transmit>
		    	BSP_LCD_DisplayOff();
 8003b70:	f001 fe32 	bl	80057d8 <BSP_LCD_DisplayOff>
		    	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003b74:	2101      	movs	r1, #1
 8003b76:	2000      	movs	r0, #0
 8003b78:	f005 fb7a 	bl	8009270 <HAL_PWR_EnterSLEEPMode>
		    	tim7_inter = 0;
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <main+0x644>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
	  va = MesureVitesseVent();
 8003b82:	e652      	b.n	800382a <main+0x2b2>
 8003b84:	f3af 8000 	nop.w
 8003b88:	d0e56042 	.word	0xd0e56042
 8003b8c:	3fd1db22 	.word	0x3fd1db22
 8003b90:	200003e0 	.word	0x200003e0
 8003b94:	200003dc 	.word	0x200003dc
 8003b98:	200003d9 	.word	0x200003d9
 8003b9c:	08015b38 	.word	0x08015b38
 8003ba0:	200003f4 	.word	0x200003f4
 8003ba4:	200006ac 	.word	0x200006ac
 8003ba8:	41f00000 	.word	0x41f00000
 8003bac:	44688000 	.word	0x44688000
 8003bb0:	20000208 	.word	0x20000208
 8003bb4:	200003d8 	.word	0x200003d8
 8003bb8:	20000660 	.word	0x20000660
 8003bbc:	200003da 	.word	0x200003da
 8003bc0:	08015b40 	.word	0x08015b40

08003bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b094      	sub	sp, #80	; 0x50
 8003bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bca:	f107 0320 	add.w	r3, r7, #32
 8003bce:	2230      	movs	r2, #48	; 0x30
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f00e f8bf 	bl	8011d56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <SystemClock_Config+0xd0>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <SystemClock_Config+0xd0>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <SystemClock_Config+0xd0>)
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <SystemClock_Config+0xd4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a24      	ldr	r2, [pc, #144]	; (8003c98 <SystemClock_Config+0xd4>)
 8003c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <SystemClock_Config+0xd4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c20:	2310      	movs	r3, #16
 8003c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c24:	2302      	movs	r3, #2
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8003c30:	23d2      	movs	r3, #210	; 0xd2
 8003c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c34:	2302      	movs	r3, #2
 8003c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c3c:	f107 0320 	add.w	r3, r7, #32
 8003c40:	4618      	mov	r0, r3
 8003c42:	f005 fb87 	bl	8009354 <HAL_RCC_OscConfig>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003c4c:	f000 f8dc 	bl	8003e08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c50:	f005 fb30 	bl	80092b4 <HAL_PWREx_EnableOverDrive>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003c5a:	f000 f8d5 	bl	8003e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c5e:	230f      	movs	r3, #15
 8003c60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c62:	2302      	movs	r3, #2
 8003c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	2106      	movs	r1, #6
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f005 fe0d 	bl	800989c <HAL_RCC_ClockConfig>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003c88:	f000 f8be 	bl	8003e08 <Error_Handler>
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3750      	adds	r7, #80	; 0x50
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	00000000 	.word	0x00000000

08003ca0 <MesureVitesseVent>:

/* USER CODE BEGIN 4 */

float MesureVitesseVent(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	Vitesse_vent = 0;
 8003ca4:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <MesureVitesseVent+0xd0>)
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

    if (captureDone)
 8003cac:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <MesureVitesseVent+0xd4>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04f      	beq.n	8003d56 <MesureVitesseVent+0xb6>
    {
          if(captures[1]>=captures[0])
 8003cb6:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <MesureVitesseVent+0xd8>)
 8003cb8:	885b      	ldrh	r3, [r3, #2]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <MesureVitesseVent+0xd8>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d30a      	bcc.n	8003cdc <MesureVitesseVent+0x3c>

          {
              diffCapture = (captures[1] - captures[0]);
 8003cc6:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <MesureVitesseVent+0xd8>)
 8003cc8:	885b      	ldrh	r3, [r3, #2]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <MesureVitesseVent+0xd8>)
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <MesureVitesseVent+0xdc>)
 8003cd8:	801a      	strh	r2, [r3, #0]
 8003cda:	e00e      	b.n	8003cfa <MesureVitesseVent+0x5a>
          }
          else
          {
              diffCapture = (TIM1->ARR + captures[0]) - captures[1];
 8003cdc:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <MesureVitesseVent+0xe0>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <MesureVitesseVent+0xd8>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <MesureVitesseVent+0xd8>)
 8003cee:	885b      	ldrh	r3, [r3, #2]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <MesureVitesseVent+0xdc>)
 8003cf8:	801a      	strh	r2, [r3, #0]
          }

          frequency =  (float)((2*HAL_RCC_GetPCLK1Freq()) / ((TIM1->PSC + 1) * diffCapture));
 8003cfa:	f005 ff8d 	bl	8009c18 <HAL_RCC_GetPCLK1Freq>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	005a      	lsls	r2, r3, #1
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <MesureVitesseVent+0xe0>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	3301      	adds	r3, #1
 8003d08:	491c      	ldr	r1, [pc, #112]	; (8003d7c <MesureVitesseVent+0xdc>)
 8003d0a:	8809      	ldrh	r1, [r1, #0]
 8003d0c:	b289      	uxth	r1, r1
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1e:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <MesureVitesseVent+0xe4>)
 8003d20:	edc3 7a00 	vstr	s15, [r3]
          Vitesse_vent=frequency*2.4;
 8003d24:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <MesureVitesseVent+0xe4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fc3d 	bl	80005a8 <__aeabi_f2d>
 8003d2e:	a30e      	add	r3, pc, #56	; (adr r3, 8003d68 <MesureVitesseVent+0xc8>)
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f7fc fc90 	bl	8000658 <__aeabi_dmul>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f7fc ff82 	bl	8000c48 <__aeabi_d2f>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <MesureVitesseVent+0xd0>)
 8003d48:	6013      	str	r3, [r2, #0]
          captureFlag=1;
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <MesureVitesseVent+0xe8>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
          captureDone=0;
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <MesureVitesseVent+0xd4>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
          //sprintf(AffichageVitesseVent, "Vitesse du vent: %.2f km/h\n\r", Vitesse_vent);
          //HAL_UART_Transmit(&huart1, (uint8_t*) AffichageVitesseVent, strlen(AffichageVitesseVent), HAL_MAX_DELAY);

    }
    return Vitesse_vent;
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <MesureVitesseVent+0xd0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	ee07 3a90 	vmov	s15, r3
}
 8003d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	f3af 8000 	nop.w
 8003d68:	33333333 	.word	0x33333333
 8003d6c:	40033333 	.word	0x40033333
 8003d70:	200003f0 	.word	0x200003f0
 8003d74:	200003e1 	.word	0x200003e1
 8003d78:	200003e4 	.word	0x200003e4
 8003d7c:	200003ec 	.word	0x200003ec
 8003d80:	40010000 	.word	0x40010000
 8003d84:	200003e8 	.word	0x200003e8
 8003d88:	20000000 	.word	0x20000000

08003d8c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM2) {
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_IC_CaptureCallback+0x20>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7f1b      	ldrb	r3, [r3, #28]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d102      	bne.n	8003dac <HAL_TIM_IC_CaptureCallback+0x20>
			pluieDetected=1;
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
		}
		}

    if (captureFlag)
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00e      	beq.n	8003dd4 <HAL_TIM_IC_CaptureCallback+0x48>
    {
        captures[1]=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8003db6:	2100      	movs	r1, #0
 8003db8:	4810      	ldr	r0, [pc, #64]	; (8003dfc <HAL_TIM_IC_CaptureCallback+0x70>)
 8003dba:	f008 f931 	bl	800c020 <HAL_TIM_ReadCapturedValue>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <HAL_TIM_IC_CaptureCallback+0x74>)
 8003dc4:	805a      	strh	r2, [r3, #2]
        captureFlag = 0;
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
        captureDone = 1;
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_TIM_IC_CaptureCallback+0x78>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
    {
        captures[1]=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
        captureFlag = 1;
    }

}
 8003dd2:	e00a      	b.n	8003dea <HAL_TIM_IC_CaptureCallback+0x5e>
        captures[1]=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4809      	ldr	r0, [pc, #36]	; (8003dfc <HAL_TIM_IC_CaptureCallback+0x70>)
 8003dd8:	f008 f922 	bl	800c020 <HAL_TIM_ReadCapturedValue>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_TIM_IC_CaptureCallback+0x74>)
 8003de2:	805a      	strh	r2, [r3, #2]
        captureFlag = 1;
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200003e0 	.word	0x200003e0
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	2000057c 	.word	0x2000057c
 8003e00:	200003e4 	.word	0x200003e4
 8003e04:	200003e1 	.word	0x200003e1

08003e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e0c:	b672      	cpsid	i
}
 8003e0e:	bf00      	nop
  __disable_irq();
  /*while (1)
  {
  }*/
  /* USER CODE END Error_Handler_Debug */
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <platform_write>:
static float pressure_hPa;
static uint32_t data_raw_pressure;


static uint32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af04      	add	r7, sp, #16
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	461a      	mov	r2, r3
 8003e28:	460b      	mov	r3, r1
 8003e2a:	72fb      	strb	r3, [r7, #11]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(&hi2c1, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)bufp, len, 1000);
 8003e30:	7afb      	ldrb	r3, [r7, #11]
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e38:	9302      	str	r3, [sp, #8]
 8003e3a:	893b      	ldrh	r3, [r7, #8]
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2301      	movs	r3, #1
 8003e44:	21bb      	movs	r1, #187	; 0xbb
 8003e46:	4804      	ldr	r0, [pc, #16]	; (8003e58 <platform_write+0x3c>)
 8003e48:	f004 f9fc 	bl	8008244 <HAL_I2C_Mem_Write>
    return 0;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200002dc 	.word	0x200002dc

08003e5c <platform_read>:

static uint32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	461a      	mov	r2, r3
 8003e68:	460b      	mov	r3, r1
 8003e6a:	72fb      	strb	r3, [r7, #11]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003e70:	7afb      	ldrb	r3, [r7, #11]
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e78:	9302      	str	r3, [sp, #8]
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2301      	movs	r3, #1
 8003e84:	21bb      	movs	r1, #187	; 0xbb
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f004 faf0 	bl	800846c <HAL_I2C_Mem_Read>
    return 0;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <MesurePression>:

stmdev_ctx_t mesure_pression_dev_ctx;

float MesurePression(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
    lps22hh_reg_t reg;
    mesure_pression_dev_ctx.write_reg = platform_write;
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <MesurePression+0x70>)
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <MesurePression+0x74>)
 8003ea2:	601a      	str	r2, [r3, #0]
    mesure_pression_dev_ctx.read_reg = platform_read;
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <MesurePression+0x70>)
 8003ea6:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <MesurePression+0x78>)
 8003ea8:	605a      	str	r2, [r3, #4]
    mesure_pression_dev_ctx.handle = &hi2c1;
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <MesurePression+0x70>)
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <MesurePression+0x7c>)
 8003eae:	60da      	str	r2, [r3, #12]
    lps22hh_reset_set(&mesure_pression_dev_ctx, PROPERTY_ENABLE);
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4815      	ldr	r0, [pc, #84]	; (8003f08 <MesurePression+0x70>)
 8003eb4:	f002 fb7b 	bl	80065ae <lps22hh_reset_set>
    lps22hh_block_data_update_set(&mesure_pression_dev_ctx, PROPERTY_ENABLE);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4813      	ldr	r0, [pc, #76]	; (8003f08 <MesurePression+0x70>)
 8003ebc:	f002 fada 	bl	8006474 <lps22hh_block_data_update_set>
    lps22hh_data_rate_set(&mesure_pression_dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 8003ec0:	2112      	movs	r1, #18
 8003ec2:	4811      	ldr	r0, [pc, #68]	; (8003f08 <MesurePression+0x70>)
 8003ec4:	f002 fafc 	bl	80064c0 <lps22hh_data_rate_set>
    lps22hh_read_reg(&mesure_pression_dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8003ec8:	1d3a      	adds	r2, r7, #4
 8003eca:	2301      	movs	r3, #1
 8003ecc:	2127      	movs	r1, #39	; 0x27
 8003ece:	480e      	ldr	r0, [pc, #56]	; (8003f08 <MesurePression+0x70>)
 8003ed0:	f002 fa88 	bl	80063e4 <lps22hh_read_reg>
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <MesurePression+0x80>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
    memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
    lps22hh_pressure_raw_get(&mesure_pression_dev_ctx, &data_raw_pressure);
 8003eda:	490f      	ldr	r1, [pc, #60]	; (8003f18 <MesurePression+0x80>)
 8003edc:	480a      	ldr	r0, [pc, #40]	; (8003f08 <MesurePression+0x70>)
 8003ede:	f002 fb3d 	bl	800655c <lps22hh_pressure_raw_get>
    pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <MesurePression+0x80>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f002 faac 	bl	8006444 <lps22hh_from_lsb_to_hpa>
 8003eec:	eef0 7a40 	vmov.f32	s15, s0
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <MesurePression+0x84>)
 8003ef2:	edc3 7a00 	vstr	s15, [r3]
    return pressure_hPa;
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <MesurePression+0x84>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	ee07 3a90 	vmov	s15, r3
}
 8003efe:	eeb0 0a67 	vmov.f32	s0, s15
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000424 	.word	0x20000424
 8003f0c:	08003e1d 	.word	0x08003e1d
 8003f10:	08003e5d 	.word	0x08003e5d
 8003f14:	200002dc 	.word	0x200002dc
 8003f18:	20000420 	.word	0x20000420
 8003f1c:	2000041c 	.word	0x2000041c

08003f20 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <MX_SDMMC1_SD_Init+0x38>)
 8003f26:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <MX_SDMMC1_SD_Init+0x3c>)
 8003f28:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <MX_SDMMC1_SD_Init+0x38>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <MX_SDMMC1_SD_Init+0x38>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <MX_SDMMC1_SD_Init+0x38>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <MX_SDMMC1_SD_Init+0x38>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <MX_SDMMC1_SD_Init+0x38>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <MX_SDMMC1_SD_Init+0x38>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	20000434 	.word	0x20000434
 8003f5c:	40012c00 	.word	0x40012c00

08003f60 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b0ac      	sub	sp, #176	; 0xb0
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f78:	f107 0318 	add.w	r3, r7, #24
 8003f7c:	2284      	movs	r2, #132	; 0x84
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f00d fee8 	bl	8011d56 <memset>
  if(sdHandle->Instance==SDMMC1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a73      	ldr	r2, [pc, #460]	; (8004158 <HAL_SD_MspInit+0x1f8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	f040 80de 	bne.w	800414e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8003f92:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003f96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8003f98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fa0:	f107 0318 	add.w	r3, r7, #24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f005 fe5f 	bl	8009c68 <HAL_RCCEx_PeriphCLKConfig>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003fb0:	f7ff ff2a 	bl	8003e08 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003fb4:	4b69      	ldr	r3, [pc, #420]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	4a68      	ldr	r2, [pc, #416]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003fba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc0:	4b66      	ldr	r3, [pc, #408]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fcc:	4b63      	ldr	r3, [pc, #396]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	4a62      	ldr	r2, [pc, #392]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003fd2:	f043 0304 	orr.w	r3, r3, #4
 8003fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd8:	4b60      	ldr	r3, [pc, #384]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fe4:	4b5d      	ldr	r3, [pc, #372]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	4a5c      	ldr	r2, [pc, #368]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003fea:	f043 0308 	orr.w	r3, r3, #8
 8003fee:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff0:	4b5a      	ldr	r3, [pc, #360]	; (800415c <HAL_SD_MspInit+0x1fc>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8003ffc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004016:	230c      	movs	r3, #12
 8004018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004020:	4619      	mov	r1, r3
 8004022:	484f      	ldr	r0, [pc, #316]	; (8004160 <HAL_SD_MspInit+0x200>)
 8004024:	f003 fe7c 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004028:	2304      	movs	r3, #4
 800402a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	2302      	movs	r3, #2
 8004030:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403a:	2303      	movs	r3, #3
 800403c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004040:	230c      	movs	r3, #12
 8004042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004046:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800404a:	4619      	mov	r1, r3
 800404c:	4845      	ldr	r0, [pc, #276]	; (8004164 <HAL_SD_MspInit+0x204>)
 800404e:	f003 fe67 	bl	8007d20 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8004052:	4b45      	ldr	r3, [pc, #276]	; (8004168 <HAL_SD_MspInit+0x208>)
 8004054:	4a45      	ldr	r2, [pc, #276]	; (800416c <HAL_SD_MspInit+0x20c>)
 8004056:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8004058:	4b43      	ldr	r3, [pc, #268]	; (8004168 <HAL_SD_MspInit+0x208>)
 800405a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800405e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_SD_MspInit+0x208>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004066:	4b40      	ldr	r3, [pc, #256]	; (8004168 <HAL_SD_MspInit+0x208>)
 8004068:	2200      	movs	r2, #0
 800406a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800406c:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <HAL_SD_MspInit+0x208>)
 800406e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004072:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004074:	4b3c      	ldr	r3, [pc, #240]	; (8004168 <HAL_SD_MspInit+0x208>)
 8004076:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800407a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800407c:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_SD_MspInit+0x208>)
 800407e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004082:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8004084:	4b38      	ldr	r3, [pc, #224]	; (8004168 <HAL_SD_MspInit+0x208>)
 8004086:	2220      	movs	r2, #32
 8004088:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_SD_MspInit+0x208>)
 800408c:	2200      	movs	r2, #0
 800408e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_SD_MspInit+0x208>)
 8004092:	2204      	movs	r2, #4
 8004094:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004096:	4b34      	ldr	r3, [pc, #208]	; (8004168 <HAL_SD_MspInit+0x208>)
 8004098:	2203      	movs	r2, #3
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800409c:	4b32      	ldr	r3, [pc, #200]	; (8004168 <HAL_SD_MspInit+0x208>)
 800409e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80040a4:	4b30      	ldr	r3, [pc, #192]	; (8004168 <HAL_SD_MspInit+0x208>)
 80040a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80040ac:	482e      	ldr	r0, [pc, #184]	; (8004168 <HAL_SD_MspInit+0x208>)
 80040ae:	f002 ffa7 	bl	8007000 <HAL_DMA_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80040b8:	f7ff fea6 	bl	8003e08 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <HAL_SD_MspInit+0x208>)
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40
 80040c2:	4a29      	ldr	r2, [pc, #164]	; (8004168 <HAL_SD_MspInit+0x208>)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80040c8:	4b29      	ldr	r3, [pc, #164]	; (8004170 <HAL_SD_MspInit+0x210>)
 80040ca:	4a2a      	ldr	r2, [pc, #168]	; (8004174 <HAL_SD_MspInit+0x214>)
 80040cc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <HAL_SD_MspInit+0x210>)
 80040d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040d4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040d6:	4b26      	ldr	r3, [pc, #152]	; (8004170 <HAL_SD_MspInit+0x210>)
 80040d8:	2240      	movs	r2, #64	; 0x40
 80040da:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_SD_MspInit+0x210>)
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040e2:	4b23      	ldr	r3, [pc, #140]	; (8004170 <HAL_SD_MspInit+0x210>)
 80040e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040ea:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_SD_MspInit+0x210>)
 80040ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040f0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040f2:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <HAL_SD_MspInit+0x210>)
 80040f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040f8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_SD_MspInit+0x210>)
 80040fc:	2220      	movs	r2, #32
 80040fe:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_SD_MspInit+0x210>)
 8004102:	2200      	movs	r2, #0
 8004104:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_SD_MspInit+0x210>)
 8004108:	2204      	movs	r2, #4
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800410c:	4b18      	ldr	r3, [pc, #96]	; (8004170 <HAL_SD_MspInit+0x210>)
 800410e:	2203      	movs	r2, #3
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_SD_MspInit+0x210>)
 8004114:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_SD_MspInit+0x210>)
 800411c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8004122:	4813      	ldr	r0, [pc, #76]	; (8004170 <HAL_SD_MspInit+0x210>)
 8004124:	f002 ff6c 	bl	8007000 <HAL_DMA_Init>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800412e:	f7ff fe6b 	bl	8003e08 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <HAL_SD_MspInit+0x210>)
 8004136:	63da      	str	r2, [r3, #60]	; 0x3c
 8004138:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <HAL_SD_MspInit+0x210>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	2031      	movs	r0, #49	; 0x31
 8004144:	f002 ff25 	bl	8006f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004148:	2031      	movs	r0, #49	; 0x31
 800414a:	f002 ff3e 	bl	8006fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800414e:	bf00      	nop
 8004150:	37b0      	adds	r7, #176	; 0xb0
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40023800 	.word	0x40023800
 8004160:	40020800 	.word	0x40020800
 8004164:	40020c00 	.word	0x40020c00
 8004168:	200004b8 	.word	0x200004b8
 800416c:	40026458 	.word	0x40026458
 8004170:	20000518 	.word	0x20000518
 8004174:	400264a0 	.word	0x400264a0

08004178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <HAL_MspInit+0x44>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <HAL_MspInit+0x44>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_MspInit+0x44>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_MspInit+0x44>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <HAL_MspInit+0x44>)
 800419c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a0:	6453      	str	r3, [r2, #68]	; 0x44
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_MspInit+0x44>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800

080041c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <NMI_Handler+0x4>

080041c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ca:	e7fe      	b.n	80041ca <HardFault_Handler+0x4>

080041cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041d0:	e7fe      	b.n	80041d0 <MemManage_Handler+0x4>

080041d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d6:	e7fe      	b.n	80041d6 <BusFault_Handler+0x4>

080041d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041dc:	e7fe      	b.n	80041dc <UsageFault_Handler+0x4>

080041de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800420c:	f002 fa32 	bl	8006674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}

08004214 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004218:	4802      	ldr	r0, [pc, #8]	; (8004224 <TIM1_CC_IRQHandler+0x10>)
 800421a:	f007 fd45 	bl	800bca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	2000057c 	.word	0x2000057c

08004228 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800422c:	4802      	ldr	r0, [pc, #8]	; (8004238 <TIM2_IRQHandler+0x10>)
 800422e:	f007 fd3b 	bl	800bca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	200005c8 	.word	0x200005c8

0800423c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	boton = 1;
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <EXTI15_10_IRQHandler+0x18>)
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004246:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800424a:	f003 ff47 	bl	80080dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200003d8 	.word	0x200003d8

08004258 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800425c:	4802      	ldr	r0, [pc, #8]	; (8004268 <SDMMC1_IRQHandler+0x10>)
 800425e:	f006 fb73 	bl	800a948 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000434 	.word	0x20000434

0800426c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	tim6_inter = 1;
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <TIM6_DAC_IRQHandler+0x14>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004276:	4803      	ldr	r0, [pc, #12]	; (8004284 <TIM6_DAC_IRQHandler+0x18>)
 8004278:	f007 fd16 	bl	800bca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800427c:	bf00      	nop
 800427e:	bd80      	pop	{r7, pc}
 8004280:	200003d9 	.word	0x200003d9
 8004284:	20000614 	.word	0x20000614

08004288 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	tim7_inter = 1;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <TIM7_IRQHandler+0x14>)
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004292:	4803      	ldr	r0, [pc, #12]	; (80042a0 <TIM7_IRQHandler+0x18>)
 8004294:	f007 fd08 	bl	800bca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}
 800429c:	200003da 	.word	0x200003da
 80042a0:	20000660 	.word	0x20000660

080042a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80042a8:	4802      	ldr	r0, [pc, #8]	; (80042b4 <DMA2_Stream3_IRQHandler+0x10>)
 80042aa:	f003 f837 	bl	800731c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200004b8 	.word	0x200004b8

080042b8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80042bc:	4802      	ldr	r0, [pc, #8]	; (80042c8 <DMA2_Stream6_IRQHandler+0x10>)
 80042be:	f003 f82d 	bl	800731c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000518 	.word	0x20000518

080042cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return 1;
 80042d0:	2301      	movs	r3, #1
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <_kill>:

int _kill(int pid, int sig)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042e6:	f00d fd99 	bl	8011e1c <__errno>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2216      	movs	r2, #22
 80042ee:	601a      	str	r2, [r3, #0]
  return -1;
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_exit>:

void _exit (int status)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004304:	f04f 31ff 	mov.w	r1, #4294967295
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ffe7 	bl	80042dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800430e:	e7fe      	b.n	800430e <_exit+0x12>

08004310 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e00a      	b.n	8004338 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004322:	f3af 8000 	nop.w
 8004326:	4601      	mov	r1, r0
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	60ba      	str	r2, [r7, #8]
 800432e:	b2ca      	uxtb	r2, r1
 8004330:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	3301      	adds	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	429a      	cmp	r2, r3
 800433e:	dbf0      	blt.n	8004322 <_read+0x12>
  }

  return len;
 8004340:	687b      	ldr	r3, [r7, #4]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e009      	b.n	8004370 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	60ba      	str	r2, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe f8b1 	bl	80024cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3301      	adds	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	dbf1      	blt.n	800435c <_write+0x12>
  }
  return len;
 8004378:	687b      	ldr	r3, [r7, #4]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <_close>:

int _close(int file)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043aa:	605a      	str	r2, [r3, #4]
  return 0;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <_isatty>:

int _isatty(int file)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043f4:	4a14      	ldr	r2, [pc, #80]	; (8004448 <_sbrk+0x5c>)
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <_sbrk+0x60>)
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <_sbrk+0x64>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004408:	4b11      	ldr	r3, [pc, #68]	; (8004450 <_sbrk+0x64>)
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <_sbrk+0x68>)
 800440c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <_sbrk+0x64>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	429a      	cmp	r2, r3
 800441a:	d207      	bcs.n	800442c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800441c:	f00d fcfe 	bl	8011e1c <__errno>
 8004420:	4603      	mov	r3, r0
 8004422:	220c      	movs	r2, #12
 8004424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
 800442a:	e009      	b.n	8004440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <_sbrk+0x64>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <_sbrk+0x64>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	4a05      	ldr	r2, [pc, #20]	; (8004450 <_sbrk+0x64>)
 800443c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800443e:	68fb      	ldr	r3, [r7, #12]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20050000 	.word	0x20050000
 800444c:	00000800 	.word	0x00000800
 8004450:	20000578 	.word	0x20000578
 8004454:	20000f70 	.word	0x20000f70

08004458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <SystemInit+0x20>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	4a05      	ldr	r2, [pc, #20]	; (8004478 <SystemInit+0x20>)
 8004464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	e000ed00 	.word	0xe000ed00

0800447c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004482:	f107 0314 	add.w	r3, r7, #20
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800448e:	1d3b      	adds	r3, r7, #4
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800449a:	4b23      	ldr	r3, [pc, #140]	; (8004528 <MX_TIM1_Init+0xac>)
 800449c:	4a23      	ldr	r2, [pc, #140]	; (800452c <MX_TIM1_Init+0xb0>)
 800449e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 80044a0:	4b21      	ldr	r3, [pc, #132]	; (8004528 <MX_TIM1_Init+0xac>)
 80044a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80044a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a8:	4b1f      	ldr	r3, [pc, #124]	; (8004528 <MX_TIM1_Init+0xac>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <MX_TIM1_Init+0xac>)
 80044b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <MX_TIM1_Init+0xac>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044bc:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <MX_TIM1_Init+0xac>)
 80044be:	2200      	movs	r2, #0
 80044c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c2:	4b19      	ldr	r3, [pc, #100]	; (8004528 <MX_TIM1_Init+0xac>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80044c8:	4817      	ldr	r0, [pc, #92]	; (8004528 <MX_TIM1_Init+0xac>)
 80044ca:	f007 fa45 	bl	800b958 <HAL_TIM_IC_Init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80044d4:	f7ff fc98 	bl	8003e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	4619      	mov	r1, r3
 80044ea:	480f      	ldr	r0, [pc, #60]	; (8004528 <MX_TIM1_Init+0xac>)
 80044ec:	f007 fff4 	bl	800c4d8 <HAL_TIMEx_MasterConfigSynchronization>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80044f6:	f7ff fc87 	bl	8003e08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80044fe:	2301      	movs	r3, #1
 8004500:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800450a:	1d3b      	adds	r3, r7, #4
 800450c:	2200      	movs	r2, #0
 800450e:	4619      	mov	r1, r3
 8004510:	4805      	ldr	r0, [pc, #20]	; (8004528 <MX_TIM1_Init+0xac>)
 8004512:	f007 fce8 	bl	800bee6 <HAL_TIM_IC_ConfigChannel>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800451c:	f7ff fc74 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004520:	bf00      	nop
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	2000057c 	.word	0x2000057c
 800452c:	40010000 	.word	0x40010000

08004530 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004542:	1d3b      	adds	r3, r7, #4
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800454e:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <MX_TIM2_Init+0xa4>)
 8004550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004554:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8004556:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <MX_TIM2_Init+0xa4>)
 8004558:	f242 720f 	movw	r2, #9999	; 0x270f
 800455c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <MX_TIM2_Init+0xa4>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <MX_TIM2_Init+0xa4>)
 8004566:	f04f 32ff 	mov.w	r2, #4294967295
 800456a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <MX_TIM2_Init+0xa4>)
 800456e:	2200      	movs	r2, #0
 8004570:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004572:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <MX_TIM2_Init+0xa4>)
 8004574:	2200      	movs	r2, #0
 8004576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004578:	4816      	ldr	r0, [pc, #88]	; (80045d4 <MX_TIM2_Init+0xa4>)
 800457a:	f007 f9ed 	bl	800b958 <HAL_TIM_IC_Init>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004584:	f7ff fc40 	bl	8003e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4619      	mov	r1, r3
 8004596:	480f      	ldr	r0, [pc, #60]	; (80045d4 <MX_TIM2_Init+0xa4>)
 8004598:	f007 ff9e 	bl	800c4d8 <HAL_TIMEx_MasterConfigSynchronization>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80045a2:	f7ff fc31 	bl	8003e08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80045a6:	2300      	movs	r3, #0
 80045a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80045aa:	2301      	movs	r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	2200      	movs	r2, #0
 80045ba:	4619      	mov	r1, r3
 80045bc:	4805      	ldr	r0, [pc, #20]	; (80045d4 <MX_TIM2_Init+0xa4>)
 80045be:	f007 fc92 	bl	800bee6 <HAL_TIM_IC_ConfigChannel>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80045c8:	f7ff fc1e 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80045cc:	bf00      	nop
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200005c8 	.word	0x200005c8

080045d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <MX_TIM6_Init+0x68>)
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <MX_TIM6_Init+0x6c>)
 80045ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1500-1;
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <MX_TIM6_Init+0x68>)
 80045f0:	f240 52db 	movw	r2, #1499	; 0x5db
 80045f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <MX_TIM6_Init+0x68>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000-1;
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <MX_TIM6_Init+0x68>)
 80045fe:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004602:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004604:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <MX_TIM6_Init+0x68>)
 8004606:	2200      	movs	r2, #0
 8004608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800460a:	480d      	ldr	r0, [pc, #52]	; (8004640 <MX_TIM6_Init+0x68>)
 800460c:	f007 f8d5 	bl	800b7ba <HAL_TIM_Base_Init>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004616:	f7ff fbf7 	bl	8003e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4806      	ldr	r0, [pc, #24]	; (8004640 <MX_TIM6_Init+0x68>)
 8004628:	f007 ff56 	bl	800c4d8 <HAL_TIMEx_MasterConfigSynchronization>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004632:	f7ff fbe9 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000614 	.word	0x20000614
 8004644:	40001000 	.word	0x40001000

08004648 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <MX_TIM7_Init+0x68>)
 800465a:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <MX_TIM7_Init+0x6c>)
 800465c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16000-1;
 800465e:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <MX_TIM7_Init+0x68>)
 8004660:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8004664:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <MX_TIM7_Init+0x68>)
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000-1;
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <MX_TIM7_Init+0x68>)
 800466e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004672:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004674:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <MX_TIM7_Init+0x68>)
 8004676:	2200      	movs	r2, #0
 8004678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800467a:	480d      	ldr	r0, [pc, #52]	; (80046b0 <MX_TIM7_Init+0x68>)
 800467c:	f007 f89d 	bl	800b7ba <HAL_TIM_Base_Init>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004686:	f7ff fbbf 	bl	8003e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800468a:	2300      	movs	r3, #0
 800468c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	4619      	mov	r1, r3
 8004696:	4806      	ldr	r0, [pc, #24]	; (80046b0 <MX_TIM7_Init+0x68>)
 8004698:	f007 ff1e 	bl	800c4d8 <HAL_TIMEx_MasterConfigSynchronization>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80046a2:	f7ff fbb1 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000660 	.word	0x20000660
 80046b4:	40001400 	.word	0x40001400

080046b8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08c      	sub	sp, #48	; 0x30
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c0:	f107 031c 	add.w	r3, r7, #28
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	609a      	str	r2, [r3, #8]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <HAL_TIM_IC_MspInit+0xfc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d131      	bne.n	800473e <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046da:	4b37      	ldr	r3, [pc, #220]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	4a36      	ldr	r2, [pc, #216]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6453      	str	r3, [r2, #68]	; 0x44
 80046e6:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f2:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a30      	ldr	r2, [pc, #192]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800470a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800470e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004714:	2301      	movs	r3, #1
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004718:	2300      	movs	r3, #0
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800471c:	2301      	movs	r3, #1
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004720:	f107 031c 	add.w	r3, r7, #28
 8004724:	4619      	mov	r1, r3
 8004726:	4825      	ldr	r0, [pc, #148]	; (80047bc <HAL_TIM_IC_MspInit+0x104>)
 8004728:	f003 fafa 	bl	8007d20 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800472c:	2200      	movs	r2, #0
 800472e:	2100      	movs	r1, #0
 8004730:	201b      	movs	r0, #27
 8004732:	f002 fc2e 	bl	8006f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004736:	201b      	movs	r0, #27
 8004738:	f002 fc47 	bl	8006fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800473c:	e035      	b.n	80047aa <HAL_TIM_IC_MspInit+0xf2>
  else if(tim_icHandle->Instance==TIM2)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d130      	bne.n	80047aa <HAL_TIM_IC_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	4a1a      	ldr	r2, [pc, #104]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6413      	str	r3, [r2, #64]	; 0x40
 8004754:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004760:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6313      	str	r3, [r2, #48]	; 0x30
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_TIM_IC_MspInit+0x100>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004782:	2301      	movs	r3, #1
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800478a:	2301      	movs	r3, #1
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478e:	f107 031c 	add.w	r3, r7, #28
 8004792:	4619      	mov	r1, r3
 8004794:	4809      	ldr	r0, [pc, #36]	; (80047bc <HAL_TIM_IC_MspInit+0x104>)
 8004796:	f003 fac3 	bl	8007d20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	201c      	movs	r0, #28
 80047a0:	f002 fbf7 	bl	8006f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047a4:	201c      	movs	r0, #28
 80047a6:	f002 fc10 	bl	8006fca <HAL_NVIC_EnableIRQ>
}
 80047aa:	bf00      	nop
 80047ac:	3730      	adds	r7, #48	; 0x30
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40020000 	.word	0x40020000

080047c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_TIM_Base_MspInit+0x78>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d114      	bne.n	80047fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <HAL_TIM_Base_MspInit+0x7c>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_TIM_Base_MspInit+0x7c>)
 80047d8:	f043 0310 	orr.w	r3, r3, #16
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b17      	ldr	r3, [pc, #92]	; (800483c <HAL_TIM_Base_MspInit+0x7c>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80047ea:	2200      	movs	r2, #0
 80047ec:	2100      	movs	r1, #0
 80047ee:	2036      	movs	r0, #54	; 0x36
 80047f0:	f002 fbcf 	bl	8006f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047f4:	2036      	movs	r0, #54	; 0x36
 80047f6:	f002 fbe8 	bl	8006fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80047fa:	e018      	b.n	800482e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0f      	ldr	r2, [pc, #60]	; (8004840 <HAL_TIM_Base_MspInit+0x80>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d113      	bne.n	800482e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_TIM_Base_MspInit+0x7c>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	4a0c      	ldr	r2, [pc, #48]	; (800483c <HAL_TIM_Base_MspInit+0x7c>)
 800480c:	f043 0320 	orr.w	r3, r3, #32
 8004810:	6413      	str	r3, [r2, #64]	; 0x40
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_TIM_Base_MspInit+0x7c>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	2037      	movs	r0, #55	; 0x37
 8004824:	f002 fbb5 	bl	8006f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004828:	2037      	movs	r0, #55	; 0x37
 800482a:	f002 fbce 	bl	8006fca <HAL_NVIC_EnableIRQ>
}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40001000 	.word	0x40001000
 800483c:	40023800 	.word	0x40023800
 8004840:	40001400 	.word	0x40001400

08004844 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <MX_USART1_UART_Init+0x58>)
 800484a:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <MX_USART1_UART_Init+0x5c>)
 800484c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <MX_USART1_UART_Init+0x58>)
 8004850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <MX_USART1_UART_Init+0x58>)
 8004858:	2200      	movs	r2, #0
 800485a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <MX_USART1_UART_Init+0x58>)
 800485e:	2200      	movs	r2, #0
 8004860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004862:	4b0e      	ldr	r3, [pc, #56]	; (800489c <MX_USART1_UART_Init+0x58>)
 8004864:	2200      	movs	r2, #0
 8004866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <MX_USART1_UART_Init+0x58>)
 800486a:	220c      	movs	r2, #12
 800486c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <MX_USART1_UART_Init+0x58>)
 8004870:	2200      	movs	r2, #0
 8004872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <MX_USART1_UART_Init+0x58>)
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <MX_USART1_UART_Init+0x58>)
 800487c:	2200      	movs	r2, #0
 800487e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <MX_USART1_UART_Init+0x58>)
 8004882:	2200      	movs	r2, #0
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004886:	4805      	ldr	r0, [pc, #20]	; (800489c <MX_USART1_UART_Init+0x58>)
 8004888:	f007 fed2 	bl	800c630 <HAL_UART_Init>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004892:	f7ff fab9 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	200006ac 	.word	0x200006ac
 80048a0:	40011000 	.word	0x40011000

080048a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b0ac      	sub	sp, #176	; 0xb0
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048bc:	f107 0318 	add.w	r3, r7, #24
 80048c0:	2284      	movs	r2, #132	; 0x84
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f00d fa46 	bl	8011d56 <memset>
  if(uartHandle->Instance==USART1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a32      	ldr	r2, [pc, #200]	; (8004998 <HAL_UART_MspInit+0xf4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d15c      	bne.n	800498e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048d4:	2340      	movs	r3, #64	; 0x40
 80048d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80048d8:	2300      	movs	r3, #0
 80048da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048dc:	f107 0318 	add.w	r3, r7, #24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f005 f9c1 	bl	8009c68 <HAL_RCCEx_PeriphCLKConfig>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80048ec:	f7ff fa8c 	bl	8003e08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048f0:	4b2a      	ldr	r3, [pc, #168]	; (800499c <HAL_UART_MspInit+0xf8>)
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_UART_MspInit+0xf8>)
 80048f6:	f043 0310 	orr.w	r3, r3, #16
 80048fa:	6453      	str	r3, [r2, #68]	; 0x44
 80048fc:	4b27      	ldr	r3, [pc, #156]	; (800499c <HAL_UART_MspInit+0xf8>)
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004908:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_UART_MspInit+0xf8>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	4a23      	ldr	r2, [pc, #140]	; (800499c <HAL_UART_MspInit+0xf8>)
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	6313      	str	r3, [r2, #48]	; 0x30
 8004914:	4b21      	ldr	r3, [pc, #132]	; (800499c <HAL_UART_MspInit+0xf8>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004920:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_UART_MspInit+0xf8>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_UART_MspInit+0xf8>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6313      	str	r3, [r2, #48]	; 0x30
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_UART_MspInit+0xf8>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493e:	2302      	movs	r3, #2
 8004940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494a:	2303      	movs	r3, #3
 800494c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004950:	2307      	movs	r3, #7
 8004952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004956:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800495a:	4619      	mov	r1, r3
 800495c:	4810      	ldr	r0, [pc, #64]	; (80049a0 <HAL_UART_MspInit+0xfc>)
 800495e:	f003 f9df 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496a:	2302      	movs	r3, #2
 800496c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004976:	2303      	movs	r3, #3
 8004978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800497c:	2307      	movs	r3, #7
 800497e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004982:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004986:	4619      	mov	r1, r3
 8004988:	4806      	ldr	r0, [pc, #24]	; (80049a4 <HAL_UART_MspInit+0x100>)
 800498a:	f003 f9c9 	bl	8007d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800498e:	bf00      	nop
 8004990:	37b0      	adds	r7, #176	; 0xb0
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40011000 	.word	0x40011000
 800499c:	40023800 	.word	0x40023800
 80049a0:	40020400 	.word	0x40020400
 80049a4:	40020000 	.word	0x40020000

080049a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049ac:	480d      	ldr	r0, [pc, #52]	; (80049e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049ae:	490e      	ldr	r1, [pc, #56]	; (80049e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049b0:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b4:	e002      	b.n	80049bc <LoopCopyDataInit>

080049b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ba:	3304      	adds	r3, #4

080049bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049c0:	d3f9      	bcc.n	80049b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049c2:	4a0b      	ldr	r2, [pc, #44]	; (80049f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049c4:	4c0b      	ldr	r4, [pc, #44]	; (80049f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c8:	e001      	b.n	80049ce <LoopFillZerobss>

080049ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049cc:	3204      	adds	r2, #4

080049ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049d0:	d3fb      	bcc.n	80049ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049d2:	f7ff fd41 	bl	8004458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049d6:	f00d fa27 	bl	8011e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049da:	f7fe fdcd 	bl	8003578 <main>
  bx  lr    
 80049de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80049e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80049ec:	080187d8 	.word	0x080187d8
  ldr r2, =_sbss
 80049f0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80049f4:	20000f70 	.word	0x20000f70

080049f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f8:	e7fe      	b.n	80049f8 <ADC_IRQHandler>
	...

080049fc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004a00:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a02:	2228      	movs	r2, #40	; 0x28
 8004a04:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004a06:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a08:	2209      	movs	r2, #9
 8004a0a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004a0c:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a0e:	2235      	movs	r2, #53	; 0x35
 8004a10:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a14:	220b      	movs	r2, #11
 8004a16:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004a18:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a1a:	f240 121b 	movw	r2, #283	; 0x11b
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004a20:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a22:	f240 2215 	movw	r2, #533	; 0x215
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a2a:	f240 121d 	movw	r2, #285	; 0x11d
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004a30:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a32:	f240 2235 	movw	r2, #565	; 0x235
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4823      	ldr	r0, [pc, #140]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a3c:	f000 ffc4 	bl	80059c8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004a40:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a46:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004a48:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a4a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004a4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004a58:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004a68:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004a6e:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004a74:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <BSP_LCD_Init+0xd0>)
 8004a84:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004a86:	4810      	ldr	r0, [pc, #64]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a88:	f004 fa4a 	bl	8008f20 <HAL_LTDC_GetState>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004a92:	2100      	movs	r1, #0
 8004a94:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a96:	f000 febd 	bl	8005814 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004a9a:	480b      	ldr	r0, [pc, #44]	; (8004ac8 <BSP_LCD_Init+0xcc>)
 8004a9c:	f004 f932 	bl	8008d04 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aa6:	480a      	ldr	r0, [pc, #40]	; (8004ad0 <BSP_LCD_Init+0xd4>)
 8004aa8:	f003 fafe 	bl	80080a8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004aac:	2201      	movs	r2, #1
 8004aae:	2108      	movs	r1, #8
 8004ab0:	4808      	ldr	r0, [pc, #32]	; (8004ad4 <BSP_LCD_Init+0xd8>)
 8004ab2:	f003 faf9 	bl	80080a8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004ab6:	f001 f8a7 	bl	8005c08 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004aba:	4807      	ldr	r0, [pc, #28]	; (8004ad8 <BSP_LCD_Init+0xdc>)
 8004abc:	f000 f916 	bl	8004cec <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000734 	.word	0x20000734
 8004acc:	40016800 	.word	0x40016800
 8004ad0:	40022000 	.word	0x40022000
 8004ad4:	40022800 	.word	0x40022800
 8004ad8:	20000008 	.word	0x20000008

08004adc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <BSP_LCD_GetXSize+0x20>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <BSP_LCD_GetXSize+0x24>)
 8004ae6:	2134      	movs	r1, #52	; 0x34
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3360      	adds	r3, #96	; 0x60
 8004af0:	681b      	ldr	r3, [r3, #0]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	2000081c 	.word	0x2000081c
 8004b00:	20000734 	.word	0x20000734

08004b04 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <BSP_LCD_GetYSize+0x20>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a06      	ldr	r2, [pc, #24]	; (8004b28 <BSP_LCD_GetYSize+0x24>)
 8004b0e:	2134      	movs	r1, #52	; 0x34
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3364      	adds	r3, #100	; 0x64
 8004b18:	681b      	ldr	r3, [r3, #0]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	2000081c 	.word	0x2000081c
 8004b28:	20000734 	.word	0x20000734

08004b2c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b090      	sub	sp, #64	; 0x40
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	6039      	str	r1, [r7, #0]
 8004b36:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004b3c:	f7ff ffce 	bl	8004adc <BSP_LCD_GetXSize>
 8004b40:	4603      	mov	r3, r0
 8004b42:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004b48:	f7ff ffdc 	bl	8004b04 <BSP_LCD_GetYSize>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004b58:	23ff      	movs	r3, #255	; 0xff
 8004b5a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004b72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004b78:	2307      	movs	r3, #7
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004b7c:	f7ff ffae 	bl	8004adc <BSP_LCD_GetXSize>
 8004b80:	4603      	mov	r3, r0
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004b84:	f7ff ffbe 	bl	8004b04 <BSP_LCD_GetYSize>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	f107 030c 	add.w	r3, r7, #12
 8004b92:	4619      	mov	r1, r3
 8004b94:	4812      	ldr	r0, [pc, #72]	; (8004be0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004b96:	f004 f985 	bl	8008ea4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004b9a:	88fa      	ldrh	r2, [r7, #6]
 8004b9c:	4911      	ldr	r1, [pc, #68]	; (8004be4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	3304      	adds	r3, #4
 8004baa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	490c      	ldr	r1, [pc, #48]	; (8004be4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004bc2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	4907      	ldr	r1, [pc, #28]	; (8004be4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004bc8:	4613      	mov	r3, r2
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004bd6:	601a      	str	r2, [r3, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	3740      	adds	r7, #64	; 0x40
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000734 	.word	0x20000734
 8004be4:	20000820 	.word	0x20000820
 8004be8:	20000008 	.word	0x20000008

08004bec <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <BSP_LCD_SelectLayer+0x1c>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6013      	str	r3, [r2, #0]
} 
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	2000081c 	.word	0x2000081c

08004c0c <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d112      	bne.n	8004c44 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8004c1e:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <BSP_LCD_SetLayerVisible+0x78>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	01db      	lsls	r3, r3, #7
 8004c28:	4413      	add	r3, r2
 8004c2a:	3384      	adds	r3, #132	; 0x84
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <BSP_LCD_SetLayerVisible+0x78>)
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	4611      	mov	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	01d2      	lsls	r2, r2, #7
 8004c38:	440a      	add	r2, r1
 8004c3a:	3284      	adds	r2, #132	; 0x84
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e011      	b.n	8004c68 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <BSP_LCD_SetLayerVisible+0x78>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	01db      	lsls	r3, r3, #7
 8004c4e:	4413      	add	r3, r2
 8004c50:	3384      	adds	r3, #132	; 0x84
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <BSP_LCD_SetLayerVisible+0x78>)
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	01d2      	lsls	r2, r2, #7
 8004c5e:	440a      	add	r2, r1
 8004c60:	3284      	adds	r2, #132	; 0x84
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <BSP_LCD_SetLayerVisible+0x78>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <BSP_LCD_SetLayerVisible+0x78>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	20000734 	.word	0x20000734

08004c88 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <BSP_LCD_SetTextColor+0x28>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4907      	ldr	r1, [pc, #28]	; (8004cb4 <BSP_LCD_SetTextColor+0x2c>)
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	2000081c 	.word	0x2000081c
 8004cb4:	20000820 	.word	0x20000820

08004cb8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004cc0:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <BSP_LCD_SetBackColor+0x2c>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4908      	ldr	r1, [pc, #32]	; (8004ce8 <BSP_LCD_SetBackColor+0x30>)
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	2000081c 	.word	0x2000081c
 8004ce8:	20000820 	.word	0x20000820

08004cec <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <BSP_LCD_SetFont+0x2c>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4908      	ldr	r1, [pc, #32]	; (8004d1c <BSP_LCD_SetFont+0x30>)
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3308      	adds	r3, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	2000081c 	.word	0x2000081c
 8004d1c:	20000820 	.word	0x20000820

08004d20 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <BSP_LCD_Clear+0x48>)
 8004d2a:	681c      	ldr	r4, [r3, #0]
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <BSP_LCD_Clear+0x48>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <BSP_LCD_Clear+0x4c>)
 8004d32:	2134      	movs	r1, #52	; 0x34
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	335c      	adds	r3, #92	; 0x5c
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461e      	mov	r6, r3
 8004d40:	f7ff fecc 	bl	8004adc <BSP_LCD_GetXSize>
 8004d44:	4605      	mov	r5, r0
 8004d46:	f7ff fedd 	bl	8004b04 <BSP_LCD_GetYSize>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	2300      	movs	r3, #0
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	462a      	mov	r2, r5
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 ff08 	bl	8005b70 <LL_FillBuffer>
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d68:	2000081c 	.word	0x2000081c
 8004d6c:	20000734 	.word	0x20000734

08004d70 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	80fb      	strh	r3, [r7, #6]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	80bb      	strh	r3, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <BSP_LCD_DisplayChar+0x80>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	491b      	ldr	r1, [pc, #108]	; (8004df4 <BSP_LCD_DisplayChar+0x84>)
 8004d88:	4613      	mov	r3, r2
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3308      	adds	r3, #8
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6819      	ldr	r1, [r3, #0]
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <BSP_LCD_DisplayChar+0x80>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4c14      	ldr	r4, [pc, #80]	; (8004df4 <BSP_LCD_DisplayChar+0x84>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4423      	add	r3, r4
 8004dae:	3308      	adds	r3, #8
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004db4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004db8:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <BSP_LCD_DisplayChar+0x80>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4c0d      	ldr	r4, [pc, #52]	; (8004df4 <BSP_LCD_DisplayChar+0x84>)
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4423      	add	r3, r4
 8004dc8:	3308      	adds	r3, #8
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	889b      	ldrh	r3, [r3, #4]
 8004dce:	3307      	adds	r3, #7
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	da00      	bge.n	8004dd6 <BSP_LCD_DisplayChar+0x66>
 8004dd4:	3307      	adds	r3, #7
 8004dd6:	10db      	asrs	r3, r3, #3
 8004dd8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004ddc:	18ca      	adds	r2, r1, r3
 8004dde:	88b9      	ldrh	r1, [r7, #4]
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fe0c 	bl	8005a00 <DrawChar>
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}
 8004df0:	2000081c 	.word	0x2000081c
 8004df4:	20000820 	.word	0x20000820

08004df8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004df8:	b5b0      	push	{r4, r5, r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60ba      	str	r2, [r7, #8]
 8004e00:	461a      	mov	r2, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	81fb      	strh	r3, [r7, #14]
 8004e06:	460b      	mov	r3, r1
 8004e08:	81bb      	strh	r3, [r7, #12]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	83fb      	strh	r3, [r7, #30]
 8004e12:	2300      	movs	r3, #0
 8004e14:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004e22:	e002      	b.n	8004e2a <BSP_LCD_DisplayStringAt+0x32>
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	3301      	adds	r3, #1
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	617a      	str	r2, [r7, #20]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f6      	bne.n	8004e24 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004e36:	f7ff fe51 	bl	8004adc <BSP_LCD_GetXSize>
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	4b50      	ldr	r3, [pc, #320]	; (8004f80 <BSP_LCD_DisplayStringAt+0x188>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4850      	ldr	r0, [pc, #320]	; (8004f84 <BSP_LCD_DisplayStringAt+0x18c>)
 8004e42:	4613      	mov	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4403      	add	r3, r0
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	889b      	ldrh	r3, [r3, #4]
 8004e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e56:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d01c      	beq.n	8004e98 <BSP_LCD_DisplayStringAt+0xa0>
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	dc33      	bgt.n	8004eca <BSP_LCD_DisplayStringAt+0xd2>
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d002      	beq.n	8004e6c <BSP_LCD_DisplayStringAt+0x74>
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d019      	beq.n	8004e9e <BSP_LCD_DisplayStringAt+0xa6>
 8004e6a:	e02e      	b.n	8004eca <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	1ad1      	subs	r1, r2, r3
 8004e72:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <BSP_LCD_DisplayStringAt+0x188>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4843      	ldr	r0, [pc, #268]	; (8004f84 <BSP_LCD_DisplayStringAt+0x18c>)
 8004e78:	4613      	mov	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4403      	add	r3, r0
 8004e82:	3308      	adds	r3, #8
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	889b      	ldrh	r3, [r3, #4]
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	4413      	add	r3, r2
 8004e94:	83fb      	strh	r3, [r7, #30]
      break;
 8004e96:	e01b      	b.n	8004ed0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004e98:	89fb      	ldrh	r3, [r7, #14]
 8004e9a:	83fb      	strh	r3, [r7, #30]
      break;
 8004e9c:	e018      	b.n	8004ed0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	b299      	uxth	r1, r3
 8004ea6:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <BSP_LCD_DisplayStringAt+0x188>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4836      	ldr	r0, [pc, #216]	; (8004f84 <BSP_LCD_DisplayStringAt+0x18c>)
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4403      	add	r3, r0
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	889b      	ldrh	r3, [r3, #4]
 8004ebc:	fb11 f303 	smulbb	r3, r1, r3
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	89fb      	ldrh	r3, [r7, #14]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	83fb      	strh	r3, [r7, #30]
      break;
 8004ec8:	e002      	b.n	8004ed0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8004eca:	89fb      	ldrh	r3, [r7, #14]
 8004ecc:	83fb      	strh	r3, [r7, #30]
      break;
 8004ece:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004ed0:	8bfb      	ldrh	r3, [r7, #30]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <BSP_LCD_DisplayStringAt+0xe6>
 8004ed6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da1d      	bge.n	8004f1a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004ee2:	e01a      	b.n	8004f1a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	89b9      	ldrh	r1, [r7, #12]
 8004eea:	8bfb      	ldrh	r3, [r7, #30]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff ff3f 	bl	8004d70 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004ef2:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <BSP_LCD_DisplayStringAt+0x188>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4923      	ldr	r1, [pc, #140]	; (8004f84 <BSP_LCD_DisplayStringAt+0x18c>)
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	3308      	adds	r3, #8
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	889a      	ldrh	r2, [r3, #4]
 8004f08:	8bfb      	ldrh	r3, [r7, #30]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60bb      	str	r3, [r7, #8]
    i++;
 8004f14:	8bbb      	ldrh	r3, [r7, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf14      	ite	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	2300      	moveq	r3, #0
 8004f26:	b2dc      	uxtb	r4, r3
 8004f28:	f7ff fdd8 	bl	8004adc <BSP_LCD_GetXSize>
 8004f2c:	8bb9      	ldrh	r1, [r7, #28]
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <BSP_LCD_DisplayStringAt+0x188>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4d14      	ldr	r5, [pc, #80]	; (8004f84 <BSP_LCD_DisplayStringAt+0x18c>)
 8004f34:	4613      	mov	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	442b      	add	r3, r5
 8004f3e:	3308      	adds	r3, #8
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	889b      	ldrh	r3, [r3, #4]
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ac3      	subs	r3, r0, r3
 8004f4a:	b299      	uxth	r1, r3
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <BSP_LCD_DisplayStringAt+0x188>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	480c      	ldr	r0, [pc, #48]	; (8004f84 <BSP_LCD_DisplayStringAt+0x18c>)
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4403      	add	r3, r0
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	889b      	ldrh	r3, [r3, #4]
 8004f62:	4299      	cmp	r1, r3
 8004f64:	bf2c      	ite	cs
 8004f66:	2301      	movcs	r3, #1
 8004f68:	2300      	movcc	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4023      	ands	r3, r4
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1b7      	bne.n	8004ee4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	2000081c 	.word	0x2000081c
 8004f84:	20000820 	.word	0x20000820

08004f88 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004f88:	b5b0      	push	{r4, r5, r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80fb      	strh	r3, [r7, #6]
 8004f92:	460b      	mov	r3, r1
 8004f94:	80bb      	strh	r3, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004f9e:	4b26      	ldr	r3, [pc, #152]	; (8005038 <BSP_LCD_DrawHLine+0xb0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a26      	ldr	r2, [pc, #152]	; (800503c <BSP_LCD_DrawHLine+0xb4>)
 8004fa4:	2134      	movs	r1, #52	; 0x34
 8004fa6:	fb01 f303 	mul.w	r3, r1, r3
 8004faa:	4413      	add	r3, r2
 8004fac:	3348      	adds	r3, #72	; 0x48
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d114      	bne.n	8004fde <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004fb4:	4b20      	ldr	r3, [pc, #128]	; (8005038 <BSP_LCD_DrawHLine+0xb0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a20      	ldr	r2, [pc, #128]	; (800503c <BSP_LCD_DrawHLine+0xb4>)
 8004fba:	2134      	movs	r1, #52	; 0x34
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	335c      	adds	r3, #92	; 0x5c
 8004fc4:	681c      	ldr	r4, [r3, #0]
 8004fc6:	f7ff fd89 	bl	8004adc <BSP_LCD_GetXSize>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	88bb      	ldrh	r3, [r7, #4]
 8004fce:	fb03 f202 	mul.w	r2, r3, r2
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4423      	add	r3, r4
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e013      	b.n	8005006 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004fde:	4b16      	ldr	r3, [pc, #88]	; (8005038 <BSP_LCD_DrawHLine+0xb0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a16      	ldr	r2, [pc, #88]	; (800503c <BSP_LCD_DrawHLine+0xb4>)
 8004fe4:	2134      	movs	r1, #52	; 0x34
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	335c      	adds	r3, #92	; 0x5c
 8004fee:	681c      	ldr	r4, [r3, #0]
 8004ff0:	f7ff fd74 	bl	8004adc <BSP_LCD_GetXSize>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	88bb      	ldrh	r3, [r7, #4]
 8004ff8:	fb03 f202 	mul.w	r2, r3, r2
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4423      	add	r3, r4
 8005004:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <BSP_LCD_DrawHLine+0xb0>)
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	887c      	ldrh	r4, [r7, #2]
 800500e:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <BSP_LCD_DrawHLine+0xb0>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4d0b      	ldr	r5, [pc, #44]	; (8005040 <BSP_LCD_DrawHLine+0xb8>)
 8005014:	4613      	mov	r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	442b      	add	r3, r5
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	2300      	movs	r3, #0
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2301      	movs	r3, #1
 8005028:	4622      	mov	r2, r4
 800502a:	f000 fda1 	bl	8005b70 <LL_FillBuffer>
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bdb0      	pop	{r4, r5, r7, pc}
 8005036:	bf00      	nop
 8005038:	2000081c 	.word	0x2000081c
 800503c:	20000734 	.word	0x20000734
 8005040:	20000820 	.word	0x20000820

08005044 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005046:	b087      	sub	sp, #28
 8005048:	af02      	add	r7, sp, #8
 800504a:	4603      	mov	r3, r0
 800504c:	80fb      	strh	r3, [r7, #6]
 800504e:	460b      	mov	r3, r1
 8005050:	80bb      	strh	r3, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800505a:	4b28      	ldr	r3, [pc, #160]	; (80050fc <BSP_LCD_DrawVLine+0xb8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a28      	ldr	r2, [pc, #160]	; (8005100 <BSP_LCD_DrawVLine+0xbc>)
 8005060:	2134      	movs	r1, #52	; 0x34
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	3348      	adds	r3, #72	; 0x48
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d114      	bne.n	800509a <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005070:	4b22      	ldr	r3, [pc, #136]	; (80050fc <BSP_LCD_DrawVLine+0xb8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a22      	ldr	r2, [pc, #136]	; (8005100 <BSP_LCD_DrawVLine+0xbc>)
 8005076:	2134      	movs	r1, #52	; 0x34
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	335c      	adds	r3, #92	; 0x5c
 8005080:	681c      	ldr	r4, [r3, #0]
 8005082:	f7ff fd2b 	bl	8004adc <BSP_LCD_GetXSize>
 8005086:	4602      	mov	r2, r0
 8005088:	88bb      	ldrh	r3, [r7, #4]
 800508a:	fb03 f202 	mul.w	r2, r3, r2
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	4413      	add	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4423      	add	r3, r4
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e013      	b.n	80050c2 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <BSP_LCD_DrawVLine+0xb8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a18      	ldr	r2, [pc, #96]	; (8005100 <BSP_LCD_DrawVLine+0xbc>)
 80050a0:	2134      	movs	r1, #52	; 0x34
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	335c      	adds	r3, #92	; 0x5c
 80050aa:	681c      	ldr	r4, [r3, #0]
 80050ac:	f7ff fd16 	bl	8004adc <BSP_LCD_GetXSize>
 80050b0:	4602      	mov	r2, r0
 80050b2:	88bb      	ldrh	r3, [r7, #4]
 80050b4:	fb03 f202 	mul.w	r2, r3, r2
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4423      	add	r3, r4
 80050c0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <BSP_LCD_DrawVLine+0xb8>)
 80050c4:	681c      	ldr	r4, [r3, #0]
 80050c6:	68fd      	ldr	r5, [r7, #12]
 80050c8:	887e      	ldrh	r6, [r7, #2]
 80050ca:	f7ff fd07 	bl	8004adc <BSP_LCD_GetXSize>
 80050ce:	4603      	mov	r3, r0
 80050d0:	1e59      	subs	r1, r3, #1
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <BSP_LCD_DrawVLine+0xb8>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	480b      	ldr	r0, [pc, #44]	; (8005104 <BSP_LCD_DrawVLine+0xc0>)
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4403      	add	r3, r0
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	9100      	str	r1, [sp, #0]
 80050e8:	4633      	mov	r3, r6
 80050ea:	2201      	movs	r2, #1
 80050ec:	4629      	mov	r1, r5
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 fd3e 	bl	8005b70 <LL_FillBuffer>
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fc:	2000081c 	.word	0x2000081c
 8005100:	20000734 	.word	0x20000734
 8005104:	20000820 	.word	0x20000820

08005108 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b08b      	sub	sp, #44	; 0x2c
 800510c:	af00      	add	r7, sp, #0
 800510e:	4604      	mov	r4, r0
 8005110:	4608      	mov	r0, r1
 8005112:	4611      	mov	r1, r2
 8005114:	461a      	mov	r2, r3
 8005116:	4623      	mov	r3, r4
 8005118:	80fb      	strh	r3, [r7, #6]
 800511a:	4603      	mov	r3, r0
 800511c:	80bb      	strh	r3, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	807b      	strh	r3, [r7, #2]
 8005122:	4613      	mov	r3, r2
 8005124:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8005126:	2300      	movs	r3, #0
 8005128:	823b      	strh	r3, [r7, #16]
 800512a:	2300      	movs	r3, #0
 800512c:	81fb      	strh	r3, [r7, #14]
 800512e:	2300      	movs	r3, #0
 8005130:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005132:	2300      	movs	r3, #0
 8005134:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005136:	2300      	movs	r3, #0
 8005138:	847b      	strh	r3, [r7, #34]	; 0x22
 800513a:	2300      	movs	r3, #0
 800513c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 800513e:	2300      	movs	r3, #0
 8005140:	83fb      	strh	r3, [r7, #30]
 8005142:	2300      	movs	r3, #0
 8005144:	83bb      	strh	r3, [r7, #28]
 8005146:	2300      	movs	r3, #0
 8005148:	837b      	strh	r3, [r7, #26]
 800514a:	2300      	movs	r3, #0
 800514c:	833b      	strh	r3, [r7, #24]
 800514e:	2300      	movs	r3, #0
 8005150:	82fb      	strh	r3, [r7, #22]
 8005152:	2300      	movs	r3, #0
 8005154:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	bfb8      	it	lt
 8005164:	425b      	neglt	r3, r3
 8005166:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8005168:	883a      	ldrh	r2, [r7, #0]
 800516a:	88bb      	ldrh	r3, [r7, #4]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	bfb8      	it	lt
 8005172:	425b      	neglt	r3, r3
 8005174:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800517a:	88bb      	ldrh	r3, [r7, #4]
 800517c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	429a      	cmp	r2, r3
 8005184:	d304      	bcc.n	8005190 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8005186:	2301      	movs	r3, #1
 8005188:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	843b      	strh	r3, [r7, #32]
 800518e:	e005      	b.n	800519c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8005190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005194:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8005196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800519a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800519c:	883a      	ldrh	r2, [r7, #0]
 800519e:	88bb      	ldrh	r3, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d304      	bcc.n	80051ae <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80051a8:	2301      	movs	r3, #1
 80051aa:	83bb      	strh	r3, [r7, #28]
 80051ac:	e005      	b.n	80051ba <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80051ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051b2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80051b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051b8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80051ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80051be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	db11      	blt.n	80051ea <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80051c6:	2300      	movs	r3, #0
 80051c8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80051ca:	2300      	movs	r3, #0
 80051cc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80051ce:	8a3b      	ldrh	r3, [r7, #16]
 80051d0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80051d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da00      	bge.n	80051dc <BSP_LCD_DrawLine+0xd4>
 80051da:	3301      	adds	r3, #1
 80051dc:	105b      	asrs	r3, r3, #1
 80051de:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80051e0:	89fb      	ldrh	r3, [r7, #14]
 80051e2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80051e4:	8a3b      	ldrh	r3, [r7, #16]
 80051e6:	82bb      	strh	r3, [r7, #20]
 80051e8:	e010      	b.n	800520c <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80051ea:	2300      	movs	r3, #0
 80051ec:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80051ee:	2300      	movs	r3, #0
 80051f0:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80051f2:	89fb      	ldrh	r3, [r7, #14]
 80051f4:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80051f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da00      	bge.n	8005200 <BSP_LCD_DrawLine+0xf8>
 80051fe:	3301      	adds	r3, #1
 8005200:	105b      	asrs	r3, r3, #1
 8005202:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8005204:	8a3b      	ldrh	r3, [r7, #16]
 8005206:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8005208:	89fb      	ldrh	r3, [r7, #14]
 800520a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800520c:	2300      	movs	r3, #0
 800520e:	827b      	strh	r3, [r7, #18]
 8005210:	e037      	b.n	8005282 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8005212:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8005214:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005216:	4b20      	ldr	r3, [pc, #128]	; (8005298 <BSP_LCD_DrawLine+0x190>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4c20      	ldr	r4, [pc, #128]	; (800529c <BSP_LCD_DrawLine+0x194>)
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4423      	add	r3, r4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	f000 f955 	bl	80054d8 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800522e:	8b3a      	ldrh	r2, [r7, #24]
 8005230:	8afb      	ldrh	r3, [r7, #22]
 8005232:	4413      	add	r3, r2
 8005234:	b29b      	uxth	r3, r3
 8005236:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8005238:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800523c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005240:	429a      	cmp	r2, r3
 8005242:	db0e      	blt.n	8005262 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8005244:	8b3a      	ldrh	r2, [r7, #24]
 8005246:	8b7b      	ldrh	r3, [r7, #26]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	b29b      	uxth	r3, r3
 800524c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800524e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005250:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005252:	4413      	add	r3, r2
 8005254:	b29b      	uxth	r3, r3
 8005256:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8005258:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800525a:	8bfb      	ldrh	r3, [r7, #30]
 800525c:	4413      	add	r3, r2
 800525e:	b29b      	uxth	r3, r3
 8005260:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8005262:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005264:	8c3b      	ldrh	r3, [r7, #32]
 8005266:	4413      	add	r3, r2
 8005268:	b29b      	uxth	r3, r3
 800526a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800526c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800526e:	8bbb      	ldrh	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	b29b      	uxth	r3, r3
 8005274:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8005276:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800527a:	b29b      	uxth	r3, r3
 800527c:	3301      	adds	r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	827b      	strh	r3, [r7, #18]
 8005282:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005286:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800528a:	429a      	cmp	r2, r3
 800528c:	ddc1      	ble.n	8005212 <BSP_LCD_DrawLine+0x10a>
  }
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	372c      	adds	r7, #44	; 0x2c
 8005294:	46bd      	mov	sp, r7
 8005296:	bd90      	pop	{r4, r7, pc}
 8005298:	2000081c 	.word	0x2000081c
 800529c:	20000820 	.word	0x20000820

080052a0 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	461a      	mov	r2, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	80fb      	strh	r3, [r7, #6]
 80052b2:	4603      	mov	r3, r0
 80052b4:	80bb      	strh	r3, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	807b      	strh	r3, [r7, #2]
 80052ba:	4613      	mov	r3, r2
 80052bc:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	88b9      	ldrh	r1, [r7, #4]
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fe5f 	bl	8004f88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80052ca:	88ba      	ldrh	r2, [r7, #4]
 80052cc:	883b      	ldrh	r3, [r7, #0]
 80052ce:	4413      	add	r3, r2
 80052d0:	b299      	uxth	r1, r3
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fe56 	bl	8004f88 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80052dc:	883a      	ldrh	r2, [r7, #0]
 80052de:	88b9      	ldrh	r1, [r7, #4]
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff feae 	bl	8005044 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	887b      	ldrh	r3, [r7, #2]
 80052ec:	4413      	add	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	883a      	ldrh	r2, [r7, #0]
 80052f2:	88b9      	ldrh	r1, [r7, #4]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fea5 	bl	8005044 <BSP_LCD_DrawVLine>
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd90      	pop	{r4, r7, pc}
	...

08005304 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	80fb      	strh	r3, [r7, #6]
 800530e:	460b      	mov	r3, r1
 8005310:	80bb      	strh	r3, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8005316:	887b      	ldrh	r3, [r7, #2]
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	f1c3 0303 	rsb	r3, r3, #3
 800531e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8005324:	887b      	ldrh	r3, [r7, #2]
 8005326:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8005328:	e0c7      	b.n	80054ba <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	b29a      	uxth	r2, r3
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	4413      	add	r3, r2
 8005332:	b298      	uxth	r0, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	b29b      	uxth	r3, r3
 8005338:	88ba      	ldrh	r2, [r7, #4]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	b299      	uxth	r1, r3
 800533e:	4b64      	ldr	r3, [pc, #400]	; (80054d0 <BSP_LCD_DrawCircle+0x1cc>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4c64      	ldr	r4, [pc, #400]	; (80054d4 <BSP_LCD_DrawCircle+0x1d0>)
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4423      	add	r3, r4
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	f000 f8c1 	bl	80054d8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	b29b      	uxth	r3, r3
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	b298      	uxth	r0, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	b29b      	uxth	r3, r3
 8005364:	88ba      	ldrh	r2, [r7, #4]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	b299      	uxth	r1, r3
 800536a:	4b59      	ldr	r3, [pc, #356]	; (80054d0 <BSP_LCD_DrawCircle+0x1cc>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4c59      	ldr	r4, [pc, #356]	; (80054d4 <BSP_LCD_DrawCircle+0x1d0>)
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4423      	add	r3, r4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	f000 f8ab 	bl	80054d8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	b29a      	uxth	r2, r3
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	4413      	add	r3, r2
 800538a:	b298      	uxth	r0, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	b29b      	uxth	r3, r3
 8005390:	88ba      	ldrh	r2, [r7, #4]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	b299      	uxth	r1, r3
 8005396:	4b4e      	ldr	r3, [pc, #312]	; (80054d0 <BSP_LCD_DrawCircle+0x1cc>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4c4e      	ldr	r4, [pc, #312]	; (80054d4 <BSP_LCD_DrawCircle+0x1d0>)
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4423      	add	r3, r4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	f000 f895 	bl	80054d8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	b298      	uxth	r0, r3
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	88ba      	ldrh	r2, [r7, #4]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	b299      	uxth	r1, r3
 80053c2:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <BSP_LCD_DrawCircle+0x1cc>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4c43      	ldr	r4, [pc, #268]	; (80054d4 <BSP_LCD_DrawCircle+0x1d0>)
 80053c8:	4613      	mov	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4423      	add	r3, r4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f000 f87f 	bl	80054d8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	b29a      	uxth	r2, r3
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	4413      	add	r3, r2
 80053e2:	b298      	uxth	r0, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	88bb      	ldrh	r3, [r7, #4]
 80053ea:	4413      	add	r3, r2
 80053ec:	b299      	uxth	r1, r3
 80053ee:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <BSP_LCD_DrawCircle+0x1cc>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4c38      	ldr	r4, [pc, #224]	; (80054d4 <BSP_LCD_DrawCircle+0x1d0>)
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4423      	add	r3, r4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	f000 f869 	bl	80054d8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	b29b      	uxth	r3, r3
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	b298      	uxth	r0, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	b29a      	uxth	r2, r3
 8005414:	88bb      	ldrh	r3, [r7, #4]
 8005416:	4413      	add	r3, r2
 8005418:	b299      	uxth	r1, r3
 800541a:	4b2d      	ldr	r3, [pc, #180]	; (80054d0 <BSP_LCD_DrawCircle+0x1cc>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4c2d      	ldr	r4, [pc, #180]	; (80054d4 <BSP_LCD_DrawCircle+0x1d0>)
 8005420:	4613      	mov	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4423      	add	r3, r4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	f000 f853 	bl	80054d8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	b29a      	uxth	r2, r3
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	4413      	add	r3, r2
 800543a:	b298      	uxth	r0, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	b29a      	uxth	r2, r3
 8005440:	88bb      	ldrh	r3, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	b299      	uxth	r1, r3
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <BSP_LCD_DrawCircle+0x1cc>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4c22      	ldr	r4, [pc, #136]	; (80054d4 <BSP_LCD_DrawCircle+0x1d0>)
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4423      	add	r3, r4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	f000 f83d 	bl	80054d8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	b29b      	uxth	r3, r3
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	b298      	uxth	r0, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	b29a      	uxth	r2, r3
 800546c:	88bb      	ldrh	r3, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	b299      	uxth	r1, r3
 8005472:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <BSP_LCD_DrawCircle+0x1cc>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4c17      	ldr	r4, [pc, #92]	; (80054d4 <BSP_LCD_DrawCircle+0x1d0>)
 8005478:	4613      	mov	r3, r2
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4423      	add	r3, r4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	f000 f827 	bl	80054d8 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	da06      	bge.n	800549e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	009a      	lsls	r2, r3, #2
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	3306      	adds	r3, #6
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e00a      	b.n	80054b4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	009a      	lsls	r2, r3, #2
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	330a      	adds	r3, #10
 80054ac:	617b      	str	r3, [r7, #20]
      current_y--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3301      	adds	r3, #1
 80054b8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	429a      	cmp	r2, r3
 80054c0:	f67f af33 	bls.w	800532a <BSP_LCD_DrawCircle+0x26>
  } 
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd90      	pop	{r4, r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2000081c 	.word	0x2000081c
 80054d4:	20000820 	.word	0x20000820

080054d8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80054d8:	b5b0      	push	{r4, r5, r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	603a      	str	r2, [r7, #0]
 80054e2:	80fb      	strh	r3, [r7, #6]
 80054e4:	460b      	mov	r3, r1
 80054e6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80054e8:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <BSP_LCD_DrawPixel+0x88>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <BSP_LCD_DrawPixel+0x8c>)
 80054ee:	2134      	movs	r1, #52	; 0x34
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	3348      	adds	r3, #72	; 0x48
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d116      	bne.n	800552c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80054fe:	4b18      	ldr	r3, [pc, #96]	; (8005560 <BSP_LCD_DrawPixel+0x88>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <BSP_LCD_DrawPixel+0x8c>)
 8005504:	2134      	movs	r1, #52	; 0x34
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	335c      	adds	r3, #92	; 0x5c
 800550e:	681c      	ldr	r4, [r3, #0]
 8005510:	88bd      	ldrh	r5, [r7, #4]
 8005512:	f7ff fae3 	bl	8004adc <BSP_LCD_GetXSize>
 8005516:	4603      	mov	r3, r0
 8005518:	fb03 f205 	mul.w	r2, r3, r5
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	4413      	add	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4423      	add	r3, r4
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	b292      	uxth	r2, r2
 8005528:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800552a:	e015      	b.n	8005558 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <BSP_LCD_DrawPixel+0x88>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0c      	ldr	r2, [pc, #48]	; (8005564 <BSP_LCD_DrawPixel+0x8c>)
 8005532:	2134      	movs	r1, #52	; 0x34
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	4413      	add	r3, r2
 800553a:	335c      	adds	r3, #92	; 0x5c
 800553c:	681c      	ldr	r4, [r3, #0]
 800553e:	88bd      	ldrh	r5, [r7, #4]
 8005540:	f7ff facc 	bl	8004adc <BSP_LCD_GetXSize>
 8005544:	4603      	mov	r3, r0
 8005546:	fb03 f205 	mul.w	r2, r3, r5
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4423      	add	r3, r4
 8005552:	461a      	mov	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	6013      	str	r3, [r2, #0]
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bdb0      	pop	{r4, r5, r7, pc}
 8005560:	2000081c 	.word	0x2000081c
 8005564:	20000734 	.word	0x20000734

08005568 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af02      	add	r7, sp, #8
 8005570:	4604      	mov	r4, r0
 8005572:	4608      	mov	r0, r1
 8005574:	4611      	mov	r1, r2
 8005576:	461a      	mov	r2, r3
 8005578:	4623      	mov	r3, r4
 800557a:	80fb      	strh	r3, [r7, #6]
 800557c:	4603      	mov	r3, r0
 800557e:	80bb      	strh	r3, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	807b      	strh	r3, [r7, #2]
 8005584:	4613      	mov	r3, r2
 8005586:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800558c:	4b30      	ldr	r3, [pc, #192]	; (8005650 <BSP_LCD_FillRect+0xe8>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4930      	ldr	r1, [pc, #192]	; (8005654 <BSP_LCD_FillRect+0xec>)
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fb72 	bl	8004c88 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80055a4:	4b2a      	ldr	r3, [pc, #168]	; (8005650 <BSP_LCD_FillRect+0xe8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <BSP_LCD_FillRect+0xf0>)
 80055aa:	2134      	movs	r1, #52	; 0x34
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	3348      	adds	r3, #72	; 0x48
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d114      	bne.n	80055e4 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <BSP_LCD_FillRect+0xe8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a26      	ldr	r2, [pc, #152]	; (8005658 <BSP_LCD_FillRect+0xf0>)
 80055c0:	2134      	movs	r1, #52	; 0x34
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	335c      	adds	r3, #92	; 0x5c
 80055ca:	681c      	ldr	r4, [r3, #0]
 80055cc:	f7ff fa86 	bl	8004adc <BSP_LCD_GetXSize>
 80055d0:	4602      	mov	r2, r0
 80055d2:	88bb      	ldrh	r3, [r7, #4]
 80055d4:	fb03 f202 	mul.w	r2, r3, r2
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	4413      	add	r3, r2
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	4423      	add	r3, r4
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e013      	b.n	800560c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <BSP_LCD_FillRect+0xe8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <BSP_LCD_FillRect+0xf0>)
 80055ea:	2134      	movs	r1, #52	; 0x34
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	335c      	adds	r3, #92	; 0x5c
 80055f4:	681c      	ldr	r4, [r3, #0]
 80055f6:	f7ff fa71 	bl	8004adc <BSP_LCD_GetXSize>
 80055fa:	4602      	mov	r2, r0
 80055fc:	88bb      	ldrh	r3, [r7, #4]
 80055fe:	fb03 f202 	mul.w	r2, r3, r2
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4423      	add	r3, r4
 800560a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800560c:	4b10      	ldr	r3, [pc, #64]	; (8005650 <BSP_LCD_FillRect+0xe8>)
 800560e:	681c      	ldr	r4, [r3, #0]
 8005610:	68fd      	ldr	r5, [r7, #12]
 8005612:	887e      	ldrh	r6, [r7, #2]
 8005614:	f8b7 8000 	ldrh.w	r8, [r7]
 8005618:	f7ff fa60 	bl	8004adc <BSP_LCD_GetXSize>
 800561c:	4602      	mov	r2, r0
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	1ad1      	subs	r1, r2, r3
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <BSP_LCD_FillRect+0xe8>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	480b      	ldr	r0, [pc, #44]	; (8005654 <BSP_LCD_FillRect+0xec>)
 8005628:	4613      	mov	r3, r2
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4403      	add	r3, r0
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	9100      	str	r1, [sp, #0]
 8005638:	4643      	mov	r3, r8
 800563a:	4632      	mov	r2, r6
 800563c:	4629      	mov	r1, r5
 800563e:	4620      	mov	r0, r4
 8005640:	f000 fa96 	bl	8005b70 <LL_FillBuffer>
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564e:	bf00      	nop
 8005650:	2000081c 	.word	0x2000081c
 8005654:	20000820 	.word	0x20000820
 8005658:	20000734 	.word	0x20000734

0800565c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	80fb      	strh	r3, [r7, #6]
 8005666:	460b      	mov	r3, r1
 8005668:	80bb      	strh	r3, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800566e:	887b      	ldrh	r3, [r7, #2]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	f1c3 0303 	rsb	r3, r3, #3
 8005676:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800567c:	887b      	ldrh	r3, [r7, #2]
 800567e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005680:	4b44      	ldr	r3, [pc, #272]	; (8005794 <BSP_LCD_FillCircle+0x138>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4944      	ldr	r1, [pc, #272]	; (8005798 <BSP_LCD_FillCircle+0x13c>)
 8005686:	4613      	mov	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff faf8 	bl	8004c88 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8005698:	e061      	b.n	800575e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d021      	beq.n	80056e4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	b298      	uxth	r0, r3
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	88bb      	ldrh	r3, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	b299      	uxth	r1, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	f7ff fc63 	bl	8004f88 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	b298      	uxth	r0, r3
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	88ba      	ldrh	r2, [r7, #4]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	b299      	uxth	r1, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	f7ff fc52 	bl	8004f88 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d021      	beq.n	800572e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	b298      	uxth	r0, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	88ba      	ldrh	r2, [r7, #4]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	b299      	uxth	r1, r3
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	b29b      	uxth	r3, r3
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	b29b      	uxth	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	f7ff fc3e 	bl	8004f88 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	b29b      	uxth	r3, r3
 8005710:	88fa      	ldrh	r2, [r7, #6]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	b298      	uxth	r0, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	b29a      	uxth	r2, r3
 800571a:	88bb      	ldrh	r3, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	b299      	uxth	r1, r3
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	b29b      	uxth	r3, r3
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	b29b      	uxth	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	f7ff fc2d 	bl	8004f88 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da06      	bge.n	8005742 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	009a      	lsls	r2, r3, #2
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	3306      	adds	r3, #6
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e00a      	b.n	8005758 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	009a      	lsls	r2, r3, #2
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4413      	add	r3, r2
 800574e:	330a      	adds	r3, #10
 8005750:	617b      	str	r3, [r7, #20]
      current_y--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3b01      	subs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3301      	adds	r3, #1
 800575c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	429a      	cmp	r2, r3
 8005764:	d999      	bls.n	800569a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <BSP_LCD_FillCircle+0x138>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	490b      	ldr	r1, [pc, #44]	; (8005798 <BSP_LCD_FillCircle+0x13c>)
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fa85 	bl	8004c88 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800577e:	887a      	ldrh	r2, [r7, #2]
 8005780:	88b9      	ldrh	r1, [r7, #4]
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fdbd 	bl	8005304 <BSP_LCD_DrawCircle>
}
 800578a:	bf00      	nop
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	2000081c 	.word	0x2000081c
 8005798:	20000820 	.word	0x20000820

0800579c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <BSP_LCD_DisplayOn+0x30>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <BSP_LCD_DisplayOn+0x30>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80057b0:	2201      	movs	r2, #1
 80057b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057b6:	4806      	ldr	r0, [pc, #24]	; (80057d0 <BSP_LCD_DisplayOn+0x34>)
 80057b8:	f002 fc76 	bl	80080a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80057bc:	2201      	movs	r2, #1
 80057be:	2108      	movs	r1, #8
 80057c0:	4804      	ldr	r0, [pc, #16]	; (80057d4 <BSP_LCD_DisplayOn+0x38>)
 80057c2:	f002 fc71 	bl	80080a8 <HAL_GPIO_WritePin>
}
 80057c6:	bf00      	nop
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000734 	.word	0x20000734
 80057d0:	40022000 	.word	0x40022000
 80057d4:	40022800 	.word	0x40022800

080057d8 <BSP_LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* Display Off */
  __HAL_LTDC_DISABLE(&hLtdcHandler);
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <BSP_LCD_DisplayOff+0x30>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	4b09      	ldr	r3, [pc, #36]	; (8005808 <BSP_LCD_DisplayOff+0x30>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0201 	bic.w	r2, r2, #1
 80057ea:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 80057ec:	2200      	movs	r2, #0
 80057ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057f2:	4806      	ldr	r0, [pc, #24]	; (800580c <BSP_LCD_DisplayOff+0x34>)
 80057f4:	f002 fc58 	bl	80080a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 80057f8:	2200      	movs	r2, #0
 80057fa:	2108      	movs	r1, #8
 80057fc:	4804      	ldr	r0, [pc, #16]	; (8005810 <BSP_LCD_DisplayOff+0x38>)
 80057fe:	f002 fc53 	bl	80080a8 <HAL_GPIO_WritePin>
}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000734 	.word	0x20000734
 800580c:	40022000 	.word	0x40022000
 8005810:	40022800 	.word	0x40022800

08005814 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b090      	sub	sp, #64	; 0x40
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800581e:	4b64      	ldr	r3, [pc, #400]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	4a63      	ldr	r2, [pc, #396]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005828:	6453      	str	r3, [r2, #68]	; 0x44
 800582a:	4b61      	ldr	r3, [pc, #388]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005836:	4b5e      	ldr	r3, [pc, #376]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	4a5d      	ldr	r2, [pc, #372]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 800583c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005840:	6313      	str	r3, [r2, #48]	; 0x30
 8005842:	4b5b      	ldr	r3, [pc, #364]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800584e:	4b58      	ldr	r3, [pc, #352]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	4a57      	ldr	r2, [pc, #348]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005854:	f043 0310 	orr.w	r3, r3, #16
 8005858:	6313      	str	r3, [r2, #48]	; 0x30
 800585a:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	623b      	str	r3, [r7, #32]
 8005864:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005866:	4b52      	ldr	r3, [pc, #328]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	4a51      	ldr	r2, [pc, #324]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 800586c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005870:	6313      	str	r3, [r2, #48]	; 0x30
 8005872:	4b4f      	ldr	r3, [pc, #316]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800587e:	4b4c      	ldr	r3, [pc, #304]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	4a4b      	ldr	r2, [pc, #300]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005888:	6313      	str	r3, [r2, #48]	; 0x30
 800588a:	4b49      	ldr	r3, [pc, #292]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005896:	4b46      	ldr	r3, [pc, #280]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	4a45      	ldr	r2, [pc, #276]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 800589c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058a0:	6313      	str	r3, [r2, #48]	; 0x30
 80058a2:	4b43      	ldr	r3, [pc, #268]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80058ae:	4b40      	ldr	r3, [pc, #256]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	4a3f      	ldr	r2, [pc, #252]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058b8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ba:	4b3d      	ldr	r3, [pc, #244]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80058c6:	4b3a      	ldr	r3, [pc, #232]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	4a39      	ldr	r2, [pc, #228]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6313      	str	r3, [r2, #48]	; 0x30
 80058d2:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80058de:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	4a33      	ldr	r2, [pc, #204]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058e8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ea:	4b31      	ldr	r3, [pc, #196]	; (80059b0 <BSP_LCD_MspInit+0x19c>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80058f6:	2310      	movs	r3, #16
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80058fa:	2302      	movs	r3, #2
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005902:	2302      	movs	r3, #2
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005906:	230e      	movs	r3, #14
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800590a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800590e:	4619      	mov	r1, r3
 8005910:	4828      	ldr	r0, [pc, #160]	; (80059b4 <BSP_LCD_MspInit+0x1a0>)
 8005912:	f002 fa05 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800591c:	2302      	movs	r3, #2
 800591e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005920:	2309      	movs	r3, #9
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005928:	4619      	mov	r1, r3
 800592a:	4823      	ldr	r0, [pc, #140]	; (80059b8 <BSP_LCD_MspInit+0x1a4>)
 800592c:	f002 f9f8 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005930:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005936:	2302      	movs	r3, #2
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800593a:	230e      	movs	r3, #14
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800593e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005942:	4619      	mov	r1, r3
 8005944:	481d      	ldr	r0, [pc, #116]	; (80059bc <BSP_LCD_MspInit+0x1a8>)
 8005946:	f002 f9eb 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800594a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005950:	2302      	movs	r3, #2
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005954:	230e      	movs	r3, #14
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800595c:	4619      	mov	r1, r3
 800595e:	4818      	ldr	r0, [pc, #96]	; (80059c0 <BSP_LCD_MspInit+0x1ac>)
 8005960:	f002 f9de 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8005964:	23f7      	movs	r3, #247	; 0xf7
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005968:	2302      	movs	r3, #2
 800596a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800596c:	230e      	movs	r3, #14
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005974:	4619      	mov	r1, r3
 8005976:	4813      	ldr	r0, [pc, #76]	; (80059c4 <BSP_LCD_MspInit+0x1b0>)
 8005978:	f002 f9d2 	bl	8007d20 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800597c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005982:	2301      	movs	r3, #1
 8005984:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8005986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800598a:	4619      	mov	r1, r3
 800598c:	480b      	ldr	r0, [pc, #44]	; (80059bc <BSP_LCD_MspInit+0x1a8>)
 800598e:	f002 f9c7 	bl	8007d20 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8005992:	2308      	movs	r3, #8
 8005994:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005996:	2301      	movs	r3, #1
 8005998:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800599a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800599e:	4619      	mov	r1, r3
 80059a0:	4808      	ldr	r0, [pc, #32]	; (80059c4 <BSP_LCD_MspInit+0x1b0>)
 80059a2:	f002 f9bd 	bl	8007d20 <HAL_GPIO_Init>
}
 80059a6:	bf00      	nop
 80059a8:	3740      	adds	r7, #64	; 0x40
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40021000 	.word	0x40021000
 80059b8:	40021800 	.word	0x40021800
 80059bc:	40022000 	.word	0x40022000
 80059c0:	40022400 	.word	0x40022400
 80059c4:	40022800 	.word	0x40022800

080059c8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80059d2:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <BSP_LCD_ClockConfig+0x34>)
 80059d4:	2208      	movs	r2, #8
 80059d6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80059d8:	4b08      	ldr	r3, [pc, #32]	; (80059fc <BSP_LCD_ClockConfig+0x34>)
 80059da:	22c0      	movs	r2, #192	; 0xc0
 80059dc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <BSP_LCD_ClockConfig+0x34>)
 80059e0:	2205      	movs	r2, #5
 80059e2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <BSP_LCD_ClockConfig+0x34>)
 80059e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80059ec:	4803      	ldr	r0, [pc, #12]	; (80059fc <BSP_LCD_ClockConfig+0x34>)
 80059ee:	f004 f93b 	bl	8009c68 <HAL_RCCEx_PeriphCLKConfig>
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000838 	.word	0x20000838

08005a00 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	603a      	str	r2, [r7, #0]
 8005a0a:	80fb      	strh	r3, [r7, #6]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	2300      	movs	r3, #0
 8005a16:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005a18:	4b53      	ldr	r3, [pc, #332]	; (8005b68 <DrawChar+0x168>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4953      	ldr	r1, [pc, #332]	; (8005b6c <DrawChar+0x16c>)
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3308      	adds	r3, #8
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	88db      	ldrh	r3, [r3, #6]
 8005a2e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005a30:	4b4d      	ldr	r3, [pc, #308]	; (8005b68 <DrawChar+0x168>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	494d      	ldr	r1, [pc, #308]	; (8005b6c <DrawChar+0x16c>)
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3308      	adds	r3, #8
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	889b      	ldrh	r3, [r3, #4]
 8005a46:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8005a48:	8a3b      	ldrh	r3, [r7, #16]
 8005a4a:	3307      	adds	r3, #7
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da00      	bge.n	8005a52 <DrawChar+0x52>
 8005a50:	3307      	adds	r3, #7
 8005a52:	10db      	asrs	r3, r3, #3
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	8a3b      	ldrh	r3, [r7, #16]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	e076      	b.n	8005b56 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005a68:	8a3b      	ldrh	r3, [r7, #16]
 8005a6a:	3307      	adds	r3, #7
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	da00      	bge.n	8005a72 <DrawChar+0x72>
 8005a70:	3307      	adds	r3, #7
 8005a72:	10db      	asrs	r3, r3, #3
 8005a74:	461a      	mov	r2, r3
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	4413      	add	r3, r2
 8005a80:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8005a82:	8a3b      	ldrh	r3, [r7, #16]
 8005a84:	3307      	adds	r3, #7
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	da00      	bge.n	8005a8c <DrawChar+0x8c>
 8005a8a:	3307      	adds	r3, #7
 8005a8c:	10db      	asrs	r3, r3, #3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d002      	beq.n	8005a98 <DrawChar+0x98>
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d004      	beq.n	8005aa0 <DrawChar+0xa0>
 8005a96:	e00c      	b.n	8005ab2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	617b      	str	r3, [r7, #20]
      break;
 8005a9e:	e016      	b.n	8005ace <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	3201      	adds	r2, #1
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
      break;
 8005ab0:	e00d      	b.n	8005ace <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	041a      	lsls	r2, r3, #16
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	3301      	adds	r3, #1
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	3202      	adds	r2, #2
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
      break;
 8005acc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e036      	b.n	8005b42 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005ad4:	8a3a      	ldrh	r2, [r7, #16]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	4413      	add	r3, r2
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d012      	beq.n	8005b16 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	4413      	add	r3, r2
 8005af8:	b298      	uxth	r0, r3
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <DrawChar+0x168>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	491b      	ldr	r1, [pc, #108]	; (8005b6c <DrawChar+0x16c>)
 8005b00:	4613      	mov	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	88bb      	ldrh	r3, [r7, #4]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f7ff fce2 	bl	80054d8 <BSP_LCD_DrawPixel>
 8005b14:	e012      	b.n	8005b3c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	b298      	uxth	r0, r3
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <DrawChar+0x168>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4911      	ldr	r1, [pc, #68]	; (8005b6c <DrawChar+0x16c>)
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3304      	adds	r3, #4
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	88bb      	ldrh	r3, [r7, #4]
 8005b36:	4619      	mov	r1, r3
 8005b38:	f7ff fcce 	bl	80054d8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	8a3b      	ldrh	r3, [r7, #16]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d3c4      	bcc.n	8005ad4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8005b4a:	88bb      	ldrh	r3, [r7, #4]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	3301      	adds	r3, #1
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	8a7b      	ldrh	r3, [r7, #18]
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d384      	bcc.n	8005a68 <DrawChar+0x68>
  }
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	3720      	adds	r7, #32
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	2000081c 	.word	0x2000081c
 8005b6c:	20000820 	.word	0x20000820

08005b70 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005b80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005b84:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <LL_FillBuffer+0x8c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <LL_FillBuffer+0x90>)
 8005b8c:	2134      	movs	r1, #52	; 0x34
 8005b8e:	fb01 f303 	mul.w	r3, r1, r3
 8005b92:	4413      	add	r3, r2
 8005b94:	3348      	adds	r3, #72	; 0x48
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d103      	bne.n	8005ba4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	e002      	b.n	8005baa <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005baa:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005bb2:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <LL_FillBuffer+0x94>)
 8005bb4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8005bb6:	4810      	ldr	r0, [pc, #64]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005bb8:	f001 fe26 	bl	8007808 <HAL_DMA2D_Init>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d115      	bne.n	8005bee <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	480c      	ldr	r0, [pc, #48]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005bc6:	f001 ff7d 	bl	8007ac4 <HAL_DMA2D_ConfigLayer>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10e      	bne.n	8005bee <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69f9      	ldr	r1, [r7, #28]
 8005bda:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005bdc:	f001 fe5e 	bl	800789c <HAL_DMA2D_Start>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005be6:	210a      	movs	r1, #10
 8005be8:	4803      	ldr	r0, [pc, #12]	; (8005bf8 <LL_FillBuffer+0x88>)
 8005bea:	f001 fe82 	bl	80078f2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200007dc 	.word	0x200007dc
 8005bfc:	2000081c 	.word	0x2000081c
 8005c00:	20000734 	.word	0x20000734
 8005c04:	4002b000 	.word	0x4002b000

08005c08 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005c0c:	4b29      	ldr	r3, [pc, #164]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c0e:	4a2a      	ldr	r2, [pc, #168]	; (8005cb8 <BSP_SDRAM_Init+0xb0>)
 8005c10:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005c12:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <BSP_SDRAM_Init+0xb4>)
 8005c14:	2202      	movs	r2, #2
 8005c16:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005c18:	4b28      	ldr	r3, [pc, #160]	; (8005cbc <BSP_SDRAM_Init+0xb4>)
 8005c1a:	2207      	movs	r2, #7
 8005c1c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005c1e:	4b27      	ldr	r3, [pc, #156]	; (8005cbc <BSP_SDRAM_Init+0xb4>)
 8005c20:	2204      	movs	r2, #4
 8005c22:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005c24:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <BSP_SDRAM_Init+0xb4>)
 8005c26:	2207      	movs	r2, #7
 8005c28:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8005c2a:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <BSP_SDRAM_Init+0xb4>)
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005c30:	4b22      	ldr	r3, [pc, #136]	; (8005cbc <BSP_SDRAM_Init+0xb4>)
 8005c32:	2202      	movs	r2, #2
 8005c34:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8005c36:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <BSP_SDRAM_Init+0xb4>)
 8005c38:	2202      	movs	r2, #2
 8005c3a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005c3c:	4b1d      	ldr	r3, [pc, #116]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005c42:	4b1c      	ldr	r3, [pc, #112]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005c48:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005c4e:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c50:	2210      	movs	r2, #16
 8005c52:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c56:	2240      	movs	r2, #64	; 0x40
 8005c58:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005c5a:	4b16      	ldr	r3, [pc, #88]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c60:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005c62:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005c68:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c6e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005c70:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005c7e:	2100      	movs	r1, #0
 8005c80:	480c      	ldr	r0, [pc, #48]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c82:	f000 f87f 	bl	8005d84 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005c86:	490d      	ldr	r1, [pc, #52]	; (8005cbc <BSP_SDRAM_Init+0xb4>)
 8005c88:	480a      	ldr	r0, [pc, #40]	; (8005cb4 <BSP_SDRAM_Init+0xac>)
 8005c8a:	f005 fd05 	bl	800b698 <HAL_SDRAM_Init>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <BSP_SDRAM_Init+0xb8>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	e002      	b.n	8005ca2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <BSP_SDRAM_Init+0xb8>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005ca2:	f240 6003 	movw	r0, #1539	; 0x603
 8005ca6:	f000 f80d 	bl	8005cc4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <BSP_SDRAM_Init+0xb8>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200008bc 	.word	0x200008bc
 8005cb8:	a0000140 	.word	0xa0000140
 8005cbc:	200008f0 	.word	0x200008f0
 8005cc0:	20000018 	.word	0x20000018

08005cc4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005cd0:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005cd6:	4b29      	ldr	r3, [pc, #164]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cd8:	2210      	movs	r2, #16
 8005cda:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005cdc:	4b27      	ldr	r3, [pc, #156]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cec:	4923      	ldr	r1, [pc, #140]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cee:	4824      	ldr	r0, [pc, #144]	; (8005d80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005cf0:	f005 fd06 	bl	800b700 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	f000 fcdd 	bl	80066b4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005d00:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d02:	2210      	movs	r2, #16
 8005d04:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d16:	4919      	ldr	r1, [pc, #100]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d18:	4819      	ldr	r0, [pc, #100]	; (8005d80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d1a:	f005 fcf1 	bl	800b700 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005d1e:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d20:	2203      	movs	r2, #3
 8005d22:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005d24:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d26:	2210      	movs	r2, #16
 8005d28:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005d2a:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005d30:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d3a:	4910      	ldr	r1, [pc, #64]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d3c:	4810      	ldr	r0, [pc, #64]	; (8005d80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d3e:	f005 fcdf 	bl	800b700 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005d42:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005d46:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d50:	2210      	movs	r2, #16
 8005d52:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a07      	ldr	r2, [pc, #28]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d5e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d64:	4905      	ldr	r1, [pc, #20]	; (8005d7c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d66:	4806      	ldr	r0, [pc, #24]	; (8005d80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d68:	f005 fcca 	bl	800b700 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	4804      	ldr	r0, [pc, #16]	; (8005d80 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d70:	f005 fcfb 	bl	800b76a <HAL_SDRAM_ProgramRefreshRate>
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	2000090c 	.word	0x2000090c
 8005d80:	200008bc 	.word	0x200008bc

08005d84 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b090      	sub	sp, #64	; 0x40
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d8e:	4b70      	ldr	r3, [pc, #448]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	4a6f      	ldr	r2, [pc, #444]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	6393      	str	r3, [r2, #56]	; 0x38
 8005d9a:	4b6d      	ldr	r3, [pc, #436]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005da6:	4b6a      	ldr	r3, [pc, #424]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	4a69      	ldr	r2, [pc, #420]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005dac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005db0:	6313      	str	r3, [r2, #48]	; 0x30
 8005db2:	4b67      	ldr	r3, [pc, #412]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dbe:	4b64      	ldr	r3, [pc, #400]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	4a63      	ldr	r2, [pc, #396]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005dc4:	f043 0304 	orr.w	r3, r3, #4
 8005dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dca:	4b61      	ldr	r3, [pc, #388]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	623b      	str	r3, [r7, #32]
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dd6:	4b5e      	ldr	r3, [pc, #376]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	4a5d      	ldr	r2, [pc, #372]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005ddc:	f043 0308 	orr.w	r3, r3, #8
 8005de0:	6313      	str	r3, [r2, #48]	; 0x30
 8005de2:	4b5b      	ldr	r3, [pc, #364]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005dee:	4b58      	ldr	r3, [pc, #352]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	4a57      	ldr	r2, [pc, #348]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005df4:	f043 0310 	orr.w	r3, r3, #16
 8005df8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dfa:	4b55      	ldr	r3, [pc, #340]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e06:	4b52      	ldr	r3, [pc, #328]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	4a51      	ldr	r2, [pc, #324]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e0c:	f043 0320 	orr.w	r3, r3, #32
 8005e10:	6313      	str	r3, [r2, #48]	; 0x30
 8005e12:	4b4f      	ldr	r3, [pc, #316]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e1e:	4b4c      	ldr	r3, [pc, #304]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a4b      	ldr	r2, [pc, #300]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e28:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2a:	4b49      	ldr	r3, [pc, #292]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005e36:	4b46      	ldr	r3, [pc, #280]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	4a45      	ldr	r2, [pc, #276]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	6313      	str	r3, [r2, #48]	; 0x30
 8005e42:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <BSP_SDRAM_MspInit+0x1cc>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005e52:	2301      	movs	r3, #1
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005e56:	2302      	movs	r3, #2
 8005e58:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005e5e:	2308      	movs	r3, #8
 8005e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e66:	4619      	mov	r1, r3
 8005e68:	483a      	ldr	r0, [pc, #232]	; (8005f54 <BSP_SDRAM_MspInit+0x1d0>)
 8005e6a:	f001 ff59 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005e6e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4837      	ldr	r0, [pc, #220]	; (8005f58 <BSP_SDRAM_MspInit+0x1d4>)
 8005e7c:	f001 ff50 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e80:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4833      	ldr	r0, [pc, #204]	; (8005f5c <BSP_SDRAM_MspInit+0x1d8>)
 8005e8e:	f001 ff47 	bl	8007d20 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e92:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4830      	ldr	r0, [pc, #192]	; (8005f60 <BSP_SDRAM_MspInit+0x1dc>)
 8005ea0:	f001 ff3e 	bl	8007d20 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005ea4:	f248 1333 	movw	r3, #33075	; 0x8133
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005eae:	4619      	mov	r1, r3
 8005eb0:	482c      	ldr	r0, [pc, #176]	; (8005f64 <BSP_SDRAM_MspInit+0x1e0>)
 8005eb2:	f001 ff35 	bl	8007d20 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005eb6:	2328      	movs	r3, #40	; 0x28
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4829      	ldr	r0, [pc, #164]	; (8005f68 <BSP_SDRAM_MspInit+0x1e4>)
 8005ec2:	f001 ff2d 	bl	8007d20 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005ec6:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005ecc:	4b27      	ldr	r3, [pc, #156]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005ece:	2280      	movs	r2, #128	; 0x80
 8005ed0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005ed2:	4b26      	ldr	r3, [pc, #152]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005eda:	4b24      	ldr	r3, [pc, #144]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ee0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005ee2:	4b22      	ldr	r3, [pc, #136]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ee8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005eec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ef0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005efa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005efe:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005f00:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005f06:	4b19      	ldr	r3, [pc, #100]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f08:	2203      	movs	r2, #3
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005f0c:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005f18:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f1a:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <BSP_SDRAM_MspInit+0x1ec>)
 8005f1c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a12      	ldr	r2, [pc, #72]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
 8005f24:	4a11      	ldr	r2, [pc, #68]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005f2a:	4810      	ldr	r0, [pc, #64]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f2c:	f001 f916 	bl	800715c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005f30:	480e      	ldr	r0, [pc, #56]	; (8005f6c <BSP_SDRAM_MspInit+0x1e8>)
 8005f32:	f001 f865 	bl	8007000 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005f36:	2200      	movs	r2, #0
 8005f38:	210f      	movs	r1, #15
 8005f3a:	2038      	movs	r0, #56	; 0x38
 8005f3c:	f001 f829 	bl	8006f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005f40:	2038      	movs	r0, #56	; 0x38
 8005f42:	f001 f842 	bl	8006fca <HAL_NVIC_EnableIRQ>
}
 8005f46:	bf00      	nop
 8005f48:	3740      	adds	r7, #64	; 0x40
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40023800 	.word	0x40023800
 8005f54:	40020800 	.word	0x40020800
 8005f58:	40020c00 	.word	0x40020c00
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40021400 	.word	0x40021400
 8005f64:	40021800 	.word	0x40021800
 8005f68:	40021c00 	.word	0x40021c00
 8005f6c:	2000091c 	.word	0x2000091c
 8005f70:	40026410 	.word	0x40026410

08005f74 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	460b      	mov	r3, r1
 8005f82:	72fb      	strb	r3, [r7, #11]
 8005f84:	4613      	mov	r3, r2
 8005f86:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685c      	ldr	r4, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	68d8      	ldr	r0, [r3, #12]
 8005f90:	893b      	ldrh	r3, [r7, #8]
 8005f92:	7af9      	ldrb	r1, [r7, #11]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	47a0      	blx	r4
 8005f98:	6178      	str	r0, [r7, #20]

  return ret;
 8005f9a:	697b      	ldr	r3, [r7, #20]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd90      	pop	{r4, r7, pc}

08005fa4 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	72fb      	strb	r3, [r7, #11]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681c      	ldr	r4, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68d8      	ldr	r0, [r3, #12]
 8005fc0:	893b      	ldrh	r3, [r7, #8]
 8005fc2:	7af9      	ldrb	r1, [r7, #11]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	47a0      	blx	r4
 8005fc8:	6178      	str	r0, [r7, #20]

  return ret;
 8005fca:	697b      	ldr	r3, [r7, #20]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd90      	pop	{r4, r7, pc}

08005fd4 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005fe0:	f107 0208 	add.w	r2, r7, #8
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff ffc3 	bl	8005f74 <hts221_read_reg>
 8005fee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10f      	bne.n	8006016 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	7a3b      	ldrb	r3, [r7, #8]
 8006000:	f362 0301 	bfi	r3, r2, #0, #2
 8006004:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006006:	f107 0208 	add.w	r2, r7, #8
 800600a:	2301      	movs	r3, #1
 800600c:	2120      	movs	r1, #32
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff ffc8 	bl	8005fa4 <hts221_write_reg>
 8006014:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006016:	68fb      	ldr	r3, [r7, #12]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800602c:	f107 0208 	add.w	r2, r7, #8
 8006030:	2301      	movs	r3, #1
 8006032:	2120      	movs	r1, #32
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ff9d 	bl	8005f74 <hts221_read_reg>
 800603a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	b2da      	uxtb	r2, r3
 800604a:	7a3b      	ldrb	r3, [r7, #8]
 800604c:	f362 0382 	bfi	r3, r2, #2, #1
 8006050:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006052:	f107 0208 	add.w	r2, r7, #8
 8006056:	2301      	movs	r3, #1
 8006058:	2120      	movs	r1, #32
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff ffa2 	bl	8005fa4 <hts221_write_reg>
 8006060:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8006076:	f107 0208 	add.w	r2, r7, #8
 800607a:	2302      	movs	r3, #2
 800607c:	2128      	movs	r1, #40	; 0x28
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff ff78 	bl	8005f74 <hts221_read_reg>
 8006084:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8006086:	7a7b      	ldrb	r3, [r7, #9]
 8006088:	b21a      	sxth	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006094:	b29b      	uxth	r3, r3
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	b29a      	uxth	r2, r3
 800609a:	7a3b      	ldrb	r3, [r7, #8]
 800609c:	b29b      	uxth	r3, r3
 800609e:	4413      	add	r3, r2
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b21a      	sxth	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	801a      	strh	r2, [r3, #0]

  return ret;
 80060a8:	68fb      	ldr	r3, [r7, #12]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80060bc:	f107 0208 	add.w	r2, r7, #8
 80060c0:	2302      	movs	r3, #2
 80060c2:	212a      	movs	r1, #42	; 0x2a
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff ff55 	bl	8005f74 <hts221_read_reg>
 80060ca:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80060cc:	7a7b      	ldrb	r3, [r7, #9]
 80060ce:	b21a      	sxth	r2, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	b29a      	uxth	r2, r3
 80060e0:	7a3b      	ldrb	r3, [r7, #8]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	b21a      	sxth	r2, r3
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80060ee:	68fb      	ldr	r3, [r7, #12]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8006102:	2301      	movs	r3, #1
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	210f      	movs	r1, #15
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff33 	bl	8005f74 <hts221_read_reg>
 800610e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006126:	f107 0208 	add.w	r2, r7, #8
 800612a:	2301      	movs	r3, #1
 800612c:	2120      	movs	r1, #32
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff ff20 	bl	8005f74 <hts221_read_reg>
 8006134:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10f      	bne.n	800615c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	b2da      	uxtb	r2, r3
 8006144:	7a3b      	ldrb	r3, [r7, #8]
 8006146:	f362 13c7 	bfi	r3, r2, #7, #1
 800614a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800614c:	f107 0208 	add.w	r2, r7, #8
 8006150:	2301      	movs	r3, #1
 8006152:	2120      	movs	r1, #32
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff ff25 	bl	8005fa4 <hts221_write_reg>
 800615a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800615c:	68fb      	ldr	r3, [r7, #12]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 8006170:	2301      	movs	r3, #1
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	2127      	movs	r1, #39	; 0x27
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fefc 	bl	8005f74 <hts221_read_reg>
 800617c:	60f8      	str	r0, [r7, #12]

  return ret;
 800617e:	68fb      	ldr	r3, [r7, #12]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8006192:	f107 020b 	add.w	r2, r7, #11
 8006196:	2301      	movs	r3, #1
 8006198:	2130      	movs	r1, #48	; 0x30
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff feea 	bl	8005f74 <hts221_read_reg>
 80061a0:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80061a2:	7afb      	ldrb	r3, [r7, #11]
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80061b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80061ba:	68fb      	ldr	r3, [r7, #12]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80061ce:	f107 020b 	add.w	r2, r7, #11
 80061d2:	2301      	movs	r3, #1
 80061d4:	2131      	movs	r1, #49	; 0x31
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff fecc 	bl	8005f74 <hts221_read_reg>
 80061dc:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80061de:	7afb      	ldrb	r3, [r7, #11]
 80061e0:	ee07 3a90 	vmov	s15, r3
 80061e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80061ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80061f6:	68fb      	ldr	r3, [r7, #12]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800620a:	f107 020f 	add.w	r2, r7, #15
 800620e:	2301      	movs	r3, #1
 8006210:	2132      	movs	r1, #50	; 0x32
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff feae 	bl	8005f74 <hts221_read_reg>
 8006218:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11b      	bne.n	8006258 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006220:	f107 0210 	add.w	r2, r7, #16
 8006224:	2301      	movs	r3, #1
 8006226:	2135      	movs	r1, #53	; 0x35
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fea3 	bl	8005f74 <hts221_read_reg>
 800622e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8006230:	7c3b      	ldrb	r3, [r7, #16]
 8006232:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006236:	b2db      	uxtb	r3, r3
 8006238:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800623a:	7cfb      	ldrb	r3, [r7, #19]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	4413      	add	r3, r2
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800624a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800624e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8006258:	697b      	ldr	r3, [r7, #20]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b086      	sub	sp, #24
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800626c:	f107 020f 	add.w	r2, r7, #15
 8006270:	2301      	movs	r3, #1
 8006272:	2133      	movs	r1, #51	; 0x33
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fe7d 	bl	8005f74 <hts221_read_reg>
 800627a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d11b      	bne.n	80062ba <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006282:	f107 0210 	add.w	r2, r7, #16
 8006286:	2301      	movs	r3, #1
 8006288:	2135      	movs	r1, #53	; 0x35
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff fe72 	bl	8005f74 <hts221_read_reg>
 8006290:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8006292:	7c3b      	ldrb	r3, [r7, #16]
 8006294:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006298:	b2db      	uxtb	r3, r3
 800629a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	4413      	add	r3, r2
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ac:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80062b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80062ba:	697b      	ldr	r3, [r7, #20]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80062ce:	f107 0208 	add.w	r2, r7, #8
 80062d2:	2302      	movs	r3, #2
 80062d4:	2136      	movs	r1, #54	; 0x36
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fe4c 	bl	8005f74 <hts221_read_reg>
 80062dc:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80062de:	7a7b      	ldrb	r3, [r7, #9]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	7a3b      	ldrb	r3, [r7, #8]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80062f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8006316:	f107 0208 	add.w	r2, r7, #8
 800631a:	2302      	movs	r3, #2
 800631c:	213a      	movs	r1, #58	; 0x3a
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fe28 	bl	8005f74 <hts221_read_reg>
 8006324:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006326:	7a7b      	ldrb	r3, [r7, #9]
 8006328:	b29b      	uxth	r3, r3
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	b29a      	uxth	r2, r3
 800632e:	7a3b      	ldrb	r3, [r7, #8]
 8006330:	b29b      	uxth	r3, r3
 8006332:	4413      	add	r3, r2
 8006334:	b29b      	uxth	r3, r3
 8006336:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006338:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800635e:	f107 0208 	add.w	r2, r7, #8
 8006362:	2302      	movs	r3, #2
 8006364:	213c      	movs	r1, #60	; 0x3c
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff fe04 	bl	8005f74 <hts221_read_reg>
 800636c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800636e:	7a7b      	ldrb	r3, [r7, #9]
 8006370:	b29b      	uxth	r3, r3
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	b29a      	uxth	r2, r3
 8006376:	7a3b      	ldrb	r3, [r7, #8]
 8006378:	b29b      	uxth	r3, r3
 800637a:	4413      	add	r3, r2
 800637c:	b29b      	uxth	r3, r3
 800637e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006380:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006384:	ee07 3a90 	vmov	s15, r3
 8006388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006392:	68fb      	ldr	r3, [r7, #12]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80063a6:	f107 0208 	add.w	r2, r7, #8
 80063aa:	2302      	movs	r3, #2
 80063ac:	213e      	movs	r1, #62	; 0x3e
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fde0 	bl	8005f74 <hts221_read_reg>
 80063b4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80063b6:	7a7b      	ldrb	r3, [r7, #9]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	b29a      	uxth	r2, r3
 80063be:	7a3b      	ldrb	r3, [r7, #8]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80063c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80063da:	68fb      	ldr	r3, [r7, #12]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	461a      	mov	r2, r3
 80063f0:	460b      	mov	r3, r1
 80063f2:	72fb      	strb	r3, [r7, #11]
 80063f4:	4613      	mov	r3, r2
 80063f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685c      	ldr	r4, [r3, #4]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68d8      	ldr	r0, [r3, #12]
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	7af9      	ldrb	r1, [r7, #11]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	47a0      	blx	r4
 8006408:	6178      	str	r0, [r7, #20]

  return ret;
 800640a:	697b      	ldr	r3, [r7, #20]
}
 800640c:	4618      	mov	r0, r3
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	461a      	mov	r2, r3
 8006420:	460b      	mov	r3, r1
 8006422:	72fb      	strb	r3, [r7, #11]
 8006424:	4613      	mov	r3, r2
 8006426:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681c      	ldr	r4, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68d8      	ldr	r0, [r3, #12]
 8006430:	893b      	ldrh	r3, [r7, #8]
 8006432:	7af9      	ldrb	r1, [r7, #11]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	47a0      	blx	r4
 8006438:	6178      	str	r0, [r7, #20]

  return ret;
 800643a:	697b      	ldr	r3, [r7, #20]
}
 800643c:	4618      	mov	r0, r3
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	bd90      	pop	{r4, r7, pc}

08006444 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006470 <lps22hh_from_lsb_to_hpa+0x2c>
 800645a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800645e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006462:	eeb0 0a67 	vmov.f32	s0, s15
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	49800000 	.word	0x49800000

08006474 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006480:	f107 0208 	add.w	r2, r7, #8
 8006484:	2301      	movs	r3, #1
 8006486:	2110      	movs	r1, #16
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff ffab 	bl	80063e4 <lps22hh_read_reg>
 800648e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10f      	bne.n	80064b6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	7a3b      	ldrb	r3, [r7, #8]
 80064a0:	f362 0341 	bfi	r3, r2, #1, #1
 80064a4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80064a6:	f107 0208 	add.w	r2, r7, #8
 80064aa:	2301      	movs	r3, #1
 80064ac:	2110      	movs	r1, #16
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff ffb0 	bl	8006414 <lps22hh_write_reg>
 80064b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80064cc:	f107 0210 	add.w	r2, r7, #16
 80064d0:	2301      	movs	r3, #1
 80064d2:	2110      	movs	r1, #16
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ff85 	bl	80063e4 <lps22hh_read_reg>
 80064da:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d107      	bne.n	80064f2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80064e2:	f107 020c 	add.w	r2, r7, #12
 80064e6:	2301      	movs	r3, #1
 80064e8:	2111      	movs	r1, #17
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ff7a 	bl	80063e4 <lps22hh_read_reg>
 80064f0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10f      	bne.n	8006518 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	7c3b      	ldrb	r3, [r7, #16]
 8006502:	f362 1306 	bfi	r3, r2, #4, #3
 8006506:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006508:	f107 0210 	add.w	r2, r7, #16
 800650c:	2301      	movs	r3, #1
 800650e:	2110      	movs	r1, #16
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff ff7f 	bl	8006414 <lps22hh_write_reg>
 8006516:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d119      	bne.n	8006552 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	091b      	lsrs	r3, r3, #4
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	b2da      	uxtb	r2, r3
 8006528:	7b3b      	ldrb	r3, [r7, #12]
 800652a:	f362 0341 	bfi	r3, r2, #1, #1
 800652e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	b2da      	uxtb	r2, r3
 800653a:	7b3b      	ldrb	r3, [r7, #12]
 800653c:	f362 0300 	bfi	r3, r2, #0, #1
 8006540:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006542:	f107 020c 	add.w	r2, r7, #12
 8006546:	2301      	movs	r3, #1
 8006548:	2111      	movs	r1, #17
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff ff62 	bl	8006414 <lps22hh_write_reg>
 8006550:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006552:	697b      	ldr	r3, [r7, #20]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006566:	f107 0208 	add.w	r2, r7, #8
 800656a:	2303      	movs	r3, #3
 800656c:	2128      	movs	r1, #40	; 0x28
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff ff38 	bl	80063e4 <lps22hh_read_reg>
 8006574:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006576:	7abb      	ldrb	r3, [r7, #10]
 8006578:	461a      	mov	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	7a7a      	ldrb	r2, [r7, #9]
 8006586:	441a      	add	r2, r3
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	7a3a      	ldrb	r2, [r7, #8]
 8006594:	441a      	add	r2, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	601a      	str	r2, [r3, #0]

  return ret;
 80065a4:	68fb      	ldr	r3, [r7, #12]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80065ba:	f107 0208 	add.w	r2, r7, #8
 80065be:	2301      	movs	r3, #1
 80065c0:	2111      	movs	r1, #17
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ff0e 	bl	80063e4 <lps22hh_read_reg>
 80065c8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10f      	bne.n	80065f0 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	7a3b      	ldrb	r3, [r7, #8]
 80065da:	f362 0382 	bfi	r3, r2, #2, #1
 80065de:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80065e0:	f107 0208 	add.w	r2, r7, #8
 80065e4:	2301      	movs	r3, #1
 80065e6:	2111      	movs	r1, #17
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ff13 	bl	8006414 <lps22hh_write_reg>
 80065ee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065f0:	68fb      	ldr	r3, [r7, #12]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065fe:	2003      	movs	r0, #3
 8006600:	f000 fcbc 	bl	8006f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006604:	2000      	movs	r0, #0
 8006606:	f000 f805 	bl	8006614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800660a:	f7fd fdb5 	bl	8004178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800661c:	4b12      	ldr	r3, [pc, #72]	; (8006668 <HAL_InitTick+0x54>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b12      	ldr	r3, [pc, #72]	; (800666c <HAL_InitTick+0x58>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	4619      	mov	r1, r3
 8006626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800662a:	fbb3 f3f1 	udiv	r3, r3, r1
 800662e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fcd7 	bl	8006fe6 <HAL_SYSTICK_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e00e      	b.n	8006660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b0f      	cmp	r3, #15
 8006646:	d80a      	bhi.n	800665e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006648:	2200      	movs	r2, #0
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	f04f 30ff 	mov.w	r0, #4294967295
 8006650:	f000 fc9f 	bl	8006f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006654:	4a06      	ldr	r2, [pc, #24]	; (8006670 <HAL_InitTick+0x5c>)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e000      	b.n	8006660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20000004 	.word	0x20000004
 800666c:	20000020 	.word	0x20000020
 8006670:	2000001c 	.word	0x2000001c

08006674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_IncTick+0x20>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_IncTick+0x24>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4413      	add	r3, r2
 8006684:	4a04      	ldr	r2, [pc, #16]	; (8006698 <HAL_IncTick+0x24>)
 8006686:	6013      	str	r3, [r2, #0]
}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000020 	.word	0x20000020
 8006698:	2000097c 	.word	0x2000097c

0800669c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return uwTick;
 80066a0:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <HAL_GetTick+0x14>)
 80066a2:	681b      	ldr	r3, [r3, #0]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	2000097c 	.word	0x2000097c

080066b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066bc:	f7ff ffee 	bl	800669c <HAL_GetTick>
 80066c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d005      	beq.n	80066da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066ce:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <HAL_Delay+0x44>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066da:	bf00      	nop
 80066dc:	f7ff ffde 	bl	800669c <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d8f7      	bhi.n	80066dc <HAL_Delay+0x28>
  {
  }
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000020 	.word	0x20000020

080066fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e031      	b.n	8006776 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fc f890 	bl	8002840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f003 0310 	and.w	r3, r3, #16
 8006736:	2b00      	cmp	r3, #0
 8006738:	d116      	bne.n	8006768 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800673e:	4b10      	ldr	r3, [pc, #64]	; (8006780 <HAL_ADC_Init+0x84>)
 8006740:	4013      	ands	r3, r2
 8006742:	f043 0202 	orr.w	r2, r3, #2
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa4c 	bl	8006be8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	f043 0201 	orr.w	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
 8006766:	e001      	b.n	800676c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	ffffeefd 	.word	0xffffeefd

08006784 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_ADC_Start+0x1a>
 800679a:	2302      	movs	r3, #2
 800679c:	e0ad      	b.n	80068fa <HAL_ADC_Start+0x176>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d018      	beq.n	80067e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80067c4:	4b50      	ldr	r3, [pc, #320]	; (8006908 <HAL_ADC_Start+0x184>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a50      	ldr	r2, [pc, #320]	; (800690c <HAL_ADC_Start+0x188>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	0c9a      	lsrs	r2, r3, #18
 80067d0:	4613      	mov	r3, r2
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80067d8:	e002      	b.n	80067e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3b01      	subs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f9      	bne.n	80067da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d175      	bne.n	80068e0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f8:	4b45      	ldr	r3, [pc, #276]	; (8006910 <HAL_ADC_Start+0x18c>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800681a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800682a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682e:	d106      	bne.n	800683e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006834:	f023 0206 	bic.w	r2, r3, #6
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	645a      	str	r2, [r3, #68]	; 0x44
 800683c:	e002      	b.n	8006844 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006854:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006856:	4b2f      	ldr	r3, [pc, #188]	; (8006914 <HAL_ADC_Start+0x190>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10f      	bne.n	8006882 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d143      	bne.n	80068f8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800687e:	609a      	str	r2, [r3, #8]
 8006880:	e03a      	b.n	80068f8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a24      	ldr	r2, [pc, #144]	; (8006918 <HAL_ADC_Start+0x194>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10e      	bne.n	80068aa <HAL_ADC_Start+0x126>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d107      	bne.n	80068aa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068a8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80068aa:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <HAL_ADC_Start+0x190>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d120      	bne.n	80068f8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_ADC_Start+0x198>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d11b      	bne.n	80068f8 <HAL_ADC_Start+0x174>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d114      	bne.n	80068f8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068dc:	609a      	str	r2, [r3, #8]
 80068de:	e00b      	b.n	80068f8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	f043 0210 	orr.w	r2, r3, #16
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	f043 0201 	orr.w	r2, r3, #1
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20000004 	.word	0x20000004
 800690c:	431bde83 	.word	0x431bde83
 8006910:	fffff8fe 	.word	0xfffff8fe
 8006914:	40012300 	.word	0x40012300
 8006918:	40012000 	.word	0x40012000
 800691c:	40012200 	.word	0x40012200

08006920 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
	...

0800693c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_ADC_ConfigChannel+0x1c>
 8006954:	2302      	movs	r3, #2
 8006956:	e136      	b.n	8006bc6 <HAL_ADC_ConfigChannel+0x28a>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b09      	cmp	r3, #9
 8006966:	d93a      	bls.n	80069de <HAL_ADC_ConfigChannel+0xa2>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006970:	d035      	beq.n	80069de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68d9      	ldr	r1, [r3, #12]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	461a      	mov	r2, r3
 8006980:	4613      	mov	r3, r2
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	4413      	add	r3, r2
 8006986:	3b1e      	subs	r3, #30
 8006988:	2207      	movs	r2, #7
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	43da      	mvns	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	400a      	ands	r2, r1
 8006996:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a8d      	ldr	r2, [pc, #564]	; (8006bd4 <HAL_ADC_ConfigChannel+0x298>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d10a      	bne.n	80069b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68d9      	ldr	r1, [r3, #12]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	061a      	lsls	r2, r3, #24
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069b6:	e035      	b.n	8006a24 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68d9      	ldr	r1, [r3, #12]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	4618      	mov	r0, r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	4403      	add	r3, r0
 80069d0:	3b1e      	subs	r3, #30
 80069d2:	409a      	lsls	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069dc:	e022      	b.n	8006a24 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6919      	ldr	r1, [r3, #16]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	4613      	mov	r3, r2
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4413      	add	r3, r2
 80069f2:	2207      	movs	r2, #7
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	43da      	mvns	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	400a      	ands	r2, r1
 8006a00:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6919      	ldr	r1, [r3, #16]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4618      	mov	r0, r3
 8006a14:	4603      	mov	r3, r0
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	4403      	add	r3, r0
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b06      	cmp	r3, #6
 8006a2a:	d824      	bhi.n	8006a76 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3b05      	subs	r3, #5
 8006a3e:	221f      	movs	r2, #31
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43da      	mvns	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	400a      	ands	r2, r1
 8006a4c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	3b05      	subs	r3, #5
 8006a68:	fa00 f203 	lsl.w	r2, r0, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	635a      	str	r2, [r3, #52]	; 0x34
 8006a74:	e04c      	b.n	8006b10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b0c      	cmp	r3, #12
 8006a7c:	d824      	bhi.n	8006ac8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3b23      	subs	r3, #35	; 0x23
 8006a90:	221f      	movs	r2, #31
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43da      	mvns	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	400a      	ands	r2, r1
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	4618      	mov	r0, r3
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	3b23      	subs	r3, #35	; 0x23
 8006aba:	fa00 f203 	lsl.w	r2, r0, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ac6:	e023      	b.n	8006b10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3b41      	subs	r3, #65	; 0x41
 8006ada:	221f      	movs	r2, #31
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	43da      	mvns	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	400a      	ands	r2, r1
 8006ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4618      	mov	r0, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	3b41      	subs	r3, #65	; 0x41
 8006b04:	fa00 f203 	lsl.w	r2, r0, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a30      	ldr	r2, [pc, #192]	; (8006bd8 <HAL_ADC_ConfigChannel+0x29c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d10a      	bne.n	8006b30 <HAL_ADC_ConfigChannel+0x1f4>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b22:	d105      	bne.n	8006b30 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006b24:	4b2d      	ldr	r3, [pc, #180]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a2c      	ldr	r2, [pc, #176]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b2a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006b2e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a28      	ldr	r2, [pc, #160]	; (8006bd8 <HAL_ADC_ConfigChannel+0x29c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d10f      	bne.n	8006b5a <HAL_ADC_ConfigChannel+0x21e>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b12      	cmp	r3, #18
 8006b40:	d10b      	bne.n	8006b5a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006b42:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b4c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006b4e:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4a22      	ldr	r2, [pc, #136]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b58:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <HAL_ADC_ConfigChannel+0x29c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d12b      	bne.n	8006bbc <HAL_ADC_ConfigChannel+0x280>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <HAL_ADC_ConfigChannel+0x298>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d003      	beq.n	8006b76 <HAL_ADC_ConfigChannel+0x23a>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b11      	cmp	r3, #17
 8006b74:	d122      	bne.n	8006bbc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006b76:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	4a18      	ldr	r2, [pc, #96]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006b80:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006b82:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4a15      	ldr	r2, [pc, #84]	; (8006bdc <HAL_ADC_ConfigChannel+0x2a0>)
 8006b88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b8c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a10      	ldr	r2, [pc, #64]	; (8006bd4 <HAL_ADC_ConfigChannel+0x298>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d111      	bne.n	8006bbc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006b98:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <HAL_ADC_ConfigChannel+0x2a4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	0c9a      	lsrs	r2, r3, #18
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006bae:	e002      	b.n	8006bb6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f9      	bne.n	8006bb0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	10000012 	.word	0x10000012
 8006bd8:	40012000 	.word	0x40012000
 8006bdc:	40012300 	.word	0x40012300
 8006be0:	20000004 	.word	0x20000004
 8006be4:	431bde83 	.word	0x431bde83

08006be8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006bf0:	4b78      	ldr	r3, [pc, #480]	; (8006dd4 <ADC_Init+0x1ec>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	4a77      	ldr	r2, [pc, #476]	; (8006dd4 <ADC_Init+0x1ec>)
 8006bf6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006bfa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006bfc:	4b75      	ldr	r3, [pc, #468]	; (8006dd4 <ADC_Init+0x1ec>)
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4973      	ldr	r1, [pc, #460]	; (8006dd4 <ADC_Init+0x1ec>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6859      	ldr	r1, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	021a      	lsls	r2, r3, #8
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6859      	ldr	r1, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6899      	ldr	r1, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	4a58      	ldr	r2, [pc, #352]	; (8006dd8 <ADC_Init+0x1f0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d022      	beq.n	8006cc2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6899      	ldr	r1, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6899      	ldr	r1, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	e00f      	b.n	8006ce2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ce0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0202 	bic.w	r2, r2, #2
 8006cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6899      	ldr	r1, [r3, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	005a      	lsls	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01b      	beq.n	8006d48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006d2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6859      	ldr	r1, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	035a      	lsls	r2, r3, #13
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
 8006d46:	e007      	b.n	8006d58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	051a      	lsls	r2, r3, #20
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6899      	ldr	r1, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d9a:	025a      	lsls	r2, r3, #9
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6899      	ldr	r1, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	029a      	lsls	r2, r3, #10
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	40012300 	.word	0x40012300
 8006dd8:	0f000001 	.word	0x0f000001

08006ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dec:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <__NVIC_SetPriorityGrouping+0x40>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e04:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <__NVIC_SetPriorityGrouping+0x44>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e0a:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <__NVIC_SetPriorityGrouping+0x40>)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	60d3      	str	r3, [r2, #12]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	e000ed00 	.word	0xe000ed00
 8006e20:	05fa0000 	.word	0x05fa0000

08006e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e24:	b480      	push	{r7}
 8006e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e28:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <__NVIC_GetPriorityGrouping+0x18>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	0a1b      	lsrs	r3, r3, #8
 8006e2e:	f003 0307 	and.w	r3, r3, #7
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	e000ed00 	.word	0xe000ed00

08006e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	db0b      	blt.n	8006e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	f003 021f 	and.w	r2, r3, #31
 8006e58:	4907      	ldr	r1, [pc, #28]	; (8006e78 <__NVIC_EnableIRQ+0x38>)
 8006e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	2001      	movs	r0, #1
 8006e62:	fa00 f202 	lsl.w	r2, r0, r2
 8006e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	e000e100 	.word	0xe000e100

08006e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	db0a      	blt.n	8006ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	490c      	ldr	r1, [pc, #48]	; (8006ec8 <__NVIC_SetPriority+0x4c>)
 8006e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9a:	0112      	lsls	r2, r2, #4
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ea4:	e00a      	b.n	8006ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	4908      	ldr	r1, [pc, #32]	; (8006ecc <__NVIC_SetPriority+0x50>)
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	3b04      	subs	r3, #4
 8006eb4:	0112      	lsls	r2, r2, #4
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	440b      	add	r3, r1
 8006eba:	761a      	strb	r2, [r3, #24]
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	e000e100 	.word	0xe000e100
 8006ecc:	e000ed00 	.word	0xe000ed00

08006ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	; 0x24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f1c3 0307 	rsb	r3, r3, #7
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	bf28      	it	cs
 8006eee:	2304      	movcs	r3, #4
 8006ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	2b06      	cmp	r3, #6
 8006ef8:	d902      	bls.n	8006f00 <NVIC_EncodePriority+0x30>
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	3b03      	subs	r3, #3
 8006efe:	e000      	b.n	8006f02 <NVIC_EncodePriority+0x32>
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f04:	f04f 32ff 	mov.w	r2, #4294967295
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0e:	43da      	mvns	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	401a      	ands	r2, r3
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f18:	f04f 31ff 	mov.w	r1, #4294967295
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f22:	43d9      	mvns	r1, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f28:	4313      	orrs	r3, r2
         );
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3724      	adds	r7, #36	; 0x24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f48:	d301      	bcc.n	8006f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e00f      	b.n	8006f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <SysTick_Config+0x40>)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f56:	210f      	movs	r1, #15
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	f7ff ff8e 	bl	8006e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <SysTick_Config+0x40>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <SysTick_Config+0x40>)
 8006f68:	2207      	movs	r2, #7
 8006f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	e000e010 	.word	0xe000e010

08006f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff ff29 	bl	8006ddc <__NVIC_SetPriorityGrouping>
}
 8006f8a:	bf00      	nop
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b086      	sub	sp, #24
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	4603      	mov	r3, r0
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fa4:	f7ff ff3e 	bl	8006e24 <__NVIC_GetPriorityGrouping>
 8006fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	6978      	ldr	r0, [r7, #20]
 8006fb0:	f7ff ff8e 	bl	8006ed0 <NVIC_EncodePriority>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff ff5d 	bl	8006e7c <__NVIC_SetPriority>
}
 8006fc2:	bf00      	nop
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff31 	bl	8006e40 <__NVIC_EnableIRQ>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff ffa2 	bl	8006f38 <SysTick_Config>
 8006ff4:	4603      	mov	r3, r0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800700c:	f7ff fb46 	bl	800669c <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e099      	b.n	8007150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0201 	bic.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800703c:	e00f      	b.n	800705e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800703e:	f7ff fb2d 	bl	800669c <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b05      	cmp	r3, #5
 800704a:	d908      	bls.n	800705e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2203      	movs	r2, #3
 8007056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e078      	b.n	8007150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e8      	bne.n	800703e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4b38      	ldr	r3, [pc, #224]	; (8007158 <HAL_DMA_Init+0x158>)
 8007078:	4013      	ands	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800708a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d107      	bne.n	80070c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	4313      	orrs	r3, r2
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f023 0307 	bic.w	r3, r3, #7
 80070de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d117      	bne.n	8007122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00e      	beq.n	8007122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fb03 	bl	8007710 <DMA_CheckFifoParam>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2240      	movs	r2, #64	; 0x40
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800711e:	2301      	movs	r3, #1
 8007120:	e016      	b.n	8007150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 faba 	bl	80076a4 <DMA_CalcBaseAndBitshift>
 8007130:	4603      	mov	r3, r0
 8007132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007138:	223f      	movs	r2, #63	; 0x3f
 800713a:	409a      	lsls	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	f010803f 	.word	0xf010803f

0800715c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e050      	b.n	8007210 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d101      	bne.n	800717e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800717a:	2302      	movs	r3, #2
 800717c:	e048      	b.n	8007210 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0201 	bic.w	r2, r2, #1
 800718c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2200      	movs	r2, #0
 80071ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2200      	movs	r2, #0
 80071b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2221      	movs	r2, #33	; 0x21
 80071bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa70 	bl	80076a4 <DMA_CalcBaseAndBitshift>
 80071c4:	4603      	mov	r3, r0
 80071c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071cc:	223f      	movs	r2, #63	; 0x3f
 80071ce:	409a      	lsls	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_DMA_Start_IT+0x26>
 800723a:	2302      	movs	r3, #2
 800723c:	e048      	b.n	80072d0 <HAL_DMA_Start_IT+0xb8>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b01      	cmp	r3, #1
 8007250:	d137      	bne.n	80072c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2202      	movs	r2, #2
 8007256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f9ee 	bl	8007648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007270:	223f      	movs	r2, #63	; 0x3f
 8007272:	409a      	lsls	r2, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0216 	orr.w	r2, r2, #22
 8007286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695a      	ldr	r2, [r3, #20]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007296:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d007      	beq.n	80072b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0208 	orr.w	r2, r2, #8
 80072ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e005      	b.n	80072ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80072ca:	2302      	movs	r3, #2
 80072cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d004      	beq.n	80072f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2280      	movs	r2, #128	; 0x80
 80072f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e00c      	b.n	8007310 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2205      	movs	r2, #5
 80072fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0201 	bic.w	r2, r2, #1
 800730c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007328:	4b8e      	ldr	r3, [pc, #568]	; (8007564 <HAL_DMA_IRQHandler+0x248>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a8e      	ldr	r2, [pc, #568]	; (8007568 <HAL_DMA_IRQHandler+0x24c>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	0a9b      	lsrs	r3, r3, #10
 8007334:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007346:	2208      	movs	r2, #8
 8007348:	409a      	lsls	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01a      	beq.n	8007388 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d013      	beq.n	8007388 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0204 	bic.w	r2, r2, #4
 800736e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007374:	2208      	movs	r2, #8
 8007376:	409a      	lsls	r2, r3
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007380:	f043 0201 	orr.w	r2, r3, #1
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738c:	2201      	movs	r2, #1
 800738e:	409a      	lsls	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4013      	ands	r3, r2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d012      	beq.n	80073be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073aa:	2201      	movs	r2, #1
 80073ac:	409a      	lsls	r2, r3
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b6:	f043 0202 	orr.w	r2, r3, #2
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c2:	2204      	movs	r2, #4
 80073c4:	409a      	lsls	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d012      	beq.n	80073f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e0:	2204      	movs	r2, #4
 80073e2:	409a      	lsls	r2, r3
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ec:	f043 0204 	orr.w	r2, r3, #4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f8:	2210      	movs	r2, #16
 80073fa:	409a      	lsls	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4013      	ands	r3, r2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d043      	beq.n	800748c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0308 	and.w	r3, r3, #8
 800740e:	2b00      	cmp	r3, #0
 8007410:	d03c      	beq.n	800748c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007416:	2210      	movs	r2, #16
 8007418:	409a      	lsls	r2, r3
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d018      	beq.n	800745e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d108      	bne.n	800744c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d024      	beq.n	800748c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
 800744a:	e01f      	b.n	800748c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
 800745c:	e016      	b.n	800748c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007468:	2b00      	cmp	r3, #0
 800746a:	d107      	bne.n	800747c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0208 	bic.w	r2, r2, #8
 800747a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007490:	2220      	movs	r2, #32
 8007492:	409a      	lsls	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4013      	ands	r3, r2
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 808f 	beq.w	80075bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0310 	and.w	r3, r3, #16
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8087 	beq.w	80075bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b2:	2220      	movs	r2, #32
 80074b4:	409a      	lsls	r2, r3
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d136      	bne.n	8007534 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0216 	bic.w	r2, r2, #22
 80074d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695a      	ldr	r2, [r3, #20]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <HAL_DMA_IRQHandler+0x1da>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0208 	bic.w	r2, r2, #8
 8007504:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	223f      	movs	r2, #63	; 0x3f
 800750c:	409a      	lsls	r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007526:	2b00      	cmp	r3, #0
 8007528:	d07e      	beq.n	8007628 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
        }
        return;
 8007532:	e079      	b.n	8007628 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01d      	beq.n	800757e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10d      	bne.n	800756c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007554:	2b00      	cmp	r3, #0
 8007556:	d031      	beq.n	80075bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
 8007560:	e02c      	b.n	80075bc <HAL_DMA_IRQHandler+0x2a0>
 8007562:	bf00      	nop
 8007564:	20000004 	.word	0x20000004
 8007568:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	2b00      	cmp	r3, #0
 8007572:	d023      	beq.n	80075bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
 800757c:	e01e      	b.n	80075bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10f      	bne.n	80075ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0210 	bic.w	r2, r2, #16
 800759a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d032      	beq.n	800762a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d022      	beq.n	8007616 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2205      	movs	r2, #5
 80075d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60bb      	str	r3, [r7, #8]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d307      	bcc.n	8007604 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f2      	bne.n	80075e8 <HAL_DMA_IRQHandler+0x2cc>
 8007602:	e000      	b.n	8007606 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007604:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
 8007626:	e000      	b.n	800762a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007628:	bf00      	nop
    }
  }
}
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	d108      	bne.n	8007688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007686:	e007      	b.n	8007698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	60da      	str	r2, [r3, #12]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	3b10      	subs	r3, #16
 80076b4:	4a13      	ldr	r2, [pc, #76]	; (8007704 <DMA_CalcBaseAndBitshift+0x60>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	091b      	lsrs	r3, r3, #4
 80076bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80076be:	4a12      	ldr	r2, [pc, #72]	; (8007708 <DMA_CalcBaseAndBitshift+0x64>)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d908      	bls.n	80076e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	4b0c      	ldr	r3, [pc, #48]	; (800770c <DMA_CalcBaseAndBitshift+0x68>)
 80076da:	4013      	ands	r3, r2
 80076dc:	1d1a      	adds	r2, r3, #4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	659a      	str	r2, [r3, #88]	; 0x58
 80076e2:	e006      	b.n	80076f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	4b08      	ldr	r3, [pc, #32]	; (800770c <DMA_CalcBaseAndBitshift+0x68>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	aaaaaaab 	.word	0xaaaaaaab
 8007708:	080182e0 	.word	0x080182e0
 800770c:	fffffc00 	.word	0xfffffc00

08007710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d11f      	bne.n	800776a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b03      	cmp	r3, #3
 800772e:	d856      	bhi.n	80077de <DMA_CheckFifoParam+0xce>
 8007730:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <DMA_CheckFifoParam+0x28>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	08007749 	.word	0x08007749
 800773c:	0800775b 	.word	0x0800775b
 8007740:	08007749 	.word	0x08007749
 8007744:	080077df 	.word	0x080077df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d046      	beq.n	80077e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007758:	e043      	b.n	80077e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007762:	d140      	bne.n	80077e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007768:	e03d      	b.n	80077e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007772:	d121      	bne.n	80077b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d837      	bhi.n	80077ea <DMA_CheckFifoParam+0xda>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <DMA_CheckFifoParam+0x70>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007791 	.word	0x08007791
 8007784:	08007797 	.word	0x08007797
 8007788:	08007791 	.word	0x08007791
 800778c:	080077a9 	.word	0x080077a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	e030      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d025      	beq.n	80077ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a6:	e022      	b.n	80077ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077b0:	d11f      	bne.n	80077f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077b6:	e01c      	b.n	80077f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d903      	bls.n	80077c6 <DMA_CheckFifoParam+0xb6>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d003      	beq.n	80077cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077c4:	e018      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
      break;
 80077ca:	e015      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00e      	beq.n	80077f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e00b      	b.n	80077f6 <DMA_CheckFifoParam+0xe6>
      break;
 80077de:	bf00      	nop
 80077e0:	e00a      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077e2:	bf00      	nop
 80077e4:	e008      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077e6:	bf00      	nop
 80077e8:	e006      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077ea:	bf00      	nop
 80077ec:	e004      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077ee:	bf00      	nop
 80077f0:	e002      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80077f2:	bf00      	nop
 80077f4:	e000      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077f6:	bf00      	nop
    }
  } 
  
  return status; 
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop

08007808 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e039      	b.n	800788e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fb f994 	bl	8002b5c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007858:	f023 0107 	bic.w	r1, r3, #7
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800786e:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <HAL_DMA2D_Init+0x90>)
 8007870:	4013      	ands	r3, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	68d1      	ldr	r1, [r2, #12]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	430b      	orrs	r3, r1
 800787c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	ffffc000 	.word	0xffffc000

0800789c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_DMA2D_Start+0x1c>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e018      	b.n	80078ea <HAL_DMA2D_Start+0x4e>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 f988 	bl	8007be8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d056      	beq.n	80079bc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800790e:	f7fe fec5 	bl	800669c <HAL_GetTick>
 8007912:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007914:	e04b      	b.n	80079ae <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007924:	2b00      	cmp	r3, #0
 8007926:	d023      	beq.n	8007970 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007936:	f043 0202 	orr.w	r2, r3, #2
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	f043 0201 	orr.w	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2221      	movs	r2, #33	; 0x21
 800795a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2204      	movs	r2, #4
 8007960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0a5      	b.n	8007abc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d01a      	beq.n	80079ae <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007978:	f7fe fe90 	bl	800669c <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d302      	bcc.n	800798e <HAL_DMA2D_PollForTransfer+0x9c>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10f      	bne.n	80079ae <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2203      	movs	r2, #3
 800799e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e086      	b.n	8007abc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0ac      	beq.n	8007916 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d061      	beq.n	8007aa2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80079de:	f7fe fe5d 	bl	800669c <HAL_GetTick>
 80079e2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80079e4:	e056      	b.n	8007a94 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02e      	beq.n	8007a56 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	f043 0204 	orr.w	r2, r3, #4
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 0320 	and.w	r3, r3, #32
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	f043 0202 	orr.w	r2, r3, #2
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d005      	beq.n	8007a3a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	f043 0201 	orr.w	r2, r3, #1
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2229      	movs	r2, #41	; 0x29
 8007a40:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2204      	movs	r2, #4
 8007a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e032      	b.n	8007abc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d01a      	beq.n	8007a94 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a5e:	f7fe fe1d 	bl	800669c <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d302      	bcc.n	8007a74 <HAL_DMA2D_PollForTransfer+0x182>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10f      	bne.n	8007a94 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	f043 0220 	orr.w	r2, r3, #32
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2203      	movs	r2, #3
 8007a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e013      	b.n	8007abc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f003 0310 	and.w	r3, r3, #16
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0a1      	beq.n	80079e6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2212      	movs	r2, #18
 8007aa8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_DMA2D_ConfigLayer+0x20>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e079      	b.n	8007bd8 <HAL_DMA2D_ConfigLayer+0x114>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	3318      	adds	r3, #24
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	4413      	add	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	041b      	lsls	r3, r3, #16
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007b0e:	4b35      	ldr	r3, [pc, #212]	; (8007be4 <HAL_DMA2D_ConfigLayer+0x120>)
 8007b10:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	2b0a      	cmp	r3, #10
 8007b18:	d003      	beq.n	8007b22 <HAL_DMA2D_ConfigLayer+0x5e>
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b09      	cmp	r3, #9
 8007b20:	d107      	bne.n	8007b32 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e005      	b.n	8007b3e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	061b      	lsls	r3, r3, #24
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d120      	bne.n	8007b86 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	ea02 0103 	and.w	r1, r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	6812      	ldr	r2, [r2, #0]
 8007b64:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	2b0a      	cmp	r3, #10
 8007b6c:	d003      	beq.n	8007b76 <HAL_DMA2D_ConfigLayer+0xb2>
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2b09      	cmp	r3, #9
 8007b74:	d127      	bne.n	8007bc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007b82:	629a      	str	r2, [r3, #40]	; 0x28
 8007b84:	e01f      	b.n	8007bc6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	ea02 0103 	and.w	r1, r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	6812      	ldr	r2, [r2, #0]
 8007ba6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b0a      	cmp	r3, #10
 8007bae:	d003      	beq.n	8007bb8 <HAL_DMA2D_ConfigLayer+0xf4>
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2b09      	cmp	r3, #9
 8007bb6:	d106      	bne.n	8007bc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007bc4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	ff03000f 	.word	0xff03000f

08007be8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b08b      	sub	sp, #44	; 0x2c
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	041a      	lsls	r2, r3, #16
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	431a      	orrs	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c20:	d174      	bne.n	8007d0c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c28:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c30:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c38:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d108      	bne.n	8007c5a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
 8007c58:	e053      	b.n	8007d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d106      	bne.n	8007c70 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6e:	e048      	b.n	8007d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d111      	bne.n	8007c9c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	0cdb      	lsrs	r3, r3, #19
 8007c7c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	0a9b      	lsrs	r3, r3, #10
 8007c82:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	08db      	lsrs	r3, r3, #3
 8007c88:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	02db      	lsls	r3, r3, #11
 8007c92:	4313      	orrs	r3, r2
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9a:	e032      	b.n	8007d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d117      	bne.n	8007cd4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	0fdb      	lsrs	r3, r3, #31
 8007ca8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	0cdb      	lsrs	r3, r3, #19
 8007cae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	0adb      	lsrs	r3, r3, #11
 8007cb4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	08db      	lsrs	r3, r3, #3
 8007cba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	029b      	lsls	r3, r3, #10
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	03db      	lsls	r3, r3, #15
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd2:	e016      	b.n	8007d02 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	0f1b      	lsrs	r3, r3, #28
 8007cd8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	0d1b      	lsrs	r3, r3, #20
 8007cde:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	0b1b      	lsrs	r3, r3, #12
 8007ce4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	011a      	lsls	r2, r3, #4
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	031b      	lsls	r3, r3, #12
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d08:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007d0a:	e003      	b.n	8007d14 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	60da      	str	r2, [r3, #12]
}
 8007d14:	bf00      	nop
 8007d16:	372c      	adds	r7, #44	; 0x2c
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	; 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007d32:	2300      	movs	r3, #0
 8007d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007d36:	2300      	movs	r3, #0
 8007d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	e175      	b.n	800802c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007d40:	2201      	movs	r2, #1
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	fa02 f303 	lsl.w	r3, r2, r3
 8007d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4013      	ands	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	f040 8164 	bne.w	8008026 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d005      	beq.n	8007d76 <HAL_GPIO_Init+0x56>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d130      	bne.n	8007dd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	2203      	movs	r2, #3
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	43db      	mvns	r3, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007dac:	2201      	movs	r2, #1
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	43db      	mvns	r3, r3
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	4013      	ands	r3, r2
 8007dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	091b      	lsrs	r3, r3, #4
 8007dc2:	f003 0201 	and.w	r2, r3, #1
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d017      	beq.n	8007e14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	2203      	movs	r2, #3
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	43db      	mvns	r3, r3
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f003 0303 	and.w	r3, r3, #3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d123      	bne.n	8007e68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	08da      	lsrs	r2, r3, #3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3208      	adds	r2, #8
 8007e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	220f      	movs	r2, #15
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	4013      	ands	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	691a      	ldr	r2, [r3, #16]
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	08da      	lsrs	r2, r3, #3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3208      	adds	r2, #8
 8007e62:	69b9      	ldr	r1, [r7, #24]
 8007e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	2203      	movs	r2, #3
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f003 0203 	and.w	r2, r3, #3
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 80be 	beq.w	8008026 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eaa:	4b66      	ldr	r3, [pc, #408]	; (8008044 <HAL_GPIO_Init+0x324>)
 8007eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eae:	4a65      	ldr	r2, [pc, #404]	; (8008044 <HAL_GPIO_Init+0x324>)
 8007eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8007eb6:	4b63      	ldr	r3, [pc, #396]	; (8008044 <HAL_GPIO_Init+0x324>)
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007ec2:	4a61      	ldr	r2, [pc, #388]	; (8008048 <HAL_GPIO_Init+0x328>)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	089b      	lsrs	r3, r3, #2
 8007ec8:	3302      	adds	r3, #2
 8007eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	220f      	movs	r2, #15
 8007eda:	fa02 f303 	lsl.w	r3, r2, r3
 8007ede:	43db      	mvns	r3, r3
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a58      	ldr	r2, [pc, #352]	; (800804c <HAL_GPIO_Init+0x32c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d037      	beq.n	8007f5e <HAL_GPIO_Init+0x23e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a57      	ldr	r2, [pc, #348]	; (8008050 <HAL_GPIO_Init+0x330>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d031      	beq.n	8007f5a <HAL_GPIO_Init+0x23a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a56      	ldr	r2, [pc, #344]	; (8008054 <HAL_GPIO_Init+0x334>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d02b      	beq.n	8007f56 <HAL_GPIO_Init+0x236>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a55      	ldr	r2, [pc, #340]	; (8008058 <HAL_GPIO_Init+0x338>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d025      	beq.n	8007f52 <HAL_GPIO_Init+0x232>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a54      	ldr	r2, [pc, #336]	; (800805c <HAL_GPIO_Init+0x33c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d01f      	beq.n	8007f4e <HAL_GPIO_Init+0x22e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a53      	ldr	r2, [pc, #332]	; (8008060 <HAL_GPIO_Init+0x340>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d019      	beq.n	8007f4a <HAL_GPIO_Init+0x22a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a52      	ldr	r2, [pc, #328]	; (8008064 <HAL_GPIO_Init+0x344>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d013      	beq.n	8007f46 <HAL_GPIO_Init+0x226>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a51      	ldr	r2, [pc, #324]	; (8008068 <HAL_GPIO_Init+0x348>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00d      	beq.n	8007f42 <HAL_GPIO_Init+0x222>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a50      	ldr	r2, [pc, #320]	; (800806c <HAL_GPIO_Init+0x34c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d007      	beq.n	8007f3e <HAL_GPIO_Init+0x21e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a4f      	ldr	r2, [pc, #316]	; (8008070 <HAL_GPIO_Init+0x350>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d101      	bne.n	8007f3a <HAL_GPIO_Init+0x21a>
 8007f36:	2309      	movs	r3, #9
 8007f38:	e012      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f3a:	230a      	movs	r3, #10
 8007f3c:	e010      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f3e:	2308      	movs	r3, #8
 8007f40:	e00e      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f42:	2307      	movs	r3, #7
 8007f44:	e00c      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f46:	2306      	movs	r3, #6
 8007f48:	e00a      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f4a:	2305      	movs	r3, #5
 8007f4c:	e008      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f4e:	2304      	movs	r3, #4
 8007f50:	e006      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f52:	2303      	movs	r3, #3
 8007f54:	e004      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e002      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e000      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	f002 0203 	and.w	r2, r2, #3
 8007f66:	0092      	lsls	r2, r2, #2
 8007f68:	4093      	lsls	r3, r2
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007f70:	4935      	ldr	r1, [pc, #212]	; (8008048 <HAL_GPIO_Init+0x328>)
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	089b      	lsrs	r3, r3, #2
 8007f76:	3302      	adds	r3, #2
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f7e:	4b3d      	ldr	r3, [pc, #244]	; (8008074 <HAL_GPIO_Init+0x354>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	43db      	mvns	r3, r3
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fa2:	4a34      	ldr	r2, [pc, #208]	; (8008074 <HAL_GPIO_Init+0x354>)
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fa8:	4b32      	ldr	r3, [pc, #200]	; (8008074 <HAL_GPIO_Init+0x354>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007fcc:	4a29      	ldr	r2, [pc, #164]	; (8008074 <HAL_GPIO_Init+0x354>)
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007fd2:	4b28      	ldr	r3, [pc, #160]	; (8008074 <HAL_GPIO_Init+0x354>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ff6:	4a1f      	ldr	r2, [pc, #124]	; (8008074 <HAL_GPIO_Init+0x354>)
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ffc:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <HAL_GPIO_Init+0x354>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	43db      	mvns	r3, r3
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	4013      	ands	r3, r2
 800800a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008020:	4a14      	ldr	r2, [pc, #80]	; (8008074 <HAL_GPIO_Init+0x354>)
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3301      	adds	r3, #1
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b0f      	cmp	r3, #15
 8008030:	f67f ae86 	bls.w	8007d40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	3724      	adds	r7, #36	; 0x24
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	40023800 	.word	0x40023800
 8008048:	40013800 	.word	0x40013800
 800804c:	40020000 	.word	0x40020000
 8008050:	40020400 	.word	0x40020400
 8008054:	40020800 	.word	0x40020800
 8008058:	40020c00 	.word	0x40020c00
 800805c:	40021000 	.word	0x40021000
 8008060:	40021400 	.word	0x40021400
 8008064:	40021800 	.word	0x40021800
 8008068:	40021c00 	.word	0x40021c00
 800806c:	40022000 	.word	0x40022000
 8008070:	40022400 	.word	0x40022400
 8008074:	40013c00 	.word	0x40013c00

08008078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	887b      	ldrh	r3, [r7, #2]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
 8008094:	e001      	b.n	800809a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800809a:	7bfb      	ldrb	r3, [r7, #15]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	807b      	strh	r3, [r7, #2]
 80080b4:	4613      	mov	r3, r2
 80080b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080b8:	787b      	ldrb	r3, [r7, #1]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080be:	887a      	ldrh	r2, [r7, #2]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80080c4:	e003      	b.n	80080ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80080c6:	887b      	ldrh	r3, [r7, #2]
 80080c8:	041a      	lsls	r2, r3, #16
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	619a      	str	r2, [r3, #24]
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80080e6:	4b08      	ldr	r3, [pc, #32]	; (8008108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080e8:	695a      	ldr	r2, [r3, #20]
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d006      	beq.n	8008100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080f2:	4a05      	ldr	r2, [pc, #20]	; (8008108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f806 	bl	800810c <HAL_GPIO_EXTI_Callback>
  }
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40013c00 	.word	0x40013c00

0800810c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e07f      	b.n	8008236 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fa ffae 	bl	80030ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2224      	movs	r2, #36	; 0x24
 8008154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0201 	bic.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008174:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008184:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d107      	bne.n	800819e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800819a:	609a      	str	r2, [r3, #8]
 800819c:	e006      	b.n	80081ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80081aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d104      	bne.n	80081be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6859      	ldr	r1, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	4b1d      	ldr	r3, [pc, #116]	; (8008240 <HAL_I2C_Init+0x11c>)
 80081ca:	430b      	orrs	r3, r1
 80081cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691a      	ldr	r2, [r3, #16]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69d9      	ldr	r1, [r3, #28]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1a      	ldr	r2, [r3, #32]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0201 	orr.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	02008000 	.word	0x02008000

08008244 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	4608      	mov	r0, r1
 800824e:	4611      	mov	r1, r2
 8008250:	461a      	mov	r2, r3
 8008252:	4603      	mov	r3, r0
 8008254:	817b      	strh	r3, [r7, #10]
 8008256:	460b      	mov	r3, r1
 8008258:	813b      	strh	r3, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b20      	cmp	r3, #32
 8008268:	f040 80f9 	bne.w	800845e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <HAL_I2C_Mem_Write+0x34>
 8008272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008274:	2b00      	cmp	r3, #0
 8008276:	d105      	bne.n	8008284 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800827e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0ed      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800828a:	2b01      	cmp	r3, #1
 800828c:	d101      	bne.n	8008292 <HAL_I2C_Mem_Write+0x4e>
 800828e:	2302      	movs	r3, #2
 8008290:	e0e6      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800829a:	f7fe f9ff 	bl	800669c <HAL_GetTick>
 800829e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	2319      	movs	r3, #25
 80082a6:	2201      	movs	r2, #1
 80082a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 fac3 	bl	8008838 <I2C_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e0d1      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2221      	movs	r2, #33	; 0x21
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2240      	movs	r2, #64	; 0x40
 80082c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6a3a      	ldr	r2, [r7, #32]
 80082d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80082e4:	88f8      	ldrh	r0, [r7, #6]
 80082e6:	893a      	ldrh	r2, [r7, #8]
 80082e8:	8979      	ldrh	r1, [r7, #10]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4603      	mov	r3, r0
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f9d3 	bl	80086a0 <I2C_RequestMemoryWrite>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e0a9      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008310:	b29b      	uxth	r3, r3
 8008312:	2bff      	cmp	r3, #255	; 0xff
 8008314:	d90e      	bls.n	8008334 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	22ff      	movs	r2, #255	; 0xff
 800831a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008320:	b2da      	uxtb	r2, r3
 8008322:	8979      	ldrh	r1, [r7, #10]
 8008324:	2300      	movs	r3, #0
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fc1f 	bl	8008b70 <I2C_TransferConfig>
 8008332:	e00f      	b.n	8008354 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008342:	b2da      	uxtb	r2, r3
 8008344:	8979      	ldrh	r1, [r7, #10]
 8008346:	2300      	movs	r3, #0
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fc0e 	bl	8008b70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 faad 	bl	80088b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e07b      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008382:	b29b      	uxth	r3, r3
 8008384:	3b01      	subs	r3, #1
 8008386:	b29a      	uxth	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008390:	3b01      	subs	r3, #1
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d034      	beq.n	800840c <HAL_I2C_Mem_Write+0x1c8>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d130      	bne.n	800840c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	2200      	movs	r2, #0
 80083b2:	2180      	movs	r1, #128	; 0x80
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fa3f 	bl	8008838 <I2C_WaitOnFlagUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e04d      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2bff      	cmp	r3, #255	; 0xff
 80083cc:	d90e      	bls.n	80083ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	22ff      	movs	r2, #255	; 0xff
 80083d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	8979      	ldrh	r1, [r7, #10]
 80083dc:	2300      	movs	r3, #0
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fbc3 	bl	8008b70 <I2C_TransferConfig>
 80083ea:	e00f      	b.n	800840c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	8979      	ldrh	r1, [r7, #10]
 80083fe:	2300      	movs	r3, #0
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 fbb2 	bl	8008b70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d19e      	bne.n	8008354 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 fa8c 	bl	8008938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e01a      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2220      	movs	r2, #32
 8008430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6859      	ldr	r1, [r3, #4]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <HAL_I2C_Mem_Write+0x224>)
 800843e:	400b      	ands	r3, r1
 8008440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e000      	b.n	8008460 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800845e:	2302      	movs	r3, #2
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	fe00e800 	.word	0xfe00e800

0800846c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	461a      	mov	r2, r3
 800847a:	4603      	mov	r3, r0
 800847c:	817b      	strh	r3, [r7, #10]
 800847e:	460b      	mov	r3, r1
 8008480:	813b      	strh	r3, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b20      	cmp	r3, #32
 8008490:	f040 80fd 	bne.w	800868e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <HAL_I2C_Mem_Read+0x34>
 800849a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	d105      	bne.n	80084ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e0f1      	b.n	8008690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d101      	bne.n	80084ba <HAL_I2C_Mem_Read+0x4e>
 80084b6:	2302      	movs	r3, #2
 80084b8:	e0ea      	b.n	8008690 <HAL_I2C_Mem_Read+0x224>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80084c2:	f7fe f8eb 	bl	800669c <HAL_GetTick>
 80084c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	2319      	movs	r3, #25
 80084ce:	2201      	movs	r2, #1
 80084d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f9af 	bl	8008838 <I2C_WaitOnFlagUntilTimeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0d5      	b.n	8008690 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2222      	movs	r2, #34	; 0x22
 80084e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2240      	movs	r2, #64	; 0x40
 80084f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a3a      	ldr	r2, [r7, #32]
 80084fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800850c:	88f8      	ldrh	r0, [r7, #6]
 800850e:	893a      	ldrh	r2, [r7, #8]
 8008510:	8979      	ldrh	r1, [r7, #10]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	4603      	mov	r3, r0
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f913 	bl	8008748 <I2C_RequestMemoryRead>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e0ad      	b.n	8008690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008538:	b29b      	uxth	r3, r3
 800853a:	2bff      	cmp	r3, #255	; 0xff
 800853c:	d90e      	bls.n	800855c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	22ff      	movs	r2, #255	; 0xff
 8008542:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008548:	b2da      	uxtb	r2, r3
 800854a:	8979      	ldrh	r1, [r7, #10]
 800854c:	4b52      	ldr	r3, [pc, #328]	; (8008698 <HAL_I2C_Mem_Read+0x22c>)
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fb0b 	bl	8008b70 <I2C_TransferConfig>
 800855a:	e00f      	b.n	800857c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008560:	b29a      	uxth	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800856a:	b2da      	uxtb	r2, r3
 800856c:	8979      	ldrh	r1, [r7, #10]
 800856e:	4b4a      	ldr	r3, [pc, #296]	; (8008698 <HAL_I2C_Mem_Read+0x22c>)
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fafa 	bl	8008b70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	2200      	movs	r2, #0
 8008584:	2104      	movs	r1, #4
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 f956 	bl	8008838 <I2C_WaitOnFlagUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e07c      	b.n	8008690 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	b2d2      	uxtb	r2, r2
 80085a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085be:	b29b      	uxth	r3, r3
 80085c0:	3b01      	subs	r3, #1
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d034      	beq.n	800863c <HAL_I2C_Mem_Read+0x1d0>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d130      	bne.n	800863c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	2200      	movs	r2, #0
 80085e2:	2180      	movs	r1, #128	; 0x80
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f927 	bl	8008838 <I2C_WaitOnFlagUntilTimeout>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e04d      	b.n	8008690 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	2bff      	cmp	r3, #255	; 0xff
 80085fc:	d90e      	bls.n	800861c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	22ff      	movs	r2, #255	; 0xff
 8008602:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008608:	b2da      	uxtb	r2, r3
 800860a:	8979      	ldrh	r1, [r7, #10]
 800860c:	2300      	movs	r3, #0
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 faab 	bl	8008b70 <I2C_TransferConfig>
 800861a:	e00f      	b.n	800863c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862a:	b2da      	uxtb	r2, r3
 800862c:	8979      	ldrh	r1, [r7, #10]
 800862e:	2300      	movs	r3, #0
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 fa9a 	bl	8008b70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008640:	b29b      	uxth	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d19a      	bne.n	800857c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 f974 	bl	8008938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e01a      	b.n	8008690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2220      	movs	r2, #32
 8008660:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6859      	ldr	r1, [r3, #4]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	4b0b      	ldr	r3, [pc, #44]	; (800869c <HAL_I2C_Mem_Read+0x230>)
 800866e:	400b      	ands	r3, r1
 8008670:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	e000      	b.n	8008690 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800868e:	2302      	movs	r3, #2
  }
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	80002400 	.word	0x80002400
 800869c:	fe00e800 	.word	0xfe00e800

080086a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	4608      	mov	r0, r1
 80086aa:	4611      	mov	r1, r2
 80086ac:	461a      	mov	r2, r3
 80086ae:	4603      	mov	r3, r0
 80086b0:	817b      	strh	r3, [r7, #10]
 80086b2:	460b      	mov	r3, r1
 80086b4:	813b      	strh	r3, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80086ba:	88fb      	ldrh	r3, [r7, #6]
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	8979      	ldrh	r1, [r7, #10]
 80086c0:	4b20      	ldr	r3, [pc, #128]	; (8008744 <I2C_RequestMemoryWrite+0xa4>)
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 fa51 	bl	8008b70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	69b9      	ldr	r1, [r7, #24]
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 f8f0 	bl	80088b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e02c      	b.n	800873c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086e2:	88fb      	ldrh	r3, [r7, #6]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d105      	bne.n	80086f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086e8:	893b      	ldrh	r3, [r7, #8]
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	629a      	str	r2, [r3, #40]	; 0x28
 80086f2:	e015      	b.n	8008720 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80086f4:	893b      	ldrh	r3, [r7, #8]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	69b9      	ldr	r1, [r7, #24]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 f8d6 	bl	80088b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e012      	b.n	800873c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008716:	893b      	ldrh	r3, [r7, #8]
 8008718:	b2da      	uxtb	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	2200      	movs	r2, #0
 8008728:	2180      	movs	r1, #128	; 0x80
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 f884 	bl	8008838 <I2C_WaitOnFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e000      	b.n	800873c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	80002000 	.word	0x80002000

08008748 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af02      	add	r7, sp, #8
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	4608      	mov	r0, r1
 8008752:	4611      	mov	r1, r2
 8008754:	461a      	mov	r2, r3
 8008756:	4603      	mov	r3, r0
 8008758:	817b      	strh	r3, [r7, #10]
 800875a:	460b      	mov	r3, r1
 800875c:	813b      	strh	r3, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008762:	88fb      	ldrh	r3, [r7, #6]
 8008764:	b2da      	uxtb	r2, r3
 8008766:	8979      	ldrh	r1, [r7, #10]
 8008768:	4b20      	ldr	r3, [pc, #128]	; (80087ec <I2C_RequestMemoryRead+0xa4>)
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f9fe 	bl	8008b70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	69b9      	ldr	r1, [r7, #24]
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f89d 	bl	80088b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e02c      	b.n	80087e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d105      	bne.n	800879a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800878e:	893b      	ldrh	r3, [r7, #8]
 8008790:	b2da      	uxtb	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	629a      	str	r2, [r3, #40]	; 0x28
 8008798:	e015      	b.n	80087c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800879a:	893b      	ldrh	r3, [r7, #8]
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	b29b      	uxth	r3, r3
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	69b9      	ldr	r1, [r7, #24]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 f883 	bl	80088b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e012      	b.n	80087e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087bc:	893b      	ldrh	r3, [r7, #8]
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	2200      	movs	r2, #0
 80087ce:	2140      	movs	r1, #64	; 0x40
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f831 	bl	8008838 <I2C_WaitOnFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	80002000 	.word	0x80002000

080087f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b02      	cmp	r3, #2
 8008804:	d103      	bne.n	800880e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d007      	beq.n	800882c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	619a      	str	r2, [r3, #24]
  }
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	4613      	mov	r3, r2
 8008846:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008848:	e022      	b.n	8008890 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008850:	d01e      	beq.n	8008890 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008852:	f7fd ff23 	bl	800669c <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	429a      	cmp	r2, r3
 8008860:	d302      	bcc.n	8008868 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d113      	bne.n	8008890 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886c:	f043 0220 	orr.w	r2, r3, #32
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e00f      	b.n	80088b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4013      	ands	r3, r2
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	429a      	cmp	r2, r3
 800889e:	bf0c      	ite	eq
 80088a0:	2301      	moveq	r3, #1
 80088a2:	2300      	movne	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d0cd      	beq.n	800884a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088c4:	e02c      	b.n	8008920 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	68b9      	ldr	r1, [r7, #8]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 f870 	bl	80089b0 <I2C_IsErrorOccurred>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e02a      	b.n	8008930 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e0:	d01e      	beq.n	8008920 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088e2:	f7fd fedb 	bl	800669c <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d302      	bcc.n	80088f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d113      	bne.n	8008920 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fc:	f043 0220 	orr.w	r2, r3, #32
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e007      	b.n	8008930 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b02      	cmp	r3, #2
 800892c:	d1cb      	bne.n	80088c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008944:	e028      	b.n	8008998 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	68b9      	ldr	r1, [r7, #8]
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 f830 	bl	80089b0 <I2C_IsErrorOccurred>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e026      	b.n	80089a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895a:	f7fd fe9f 	bl	800669c <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	d302      	bcc.n	8008970 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d113      	bne.n	8008998 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008974:	f043 0220 	orr.w	r2, r3, #32
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e007      	b.n	80089a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	d1cf      	bne.n	8008946 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08a      	sub	sp, #40	; 0x28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d068      	beq.n	8008aae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2210      	movs	r2, #16
 80089e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089e4:	e049      	b.n	8008a7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ec:	d045      	beq.n	8008a7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089ee:	f7fd fe55 	bl	800669c <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d302      	bcc.n	8008a04 <I2C_IsErrorOccurred+0x54>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d13a      	bne.n	8008a7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a26:	d121      	bne.n	8008a6c <I2C_IsErrorOccurred+0xbc>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a2e:	d01d      	beq.n	8008a6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008a30:	7cfb      	ldrb	r3, [r7, #19]
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d01a      	beq.n	8008a6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a46:	f7fd fe29 	bl	800669c <HAL_GetTick>
 8008a4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a4c:	e00e      	b.n	8008a6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a4e:	f7fd fe25 	bl	800669c <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b19      	cmp	r3, #25
 8008a5a:	d907      	bls.n	8008a6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	f043 0320 	orr.w	r3, r3, #32
 8008a62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008a6a:	e006      	b.n	8008a7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	d1e9      	bne.n	8008a4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	d003      	beq.n	8008a90 <I2C_IsErrorOccurred+0xe0>
 8008a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0aa      	beq.n	80089e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	f043 0304 	orr.w	r3, r3, #4
 8008aa6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	f043 0301 	orr.w	r3, r3, #1
 8008ac6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00b      	beq.n	8008afa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	f043 0308 	orr.w	r3, r3, #8
 8008ae8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008af2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	f043 0302 	orr.w	r3, r3, #2
 8008b0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01c      	beq.n	8008b5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff fe63 	bl	80087f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6859      	ldr	r1, [r3, #4]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <I2C_IsErrorOccurred+0x1bc>)
 8008b36:	400b      	ands	r3, r1
 8008b38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	431a      	orrs	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3728      	adds	r7, #40	; 0x28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	fe00e800 	.word	0xfe00e800

08008b70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	817b      	strh	r3, [r7, #10]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b82:	897b      	ldrh	r3, [r7, #10]
 8008b84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b88:	7a7b      	ldrb	r3, [r7, #9]
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	0d5b      	lsrs	r3, r3, #21
 8008baa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008bae:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <I2C_TransferConfig+0x60>)
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	43db      	mvns	r3, r3
 8008bb4:	ea02 0103 	and.w	r1, r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008bc2:	bf00      	nop
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	03ff63ff 	.word	0x03ff63ff

08008bd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d138      	bne.n	8008c5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d101      	bne.n	8008bf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e032      	b.n	8008c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2224      	movs	r2, #36	; 0x24
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0201 	bic.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6819      	ldr	r1, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0201 	orr.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e000      	b.n	8008c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c5c:	2302      	movs	r3, #2
  }
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	d139      	bne.n	8008cf4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d101      	bne.n	8008c8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	e033      	b.n	8008cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2224      	movs	r2, #36	; 0x24
 8008c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 0201 	bic.w	r2, r2, #1
 8008cac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e000      	b.n	8008cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008cf4:	2302      	movs	r3, #2
  }
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
	...

08008d04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e0bf      	b.n	8008e96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d106      	bne.n	8008d30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7fa fad0 	bl	80032d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699a      	ldr	r2, [r3, #24]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008d46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6999      	ldr	r1, [r3, #24]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008d5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6899      	ldr	r1, [r3, #8]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	4b4a      	ldr	r3, [pc, #296]	; (8008ea0 <HAL_LTDC_Init+0x19c>)
 8008d78:	400b      	ands	r3, r1
 8008d7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	041b      	lsls	r3, r3, #16
 8008d82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6899      	ldr	r1, [r3, #8]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	431a      	orrs	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68d9      	ldr	r1, [r3, #12]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	4b3e      	ldr	r3, [pc, #248]	; (8008ea0 <HAL_LTDC_Init+0x19c>)
 8008da6:	400b      	ands	r3, r1
 8008da8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	041b      	lsls	r3, r3, #16
 8008db0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68d9      	ldr	r1, [r3, #12]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a1a      	ldr	r2, [r3, #32]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6919      	ldr	r1, [r3, #16]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4b33      	ldr	r3, [pc, #204]	; (8008ea0 <HAL_LTDC_Init+0x19c>)
 8008dd4:	400b      	ands	r3, r1
 8008dd6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	041b      	lsls	r3, r3, #16
 8008dde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6919      	ldr	r1, [r3, #16]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6959      	ldr	r1, [r3, #20]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	4b27      	ldr	r3, [pc, #156]	; (8008ea0 <HAL_LTDC_Init+0x19c>)
 8008e02:	400b      	ands	r3, r1
 8008e04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	041b      	lsls	r3, r3, #16
 8008e0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6959      	ldr	r1, [r3, #20]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e2a:	021b      	lsls	r3, r3, #8
 8008e2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008e34:	041b      	lsls	r3, r3, #16
 8008e36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0206 	orr.w	r2, r2, #6
 8008e72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699a      	ldr	r2, [r3, #24]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	f000f800 	.word	0xf000f800

08008ea4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008ea4:	b5b0      	push	{r4, r5, r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d101      	bne.n	8008ebe <HAL_LTDC_ConfigLayer+0x1a>
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e02c      	b.n	8008f18 <HAL_LTDC_ConfigLayer+0x74>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2134      	movs	r1, #52	; 0x34
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	4614      	mov	r4, r2
 8008ee2:	461d      	mov	r5, r3
 8008ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 f81f 	bl	8008f3c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2201      	movs	r2, #1
 8008f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bdb0      	pop	{r4, r5, r7, pc}

08008f20 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008f2e:	b2db      	uxtb	r3, r3
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b089      	sub	sp, #36	; 0x24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	0c1b      	lsrs	r3, r3, #16
 8008f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f58:	4413      	add	r3, r2
 8008f5a:	041b      	lsls	r3, r3, #16
 8008f5c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	01db      	lsls	r3, r3, #7
 8008f68:	4413      	add	r3, r2
 8008f6a:	3384      	adds	r3, #132	; 0x84
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	6812      	ldr	r2, [r2, #0]
 8008f72:	4611      	mov	r1, r2
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	01d2      	lsls	r2, r2, #7
 8008f78:	440a      	add	r2, r1
 8008f7a:	3284      	adds	r2, #132	; 0x84
 8008f7c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008f80:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	0c1b      	lsrs	r3, r3, #16
 8008f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008f92:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008f94:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	01db      	lsls	r3, r3, #7
 8008fa0:	440b      	add	r3, r1
 8008fa2:	3384      	adds	r3, #132	; 0x84
 8008fa4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008faa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fba:	4413      	add	r3, r2
 8008fbc:	041b      	lsls	r3, r3, #16
 8008fbe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	01db      	lsls	r3, r3, #7
 8008fca:	4413      	add	r3, r2
 8008fcc:	3384      	adds	r3, #132	; 0x84
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	6812      	ldr	r2, [r2, #0]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	01d2      	lsls	r2, r2, #7
 8008fda:	440a      	add	r2, r1
 8008fdc:	3284      	adds	r2, #132	; 0x84
 8008fde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008fe2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ff2:	4413      	add	r3, r2
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	01db      	lsls	r3, r3, #7
 8009000:	440b      	add	r3, r1
 8009002:	3384      	adds	r3, #132	; 0x84
 8009004:	4619      	mov	r1, r3
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	4313      	orrs	r3, r2
 800900a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	01db      	lsls	r3, r3, #7
 8009016:	4413      	add	r3, r2
 8009018:	3384      	adds	r3, #132	; 0x84
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	6812      	ldr	r2, [r2, #0]
 8009020:	4611      	mov	r1, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	01d2      	lsls	r2, r2, #7
 8009026:	440a      	add	r2, r1
 8009028:	3284      	adds	r2, #132	; 0x84
 800902a:	f023 0307 	bic.w	r3, r3, #7
 800902e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	01db      	lsls	r3, r3, #7
 800903a:	4413      	add	r3, r2
 800903c:	3384      	adds	r3, #132	; 0x84
 800903e:	461a      	mov	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009056:	041b      	lsls	r3, r3, #16
 8009058:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	061b      	lsls	r3, r3, #24
 8009060:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	01db      	lsls	r3, r3, #7
 800906c:	4413      	add	r3, r2
 800906e:	3384      	adds	r3, #132	; 0x84
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	01db      	lsls	r3, r3, #7
 800907c:	4413      	add	r3, r2
 800907e:	3384      	adds	r3, #132	; 0x84
 8009080:	461a      	mov	r2, r3
 8009082:	2300      	movs	r3, #0
 8009084:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800908c:	461a      	mov	r2, r3
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	431a      	orrs	r2, r3
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	431a      	orrs	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4619      	mov	r1, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	01db      	lsls	r3, r3, #7
 80090a0:	440b      	add	r3, r1
 80090a2:	3384      	adds	r3, #132	; 0x84
 80090a4:	4619      	mov	r1, r3
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	01db      	lsls	r3, r3, #7
 80090b6:	4413      	add	r3, r2
 80090b8:	3384      	adds	r3, #132	; 0x84
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	4611      	mov	r1, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	01d2      	lsls	r2, r2, #7
 80090c6:	440a      	add	r2, r1
 80090c8:	3284      	adds	r2, #132	; 0x84
 80090ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	01db      	lsls	r3, r3, #7
 80090da:	4413      	add	r3, r2
 80090dc:	3384      	adds	r3, #132	; 0x84
 80090de:	461a      	mov	r2, r3
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	01db      	lsls	r3, r3, #7
 80090f0:	4413      	add	r3, r2
 80090f2:	3384      	adds	r3, #132	; 0x84
 80090f4:	69da      	ldr	r2, [r3, #28]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4619      	mov	r1, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	01db      	lsls	r3, r3, #7
 8009100:	440b      	add	r3, r1
 8009102:	3384      	adds	r3, #132	; 0x84
 8009104:	4619      	mov	r1, r3
 8009106:	4b58      	ldr	r3, [pc, #352]	; (8009268 <LTDC_SetConfig+0x32c>)
 8009108:	4013      	ands	r3, r2
 800910a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	69da      	ldr	r2, [r3, #28]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	68f9      	ldr	r1, [r7, #12]
 8009116:	6809      	ldr	r1, [r1, #0]
 8009118:	4608      	mov	r0, r1
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	01c9      	lsls	r1, r1, #7
 800911e:	4401      	add	r1, r0
 8009120:	3184      	adds	r1, #132	; 0x84
 8009122:	4313      	orrs	r3, r2
 8009124:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	01db      	lsls	r3, r3, #7
 8009130:	4413      	add	r3, r2
 8009132:	3384      	adds	r3, #132	; 0x84
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	01db      	lsls	r3, r3, #7
 8009140:	4413      	add	r3, r2
 8009142:	3384      	adds	r3, #132	; 0x84
 8009144:	461a      	mov	r2, r3
 8009146:	2300      	movs	r3, #0
 8009148:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	01db      	lsls	r3, r3, #7
 8009154:	4413      	add	r3, r2
 8009156:	3384      	adds	r3, #132	; 0x84
 8009158:	461a      	mov	r2, r3
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d102      	bne.n	800916e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009168:	2304      	movs	r3, #4
 800916a:	61fb      	str	r3, [r7, #28]
 800916c:	e01b      	b.n	80091a6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d102      	bne.n	800917c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009176:	2303      	movs	r3, #3
 8009178:	61fb      	str	r3, [r7, #28]
 800917a:	e014      	b.n	80091a6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	2b04      	cmp	r3, #4
 8009182:	d00b      	beq.n	800919c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009188:	2b02      	cmp	r3, #2
 800918a:	d007      	beq.n	800919c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009190:	2b03      	cmp	r3, #3
 8009192:	d003      	beq.n	800919c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009198:	2b07      	cmp	r3, #7
 800919a:	d102      	bne.n	80091a2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800919c:	2302      	movs	r3, #2
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	e001      	b.n	80091a6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80091a2:	2301      	movs	r3, #1
 80091a4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	01db      	lsls	r3, r3, #7
 80091b0:	4413      	add	r3, r2
 80091b2:	3384      	adds	r3, #132	; 0x84
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	6812      	ldr	r2, [r2, #0]
 80091ba:	4611      	mov	r1, r2
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	01d2      	lsls	r2, r2, #7
 80091c0:	440a      	add	r2, r1
 80091c2:	3284      	adds	r2, #132	; 0x84
 80091c4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80091c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
 80091d4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6859      	ldr	r1, [r3, #4]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	1acb      	subs	r3, r1, r3
 80091e0:	69f9      	ldr	r1, [r7, #28]
 80091e2:	fb01 f303 	mul.w	r3, r1, r3
 80091e6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80091e8:	68f9      	ldr	r1, [r7, #12]
 80091ea:	6809      	ldr	r1, [r1, #0]
 80091ec:	4608      	mov	r0, r1
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	01c9      	lsls	r1, r1, #7
 80091f2:	4401      	add	r1, r0
 80091f4:	3184      	adds	r1, #132	; 0x84
 80091f6:	4313      	orrs	r3, r2
 80091f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	01db      	lsls	r3, r3, #7
 8009204:	4413      	add	r3, r2
 8009206:	3384      	adds	r3, #132	; 0x84
 8009208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4619      	mov	r1, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	01db      	lsls	r3, r3, #7
 8009214:	440b      	add	r3, r1
 8009216:	3384      	adds	r3, #132	; 0x84
 8009218:	4619      	mov	r1, r3
 800921a:	4b14      	ldr	r3, [pc, #80]	; (800926c <LTDC_SetConfig+0x330>)
 800921c:	4013      	ands	r3, r2
 800921e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	01db      	lsls	r3, r3, #7
 800922a:	4413      	add	r3, r2
 800922c:	3384      	adds	r3, #132	; 0x84
 800922e:	461a      	mov	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	01db      	lsls	r3, r3, #7
 8009240:	4413      	add	r3, r2
 8009242:	3384      	adds	r3, #132	; 0x84
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	4611      	mov	r1, r2
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	01d2      	lsls	r2, r2, #7
 8009250:	440a      	add	r2, r1
 8009252:	3284      	adds	r2, #132	; 0x84
 8009254:	f043 0301 	orr.w	r3, r3, #1
 8009258:	6013      	str	r3, [r2, #0]
}
 800925a:	bf00      	nop
 800925c:	3724      	adds	r7, #36	; 0x24
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	fffff8f8 	.word	0xfffff8f8
 800926c:	fffff800 	.word	0xfffff800

08009270 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800927c:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <HAL_PWR_EnterSLEEPMode+0x40>)
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	4a0b      	ldr	r2, [pc, #44]	; (80092b0 <HAL_PWR_EnterSLEEPMode+0x40>)
 8009282:	f023 0304 	bic.w	r3, r3, #4
 8009286:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009288:	f3bf 8f4f 	dsb	sy
}
 800928c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800928e:	f3bf 8f6f 	isb	sy
}
 8009292:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800929a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800929c:	e002      	b.n	80092a4 <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800929e:	bf40      	sev
    __WFE();
 80092a0:	bf20      	wfe
    __WFE();
 80092a2:	bf20      	wfe
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	e000ed00 	.word	0xe000ed00

080092b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80092be:	4b23      	ldr	r3, [pc, #140]	; (800934c <HAL_PWREx_EnableOverDrive+0x98>)
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	4a22      	ldr	r2, [pc, #136]	; (800934c <HAL_PWREx_EnableOverDrive+0x98>)
 80092c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c8:	6413      	str	r3, [r2, #64]	; 0x40
 80092ca:	4b20      	ldr	r3, [pc, #128]	; (800934c <HAL_PWREx_EnableOverDrive+0x98>)
 80092cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80092d6:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a1d      	ldr	r2, [pc, #116]	; (8009350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80092dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092e2:	f7fd f9db 	bl	800669c <HAL_GetTick>
 80092e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80092e8:	e009      	b.n	80092fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80092ea:	f7fd f9d7 	bl	800669c <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092f8:	d901      	bls.n	80092fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e022      	b.n	8009344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80092fe:	4b14      	ldr	r3, [pc, #80]	; (8009350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800930a:	d1ee      	bne.n	80092ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800930c:	4b10      	ldr	r3, [pc, #64]	; (8009350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a0f      	ldr	r2, [pc, #60]	; (8009350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009316:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009318:	f7fd f9c0 	bl	800669c <HAL_GetTick>
 800931c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800931e:	e009      	b.n	8009334 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009320:	f7fd f9bc 	bl	800669c <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800932e:	d901      	bls.n	8009334 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009330:	2303      	movs	r3, #3
 8009332:	e007      	b.n	8009344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009334:	4b06      	ldr	r3, [pc, #24]	; (8009350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009340:	d1ee      	bne.n	8009320 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	40023800 	.word	0x40023800
 8009350:	40007000 	.word	0x40007000

08009354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800935c:	2300      	movs	r3, #0
 800935e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e291      	b.n	800988e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 8087 	beq.w	8009486 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009378:	4b96      	ldr	r3, [pc, #600]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f003 030c 	and.w	r3, r3, #12
 8009380:	2b04      	cmp	r3, #4
 8009382:	d00c      	beq.n	800939e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009384:	4b93      	ldr	r3, [pc, #588]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f003 030c 	and.w	r3, r3, #12
 800938c:	2b08      	cmp	r3, #8
 800938e:	d112      	bne.n	80093b6 <HAL_RCC_OscConfig+0x62>
 8009390:	4b90      	ldr	r3, [pc, #576]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800939c:	d10b      	bne.n	80093b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800939e:	4b8d      	ldr	r3, [pc, #564]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d06c      	beq.n	8009484 <HAL_RCC_OscConfig+0x130>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d168      	bne.n	8009484 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e26b      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093be:	d106      	bne.n	80093ce <HAL_RCC_OscConfig+0x7a>
 80093c0:	4b84      	ldr	r3, [pc, #528]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a83      	ldr	r2, [pc, #524]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80093c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	e02e      	b.n	800942c <HAL_RCC_OscConfig+0xd8>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10c      	bne.n	80093f0 <HAL_RCC_OscConfig+0x9c>
 80093d6:	4b7f      	ldr	r3, [pc, #508]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a7e      	ldr	r2, [pc, #504]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80093dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	4b7c      	ldr	r3, [pc, #496]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a7b      	ldr	r2, [pc, #492]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80093e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	e01d      	b.n	800942c <HAL_RCC_OscConfig+0xd8>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093f8:	d10c      	bne.n	8009414 <HAL_RCC_OscConfig+0xc0>
 80093fa:	4b76      	ldr	r3, [pc, #472]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a75      	ldr	r2, [pc, #468]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	4b73      	ldr	r3, [pc, #460]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a72      	ldr	r2, [pc, #456]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 800940c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	e00b      	b.n	800942c <HAL_RCC_OscConfig+0xd8>
 8009414:	4b6f      	ldr	r3, [pc, #444]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a6e      	ldr	r2, [pc, #440]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 800941a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	4b6c      	ldr	r3, [pc, #432]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a6b      	ldr	r2, [pc, #428]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800942a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d013      	beq.n	800945c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009434:	f7fd f932 	bl	800669c <HAL_GetTick>
 8009438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800943a:	e008      	b.n	800944e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800943c:	f7fd f92e 	bl	800669c <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b64      	cmp	r3, #100	; 0x64
 8009448:	d901      	bls.n	800944e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e21f      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800944e:	4b61      	ldr	r3, [pc, #388]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0f0      	beq.n	800943c <HAL_RCC_OscConfig+0xe8>
 800945a:	e014      	b.n	8009486 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800945c:	f7fd f91e 	bl	800669c <HAL_GetTick>
 8009460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009462:	e008      	b.n	8009476 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009464:	f7fd f91a 	bl	800669c <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	2b64      	cmp	r3, #100	; 0x64
 8009470:	d901      	bls.n	8009476 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e20b      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009476:	4b57      	ldr	r3, [pc, #348]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1f0      	bne.n	8009464 <HAL_RCC_OscConfig+0x110>
 8009482:	e000      	b.n	8009486 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d069      	beq.n	8009566 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009492:	4b50      	ldr	r3, [pc, #320]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f003 030c 	and.w	r3, r3, #12
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800949e:	4b4d      	ldr	r3, [pc, #308]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 030c 	and.w	r3, r3, #12
 80094a6:	2b08      	cmp	r3, #8
 80094a8:	d11c      	bne.n	80094e4 <HAL_RCC_OscConfig+0x190>
 80094aa:	4b4a      	ldr	r3, [pc, #296]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d116      	bne.n	80094e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094b6:	4b47      	ldr	r3, [pc, #284]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <HAL_RCC_OscConfig+0x17a>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d001      	beq.n	80094ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e1df      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ce:	4b41      	ldr	r3, [pc, #260]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	493d      	ldr	r1, [pc, #244]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094e2:	e040      	b.n	8009566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d023      	beq.n	8009534 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094ec:	4b39      	ldr	r3, [pc, #228]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a38      	ldr	r2, [pc, #224]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80094f2:	f043 0301 	orr.w	r3, r3, #1
 80094f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f8:	f7fd f8d0 	bl	800669c <HAL_GetTick>
 80094fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094fe:	e008      	b.n	8009512 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009500:	f7fd f8cc 	bl	800669c <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e1bd      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009512:	4b30      	ldr	r3, [pc, #192]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0f0      	beq.n	8009500 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800951e:	4b2d      	ldr	r3, [pc, #180]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	4929      	ldr	r1, [pc, #164]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 800952e:	4313      	orrs	r3, r2
 8009530:	600b      	str	r3, [r1, #0]
 8009532:	e018      	b.n	8009566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009534:	4b27      	ldr	r3, [pc, #156]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a26      	ldr	r2, [pc, #152]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 800953a:	f023 0301 	bic.w	r3, r3, #1
 800953e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009540:	f7fd f8ac 	bl	800669c <HAL_GetTick>
 8009544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009546:	e008      	b.n	800955a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009548:	f7fd f8a8 	bl	800669c <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b02      	cmp	r3, #2
 8009554:	d901      	bls.n	800955a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e199      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800955a:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1f0      	bne.n	8009548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0308 	and.w	r3, r3, #8
 800956e:	2b00      	cmp	r3, #0
 8009570:	d038      	beq.n	80095e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d019      	beq.n	80095ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800957a:	4b16      	ldr	r3, [pc, #88]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 800957c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800957e:	4a15      	ldr	r2, [pc, #84]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 8009580:	f043 0301 	orr.w	r3, r3, #1
 8009584:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009586:	f7fd f889 	bl	800669c <HAL_GetTick>
 800958a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800958c:	e008      	b.n	80095a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800958e:	f7fd f885 	bl	800669c <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e176      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095a0:	4b0c      	ldr	r3, [pc, #48]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80095a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <HAL_RCC_OscConfig+0x23a>
 80095ac:	e01a      	b.n	80095e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80095b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095b2:	4a08      	ldr	r2, [pc, #32]	; (80095d4 <HAL_RCC_OscConfig+0x280>)
 80095b4:	f023 0301 	bic.w	r3, r3, #1
 80095b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ba:	f7fd f86f 	bl	800669c <HAL_GetTick>
 80095be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095c0:	e00a      	b.n	80095d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095c2:	f7fd f86b 	bl	800669c <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d903      	bls.n	80095d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e15c      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
 80095d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095d8:	4b91      	ldr	r3, [pc, #580]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80095da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1ee      	bne.n	80095c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 80a4 	beq.w	800973a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095f2:	4b8b      	ldr	r3, [pc, #556]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10d      	bne.n	800961a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80095fe:	4b88      	ldr	r3, [pc, #544]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009602:	4a87      	ldr	r2, [pc, #540]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009608:	6413      	str	r3, [r2, #64]	; 0x40
 800960a:	4b85      	ldr	r3, [pc, #532]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009612:	60bb      	str	r3, [r7, #8]
 8009614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009616:	2301      	movs	r3, #1
 8009618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800961a:	4b82      	ldr	r3, [pc, #520]	; (8009824 <HAL_RCC_OscConfig+0x4d0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009622:	2b00      	cmp	r3, #0
 8009624:	d118      	bne.n	8009658 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009626:	4b7f      	ldr	r3, [pc, #508]	; (8009824 <HAL_RCC_OscConfig+0x4d0>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a7e      	ldr	r2, [pc, #504]	; (8009824 <HAL_RCC_OscConfig+0x4d0>)
 800962c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009632:	f7fd f833 	bl	800669c <HAL_GetTick>
 8009636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009638:	e008      	b.n	800964c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800963a:	f7fd f82f 	bl	800669c <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	2b64      	cmp	r3, #100	; 0x64
 8009646:	d901      	bls.n	800964c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e120      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800964c:	4b75      	ldr	r3, [pc, #468]	; (8009824 <HAL_RCC_OscConfig+0x4d0>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0f0      	beq.n	800963a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d106      	bne.n	800966e <HAL_RCC_OscConfig+0x31a>
 8009660:	4b6f      	ldr	r3, [pc, #444]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009664:	4a6e      	ldr	r2, [pc, #440]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	6713      	str	r3, [r2, #112]	; 0x70
 800966c:	e02d      	b.n	80096ca <HAL_RCC_OscConfig+0x376>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10c      	bne.n	8009690 <HAL_RCC_OscConfig+0x33c>
 8009676:	4b6a      	ldr	r3, [pc, #424]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967a:	4a69      	ldr	r2, [pc, #420]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 800967c:	f023 0301 	bic.w	r3, r3, #1
 8009680:	6713      	str	r3, [r2, #112]	; 0x70
 8009682:	4b67      	ldr	r3, [pc, #412]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009686:	4a66      	ldr	r2, [pc, #408]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009688:	f023 0304 	bic.w	r3, r3, #4
 800968c:	6713      	str	r3, [r2, #112]	; 0x70
 800968e:	e01c      	b.n	80096ca <HAL_RCC_OscConfig+0x376>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b05      	cmp	r3, #5
 8009696:	d10c      	bne.n	80096b2 <HAL_RCC_OscConfig+0x35e>
 8009698:	4b61      	ldr	r3, [pc, #388]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 800969a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969c:	4a60      	ldr	r2, [pc, #384]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 800969e:	f043 0304 	orr.w	r3, r3, #4
 80096a2:	6713      	str	r3, [r2, #112]	; 0x70
 80096a4:	4b5e      	ldr	r3, [pc, #376]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80096a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a8:	4a5d      	ldr	r2, [pc, #372]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	6713      	str	r3, [r2, #112]	; 0x70
 80096b0:	e00b      	b.n	80096ca <HAL_RCC_OscConfig+0x376>
 80096b2:	4b5b      	ldr	r3, [pc, #364]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80096b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b6:	4a5a      	ldr	r2, [pc, #360]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	6713      	str	r3, [r2, #112]	; 0x70
 80096be:	4b58      	ldr	r3, [pc, #352]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80096c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c2:	4a57      	ldr	r2, [pc, #348]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80096c4:	f023 0304 	bic.w	r3, r3, #4
 80096c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d015      	beq.n	80096fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d2:	f7fc ffe3 	bl	800669c <HAL_GetTick>
 80096d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096d8:	e00a      	b.n	80096f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096da:	f7fc ffdf 	bl	800669c <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e0ce      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096f0:	4b4b      	ldr	r3, [pc, #300]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80096f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0ee      	beq.n	80096da <HAL_RCC_OscConfig+0x386>
 80096fc:	e014      	b.n	8009728 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096fe:	f7fc ffcd 	bl	800669c <HAL_GetTick>
 8009702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009704:	e00a      	b.n	800971c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009706:	f7fc ffc9 	bl	800669c <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	f241 3288 	movw	r2, #5000	; 0x1388
 8009714:	4293      	cmp	r3, r2
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e0b8      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800971c:	4b40      	ldr	r3, [pc, #256]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 800971e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1ee      	bne.n	8009706 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009728:	7dfb      	ldrb	r3, [r7, #23]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d105      	bne.n	800973a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800972e:	4b3c      	ldr	r3, [pc, #240]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	4a3b      	ldr	r2, [pc, #236]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 80a4 	beq.w	800988c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009744:	4b36      	ldr	r3, [pc, #216]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f003 030c 	and.w	r3, r3, #12
 800974c:	2b08      	cmp	r3, #8
 800974e:	d06b      	beq.n	8009828 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d149      	bne.n	80097ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009758:	4b31      	ldr	r3, [pc, #196]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a30      	ldr	r2, [pc, #192]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 800975e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009764:	f7fc ff9a 	bl	800669c <HAL_GetTick>
 8009768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800976a:	e008      	b.n	800977e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800976c:	f7fc ff96 	bl	800669c <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b02      	cmp	r3, #2
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e087      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800977e:	4b28      	ldr	r3, [pc, #160]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1f0      	bne.n	800976c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	69da      	ldr	r2, [r3, #28]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	019b      	lsls	r3, r3, #6
 800979a:	431a      	orrs	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	085b      	lsrs	r3, r3, #1
 80097a2:	3b01      	subs	r3, #1
 80097a4:	041b      	lsls	r3, r3, #16
 80097a6:	431a      	orrs	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	061b      	lsls	r3, r3, #24
 80097ae:	4313      	orrs	r3, r2
 80097b0:	4a1b      	ldr	r2, [pc, #108]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80097b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097b8:	4b19      	ldr	r3, [pc, #100]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a18      	ldr	r2, [pc, #96]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80097be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c4:	f7fc ff6a 	bl	800669c <HAL_GetTick>
 80097c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097ca:	e008      	b.n	80097de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097cc:	f7fc ff66 	bl	800669c <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d901      	bls.n	80097de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e057      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097de:	4b10      	ldr	r3, [pc, #64]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0f0      	beq.n	80097cc <HAL_RCC_OscConfig+0x478>
 80097ea:	e04f      	b.n	800988c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097ec:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a0b      	ldr	r2, [pc, #44]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 80097f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f8:	f7fc ff50 	bl	800669c <HAL_GetTick>
 80097fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097fe:	e008      	b.n	8009812 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009800:	f7fc ff4c 	bl	800669c <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b02      	cmp	r3, #2
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e03d      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009812:	4b03      	ldr	r3, [pc, #12]	; (8009820 <HAL_RCC_OscConfig+0x4cc>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f0      	bne.n	8009800 <HAL_RCC_OscConfig+0x4ac>
 800981e:	e035      	b.n	800988c <HAL_RCC_OscConfig+0x538>
 8009820:	40023800 	.word	0x40023800
 8009824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009828:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <HAL_RCC_OscConfig+0x544>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d028      	beq.n	8009888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009840:	429a      	cmp	r2, r3
 8009842:	d121      	bne.n	8009888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800984e:	429a      	cmp	r2, r3
 8009850:	d11a      	bne.n	8009888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009858:	4013      	ands	r3, r2
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800985e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009860:	4293      	cmp	r3, r2
 8009862:	d111      	bne.n	8009888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986e:	085b      	lsrs	r3, r3, #1
 8009870:	3b01      	subs	r3, #1
 8009872:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009874:	429a      	cmp	r2, r3
 8009876:	d107      	bne.n	8009888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009884:	429a      	cmp	r2, r3
 8009886:	d001      	beq.n	800988c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e000      	b.n	800988e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	40023800 	.word	0x40023800

0800989c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e0d0      	b.n	8009a56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098b4:	4b6a      	ldr	r3, [pc, #424]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 030f 	and.w	r3, r3, #15
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d910      	bls.n	80098e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098c2:	4b67      	ldr	r3, [pc, #412]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f023 020f 	bic.w	r2, r3, #15
 80098ca:	4965      	ldr	r1, [pc, #404]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098d2:	4b63      	ldr	r3, [pc, #396]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 030f 	and.w	r3, r3, #15
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d001      	beq.n	80098e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e0b8      	b.n	8009a56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d020      	beq.n	8009932 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0304 	and.w	r3, r3, #4
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098fc:	4b59      	ldr	r3, [pc, #356]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	4a58      	ldr	r2, [pc, #352]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009906:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0308 	and.w	r3, r3, #8
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009914:	4b53      	ldr	r3, [pc, #332]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	4a52      	ldr	r2, [pc, #328]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 800991a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800991e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009920:	4b50      	ldr	r3, [pc, #320]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	494d      	ldr	r1, [pc, #308]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 800992e:	4313      	orrs	r3, r2
 8009930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d040      	beq.n	80099c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d107      	bne.n	8009956 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009946:	4b47      	ldr	r3, [pc, #284]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d115      	bne.n	800997e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e07f      	b.n	8009a56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d107      	bne.n	800996e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800995e:	4b41      	ldr	r3, [pc, #260]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d109      	bne.n	800997e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e073      	b.n	8009a56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800996e:	4b3d      	ldr	r3, [pc, #244]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 0302 	and.w	r3, r3, #2
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e06b      	b.n	8009a56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800997e:	4b39      	ldr	r3, [pc, #228]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f023 0203 	bic.w	r2, r3, #3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	4936      	ldr	r1, [pc, #216]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 800998c:	4313      	orrs	r3, r2
 800998e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009990:	f7fc fe84 	bl	800669c <HAL_GetTick>
 8009994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009996:	e00a      	b.n	80099ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009998:	f7fc fe80 	bl	800669c <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d901      	bls.n	80099ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e053      	b.n	8009a56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099ae:	4b2d      	ldr	r3, [pc, #180]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f003 020c 	and.w	r2, r3, #12
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	429a      	cmp	r2, r3
 80099be:	d1eb      	bne.n	8009998 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80099c0:	4b27      	ldr	r3, [pc, #156]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 030f 	and.w	r3, r3, #15
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d210      	bcs.n	80099f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ce:	4b24      	ldr	r3, [pc, #144]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f023 020f 	bic.w	r2, r3, #15
 80099d6:	4922      	ldr	r1, [pc, #136]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	4313      	orrs	r3, r2
 80099dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099de:	4b20      	ldr	r3, [pc, #128]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d001      	beq.n	80099f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e032      	b.n	8009a56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d008      	beq.n	8009a0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099fc:	4b19      	ldr	r3, [pc, #100]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	4916      	ldr	r1, [pc, #88]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0308 	and.w	r3, r3, #8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d009      	beq.n	8009a2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009a1a:	4b12      	ldr	r3, [pc, #72]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	490e      	ldr	r1, [pc, #56]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009a2e:	f000 f821 	bl	8009a74 <HAL_RCC_GetSysClockFreq>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	091b      	lsrs	r3, r3, #4
 8009a3a:	f003 030f 	and.w	r3, r3, #15
 8009a3e:	490a      	ldr	r1, [pc, #40]	; (8009a68 <HAL_RCC_ClockConfig+0x1cc>)
 8009a40:	5ccb      	ldrb	r3, [r1, r3]
 8009a42:	fa22 f303 	lsr.w	r3, r2, r3
 8009a46:	4a09      	ldr	r2, [pc, #36]	; (8009a6c <HAL_RCC_ClockConfig+0x1d0>)
 8009a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009a4a:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <HAL_RCC_ClockConfig+0x1d4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fc fde0 	bl	8006614 <HAL_InitTick>

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	40023c00 	.word	0x40023c00
 8009a64:	40023800 	.word	0x40023800
 8009a68:	08015c30 	.word	0x08015c30
 8009a6c:	20000004 	.word	0x20000004
 8009a70:	2000001c 	.word	0x2000001c

08009a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a78:	b090      	sub	sp, #64	; 0x40
 8009a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a84:	2300      	movs	r3, #0
 8009a86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a8c:	4b59      	ldr	r3, [pc, #356]	; (8009bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f003 030c 	and.w	r3, r3, #12
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d00d      	beq.n	8009ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	f200 80a1 	bhi.w	8009be0 <HAL_RCC_GetSysClockFreq+0x16c>
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	d003      	beq.n	8009aae <HAL_RCC_GetSysClockFreq+0x3a>
 8009aa6:	e09b      	b.n	8009be0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009aa8:	4b53      	ldr	r3, [pc, #332]	; (8009bf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009aaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009aac:	e09b      	b.n	8009be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009aae:	4b53      	ldr	r3, [pc, #332]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8009ab0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009ab2:	e098      	b.n	8009be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ab4:	4b4f      	ldr	r3, [pc, #316]	; (8009bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009abc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009abe:	4b4d      	ldr	r3, [pc, #308]	; (8009bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d028      	beq.n	8009b1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009aca:	4b4a      	ldr	r3, [pc, #296]	; (8009bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	099b      	lsrs	r3, r3, #6
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	623b      	str	r3, [r7, #32]
 8009ad4:	627a      	str	r2, [r7, #36]	; 0x24
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009adc:	2100      	movs	r1, #0
 8009ade:	4b47      	ldr	r3, [pc, #284]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8009ae0:	fb03 f201 	mul.w	r2, r3, r1
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	fb00 f303 	mul.w	r3, r0, r3
 8009aea:	4413      	add	r3, r2
 8009aec:	4a43      	ldr	r2, [pc, #268]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8009aee:	fba0 1202 	umull	r1, r2, r0, r2
 8009af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009af4:	460a      	mov	r2, r1
 8009af6:	62ba      	str	r2, [r7, #40]	; 0x28
 8009af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009afa:	4413      	add	r3, r2
 8009afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b00:	2200      	movs	r2, #0
 8009b02:	61bb      	str	r3, [r7, #24]
 8009b04:	61fa      	str	r2, [r7, #28]
 8009b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009b0e:	f7f7 f8eb 	bl	8000ce8 <__aeabi_uldivmod>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4613      	mov	r3, r2
 8009b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b1a:	e053      	b.n	8009bc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b1c:	4b35      	ldr	r3, [pc, #212]	; (8009bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	099b      	lsrs	r3, r3, #6
 8009b22:	2200      	movs	r2, #0
 8009b24:	613b      	str	r3, [r7, #16]
 8009b26:	617a      	str	r2, [r7, #20]
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009b2e:	f04f 0b00 	mov.w	fp, #0
 8009b32:	4652      	mov	r2, sl
 8009b34:	465b      	mov	r3, fp
 8009b36:	f04f 0000 	mov.w	r0, #0
 8009b3a:	f04f 0100 	mov.w	r1, #0
 8009b3e:	0159      	lsls	r1, r3, #5
 8009b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b44:	0150      	lsls	r0, r2, #5
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	ebb2 080a 	subs.w	r8, r2, sl
 8009b4e:	eb63 090b 	sbc.w	r9, r3, fp
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	f04f 0300 	mov.w	r3, #0
 8009b5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009b5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009b62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009b66:	ebb2 0408 	subs.w	r4, r2, r8
 8009b6a:	eb63 0509 	sbc.w	r5, r3, r9
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	f04f 0300 	mov.w	r3, #0
 8009b76:	00eb      	lsls	r3, r5, #3
 8009b78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b7c:	00e2      	lsls	r2, r4, #3
 8009b7e:	4614      	mov	r4, r2
 8009b80:	461d      	mov	r5, r3
 8009b82:	eb14 030a 	adds.w	r3, r4, sl
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	eb45 030b 	adc.w	r3, r5, fp
 8009b8c:	607b      	str	r3, [r7, #4]
 8009b8e:	f04f 0200 	mov.w	r2, #0
 8009b92:	f04f 0300 	mov.w	r3, #0
 8009b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	028b      	lsls	r3, r1, #10
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	028a      	lsls	r2, r1, #10
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4619      	mov	r1, r3
 8009bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bae:	2200      	movs	r2, #0
 8009bb0:	60bb      	str	r3, [r7, #8]
 8009bb2:	60fa      	str	r2, [r7, #12]
 8009bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009bb8:	f7f7 f896 	bl	8000ce8 <__aeabi_uldivmod>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	0c1b      	lsrs	r3, r3, #16
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	3301      	adds	r3, #1
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8009bd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009bde:	e002      	b.n	8009be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009be0:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009be2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3740      	adds	r7, #64	; 0x40
 8009bec:	46bd      	mov	sp, r7
 8009bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40023800 	.word	0x40023800
 8009bf8:	00f42400 	.word	0x00f42400
 8009bfc:	017d7840 	.word	0x017d7840

08009c00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c04:	4b03      	ldr	r3, [pc, #12]	; (8009c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c06:	681b      	ldr	r3, [r3, #0]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20000004 	.word	0x20000004

08009c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009c1c:	f7ff fff0 	bl	8009c00 <HAL_RCC_GetHCLKFreq>
 8009c20:	4602      	mov	r2, r0
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	0a9b      	lsrs	r3, r3, #10
 8009c28:	f003 0307 	and.w	r3, r3, #7
 8009c2c:	4903      	ldr	r1, [pc, #12]	; (8009c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c2e:	5ccb      	ldrb	r3, [r1, r3]
 8009c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	40023800 	.word	0x40023800
 8009c3c:	08015c40 	.word	0x08015c40

08009c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009c44:	f7ff ffdc 	bl	8009c00 <HAL_RCC_GetHCLKFreq>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	0b5b      	lsrs	r3, r3, #13
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	4903      	ldr	r1, [pc, #12]	; (8009c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c56:	5ccb      	ldrb	r3, [r1, r3]
 8009c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	40023800 	.word	0x40023800
 8009c64:	08015c40 	.word	0x08015c40

08009c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d012      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009c90:	4b69      	ldr	r3, [pc, #420]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	4a68      	ldr	r2, [pc, #416]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009c9a:	6093      	str	r3, [r2, #8]
 8009c9c:	4b66      	ldr	r3, [pc, #408]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca4:	4964      	ldr	r1, [pc, #400]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d017      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cc2:	4b5d      	ldr	r3, [pc, #372]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd0:	4959      	ldr	r1, [pc, #356]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce0:	d101      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d017      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009cfe:	4b4e      	ldr	r3, [pc, #312]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0c:	494a      	ldr	r1, [pc, #296]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d1c:	d101      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f000 808b 	beq.w	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d4c:	4b3a      	ldr	r3, [pc, #232]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d50:	4a39      	ldr	r2, [pc, #228]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d56:	6413      	str	r3, [r2, #64]	; 0x40
 8009d58:	4b37      	ldr	r3, [pc, #220]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d60:	60bb      	str	r3, [r7, #8]
 8009d62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d64:	4b35      	ldr	r3, [pc, #212]	; (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a34      	ldr	r2, [pc, #208]	; (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d70:	f7fc fc94 	bl	800669c <HAL_GetTick>
 8009d74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009d76:	e008      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d78:	f7fc fc90 	bl	800669c <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	2b64      	cmp	r3, #100	; 0x64
 8009d84:	d901      	bls.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e357      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009d8a:	4b2c      	ldr	r3, [pc, #176]	; (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0f0      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009d96:	4b28      	ldr	r3, [pc, #160]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d035      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d02e      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009db4:	4b20      	ldr	r3, [pc, #128]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009dbe:	4b1e      	ldr	r3, [pc, #120]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc2:	4a1d      	ldr	r2, [pc, #116]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009dca:	4b1b      	ldr	r3, [pc, #108]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dce:	4a1a      	ldr	r2, [pc, #104]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009dd6:	4a18      	ldr	r2, [pc, #96]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009ddc:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d114      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009de8:	f7fc fc58 	bl	800669c <HAL_GetTick>
 8009dec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dee:	e00a      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009df0:	f7fc fc54 	bl	800669c <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d901      	bls.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e319      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e06:	4b0c      	ldr	r3, [pc, #48]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0ee      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e1e:	d111      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009e2c:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009e2e:	400b      	ands	r3, r1
 8009e30:	4901      	ldr	r1, [pc, #4]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	608b      	str	r3, [r1, #8]
 8009e36:	e00b      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009e38:	40023800 	.word	0x40023800
 8009e3c:	40007000 	.word	0x40007000
 8009e40:	0ffffcff 	.word	0x0ffffcff
 8009e44:	4baa      	ldr	r3, [pc, #680]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	4aa9      	ldr	r2, [pc, #676]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009e4e:	6093      	str	r3, [r2, #8]
 8009e50:	4ba7      	ldr	r3, [pc, #668]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e5c:	49a4      	ldr	r1, [pc, #656]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d010      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e6e:	4ba0      	ldr	r3, [pc, #640]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e74:	4a9e      	ldr	r2, [pc, #632]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009e7e:	4b9c      	ldr	r3, [pc, #624]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	4999      	ldr	r1, [pc, #612]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00a      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009e9c:	4b94      	ldr	r3, [pc, #592]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ea2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eaa:	4991      	ldr	r1, [pc, #580]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009ebe:	4b8c      	ldr	r3, [pc, #560]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ecc:	4988      	ldr	r1, [pc, #544]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009ee0:	4b83      	ldr	r3, [pc, #524]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eee:	4980      	ldr	r1, [pc, #512]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f02:	4b7b      	ldr	r3, [pc, #492]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f10:	4977      	ldr	r1, [pc, #476]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009f24:	4b72      	ldr	r3, [pc, #456]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2a:	f023 0203 	bic.w	r2, r3, #3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f32:	496f      	ldr	r1, [pc, #444]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009f46:	4b6a      	ldr	r3, [pc, #424]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f4c:	f023 020c 	bic.w	r2, r3, #12
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f54:	4966      	ldr	r1, [pc, #408]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f68:	4b61      	ldr	r3, [pc, #388]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f76:	495e      	ldr	r1, [pc, #376]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009f8a:	4b59      	ldr	r3, [pc, #356]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	4955      	ldr	r1, [pc, #340]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009fac:	4b50      	ldr	r3, [pc, #320]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fba:	494d      	ldr	r1, [pc, #308]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009fce:	4b48      	ldr	r3, [pc, #288]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fdc:	4944      	ldr	r1, [pc, #272]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00a      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009ff0:	4b3f      	ldr	r3, [pc, #252]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffe:	493c      	ldr	r1, [pc, #240]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a000:	4313      	orrs	r3, r2
 800a002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a012:	4b37      	ldr	r3, [pc, #220]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a018:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a020:	4933      	ldr	r1, [pc, #204]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a022:	4313      	orrs	r3, r2
 800a024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a034:	4b2e      	ldr	r3, [pc, #184]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a03a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a042:	492b      	ldr	r1, [pc, #172]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a044:	4313      	orrs	r3, r2
 800a046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d011      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a056:	4b26      	ldr	r3, [pc, #152]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a05c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a064:	4922      	ldr	r1, [pc, #136]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a066:	4313      	orrs	r3, r2
 800a068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a074:	d101      	bne.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a076:	2301      	movs	r3, #1
 800a078:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0308 	and.w	r3, r3, #8
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a086:	2301      	movs	r3, #1
 800a088:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a096:	4b16      	ldr	r3, [pc, #88]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a09c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a4:	4912      	ldr	r1, [pc, #72]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a0b8:	4b0d      	ldr	r3, [pc, #52]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0c8:	4909      	ldr	r1, [pc, #36]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d006      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 80d9 	beq.w	800a296 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a01      	ldr	r2, [pc, #4]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0ee:	e001      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a0f0:	40023800 	.word	0x40023800
 800a0f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0f6:	f7fc fad1 	bl	800669c <HAL_GetTick>
 800a0fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a0fc:	e008      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a0fe:	f7fc facd 	bl	800669c <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	2b64      	cmp	r3, #100	; 0x64
 800a10a:	d901      	bls.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e194      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a110:	4b6c      	ldr	r3, [pc, #432]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1f0      	bne.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d021      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d11d      	bne.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a130:	4b64      	ldr	r3, [pc, #400]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a13e:	4b61      	ldr	r3, [pc, #388]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a144:	0e1b      	lsrs	r3, r3, #24
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	019a      	lsls	r2, r3, #6
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	041b      	lsls	r3, r3, #16
 800a156:	431a      	orrs	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	061b      	lsls	r3, r3, #24
 800a15c:	431a      	orrs	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	071b      	lsls	r3, r3, #28
 800a164:	4957      	ldr	r1, [pc, #348]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a166:	4313      	orrs	r3, r2
 800a168:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a180:	d00a      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d02e      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a196:	d129      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a198:	4b4a      	ldr	r3, [pc, #296]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	f003 0303 	and.w	r3, r3, #3
 800a1a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a1a6:	4b47      	ldr	r3, [pc, #284]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1ac:	0f1b      	lsrs	r3, r3, #28
 800a1ae:	f003 0307 	and.w	r3, r3, #7
 800a1b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	019a      	lsls	r2, r3, #6
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	041b      	lsls	r3, r3, #16
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	061b      	lsls	r3, r3, #24
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	071b      	lsls	r3, r3, #28
 800a1cc:	493d      	ldr	r1, [pc, #244]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a1d4:	4b3b      	ldr	r3, [pc, #236]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1da:	f023 021f 	bic.w	r2, r3, #31
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	4937      	ldr	r1, [pc, #220]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01d      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a1f8:	4b32      	ldr	r3, [pc, #200]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1fe:	0e1b      	lsrs	r3, r3, #24
 800a200:	f003 030f 	and.w	r3, r3, #15
 800a204:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a206:	4b2f      	ldr	r3, [pc, #188]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a20c:	0f1b      	lsrs	r3, r3, #28
 800a20e:	f003 0307 	and.w	r3, r3, #7
 800a212:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	019a      	lsls	r2, r3, #6
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	431a      	orrs	r2, r3
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	061b      	lsls	r3, r3, #24
 800a226:	431a      	orrs	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	071b      	lsls	r3, r3, #28
 800a22c:	4925      	ldr	r1, [pc, #148]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d011      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	019a      	lsls	r2, r3, #6
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	041b      	lsls	r3, r3, #16
 800a24c:	431a      	orrs	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	061b      	lsls	r3, r3, #24
 800a254:	431a      	orrs	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	071b      	lsls	r3, r3, #28
 800a25c:	4919      	ldr	r1, [pc, #100]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a264:	4b17      	ldr	r3, [pc, #92]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a26a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a26e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a270:	f7fc fa14 	bl	800669c <HAL_GetTick>
 800a274:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a276:	e008      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a278:	f7fc fa10 	bl	800669c <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b64      	cmp	r3, #100	; 0x64
 800a284:	d901      	bls.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e0d7      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a28a:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0f0      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	f040 80cd 	bne.w	800a438 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a29e:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a08      	ldr	r2, [pc, #32]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2aa:	f7fc f9f7 	bl	800669c <HAL_GetTick>
 800a2ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a2b0:	e00a      	b.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a2b2:	f7fc f9f3 	bl	800669c <HAL_GetTick>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	2b64      	cmp	r3, #100	; 0x64
 800a2be:	d903      	bls.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e0ba      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a2c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a2c8:	4b5e      	ldr	r3, [pc, #376]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2d4:	d0ed      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d009      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d02e      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d12a      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a2fe:	4b51      	ldr	r3, [pc, #324]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a304:	0c1b      	lsrs	r3, r3, #16
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a30c:	4b4d      	ldr	r3, [pc, #308]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a312:	0f1b      	lsrs	r3, r3, #28
 800a314:	f003 0307 	and.w	r3, r3, #7
 800a318:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	019a      	lsls	r2, r3, #6
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	041b      	lsls	r3, r3, #16
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	061b      	lsls	r3, r3, #24
 800a32c:	431a      	orrs	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	071b      	lsls	r3, r3, #28
 800a332:	4944      	ldr	r1, [pc, #272]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a334:	4313      	orrs	r3, r2
 800a336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a33a:	4b42      	ldr	r3, [pc, #264]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a33c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a340:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a348:	3b01      	subs	r3, #1
 800a34a:	021b      	lsls	r3, r3, #8
 800a34c:	493d      	ldr	r1, [pc, #244]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d022      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a368:	d11d      	bne.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a36a:	4b36      	ldr	r3, [pc, #216]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a370:	0e1b      	lsrs	r3, r3, #24
 800a372:	f003 030f 	and.w	r3, r3, #15
 800a376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a378:	4b32      	ldr	r3, [pc, #200]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a37e:	0f1b      	lsrs	r3, r3, #28
 800a380:	f003 0307 	and.w	r3, r3, #7
 800a384:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	019a      	lsls	r2, r3, #6
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	041b      	lsls	r3, r3, #16
 800a392:	431a      	orrs	r2, r3
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	061b      	lsls	r3, r3, #24
 800a398:	431a      	orrs	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	071b      	lsls	r3, r3, #28
 800a39e:	4929      	ldr	r1, [pc, #164]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 0308 	and.w	r3, r3, #8
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d028      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a3b2:	4b24      	ldr	r3, [pc, #144]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b8:	0e1b      	lsrs	r3, r3, #24
 800a3ba:	f003 030f 	and.w	r3, r3, #15
 800a3be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a3c0:	4b20      	ldr	r3, [pc, #128]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c6:	0c1b      	lsrs	r3, r3, #16
 800a3c8:	f003 0303 	and.w	r3, r3, #3
 800a3cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	019a      	lsls	r2, r3, #6
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	431a      	orrs	r2, r3
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	061b      	lsls	r3, r3, #24
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	071b      	lsls	r3, r3, #28
 800a3e6:	4917      	ldr	r1, [pc, #92]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a3ee:	4b15      	ldr	r3, [pc, #84]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	4911      	ldr	r1, [pc, #68]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a404:	4b0f      	ldr	r3, [pc, #60]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a0e      	ldr	r2, [pc, #56]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a40a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a40e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a410:	f7fc f944 	bl	800669c <HAL_GetTick>
 800a414:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a416:	e008      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a418:	f7fc f940 	bl	800669c <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	2b64      	cmp	r3, #100	; 0x64
 800a424:	d901      	bls.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e007      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a42a:	4b06      	ldr	r3, [pc, #24]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a436:	d1ef      	bne.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3720      	adds	r7, #32
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	40023800 	.word	0x40023800

0800a448 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e022      	b.n	800a4a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d105      	bne.n	800a472 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7f9 fd77 	bl	8003f60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2203      	movs	r2, #3
 800a476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f814 	bl	800a4a8 <HAL_SD_InitCard>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e00a      	b.n	800a4a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a4a8:	b5b0      	push	{r4, r5, r7, lr}
 800a4aa:	b08e      	sub	sp, #56	; 0x38
 800a4ac:	af04      	add	r7, sp, #16
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a4c4:	2376      	movs	r3, #118	; 0x76
 800a4c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681d      	ldr	r5, [r3, #0]
 800a4cc:	466c      	mov	r4, sp
 800a4ce:	f107 0314 	add.w	r3, r7, #20
 800a4d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a4da:	f107 0308 	add.w	r3, r7, #8
 800a4de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f002 fe7d 	bl	800d1e0 <SDMMC_Init>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e059      	b.n	800a5ac <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a506:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f002 feb1 	bl	800d274 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a520:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a522:	2002      	movs	r0, #2
 800a524:	f7fc f8c6 	bl	80066b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 ff59 	bl	800b3e0 <SD_PowerON>
 800a52e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00b      	beq.n	800a54e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	431a      	orrs	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e02e      	b.n	800a5ac <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fe78 	bl	800b244 <SD_InitCard>
 800a554:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00b      	beq.n	800a574 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e01b      	b.n	800a5ac <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a57c:	4618      	mov	r0, r3
 800a57e:	f002 ff0b 	bl	800d398 <SDMMC_CmdBlockLength>
 800a582:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00f      	beq.n	800a5aa <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a09      	ldr	r2, [pc, #36]	; (800a5b4 <HAL_SD_InitCard+0x10c>)
 800a590:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e000      	b.n	800a5ac <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3728      	adds	r7, #40	; 0x28
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5b4:	004005ff 	.word	0x004005ff

0800a5b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08c      	sub	sp, #48	; 0x30
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d107      	bne.n	800a5e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e0c3      	b.n	800a768 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	f040 80bc 	bne.w	800a766 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	441a      	add	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d907      	bls.n	800a612 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a606:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e0aa      	b.n	800a768 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2203      	movs	r2, #3
 800a616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2200      	movs	r2, #0
 800a620:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a636:	4a4e      	ldr	r2, [pc, #312]	; (800a770 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	4a4d      	ldr	r2, [pc, #308]	; (800a774 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a640:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	2200      	movs	r2, #0
 800a648:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	2200      	movs	r2, #0
 800a650:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a662:	689a      	ldr	r2, [r3, #8]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3380      	adds	r3, #128	; 0x80
 800a678:	4619      	mov	r1, r3
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	025b      	lsls	r3, r3, #9
 800a680:	089b      	lsrs	r3, r3, #2
 800a682:	f7fc fdc9 	bl	8007218 <HAL_DMA_Start_IT>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d017      	beq.n	800a6bc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a69a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a35      	ldr	r2, [pc, #212]	; (800a778 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a6a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e055      	b.n	800a768 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f042 0208 	orr.w	r2, r2, #8
 800a6ca:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d002      	beq.n	800a6da <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	025b      	lsls	r3, r3, #9
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6da:	f04f 33ff 	mov.w	r3, #4294967295
 800a6de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	025b      	lsls	r3, r3, #9
 800a6e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a6e6:	2390      	movs	r3, #144	; 0x90
 800a6e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f107 0210 	add.w	r2, r7, #16
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f002 fe1d 	bl	800d340 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d90a      	bls.n	800a722 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2282      	movs	r2, #130	; 0x82
 800a710:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a718:	4618      	mov	r0, r3
 800a71a:	f002 fe81 	bl	800d420 <SDMMC_CmdReadMultiBlock>
 800a71e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a720:	e009      	b.n	800a736 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2281      	movs	r2, #129	; 0x81
 800a726:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a72e:	4618      	mov	r0, r3
 800a730:	f002 fe54 	bl	800d3dc <SDMMC_CmdReadSingleBlock>
 800a734:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d012      	beq.n	800a762 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a0d      	ldr	r2, [pc, #52]	; (800a778 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a742:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74a:	431a      	orrs	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e002      	b.n	800a768 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	e000      	b.n	800a768 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a766:	2302      	movs	r3, #2
  }
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3730      	adds	r7, #48	; 0x30
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	0800b053 	.word	0x0800b053
 800a774:	0800b0c5 	.word	0x0800b0c5
 800a778:	004005ff 	.word	0x004005ff

0800a77c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08c      	sub	sp, #48	; 0x30
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d107      	bne.n	800a7a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a798:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e0c6      	b.n	800a932 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	f040 80bf 	bne.w	800a930 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	441a      	add	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d907      	bls.n	800a7d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e0ad      	b.n	800a932 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2203      	movs	r2, #3
 800a7da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 021a 	orr.w	r2, r2, #26
 800a7f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fa:	4a50      	ldr	r2, [pc, #320]	; (800a93c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a7fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	4a4f      	ldr	r2, [pc, #316]	; (800a940 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a804:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80a:	2200      	movs	r2, #0
 800a80c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a812:	2b01      	cmp	r3, #1
 800a814:	d002      	beq.n	800a81c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	025b      	lsls	r3, r3, #9
 800a81a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d90a      	bls.n	800a838 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	22a0      	movs	r2, #160	; 0xa0
 800a826:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a82e:	4618      	mov	r0, r3
 800a830:	f002 fe3a 	bl	800d4a8 <SDMMC_CmdWriteMultiBlock>
 800a834:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a836:	e009      	b.n	800a84c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2290      	movs	r2, #144	; 0x90
 800a83c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a844:	4618      	mov	r0, r3
 800a846:	f002 fe0d 	bl	800d464 <SDMMC_CmdWriteSingleBlock>
 800a84a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d012      	beq.n	800a878 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a3b      	ldr	r2, [pc, #236]	; (800a944 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a858:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a860:	431a      	orrs	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e05c      	b.n	800a932 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0208 	orr.w	r2, r2, #8
 800a886:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88c:	2240      	movs	r2, #64	; 0x40
 800a88e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8a0:	689a      	ldr	r2, [r3, #8]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3380      	adds	r3, #128	; 0x80
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	025b      	lsls	r3, r3, #9
 800a8be:	089b      	lsrs	r3, r3, #2
 800a8c0:	f7fc fcaa 	bl	8007218 <HAL_DMA_Start_IT>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d01a      	beq.n	800a900 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f022 021a 	bic.w	r2, r2, #26
 800a8d8:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a19      	ldr	r2, [pc, #100]	; (800a944 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a8e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e018      	b.n	800a932 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a900:	f04f 33ff 	mov.w	r3, #4294967295
 800a904:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	025b      	lsls	r3, r3, #9
 800a90a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a90c:	2390      	movs	r3, #144	; 0x90
 800a90e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a910:	2300      	movs	r3, #0
 800a912:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a914:	2300      	movs	r3, #0
 800a916:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a918:	2301      	movs	r3, #1
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f107 0210 	add.w	r2, r7, #16
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f002 fd0a 	bl	800d340 <SDMMC_ConfigData>

      return HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	e000      	b.n	800a932 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a930:	2302      	movs	r3, #2
  }
}
 800a932:	4618      	mov	r0, r3
 800a934:	3730      	adds	r7, #48	; 0x30
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	0800b029 	.word	0x0800b029
 800a940:	0800b0c5 	.word	0x0800b0c5
 800a944:	004005ff 	.word	0x004005ff

0800a948 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a954:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d008      	beq.n	800a976 <HAL_SD_IRQHandler+0x2e>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f003 0308 	and.w	r3, r3, #8
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fdec 	bl	800b54c <SD_Read_IT>
 800a974:	e15a      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 808d 	beq.w	800aaa0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a98e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	4b9a      	ldr	r3, [pc, #616]	; (800ac04 <HAL_SD_IRQHandler+0x2bc>)
 800a99c:	400b      	ands	r3, r1
 800a99e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f022 0201 	bic.w	r2, r2, #1
 800a9ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f003 0308 	and.w	r3, r3, #8
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d039      	beq.n	800aa2e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f003 0302 	and.w	r3, r3, #2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d104      	bne.n	800a9ce <HAL_SD_IRQHandler+0x86>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f003 0320 	and.w	r3, r3, #32
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d011      	beq.n	800a9f2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f002 fd8a 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800a9d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d008      	beq.n	800a9f2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f921 	bl	800ac34 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f240 523a 	movw	r2, #1338	; 0x53a
 800a9fa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d104      	bne.n	800aa1e <HAL_SD_IRQHandler+0xd6>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f003 0302 	and.w	r3, r3, #2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f003 f9a8 	bl	800dd74 <HAL_SD_RxCpltCallback>
 800aa24:	e102      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f003 f99a 	bl	800dd60 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa2c:	e0fe      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 80f9 	beq.w	800ac2c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f003 0320 	and.w	r3, r3, #32
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d011      	beq.n	800aa68 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f002 fd4f 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800aa4e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d008      	beq.n	800aa68 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f8e6 	bl	800ac34 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f003 0301 	and.w	r3, r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f040 80dc 	bne.w	800ac2c <HAL_SD_IRQHandler+0x2e4>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f040 80d6 	bne.w	800ac2c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f022 0208 	bic.w	r2, r2, #8
 800aa8e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f003 f961 	bl	800dd60 <HAL_SD_TxCpltCallback>
}
 800aa9e:	e0c5      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d008      	beq.n	800aac0 <HAL_SD_IRQHandler+0x178>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f003 0308 	and.w	r3, r3, #8
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fd98 	bl	800b5ee <SD_Write_IT>
 800aabe:	e0b5      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 80ae 	beq.w	800ac2c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad6:	f003 0302 	and.w	r3, r3, #2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d005      	beq.n	800aaea <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	f043 0202 	orr.w	r2, r3, #2
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf0:	f003 0308 	and.w	r3, r3, #8
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d005      	beq.n	800ab04 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafc:	f043 0208 	orr.w	r2, r3, #8
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0a:	f003 0320 	and.w	r3, r3, #32
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d005      	beq.n	800ab1e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	f043 0220 	orr.w	r2, r3, #32
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab24:	f003 0310 	and.w	r3, r3, #16
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab30:	f043 0210 	orr.w	r2, r3, #16
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab40:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ab50:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f002 fcc8 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab62:	431a      	orrs	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f003 0308 	and.w	r3, r3, #8
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f857 	bl	800ac34 <HAL_SD_ErrorCallback>
}
 800ab86:	e051      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d04c      	beq.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f003 0310 	and.w	r3, r3, #16
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d104      	bne.n	800aba6 <HAL_SD_IRQHandler+0x25e>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d011      	beq.n	800abca <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abaa:	4a17      	ldr	r2, [pc, #92]	; (800ac08 <HAL_SD_IRQHandler+0x2c0>)
 800abac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fc fb90 	bl	80072d8 <HAL_DMA_Abort_IT>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d036      	beq.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 fad0 	bl	800b168 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800abc8:	e030      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d104      	bne.n	800abde <HAL_SD_IRQHandler+0x296>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f003 0302 	and.w	r3, r3, #2
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d018      	beq.n	800ac10 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	4a0a      	ldr	r2, [pc, #40]	; (800ac0c <HAL_SD_IRQHandler+0x2c4>)
 800abe4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abea:	4618      	mov	r0, r3
 800abec:	f7fc fb74 	bl	80072d8 <HAL_DMA_Abort_IT>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01a      	beq.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 faeb 	bl	800b1d6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ac00:	e014      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
 800ac02:	bf00      	nop
 800ac04:	ffff3ec5 	.word	0xffff3ec5
 800ac08:	0800b169 	.word	0x0800b169
 800ac0c:	0800b1d7 	.word	0x0800b1d7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f003 f891 	bl	800dd4c <HAL_SD_AbortCallback>
}
 800ac2a:	e7ff      	b.n	800ac2c <HAL_SD_IRQHandler+0x2e4>
 800ac2c:	bf00      	nop
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac56:	0f9b      	lsrs	r3, r3, #30
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac62:	0e9b      	lsrs	r3, r3, #26
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	f003 030f 	and.w	r3, r3, #15
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac74:	0e1b      	lsrs	r3, r3, #24
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac86:	0c1b      	lsrs	r3, r3, #16
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac92:	0a1b      	lsrs	r3, r3, #8
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aca8:	0d1b      	lsrs	r3, r3, #20
 800acaa:	b29a      	uxth	r2, r3
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acb4:	0c1b      	lsrs	r3, r3, #16
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f003 030f 	and.w	r3, r3, #15
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acc6:	0bdb      	lsrs	r3, r3, #15
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acd8:	0b9b      	lsrs	r3, r3, #14
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	f003 0301 	and.w	r3, r3, #1
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acea:	0b5b      	lsrs	r3, r3, #13
 800acec:	b2db      	uxtb	r3, r3
 800acee:	f003 0301 	and.w	r3, r3, #1
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acfc:	0b1b      	lsrs	r3, r3, #12
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d163      	bne.n	800ade0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad1c:	009a      	lsls	r2, r3, #2
 800ad1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ad22:	4013      	ands	r3, r2
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ad28:	0f92      	lsrs	r2, r2, #30
 800ad2a:	431a      	orrs	r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad34:	0edb      	lsrs	r3, r3, #27
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 0307 	and.w	r3, r3, #7
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad46:	0e1b      	lsrs	r3, r3, #24
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad58:	0d5b      	lsrs	r3, r3, #21
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f003 0307 	and.w	r3, r3, #7
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad6a:	0c9b      	lsrs	r3, r3, #18
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f003 0307 	and.w	r3, r3, #7
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad7c:	0bdb      	lsrs	r3, r3, #15
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	f003 0307 	and.w	r3, r3, #7
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	7e1b      	ldrb	r3, [r3, #24]
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	f003 0307 	and.w	r3, r3, #7
 800ad9e:	3302      	adds	r3, #2
 800ada0:	2201      	movs	r2, #1
 800ada2:	fa02 f303 	lsl.w	r3, r2, r3
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800adaa:	fb03 f202 	mul.w	r2, r3, r2
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	7a1b      	ldrb	r3, [r3, #8]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 030f 	and.w	r3, r3, #15
 800adbc:	2201      	movs	r2, #1
 800adbe:	409a      	lsls	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800adcc:	0a52      	lsrs	r2, r2, #9
 800adce:	fb03 f202 	mul.w	r2, r3, r2
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800addc:	661a      	str	r2, [r3, #96]	; 0x60
 800adde:	e031      	b.n	800ae44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d11d      	bne.n	800ae24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adec:	041b      	lsls	r3, r3, #16
 800adee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf6:	0c1b      	lsrs	r3, r3, #16
 800adf8:	431a      	orrs	r2, r3
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	3301      	adds	r3, #1
 800ae04:	029a      	lsls	r2, r3, #10
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae18:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	661a      	str	r2, [r3, #96]	; 0x60
 800ae22:	e00f      	b.n	800ae44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a58      	ldr	r2, [pc, #352]	; (800af8c <HAL_SD_GetCardCSD+0x344>)
 800ae2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e09d      	b.n	800af80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae48:	0b9b      	lsrs	r3, r3, #14
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5a:	09db      	lsrs	r3, r3, #7
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7c:	0fdb      	lsrs	r3, r3, #31
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae88:	0f5b      	lsrs	r3, r3, #29
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	f003 0303 	and.w	r3, r3, #3
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9a:	0e9b      	lsrs	r3, r3, #26
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	f003 0307 	and.w	r3, r3, #7
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeac:	0d9b      	lsrs	r3, r3, #22
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	f003 030f 	and.w	r3, r3, #15
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aebe:	0d5b      	lsrs	r3, r3, #21
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeda:	0c1b      	lsrs	r3, r3, #16
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeee:	0bdb      	lsrs	r3, r3, #15
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af02:	0b9b      	lsrs	r3, r3, #14
 800af04:	b2db      	uxtb	r3, r3
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af16:	0b5b      	lsrs	r3, r3, #13
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	b2da      	uxtb	r2, r3
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2a:	0b1b      	lsrs	r3, r3, #12
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	b2da      	uxtb	r2, r3
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af3e:	0a9b      	lsrs	r3, r3, #10
 800af40:	b2db      	uxtb	r3, r3
 800af42:	f003 0303 	and.w	r3, r3, #3
 800af46:	b2da      	uxtb	r2, r3
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af52:	0a1b      	lsrs	r3, r3, #8
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af66:	085b      	lsrs	r3, r3, #1
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2201      	movs	r2, #1
 800af7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	004005ff 	.word	0x004005ff

0800af90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aff4:	f107 030c 	add.w	r3, r7, #12
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fa7e 	bl	800b4fc <SD_SendStatus>
 800b000:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	431a      	orrs	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	0a5b      	lsrs	r3, r3, #9
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b01e:	693b      	ldr	r3, [r7, #16]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b034:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b044:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b046:	bf00      	nop
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b064:	2b82      	cmp	r3, #130	; 0x82
 800b066:	d111      	bne.n	800b08c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f002 fa3d 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800b072:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	431a      	orrs	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7ff fdd4 	bl	800ac34 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f022 0208 	bic.w	r2, r2, #8
 800b09a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b0a4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f002 fe5d 	bl	800dd74 <HAL_SD_RxCpltCallback>
#endif
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7fc faac 	bl	8007630 <HAL_DMA_GetError>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d03e      	beq.n	800b15c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d002      	beq.n	800b0fa <SD_DMAError+0x36>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d12d      	bne.n	800b156 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a19      	ldr	r2, [pc, #100]	; (800b164 <SD_DMAError+0xa0>)
 800b100:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b110:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b116:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b11e:	6978      	ldr	r0, [r7, #20]
 800b120:	f7ff ff62 	bl	800afe8 <HAL_SD_GetCardState>
 800b124:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b06      	cmp	r3, #6
 800b12a:	d002      	beq.n	800b132 <SD_DMAError+0x6e>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b05      	cmp	r3, #5
 800b130:	d10a      	bne.n	800b148 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	f002 f9d8 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800b13c:	4602      	mov	r2, r0
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b142:	431a      	orrs	r2, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2200      	movs	r2, #0
 800b154:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b156:	6978      	ldr	r0, [r7, #20]
 800b158:	f7ff fd6c 	bl	800ac34 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b15c:	bf00      	nop
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	004005ff 	.word	0x004005ff

0800b168 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b174:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f7ff ff31 	bl	800afe8 <HAL_SD_GetCardState>
 800b186:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2b06      	cmp	r3, #6
 800b19a:	d002      	beq.n	800b1a2 <SD_DMATxAbort+0x3a>
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b05      	cmp	r3, #5
 800b1a0:	d10a      	bne.n	800b1b8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f002 f9a0 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d103      	bne.n	800b1c8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f002 fdc3 	bl	800dd4c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b1c6:	e002      	b.n	800b1ce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f7ff fd33 	bl	800ac34 <HAL_SD_ErrorCallback>
}
 800b1ce:	bf00      	nop
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b1ec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff fefa 	bl	800afe8 <HAL_SD_GetCardState>
 800b1f4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2b06      	cmp	r3, #6
 800b208:	d002      	beq.n	800b210 <SD_DMARxAbort+0x3a>
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2b05      	cmp	r3, #5
 800b20e:	d10a      	bne.n	800b226 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4618      	mov	r0, r3
 800b216:	f002 f969 	bl	800d4ec <SDMMC_CmdStopTransfer>
 800b21a:	4602      	mov	r2, r0
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b220:	431a      	orrs	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d103      	bne.n	800b236 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f002 fd8c 	bl	800dd4c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b234:	e002      	b.n	800b23c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f7ff fcfc 	bl	800ac34 <HAL_SD_ErrorCallback>
}
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b244:	b5b0      	push	{r4, r5, r7, lr}
 800b246:	b094      	sub	sp, #80	; 0x50
 800b248:	af04      	add	r7, sp, #16
 800b24a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b24c:	2301      	movs	r3, #1
 800b24e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4618      	mov	r0, r3
 800b256:	f002 f81b 	bl	800d290 <SDMMC_GetPowerState>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b260:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b264:	e0b8      	b.n	800b3d8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	d02f      	beq.n	800b2ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	f002 fa02 	bl	800d67c <SDMMC_CmdSendCID>
 800b278:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <SD_InitCard+0x40>
    {
      return errorstate;
 800b280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b282:	e0a9      	b.n	800b3d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2100      	movs	r1, #0
 800b28a:	4618      	mov	r0, r3
 800b28c:	f002 f845 	bl	800d31a <SDMMC_GetResponse>
 800b290:	4602      	mov	r2, r0
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2104      	movs	r1, #4
 800b29c:	4618      	mov	r0, r3
 800b29e:	f002 f83c 	bl	800d31a <SDMMC_GetResponse>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2108      	movs	r1, #8
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f002 f833 	bl	800d31a <SDMMC_GetResponse>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	210c      	movs	r1, #12
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f002 f82a 	bl	800d31a <SDMMC_GetResponse>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d00d      	beq.n	800b2f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f107 020e 	add.w	r2, r7, #14
 800b2de:	4611      	mov	r1, r2
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f002 fa08 	bl	800d6f6 <SDMMC_CmdSetRelAdd>
 800b2e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f0:	e072      	b.n	800b3d8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d036      	beq.n	800b368 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b2fa:	89fb      	ldrh	r3, [r7, #14]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b30a:	041b      	lsls	r3, r3, #16
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f002 f9d2 	bl	800d6b8 <SDMMC_CmdSendCSD>
 800b314:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b31e:	e05b      	b.n	800b3d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2100      	movs	r1, #0
 800b326:	4618      	mov	r0, r3
 800b328:	f001 fff7 	bl	800d31a <SDMMC_GetResponse>
 800b32c:	4602      	mov	r2, r0
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2104      	movs	r1, #4
 800b338:	4618      	mov	r0, r3
 800b33a:	f001 ffee 	bl	800d31a <SDMMC_GetResponse>
 800b33e:	4602      	mov	r2, r0
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2108      	movs	r1, #8
 800b34a:	4618      	mov	r0, r3
 800b34c:	f001 ffe5 	bl	800d31a <SDMMC_GetResponse>
 800b350:	4602      	mov	r2, r0
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	210c      	movs	r1, #12
 800b35c:	4618      	mov	r0, r3
 800b35e:	f001 ffdc 	bl	800d31a <SDMMC_GetResponse>
 800b362:	4602      	mov	r2, r0
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2104      	movs	r1, #4
 800b36e:	4618      	mov	r0, r3
 800b370:	f001 ffd3 	bl	800d31a <SDMMC_GetResponse>
 800b374:	4603      	mov	r3, r0
 800b376:	0d1a      	lsrs	r2, r3, #20
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff fc60 	bl	800ac48 <HAL_SD_GetCardCSD>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d002      	beq.n	800b394 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b38e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b392:	e021      	b.n	800b3d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6819      	ldr	r1, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b39c:	041b      	lsls	r3, r3, #16
 800b39e:	2200      	movs	r2, #0
 800b3a0:	461c      	mov	r4, r3
 800b3a2:	4615      	mov	r5, r2
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	f002 f8c1 	bl	800d530 <SDMMC_CmdSelDesel>
 800b3ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <SD_InitCard+0x176>
  {
    return errorstate;
 800b3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b8:	e00e      	b.n	800b3d8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681d      	ldr	r5, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	466c      	mov	r4, sp
 800b3c2:	f103 0210 	add.w	r2, r3, #16
 800b3c6:	ca07      	ldmia	r2, {r0, r1, r2}
 800b3c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	f001 ff05 	bl	800d1e0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3740      	adds	r7, #64	; 0x40
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bdb0      	pop	{r4, r5, r7, pc}

0800b3e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	617b      	str	r3, [r7, #20]
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f002 f8bc 	bl	800d576 <SDMMC_CmdGoIdleState>
 800b3fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	e072      	b.n	800b4f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4618      	mov	r0, r3
 800b410:	f002 f8cf 	bl	800d5b2 <SDMMC_CmdOperCond>
 800b414:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00d      	beq.n	800b438 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4618      	mov	r0, r3
 800b428:	f002 f8a5 	bl	800d576 <SDMMC_CmdGoIdleState>
 800b42c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d004      	beq.n	800b43e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	e05b      	b.n	800b4f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b442:	2b01      	cmp	r3, #1
 800b444:	d137      	bne.n	800b4b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2100      	movs	r1, #0
 800b44c:	4618      	mov	r0, r3
 800b44e:	f002 f8cf 	bl	800d5f0 <SDMMC_CmdAppCommand>
 800b452:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d02d      	beq.n	800b4b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b45a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b45e:	e047      	b.n	800b4f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2100      	movs	r1, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f002 f8c2 	bl	800d5f0 <SDMMC_CmdAppCommand>
 800b46c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d001      	beq.n	800b478 <SD_PowerON+0x98>
    {
      return errorstate;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	e03b      	b.n	800b4f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	491e      	ldr	r1, [pc, #120]	; (800b4f8 <SD_PowerON+0x118>)
 800b47e:	4618      	mov	r0, r3
 800b480:	f002 f8d8 	bl	800d634 <SDMMC_CmdAppOperCommand>
 800b484:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b48c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b490:	e02e      	b.n	800b4f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2100      	movs	r1, #0
 800b498:	4618      	mov	r0, r3
 800b49a:	f001 ff3e 	bl	800d31a <SDMMC_GetResponse>
 800b49e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	0fdb      	lsrs	r3, r3, #31
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d101      	bne.n	800b4ac <SD_PowerON+0xcc>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e000      	b.n	800b4ae <SD_PowerON+0xce>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	613b      	str	r3, [r7, #16]

    count++;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d802      	bhi.n	800b4c6 <SD_PowerON+0xe6>
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d0cc      	beq.n	800b460 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d902      	bls.n	800b4d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b4d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4d4:	e00c      	b.n	800b4f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	645a      	str	r2, [r3, #68]	; 0x44
 800b4e6:	e002      	b.n	800b4ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	c1100000 	.word	0xc1100000

0800b4fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d102      	bne.n	800b512 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b50c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b510:	e018      	b.n	800b544 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b51a:	041b      	lsls	r3, r3, #16
 800b51c:	4619      	mov	r1, r3
 800b51e:	4610      	mov	r0, r2
 800b520:	f002 f90a 	bl	800d738 <SDMMC_CmdSendStatus>
 800b524:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	e009      	b.n	800b544 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2100      	movs	r1, #0
 800b536:	4618      	mov	r0, r3
 800b538:	f001 feef 	bl	800d31a <SDMMC_GetResponse>
 800b53c:	4602      	mov	r2, r0
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b558:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d03f      	beq.n	800b5e6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b566:	2300      	movs	r3, #0
 800b568:	617b      	str	r3, [r7, #20]
 800b56a:	e033      	b.n	800b5d4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f001 fe61 	bl	800d238 <SDMMC_ReadFIFO>
 800b576:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3301      	adds	r3, #1
 800b584:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	3b01      	subs	r3, #1
 800b58a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	0a1b      	lsrs	r3, r3, #8
 800b590:	b2da      	uxtb	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3301      	adds	r3, #1
 800b59a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	0c1b      	lsrs	r3, r3, #16
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	0e1b      	lsrs	r3, r3, #24
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	617b      	str	r3, [r7, #20]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	2b07      	cmp	r3, #7
 800b5d8:	d9c8      	bls.n	800b56c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	693a      	ldr	r2, [r7, #16]
 800b5e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b5e6:	bf00      	nop
 800b5e8:	3718      	adds	r7, #24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b086      	sub	sp, #24
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d043      	beq.n	800b690 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
 800b60c:	e037      	b.n	800b67e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3301      	adds	r3, #1
 800b618:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	021a      	lsls	r2, r3, #8
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	4313      	orrs	r3, r2
 800b62a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	3301      	adds	r3, #1
 800b630:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	3b01      	subs	r3, #1
 800b636:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	041a      	lsls	r2, r3, #16
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	4313      	orrs	r3, r2
 800b642:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3301      	adds	r3, #1
 800b648:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	3b01      	subs	r3, #1
 800b64e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	061a      	lsls	r2, r3, #24
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3301      	adds	r3, #1
 800b660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	3b01      	subs	r3, #1
 800b666:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f107 0208 	add.w	r2, r7, #8
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f001 fded 	bl	800d252 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	3301      	adds	r3, #1
 800b67c:	617b      	str	r3, [r7, #20]
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b07      	cmp	r3, #7
 800b682:	d9c4      	bls.n	800b60e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b690:	bf00      	nop
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e025      	b.n	800b6f8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7f7 fb39 	bl	8002d38 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f001 fc7f 	bl	800cfdc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6818      	ldr	r0, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	f001 fcd3 	bl	800d094 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b712:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b714:	7dfb      	ldrb	r3, [r7, #23]
 800b716:	2b02      	cmp	r3, #2
 800b718:	d101      	bne.n	800b71e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b71a:	2302      	movs	r3, #2
 800b71c:	e021      	b.n	800b762 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d002      	beq.n	800b72a <HAL_SDRAM_SendCommand+0x2a>
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	2b05      	cmp	r3, #5
 800b728:	d118      	bne.n	800b75c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2202      	movs	r2, #2
 800b72e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	68b9      	ldr	r1, [r7, #8]
 800b73a:	4618      	mov	r0, r3
 800b73c:	f001 fd14 	bl	800d168 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b02      	cmp	r3, #2
 800b746:	d104      	bne.n	800b752 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2205      	movs	r2, #5
 800b74c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b750:	e006      	b.n	800b760 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b75a:	e001      	b.n	800b760 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b082      	sub	sp, #8
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d101      	bne.n	800b784 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b780:	2302      	movs	r3, #2
 800b782:	e016      	b.n	800b7b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d10f      	bne.n	800b7b0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2202      	movs	r2, #2
 800b794:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 fd06 	bl	800d1b0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e000      	b.n	800b7b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b082      	sub	sp, #8
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e049      	b.n	800b860 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7f8 ffed 	bl	80047c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	f000 fc7d 	bl	800c0f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d001      	beq.n	800b880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e054      	b.n	800b92a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2202      	movs	r2, #2
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68da      	ldr	r2, [r3, #12]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f042 0201 	orr.w	r2, r2, #1
 800b896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a26      	ldr	r2, [pc, #152]	; (800b938 <HAL_TIM_Base_Start_IT+0xd0>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d022      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8aa:	d01d      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a22      	ldr	r2, [pc, #136]	; (800b93c <HAL_TIM_Base_Start_IT+0xd4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d018      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a21      	ldr	r2, [pc, #132]	; (800b940 <HAL_TIM_Base_Start_IT+0xd8>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d013      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a1f      	ldr	r2, [pc, #124]	; (800b944 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d00e      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a1e      	ldr	r2, [pc, #120]	; (800b948 <HAL_TIM_Base_Start_IT+0xe0>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d009      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a1c      	ldr	r2, [pc, #112]	; (800b94c <HAL_TIM_Base_Start_IT+0xe4>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d004      	beq.n	800b8e8 <HAL_TIM_Base_Start_IT+0x80>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a1b      	ldr	r2, [pc, #108]	; (800b950 <HAL_TIM_Base_Start_IT+0xe8>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d115      	bne.n	800b914 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689a      	ldr	r2, [r3, #8]
 800b8ee:	4b19      	ldr	r3, [pc, #100]	; (800b954 <HAL_TIM_Base_Start_IT+0xec>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b06      	cmp	r3, #6
 800b8f8:	d015      	beq.n	800b926 <HAL_TIM_Base_Start_IT+0xbe>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b900:	d011      	beq.n	800b926 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f042 0201 	orr.w	r2, r2, #1
 800b910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b912:	e008      	b.n	800b926 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f042 0201 	orr.w	r2, r2, #1
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	e000      	b.n	800b928 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	40010000 	.word	0x40010000
 800b93c:	40000400 	.word	0x40000400
 800b940:	40000800 	.word	0x40000800
 800b944:	40000c00 	.word	0x40000c00
 800b948:	40010400 	.word	0x40010400
 800b94c:	40014000 	.word	0x40014000
 800b950:	40001800 	.word	0x40001800
 800b954:	00010007 	.word	0x00010007

0800b958 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e049      	b.n	800b9fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b00      	cmp	r3, #0
 800b974:	d106      	bne.n	800b984 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7f8 fe9a 	bl	80046b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2202      	movs	r2, #2
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	3304      	adds	r3, #4
 800b994:	4619      	mov	r1, r3
 800b996:	4610      	mov	r0, r2
 800b998:	f000 fbae 	bl	800c0f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
	...

0800ba08 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <HAL_TIM_IC_Start_IT+0x1e>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	e023      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d104      	bne.n	800ba36 <HAL_TIM_IC_Start_IT+0x2e>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	e01b      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	d104      	bne.n	800ba46 <HAL_TIM_IC_Start_IT+0x3e>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	e013      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b0c      	cmp	r3, #12
 800ba4a:	d104      	bne.n	800ba56 <HAL_TIM_IC_Start_IT+0x4e>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	e00b      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b10      	cmp	r3, #16
 800ba5a:	d104      	bne.n	800ba66 <HAL_TIM_IC_Start_IT+0x5e>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	e003      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d104      	bne.n	800ba80 <HAL_TIM_IC_Start_IT+0x78>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	e013      	b.n	800baa8 <HAL_TIM_IC_Start_IT+0xa0>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d104      	bne.n	800ba90 <HAL_TIM_IC_Start_IT+0x88>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	e00b      	b.n	800baa8 <HAL_TIM_IC_Start_IT+0xa0>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b08      	cmp	r3, #8
 800ba94:	d104      	bne.n	800baa0 <HAL_TIM_IC_Start_IT+0x98>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	e003      	b.n	800baa8 <HAL_TIM_IC_Start_IT+0xa0>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d102      	bne.n	800bab6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800bab0:	7b7b      	ldrb	r3, [r7, #13]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d001      	beq.n	800baba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e0e2      	b.n	800bc80 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <HAL_TIM_IC_Start_IT+0xc2>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bac8:	e023      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b04      	cmp	r3, #4
 800bace:	d104      	bne.n	800bada <HAL_TIM_IC_Start_IT+0xd2>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2202      	movs	r2, #2
 800bad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bad8:	e01b      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b08      	cmp	r3, #8
 800bade:	d104      	bne.n	800baea <HAL_TIM_IC_Start_IT+0xe2>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2202      	movs	r2, #2
 800bae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bae8:	e013      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b0c      	cmp	r3, #12
 800baee:	d104      	bne.n	800bafa <HAL_TIM_IC_Start_IT+0xf2>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800baf8:	e00b      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	2b10      	cmp	r3, #16
 800bafe:	d104      	bne.n	800bb0a <HAL_TIM_IC_Start_IT+0x102>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2202      	movs	r2, #2
 800bb04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb08:	e003      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2202      	movs	r2, #2
 800bb0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d104      	bne.n	800bb22 <HAL_TIM_IC_Start_IT+0x11a>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb20:	e013      	b.n	800bb4a <HAL_TIM_IC_Start_IT+0x142>
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	d104      	bne.n	800bb32 <HAL_TIM_IC_Start_IT+0x12a>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb30:	e00b      	b.n	800bb4a <HAL_TIM_IC_Start_IT+0x142>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	2b08      	cmp	r3, #8
 800bb36:	d104      	bne.n	800bb42 <HAL_TIM_IC_Start_IT+0x13a>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb40:	e003      	b.n	800bb4a <HAL_TIM_IC_Start_IT+0x142>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2202      	movs	r2, #2
 800bb46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b0c      	cmp	r3, #12
 800bb4e:	d841      	bhi.n	800bbd4 <HAL_TIM_IC_Start_IT+0x1cc>
 800bb50:	a201      	add	r2, pc, #4	; (adr r2, 800bb58 <HAL_TIM_IC_Start_IT+0x150>)
 800bb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb56:	bf00      	nop
 800bb58:	0800bb8d 	.word	0x0800bb8d
 800bb5c:	0800bbd5 	.word	0x0800bbd5
 800bb60:	0800bbd5 	.word	0x0800bbd5
 800bb64:	0800bbd5 	.word	0x0800bbd5
 800bb68:	0800bb9f 	.word	0x0800bb9f
 800bb6c:	0800bbd5 	.word	0x0800bbd5
 800bb70:	0800bbd5 	.word	0x0800bbd5
 800bb74:	0800bbd5 	.word	0x0800bbd5
 800bb78:	0800bbb1 	.word	0x0800bbb1
 800bb7c:	0800bbd5 	.word	0x0800bbd5
 800bb80:	0800bbd5 	.word	0x0800bbd5
 800bb84:	0800bbd5 	.word	0x0800bbd5
 800bb88:	0800bbc3 	.word	0x0800bbc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68da      	ldr	r2, [r3, #12]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f042 0202 	orr.w	r2, r2, #2
 800bb9a:	60da      	str	r2, [r3, #12]
      break;
 800bb9c:	e01d      	b.n	800bbda <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f042 0204 	orr.w	r2, r2, #4
 800bbac:	60da      	str	r2, [r3, #12]
      break;
 800bbae:	e014      	b.n	800bbda <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0208 	orr.w	r2, r2, #8
 800bbbe:	60da      	str	r2, [r3, #12]
      break;
 800bbc0:	e00b      	b.n	800bbda <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	68da      	ldr	r2, [r3, #12]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f042 0210 	orr.w	r2, r2, #16
 800bbd0:	60da      	str	r2, [r3, #12]
      break;
 800bbd2:	e002      	b.n	800bbda <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd8:	bf00      	nop
  }

  if (status == HAL_OK)
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d14e      	bne.n	800bc7e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 fc4f 	bl	800c48c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a25      	ldr	r2, [pc, #148]	; (800bc88 <HAL_TIM_IC_Start_IT+0x280>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d022      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc00:	d01d      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a21      	ldr	r2, [pc, #132]	; (800bc8c <HAL_TIM_IC_Start_IT+0x284>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d018      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a1f      	ldr	r2, [pc, #124]	; (800bc90 <HAL_TIM_IC_Start_IT+0x288>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d013      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a1e      	ldr	r2, [pc, #120]	; (800bc94 <HAL_TIM_IC_Start_IT+0x28c>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d00e      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a1c      	ldr	r2, [pc, #112]	; (800bc98 <HAL_TIM_IC_Start_IT+0x290>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d009      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a1b      	ldr	r2, [pc, #108]	; (800bc9c <HAL_TIM_IC_Start_IT+0x294>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d004      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a19      	ldr	r2, [pc, #100]	; (800bca0 <HAL_TIM_IC_Start_IT+0x298>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d115      	bne.n	800bc6a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689a      	ldr	r2, [r3, #8]
 800bc44:	4b17      	ldr	r3, [pc, #92]	; (800bca4 <HAL_TIM_IC_Start_IT+0x29c>)
 800bc46:	4013      	ands	r3, r2
 800bc48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b06      	cmp	r3, #6
 800bc4e:	d015      	beq.n	800bc7c <HAL_TIM_IC_Start_IT+0x274>
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc56:	d011      	beq.n	800bc7c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f042 0201 	orr.w	r2, r2, #1
 800bc66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc68:	e008      	b.n	800bc7c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f042 0201 	orr.w	r2, r2, #1
 800bc78:	601a      	str	r2, [r3, #0]
 800bc7a:	e000      	b.n	800bc7e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc7c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	40010000 	.word	0x40010000
 800bc8c:	40000400 	.word	0x40000400
 800bc90:	40000800 	.word	0x40000800
 800bc94:	40000c00 	.word	0x40000c00
 800bc98:	40010400 	.word	0x40010400
 800bc9c:	40014000 	.word	0x40014000
 800bca0:	40001800 	.word	0x40001800
 800bca4:	00010007 	.word	0x00010007

0800bca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	f003 0302 	and.w	r3, r3, #2
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d122      	bne.n	800bd04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f003 0302 	and.w	r3, r3, #2
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d11b      	bne.n	800bd04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f06f 0202 	mvn.w	r2, #2
 800bcd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7f8 f84e 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 800bcf0:	e005      	b.n	800bcfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f9e2 	bl	800c0bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f9e9 	bl	800c0d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	f003 0304 	and.w	r3, r3, #4
 800bd0e:	2b04      	cmp	r3, #4
 800bd10:	d122      	bne.n	800bd58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d11b      	bne.n	800bd58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f06f 0204 	mvn.w	r2, #4
 800bd28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7f8 f824 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 800bd44:	e005      	b.n	800bd52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f9b8 	bl	800c0bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f9bf 	bl	800c0d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	f003 0308 	and.w	r3, r3, #8
 800bd62:	2b08      	cmp	r3, #8
 800bd64:	d122      	bne.n	800bdac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f003 0308 	and.w	r3, r3, #8
 800bd70:	2b08      	cmp	r3, #8
 800bd72:	d11b      	bne.n	800bdac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f06f 0208 	mvn.w	r2, #8
 800bd7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2204      	movs	r2, #4
 800bd82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	69db      	ldr	r3, [r3, #28]
 800bd8a:	f003 0303 	and.w	r3, r3, #3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7f7 fffa 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 800bd98:	e005      	b.n	800bda6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f98e 	bl	800c0bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f995 	bl	800c0d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	f003 0310 	and.w	r3, r3, #16
 800bdb6:	2b10      	cmp	r3, #16
 800bdb8:	d122      	bne.n	800be00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	f003 0310 	and.w	r3, r3, #16
 800bdc4:	2b10      	cmp	r3, #16
 800bdc6:	d11b      	bne.n	800be00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f06f 0210 	mvn.w	r2, #16
 800bdd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2208      	movs	r2, #8
 800bdd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7f7 ffd0 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 800bdec:	e005      	b.n	800bdfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f964 	bl	800c0bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f96b 	bl	800c0d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d10e      	bne.n	800be2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	f003 0301 	and.w	r3, r3, #1
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d107      	bne.n	800be2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f06f 0201 	mvn.w	r2, #1
 800be24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f93e 	bl	800c0a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be36:	2b80      	cmp	r3, #128	; 0x80
 800be38:	d10e      	bne.n	800be58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be44:	2b80      	cmp	r3, #128	; 0x80
 800be46:	d107      	bne.n	800be58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fbd8 	bl	800c608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be66:	d10e      	bne.n	800be86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be72:	2b80      	cmp	r3, #128	; 0x80
 800be74:	d107      	bne.n	800be86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800be7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fbcb 	bl	800c61c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be90:	2b40      	cmp	r3, #64	; 0x40
 800be92:	d10e      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9e:	2b40      	cmp	r3, #64	; 0x40
 800bea0:	d107      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800beaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f919 	bl	800c0e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	f003 0320 	and.w	r3, r3, #32
 800bebc:	2b20      	cmp	r3, #32
 800bebe:	d10e      	bne.n	800bede <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	f003 0320 	and.w	r3, r3, #32
 800beca:	2b20      	cmp	r3, #32
 800becc:	d107      	bne.n	800bede <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f06f 0220 	mvn.w	r2, #32
 800bed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fb8b 	bl	800c5f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bede:	bf00      	nop
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b086      	sub	sp, #24
 800beea:	af00      	add	r7, sp, #0
 800beec:	60f8      	str	r0, [r7, #12]
 800beee:	60b9      	str	r1, [r7, #8]
 800bef0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800befc:	2b01      	cmp	r3, #1
 800befe:	d101      	bne.n	800bf04 <HAL_TIM_IC_ConfigChannel+0x1e>
 800bf00:	2302      	movs	r3, #2
 800bf02:	e088      	b.n	800c016 <HAL_TIM_IC_ConfigChannel+0x130>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d11b      	bne.n	800bf4a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800bf22:	f000 f989 	bl	800c238 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	699a      	ldr	r2, [r3, #24]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f022 020c 	bic.w	r2, r2, #12
 800bf34:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6999      	ldr	r1, [r3, #24]
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	689a      	ldr	r2, [r3, #8]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	430a      	orrs	r2, r1
 800bf46:	619a      	str	r2, [r3, #24]
 800bf48:	e060      	b.n	800c00c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b04      	cmp	r3, #4
 800bf4e:	d11c      	bne.n	800bf8a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800bf60:	f000 f9de 	bl	800c320 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	699a      	ldr	r2, [r3, #24]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bf72:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6999      	ldr	r1, [r3, #24]
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	021a      	lsls	r2, r3, #8
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	430a      	orrs	r2, r1
 800bf86:	619a      	str	r2, [r3, #24]
 800bf88:	e040      	b.n	800c00c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b08      	cmp	r3, #8
 800bf8e:	d11b      	bne.n	800bfc8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800bfa0:	f000 f9fb 	bl	800c39a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	69da      	ldr	r2, [r3, #28]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 020c 	bic.w	r2, r2, #12
 800bfb2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	69d9      	ldr	r1, [r3, #28]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	689a      	ldr	r2, [r3, #8]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	430a      	orrs	r2, r1
 800bfc4:	61da      	str	r2, [r3, #28]
 800bfc6:	e021      	b.n	800c00c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b0c      	cmp	r3, #12
 800bfcc:	d11c      	bne.n	800c008 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800bfde:	f000 fa18 	bl	800c412 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	69da      	ldr	r2, [r3, #28]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bff0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	69d9      	ldr	r1, [r3, #28]
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	021a      	lsls	r2, r3, #8
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	61da      	str	r2, [r3, #28]
 800c006:	e001      	b.n	800c00c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c014:	7dfb      	ldrb	r3, [r7, #23]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3718      	adds	r7, #24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b0c      	cmp	r3, #12
 800c032:	d831      	bhi.n	800c098 <HAL_TIM_ReadCapturedValue+0x78>
 800c034:	a201      	add	r2, pc, #4	; (adr r2, 800c03c <HAL_TIM_ReadCapturedValue+0x1c>)
 800c036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03a:	bf00      	nop
 800c03c:	0800c071 	.word	0x0800c071
 800c040:	0800c099 	.word	0x0800c099
 800c044:	0800c099 	.word	0x0800c099
 800c048:	0800c099 	.word	0x0800c099
 800c04c:	0800c07b 	.word	0x0800c07b
 800c050:	0800c099 	.word	0x0800c099
 800c054:	0800c099 	.word	0x0800c099
 800c058:	0800c099 	.word	0x0800c099
 800c05c:	0800c085 	.word	0x0800c085
 800c060:	0800c099 	.word	0x0800c099
 800c064:	0800c099 	.word	0x0800c099
 800c068:	0800c099 	.word	0x0800c099
 800c06c:	0800c08f 	.word	0x0800c08f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c076:	60fb      	str	r3, [r7, #12]

      break;
 800c078:	e00f      	b.n	800c09a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c080:	60fb      	str	r3, [r7, #12]

      break;
 800c082:	e00a      	b.n	800c09a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c08a:	60fb      	str	r3, [r7, #12]

      break;
 800c08c:	e005      	b.n	800c09a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c094:	60fb      	str	r3, [r7, #12]

      break;
 800c096:	e000      	b.n	800c09a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c098:	bf00      	nop
  }

  return tmpreg;
 800c09a:	68fb      	ldr	r3, [r7, #12]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c0b0:	bf00      	nop
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0c4:	bf00      	nop
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a40      	ldr	r2, [pc, #256]	; (800c20c <TIM_Base_SetConfig+0x114>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d013      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c116:	d00f      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a3d      	ldr	r2, [pc, #244]	; (800c210 <TIM_Base_SetConfig+0x118>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d00b      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a3c      	ldr	r2, [pc, #240]	; (800c214 <TIM_Base_SetConfig+0x11c>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d007      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a3b      	ldr	r2, [pc, #236]	; (800c218 <TIM_Base_SetConfig+0x120>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d003      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a3a      	ldr	r2, [pc, #232]	; (800c21c <TIM_Base_SetConfig+0x124>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d108      	bne.n	800c14a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c13e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	4313      	orrs	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4a2f      	ldr	r2, [pc, #188]	; (800c20c <TIM_Base_SetConfig+0x114>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d02b      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c158:	d027      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4a2c      	ldr	r2, [pc, #176]	; (800c210 <TIM_Base_SetConfig+0x118>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d023      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a2b      	ldr	r2, [pc, #172]	; (800c214 <TIM_Base_SetConfig+0x11c>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d01f      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a2a      	ldr	r2, [pc, #168]	; (800c218 <TIM_Base_SetConfig+0x120>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d01b      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a29      	ldr	r2, [pc, #164]	; (800c21c <TIM_Base_SetConfig+0x124>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d017      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a28      	ldr	r2, [pc, #160]	; (800c220 <TIM_Base_SetConfig+0x128>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d013      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a27      	ldr	r2, [pc, #156]	; (800c224 <TIM_Base_SetConfig+0x12c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d00f      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a26      	ldr	r2, [pc, #152]	; (800c228 <TIM_Base_SetConfig+0x130>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d00b      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a25      	ldr	r2, [pc, #148]	; (800c22c <TIM_Base_SetConfig+0x134>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d007      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a24      	ldr	r2, [pc, #144]	; (800c230 <TIM_Base_SetConfig+0x138>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d003      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a23      	ldr	r2, [pc, #140]	; (800c234 <TIM_Base_SetConfig+0x13c>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d108      	bne.n	800c1bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a0a      	ldr	r2, [pc, #40]	; (800c20c <TIM_Base_SetConfig+0x114>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d003      	beq.n	800c1f0 <TIM_Base_SetConfig+0xf8>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a0c      	ldr	r2, [pc, #48]	; (800c21c <TIM_Base_SetConfig+0x124>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d103      	bne.n	800c1f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	691a      	ldr	r2, [r3, #16]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	615a      	str	r2, [r3, #20]
}
 800c1fe:	bf00      	nop
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	40010000 	.word	0x40010000
 800c210:	40000400 	.word	0x40000400
 800c214:	40000800 	.word	0x40000800
 800c218:	40000c00 	.word	0x40000c00
 800c21c:	40010400 	.word	0x40010400
 800c220:	40014000 	.word	0x40014000
 800c224:	40014400 	.word	0x40014400
 800c228:	40014800 	.word	0x40014800
 800c22c:	40001800 	.word	0x40001800
 800c230:	40001c00 	.word	0x40001c00
 800c234:	40002000 	.word	0x40002000

0800c238 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6a1b      	ldr	r3, [r3, #32]
 800c24a:	f023 0201 	bic.w	r2, r3, #1
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	4a28      	ldr	r2, [pc, #160]	; (800c304 <TIM_TI1_SetConfig+0xcc>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d01b      	beq.n	800c29e <TIM_TI1_SetConfig+0x66>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c26c:	d017      	beq.n	800c29e <TIM_TI1_SetConfig+0x66>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	4a25      	ldr	r2, [pc, #148]	; (800c308 <TIM_TI1_SetConfig+0xd0>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d013      	beq.n	800c29e <TIM_TI1_SetConfig+0x66>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4a24      	ldr	r2, [pc, #144]	; (800c30c <TIM_TI1_SetConfig+0xd4>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d00f      	beq.n	800c29e <TIM_TI1_SetConfig+0x66>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	4a23      	ldr	r2, [pc, #140]	; (800c310 <TIM_TI1_SetConfig+0xd8>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d00b      	beq.n	800c29e <TIM_TI1_SetConfig+0x66>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	4a22      	ldr	r2, [pc, #136]	; (800c314 <TIM_TI1_SetConfig+0xdc>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d007      	beq.n	800c29e <TIM_TI1_SetConfig+0x66>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	4a21      	ldr	r2, [pc, #132]	; (800c318 <TIM_TI1_SetConfig+0xe0>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d003      	beq.n	800c29e <TIM_TI1_SetConfig+0x66>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4a20      	ldr	r2, [pc, #128]	; (800c31c <TIM_TI1_SetConfig+0xe4>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d101      	bne.n	800c2a2 <TIM_TI1_SetConfig+0x6a>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e000      	b.n	800c2a4 <TIM_TI1_SetConfig+0x6c>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d008      	beq.n	800c2ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	f023 0303 	bic.w	r3, r3, #3
 800c2ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	e003      	b.n	800c2c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f043 0301 	orr.w	r3, r3, #1
 800c2c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	f023 030a 	bic.w	r3, r3, #10
 800c2dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	f003 030a 	and.w	r3, r3, #10
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	621a      	str	r2, [r3, #32]
}
 800c2f6:	bf00      	nop
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	40010000 	.word	0x40010000
 800c308:	40000400 	.word	0x40000400
 800c30c:	40000800 	.word	0x40000800
 800c310:	40000c00 	.word	0x40000c00
 800c314:	40010400 	.word	0x40010400
 800c318:	40014000 	.word	0x40014000
 800c31c:	40001800 	.word	0x40001800

0800c320 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
 800c32c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	f023 0210 	bic.w	r2, r3, #16
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	699b      	ldr	r3, [r3, #24]
 800c33e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c34c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	021b      	lsls	r3, r3, #8
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	4313      	orrs	r3, r2
 800c356:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c35e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	031b      	lsls	r3, r3, #12
 800c364:	b29b      	uxth	r3, r3
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	4313      	orrs	r3, r2
 800c36a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c372:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	011b      	lsls	r3, r3, #4
 800c378:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	4313      	orrs	r3, r2
 800c380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	693a      	ldr	r2, [r7, #16]
 800c38c:	621a      	str	r2, [r3, #32]
}
 800c38e:	bf00      	nop
 800c390:	371c      	adds	r7, #28
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr

0800c39a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c39a:	b480      	push	{r7}
 800c39c:	b087      	sub	sp, #28
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	60f8      	str	r0, [r7, #12]
 800c3a2:	60b9      	str	r1, [r7, #8]
 800c3a4:	607a      	str	r2, [r7, #4]
 800c3a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6a1b      	ldr	r3, [r3, #32]
 800c3ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	69db      	ldr	r3, [r3, #28]
 800c3b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f023 0303 	bic.w	r3, r3, #3
 800c3c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c3c8:	697a      	ldr	r2, [r7, #20]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	011b      	lsls	r3, r3, #4
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c3ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	021b      	lsls	r3, r3, #8
 800c3f0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	621a      	str	r2, [r3, #32]
}
 800c406:	bf00      	nop
 800c408:	371c      	adds	r7, #28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c412:	b480      	push	{r7}
 800c414:	b087      	sub	sp, #28
 800c416:	af00      	add	r7, sp, #0
 800c418:	60f8      	str	r0, [r7, #12]
 800c41a:	60b9      	str	r1, [r7, #8]
 800c41c:	607a      	str	r2, [r7, #4]
 800c41e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6a1b      	ldr	r3, [r3, #32]
 800c424:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6a1b      	ldr	r3, [r3, #32]
 800c436:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c43e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	697a      	ldr	r2, [r7, #20]
 800c446:	4313      	orrs	r3, r2
 800c448:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c450:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	031b      	lsls	r3, r3, #12
 800c456:	b29b      	uxth	r3, r3
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c464:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	031b      	lsls	r3, r3, #12
 800c46a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c46e:	693a      	ldr	r2, [r7, #16]
 800c470:	4313      	orrs	r3, r2
 800c472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	621a      	str	r2, [r3, #32]
}
 800c480:	bf00      	nop
 800c482:	371c      	adds	r7, #28
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b087      	sub	sp, #28
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	f003 031f 	and.w	r3, r3, #31
 800c49e:	2201      	movs	r2, #1
 800c4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6a1a      	ldr	r2, [r3, #32]
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	43db      	mvns	r3, r3
 800c4ae:	401a      	ands	r2, r3
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6a1a      	ldr	r2, [r3, #32]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	f003 031f 	and.w	r3, r3, #31
 800c4be:	6879      	ldr	r1, [r7, #4]
 800c4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	621a      	str	r2, [r3, #32]
}
 800c4ca:	bf00      	nop
 800c4cc:	371c      	adds	r7, #28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d101      	bne.n	800c4f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4ec:	2302      	movs	r3, #2
 800c4ee:	e06d      	b.n	800c5cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a30      	ldr	r2, [pc, #192]	; (800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d004      	beq.n	800c524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a2f      	ldr	r2, [pc, #188]	; (800c5dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d108      	bne.n	800c536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c52a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	4313      	orrs	r3, r2
 800c534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c53c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	4313      	orrs	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a20      	ldr	r2, [pc, #128]	; (800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d022      	beq.n	800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c562:	d01d      	beq.n	800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a1d      	ldr	r2, [pc, #116]	; (800c5e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d018      	beq.n	800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a1c      	ldr	r2, [pc, #112]	; (800c5e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d013      	beq.n	800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a1a      	ldr	r2, [pc, #104]	; (800c5e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d00e      	beq.n	800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a15      	ldr	r2, [pc, #84]	; (800c5dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d009      	beq.n	800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a16      	ldr	r2, [pc, #88]	; (800c5ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d004      	beq.n	800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a15      	ldr	r2, [pc, #84]	; (800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d10c      	bne.n	800c5ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	40010000 	.word	0x40010000
 800c5dc:	40010400 	.word	0x40010400
 800c5e0:	40000400 	.word	0x40000400
 800c5e4:	40000800 	.word	0x40000800
 800c5e8:	40000c00 	.word	0x40000c00
 800c5ec:	40014000 	.word	0x40014000
 800c5f0:	40001800 	.word	0x40001800

0800c5f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e040      	b.n	800c6c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7f8 f926 	bl	80048a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2224      	movs	r2, #36	; 0x24
 800c65c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f022 0201 	bic.w	r2, r2, #1
 800c66c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f8b0 	bl	800c7d4 <UART_SetConfig>
 800c674:	4603      	mov	r3, r0
 800c676:	2b01      	cmp	r3, #1
 800c678:	d101      	bne.n	800c67e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e022      	b.n	800c6c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fb08 	bl	800cc9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c69a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	689a      	ldr	r2, [r3, #8]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f042 0201 	orr.w	r2, r2, #1
 800c6ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fb8f 	bl	800cde0 <UART_CheckIdleState>
 800c6c2:	4603      	mov	r3, r0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	; 0x28
 800c6d0:	af02      	add	r7, sp, #8
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6e0:	2b20      	cmp	r3, #32
 800c6e2:	d171      	bne.n	800c7c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d002      	beq.n	800c6f0 <HAL_UART_Transmit+0x24>
 800c6ea:	88fb      	ldrh	r3, [r7, #6]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e06a      	b.n	800c7ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2221      	movs	r2, #33	; 0x21
 800c700:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c702:	f7f9 ffcb 	bl	800669c <HAL_GetTick>
 800c706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	88fa      	ldrh	r2, [r7, #6]
 800c70c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	88fa      	ldrh	r2, [r7, #6]
 800c714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c720:	d108      	bne.n	800c734 <HAL_UART_Transmit+0x68>
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d104      	bne.n	800c734 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c72a:	2300      	movs	r3, #0
 800c72c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	61bb      	str	r3, [r7, #24]
 800c732:	e003      	b.n	800c73c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c738:	2300      	movs	r3, #0
 800c73a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c73c:	e02c      	b.n	800c798 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	2200      	movs	r2, #0
 800c746:	2180      	movs	r1, #128	; 0x80
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 fb80 	bl	800ce4e <UART_WaitOnFlagUntilTimeout>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d001      	beq.n	800c758 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800c754:	2303      	movs	r3, #3
 800c756:	e038      	b.n	800c7ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10b      	bne.n	800c776 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c76c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	3302      	adds	r3, #2
 800c772:	61bb      	str	r3, [r7, #24]
 800c774:	e007      	b.n	800c786 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	3301      	adds	r3, #1
 800c784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3b01      	subs	r3, #1
 800c790:	b29a      	uxth	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1cc      	bne.n	800c73e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2140      	movs	r1, #64	; 0x40
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f000 fb4d 	bl	800ce4e <UART_WaitOnFlagUntilTimeout>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	e005      	b.n	800c7ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	e000      	b.n	800c7ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800c7c8:	2302      	movs	r3, #2
  }
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3720      	adds	r7, #32
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
	...

0800c7d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	689a      	ldr	r2, [r3, #8]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	431a      	orrs	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	431a      	orrs	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	69db      	ldr	r3, [r3, #28]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	4ba6      	ldr	r3, [pc, #664]	; (800ca98 <UART_SetConfig+0x2c4>)
 800c800:	4013      	ands	r3, r2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	6812      	ldr	r2, [r2, #0]
 800c806:	6979      	ldr	r1, [r7, #20]
 800c808:	430b      	orrs	r3, r1
 800c80a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68da      	ldr	r2, [r3, #12]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	430a      	orrs	r2, r1
 800c820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
 800c82c:	697a      	ldr	r2, [r7, #20]
 800c82e:	4313      	orrs	r3, r2
 800c830:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	697a      	ldr	r2, [r7, #20]
 800c842:	430a      	orrs	r2, r1
 800c844:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a94      	ldr	r2, [pc, #592]	; (800ca9c <UART_SetConfig+0x2c8>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d120      	bne.n	800c892 <UART_SetConfig+0xbe>
 800c850:	4b93      	ldr	r3, [pc, #588]	; (800caa0 <UART_SetConfig+0x2cc>)
 800c852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c856:	f003 0303 	and.w	r3, r3, #3
 800c85a:	2b03      	cmp	r3, #3
 800c85c:	d816      	bhi.n	800c88c <UART_SetConfig+0xb8>
 800c85e:	a201      	add	r2, pc, #4	; (adr r2, 800c864 <UART_SetConfig+0x90>)
 800c860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c864:	0800c875 	.word	0x0800c875
 800c868:	0800c881 	.word	0x0800c881
 800c86c:	0800c87b 	.word	0x0800c87b
 800c870:	0800c887 	.word	0x0800c887
 800c874:	2301      	movs	r3, #1
 800c876:	77fb      	strb	r3, [r7, #31]
 800c878:	e150      	b.n	800cb1c <UART_SetConfig+0x348>
 800c87a:	2302      	movs	r3, #2
 800c87c:	77fb      	strb	r3, [r7, #31]
 800c87e:	e14d      	b.n	800cb1c <UART_SetConfig+0x348>
 800c880:	2304      	movs	r3, #4
 800c882:	77fb      	strb	r3, [r7, #31]
 800c884:	e14a      	b.n	800cb1c <UART_SetConfig+0x348>
 800c886:	2308      	movs	r3, #8
 800c888:	77fb      	strb	r3, [r7, #31]
 800c88a:	e147      	b.n	800cb1c <UART_SetConfig+0x348>
 800c88c:	2310      	movs	r3, #16
 800c88e:	77fb      	strb	r3, [r7, #31]
 800c890:	e144      	b.n	800cb1c <UART_SetConfig+0x348>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a83      	ldr	r2, [pc, #524]	; (800caa4 <UART_SetConfig+0x2d0>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d132      	bne.n	800c902 <UART_SetConfig+0x12e>
 800c89c:	4b80      	ldr	r3, [pc, #512]	; (800caa0 <UART_SetConfig+0x2cc>)
 800c89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8a2:	f003 030c 	and.w	r3, r3, #12
 800c8a6:	2b0c      	cmp	r3, #12
 800c8a8:	d828      	bhi.n	800c8fc <UART_SetConfig+0x128>
 800c8aa:	a201      	add	r2, pc, #4	; (adr r2, 800c8b0 <UART_SetConfig+0xdc>)
 800c8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b0:	0800c8e5 	.word	0x0800c8e5
 800c8b4:	0800c8fd 	.word	0x0800c8fd
 800c8b8:	0800c8fd 	.word	0x0800c8fd
 800c8bc:	0800c8fd 	.word	0x0800c8fd
 800c8c0:	0800c8f1 	.word	0x0800c8f1
 800c8c4:	0800c8fd 	.word	0x0800c8fd
 800c8c8:	0800c8fd 	.word	0x0800c8fd
 800c8cc:	0800c8fd 	.word	0x0800c8fd
 800c8d0:	0800c8eb 	.word	0x0800c8eb
 800c8d4:	0800c8fd 	.word	0x0800c8fd
 800c8d8:	0800c8fd 	.word	0x0800c8fd
 800c8dc:	0800c8fd 	.word	0x0800c8fd
 800c8e0:	0800c8f7 	.word	0x0800c8f7
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	77fb      	strb	r3, [r7, #31]
 800c8e8:	e118      	b.n	800cb1c <UART_SetConfig+0x348>
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	77fb      	strb	r3, [r7, #31]
 800c8ee:	e115      	b.n	800cb1c <UART_SetConfig+0x348>
 800c8f0:	2304      	movs	r3, #4
 800c8f2:	77fb      	strb	r3, [r7, #31]
 800c8f4:	e112      	b.n	800cb1c <UART_SetConfig+0x348>
 800c8f6:	2308      	movs	r3, #8
 800c8f8:	77fb      	strb	r3, [r7, #31]
 800c8fa:	e10f      	b.n	800cb1c <UART_SetConfig+0x348>
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	77fb      	strb	r3, [r7, #31]
 800c900:	e10c      	b.n	800cb1c <UART_SetConfig+0x348>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a68      	ldr	r2, [pc, #416]	; (800caa8 <UART_SetConfig+0x2d4>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d120      	bne.n	800c94e <UART_SetConfig+0x17a>
 800c90c:	4b64      	ldr	r3, [pc, #400]	; (800caa0 <UART_SetConfig+0x2cc>)
 800c90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c912:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c916:	2b30      	cmp	r3, #48	; 0x30
 800c918:	d013      	beq.n	800c942 <UART_SetConfig+0x16e>
 800c91a:	2b30      	cmp	r3, #48	; 0x30
 800c91c:	d814      	bhi.n	800c948 <UART_SetConfig+0x174>
 800c91e:	2b20      	cmp	r3, #32
 800c920:	d009      	beq.n	800c936 <UART_SetConfig+0x162>
 800c922:	2b20      	cmp	r3, #32
 800c924:	d810      	bhi.n	800c948 <UART_SetConfig+0x174>
 800c926:	2b00      	cmp	r3, #0
 800c928:	d002      	beq.n	800c930 <UART_SetConfig+0x15c>
 800c92a:	2b10      	cmp	r3, #16
 800c92c:	d006      	beq.n	800c93c <UART_SetConfig+0x168>
 800c92e:	e00b      	b.n	800c948 <UART_SetConfig+0x174>
 800c930:	2300      	movs	r3, #0
 800c932:	77fb      	strb	r3, [r7, #31]
 800c934:	e0f2      	b.n	800cb1c <UART_SetConfig+0x348>
 800c936:	2302      	movs	r3, #2
 800c938:	77fb      	strb	r3, [r7, #31]
 800c93a:	e0ef      	b.n	800cb1c <UART_SetConfig+0x348>
 800c93c:	2304      	movs	r3, #4
 800c93e:	77fb      	strb	r3, [r7, #31]
 800c940:	e0ec      	b.n	800cb1c <UART_SetConfig+0x348>
 800c942:	2308      	movs	r3, #8
 800c944:	77fb      	strb	r3, [r7, #31]
 800c946:	e0e9      	b.n	800cb1c <UART_SetConfig+0x348>
 800c948:	2310      	movs	r3, #16
 800c94a:	77fb      	strb	r3, [r7, #31]
 800c94c:	e0e6      	b.n	800cb1c <UART_SetConfig+0x348>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a56      	ldr	r2, [pc, #344]	; (800caac <UART_SetConfig+0x2d8>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d120      	bne.n	800c99a <UART_SetConfig+0x1c6>
 800c958:	4b51      	ldr	r3, [pc, #324]	; (800caa0 <UART_SetConfig+0x2cc>)
 800c95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c95e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c962:	2bc0      	cmp	r3, #192	; 0xc0
 800c964:	d013      	beq.n	800c98e <UART_SetConfig+0x1ba>
 800c966:	2bc0      	cmp	r3, #192	; 0xc0
 800c968:	d814      	bhi.n	800c994 <UART_SetConfig+0x1c0>
 800c96a:	2b80      	cmp	r3, #128	; 0x80
 800c96c:	d009      	beq.n	800c982 <UART_SetConfig+0x1ae>
 800c96e:	2b80      	cmp	r3, #128	; 0x80
 800c970:	d810      	bhi.n	800c994 <UART_SetConfig+0x1c0>
 800c972:	2b00      	cmp	r3, #0
 800c974:	d002      	beq.n	800c97c <UART_SetConfig+0x1a8>
 800c976:	2b40      	cmp	r3, #64	; 0x40
 800c978:	d006      	beq.n	800c988 <UART_SetConfig+0x1b4>
 800c97a:	e00b      	b.n	800c994 <UART_SetConfig+0x1c0>
 800c97c:	2300      	movs	r3, #0
 800c97e:	77fb      	strb	r3, [r7, #31]
 800c980:	e0cc      	b.n	800cb1c <UART_SetConfig+0x348>
 800c982:	2302      	movs	r3, #2
 800c984:	77fb      	strb	r3, [r7, #31]
 800c986:	e0c9      	b.n	800cb1c <UART_SetConfig+0x348>
 800c988:	2304      	movs	r3, #4
 800c98a:	77fb      	strb	r3, [r7, #31]
 800c98c:	e0c6      	b.n	800cb1c <UART_SetConfig+0x348>
 800c98e:	2308      	movs	r3, #8
 800c990:	77fb      	strb	r3, [r7, #31]
 800c992:	e0c3      	b.n	800cb1c <UART_SetConfig+0x348>
 800c994:	2310      	movs	r3, #16
 800c996:	77fb      	strb	r3, [r7, #31]
 800c998:	e0c0      	b.n	800cb1c <UART_SetConfig+0x348>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a44      	ldr	r2, [pc, #272]	; (800cab0 <UART_SetConfig+0x2dc>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d125      	bne.n	800c9f0 <UART_SetConfig+0x21c>
 800c9a4:	4b3e      	ldr	r3, [pc, #248]	; (800caa0 <UART_SetConfig+0x2cc>)
 800c9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9b2:	d017      	beq.n	800c9e4 <UART_SetConfig+0x210>
 800c9b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9b8:	d817      	bhi.n	800c9ea <UART_SetConfig+0x216>
 800c9ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9be:	d00b      	beq.n	800c9d8 <UART_SetConfig+0x204>
 800c9c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9c4:	d811      	bhi.n	800c9ea <UART_SetConfig+0x216>
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <UART_SetConfig+0x1fe>
 800c9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ce:	d006      	beq.n	800c9de <UART_SetConfig+0x20a>
 800c9d0:	e00b      	b.n	800c9ea <UART_SetConfig+0x216>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	77fb      	strb	r3, [r7, #31]
 800c9d6:	e0a1      	b.n	800cb1c <UART_SetConfig+0x348>
 800c9d8:	2302      	movs	r3, #2
 800c9da:	77fb      	strb	r3, [r7, #31]
 800c9dc:	e09e      	b.n	800cb1c <UART_SetConfig+0x348>
 800c9de:	2304      	movs	r3, #4
 800c9e0:	77fb      	strb	r3, [r7, #31]
 800c9e2:	e09b      	b.n	800cb1c <UART_SetConfig+0x348>
 800c9e4:	2308      	movs	r3, #8
 800c9e6:	77fb      	strb	r3, [r7, #31]
 800c9e8:	e098      	b.n	800cb1c <UART_SetConfig+0x348>
 800c9ea:	2310      	movs	r3, #16
 800c9ec:	77fb      	strb	r3, [r7, #31]
 800c9ee:	e095      	b.n	800cb1c <UART_SetConfig+0x348>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a2f      	ldr	r2, [pc, #188]	; (800cab4 <UART_SetConfig+0x2e0>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d125      	bne.n	800ca46 <UART_SetConfig+0x272>
 800c9fa:	4b29      	ldr	r3, [pc, #164]	; (800caa0 <UART_SetConfig+0x2cc>)
 800c9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca08:	d017      	beq.n	800ca3a <UART_SetConfig+0x266>
 800ca0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca0e:	d817      	bhi.n	800ca40 <UART_SetConfig+0x26c>
 800ca10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca14:	d00b      	beq.n	800ca2e <UART_SetConfig+0x25a>
 800ca16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca1a:	d811      	bhi.n	800ca40 <UART_SetConfig+0x26c>
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <UART_SetConfig+0x254>
 800ca20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca24:	d006      	beq.n	800ca34 <UART_SetConfig+0x260>
 800ca26:	e00b      	b.n	800ca40 <UART_SetConfig+0x26c>
 800ca28:	2301      	movs	r3, #1
 800ca2a:	77fb      	strb	r3, [r7, #31]
 800ca2c:	e076      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca2e:	2302      	movs	r3, #2
 800ca30:	77fb      	strb	r3, [r7, #31]
 800ca32:	e073      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca34:	2304      	movs	r3, #4
 800ca36:	77fb      	strb	r3, [r7, #31]
 800ca38:	e070      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca3a:	2308      	movs	r3, #8
 800ca3c:	77fb      	strb	r3, [r7, #31]
 800ca3e:	e06d      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca40:	2310      	movs	r3, #16
 800ca42:	77fb      	strb	r3, [r7, #31]
 800ca44:	e06a      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a1b      	ldr	r2, [pc, #108]	; (800cab8 <UART_SetConfig+0x2e4>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d138      	bne.n	800cac2 <UART_SetConfig+0x2ee>
 800ca50:	4b13      	ldr	r3, [pc, #76]	; (800caa0 <UART_SetConfig+0x2cc>)
 800ca52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ca5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca5e:	d017      	beq.n	800ca90 <UART_SetConfig+0x2bc>
 800ca60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca64:	d82a      	bhi.n	800cabc <UART_SetConfig+0x2e8>
 800ca66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca6a:	d00b      	beq.n	800ca84 <UART_SetConfig+0x2b0>
 800ca6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca70:	d824      	bhi.n	800cabc <UART_SetConfig+0x2e8>
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d003      	beq.n	800ca7e <UART_SetConfig+0x2aa>
 800ca76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca7a:	d006      	beq.n	800ca8a <UART_SetConfig+0x2b6>
 800ca7c:	e01e      	b.n	800cabc <UART_SetConfig+0x2e8>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	77fb      	strb	r3, [r7, #31]
 800ca82:	e04b      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca84:	2302      	movs	r3, #2
 800ca86:	77fb      	strb	r3, [r7, #31]
 800ca88:	e048      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca8a:	2304      	movs	r3, #4
 800ca8c:	77fb      	strb	r3, [r7, #31]
 800ca8e:	e045      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca90:	2308      	movs	r3, #8
 800ca92:	77fb      	strb	r3, [r7, #31]
 800ca94:	e042      	b.n	800cb1c <UART_SetConfig+0x348>
 800ca96:	bf00      	nop
 800ca98:	efff69f3 	.word	0xefff69f3
 800ca9c:	40011000 	.word	0x40011000
 800caa0:	40023800 	.word	0x40023800
 800caa4:	40004400 	.word	0x40004400
 800caa8:	40004800 	.word	0x40004800
 800caac:	40004c00 	.word	0x40004c00
 800cab0:	40005000 	.word	0x40005000
 800cab4:	40011400 	.word	0x40011400
 800cab8:	40007800 	.word	0x40007800
 800cabc:	2310      	movs	r3, #16
 800cabe:	77fb      	strb	r3, [r7, #31]
 800cac0:	e02c      	b.n	800cb1c <UART_SetConfig+0x348>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a72      	ldr	r2, [pc, #456]	; (800cc90 <UART_SetConfig+0x4bc>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d125      	bne.n	800cb18 <UART_SetConfig+0x344>
 800cacc:	4b71      	ldr	r3, [pc, #452]	; (800cc94 <UART_SetConfig+0x4c0>)
 800cace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cad6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cada:	d017      	beq.n	800cb0c <UART_SetConfig+0x338>
 800cadc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cae0:	d817      	bhi.n	800cb12 <UART_SetConfig+0x33e>
 800cae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cae6:	d00b      	beq.n	800cb00 <UART_SetConfig+0x32c>
 800cae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caec:	d811      	bhi.n	800cb12 <UART_SetConfig+0x33e>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d003      	beq.n	800cafa <UART_SetConfig+0x326>
 800caf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800caf6:	d006      	beq.n	800cb06 <UART_SetConfig+0x332>
 800caf8:	e00b      	b.n	800cb12 <UART_SetConfig+0x33e>
 800cafa:	2300      	movs	r3, #0
 800cafc:	77fb      	strb	r3, [r7, #31]
 800cafe:	e00d      	b.n	800cb1c <UART_SetConfig+0x348>
 800cb00:	2302      	movs	r3, #2
 800cb02:	77fb      	strb	r3, [r7, #31]
 800cb04:	e00a      	b.n	800cb1c <UART_SetConfig+0x348>
 800cb06:	2304      	movs	r3, #4
 800cb08:	77fb      	strb	r3, [r7, #31]
 800cb0a:	e007      	b.n	800cb1c <UART_SetConfig+0x348>
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	77fb      	strb	r3, [r7, #31]
 800cb10:	e004      	b.n	800cb1c <UART_SetConfig+0x348>
 800cb12:	2310      	movs	r3, #16
 800cb14:	77fb      	strb	r3, [r7, #31]
 800cb16:	e001      	b.n	800cb1c <UART_SetConfig+0x348>
 800cb18:	2310      	movs	r3, #16
 800cb1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb24:	d15b      	bne.n	800cbde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cb26:	7ffb      	ldrb	r3, [r7, #31]
 800cb28:	2b08      	cmp	r3, #8
 800cb2a:	d828      	bhi.n	800cb7e <UART_SetConfig+0x3aa>
 800cb2c:	a201      	add	r2, pc, #4	; (adr r2, 800cb34 <UART_SetConfig+0x360>)
 800cb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb32:	bf00      	nop
 800cb34:	0800cb59 	.word	0x0800cb59
 800cb38:	0800cb61 	.word	0x0800cb61
 800cb3c:	0800cb69 	.word	0x0800cb69
 800cb40:	0800cb7f 	.word	0x0800cb7f
 800cb44:	0800cb6f 	.word	0x0800cb6f
 800cb48:	0800cb7f 	.word	0x0800cb7f
 800cb4c:	0800cb7f 	.word	0x0800cb7f
 800cb50:	0800cb7f 	.word	0x0800cb7f
 800cb54:	0800cb77 	.word	0x0800cb77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb58:	f7fd f85e 	bl	8009c18 <HAL_RCC_GetPCLK1Freq>
 800cb5c:	61b8      	str	r0, [r7, #24]
        break;
 800cb5e:	e013      	b.n	800cb88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb60:	f7fd f86e 	bl	8009c40 <HAL_RCC_GetPCLK2Freq>
 800cb64:	61b8      	str	r0, [r7, #24]
        break;
 800cb66:	e00f      	b.n	800cb88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb68:	4b4b      	ldr	r3, [pc, #300]	; (800cc98 <UART_SetConfig+0x4c4>)
 800cb6a:	61bb      	str	r3, [r7, #24]
        break;
 800cb6c:	e00c      	b.n	800cb88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb6e:	f7fc ff81 	bl	8009a74 <HAL_RCC_GetSysClockFreq>
 800cb72:	61b8      	str	r0, [r7, #24]
        break;
 800cb74:	e008      	b.n	800cb88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb7a:	61bb      	str	r3, [r7, #24]
        break;
 800cb7c:	e004      	b.n	800cb88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	77bb      	strb	r3, [r7, #30]
        break;
 800cb86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d074      	beq.n	800cc78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	005a      	lsls	r2, r3, #1
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	085b      	lsrs	r3, r3, #1
 800cb98:	441a      	add	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cba2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	2b0f      	cmp	r3, #15
 800cba8:	d916      	bls.n	800cbd8 <UART_SetConfig+0x404>
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbb0:	d212      	bcs.n	800cbd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	f023 030f 	bic.w	r3, r3, #15
 800cbba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	085b      	lsrs	r3, r3, #1
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	f003 0307 	and.w	r3, r3, #7
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	89fb      	ldrh	r3, [r7, #14]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	89fa      	ldrh	r2, [r7, #14]
 800cbd4:	60da      	str	r2, [r3, #12]
 800cbd6:	e04f      	b.n	800cc78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	77bb      	strb	r3, [r7, #30]
 800cbdc:	e04c      	b.n	800cc78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbde:	7ffb      	ldrb	r3, [r7, #31]
 800cbe0:	2b08      	cmp	r3, #8
 800cbe2:	d828      	bhi.n	800cc36 <UART_SetConfig+0x462>
 800cbe4:	a201      	add	r2, pc, #4	; (adr r2, 800cbec <UART_SetConfig+0x418>)
 800cbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbea:	bf00      	nop
 800cbec:	0800cc11 	.word	0x0800cc11
 800cbf0:	0800cc19 	.word	0x0800cc19
 800cbf4:	0800cc21 	.word	0x0800cc21
 800cbf8:	0800cc37 	.word	0x0800cc37
 800cbfc:	0800cc27 	.word	0x0800cc27
 800cc00:	0800cc37 	.word	0x0800cc37
 800cc04:	0800cc37 	.word	0x0800cc37
 800cc08:	0800cc37 	.word	0x0800cc37
 800cc0c:	0800cc2f 	.word	0x0800cc2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc10:	f7fd f802 	bl	8009c18 <HAL_RCC_GetPCLK1Freq>
 800cc14:	61b8      	str	r0, [r7, #24]
        break;
 800cc16:	e013      	b.n	800cc40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc18:	f7fd f812 	bl	8009c40 <HAL_RCC_GetPCLK2Freq>
 800cc1c:	61b8      	str	r0, [r7, #24]
        break;
 800cc1e:	e00f      	b.n	800cc40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc20:	4b1d      	ldr	r3, [pc, #116]	; (800cc98 <UART_SetConfig+0x4c4>)
 800cc22:	61bb      	str	r3, [r7, #24]
        break;
 800cc24:	e00c      	b.n	800cc40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc26:	f7fc ff25 	bl	8009a74 <HAL_RCC_GetSysClockFreq>
 800cc2a:	61b8      	str	r0, [r7, #24]
        break;
 800cc2c:	e008      	b.n	800cc40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc32:	61bb      	str	r3, [r7, #24]
        break;
 800cc34:	e004      	b.n	800cc40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	77bb      	strb	r3, [r7, #30]
        break;
 800cc3e:	bf00      	nop
    }

    if (pclk != 0U)
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d018      	beq.n	800cc78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	085a      	lsrs	r2, r3, #1
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	441a      	add	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2b0f      	cmp	r3, #15
 800cc5e:	d909      	bls.n	800cc74 <UART_SetConfig+0x4a0>
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc66:	d205      	bcs.n	800cc74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	60da      	str	r2, [r3, #12]
 800cc72:	e001      	b.n	800cc78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cc84:	7fbb      	ldrb	r3, [r7, #30]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	40007c00 	.word	0x40007c00
 800cc94:	40023800 	.word	0x40023800
 800cc98:	00f42400 	.word	0x00f42400

0800cc9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00a      	beq.n	800ccc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	430a      	orrs	r2, r1
 800ccc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccca:	f003 0302 	and.w	r3, r3, #2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	430a      	orrs	r2, r1
 800cce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00a      	beq.n	800cd0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	430a      	orrs	r2, r1
 800cd08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0e:	f003 0308 	and.w	r3, r3, #8
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00a      	beq.n	800cd2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd30:	f003 0310 	and.w	r3, r3, #16
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00a      	beq.n	800cd4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	430a      	orrs	r2, r1
 800cd4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd52:	f003 0320 	and.w	r3, r3, #32
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00a      	beq.n	800cd70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	430a      	orrs	r2, r1
 800cd6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d01a      	beq.n	800cdb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	430a      	orrs	r2, r1
 800cd90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd9a:	d10a      	bne.n	800cdb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	430a      	orrs	r2, r1
 800cdb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00a      	beq.n	800cdd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	430a      	orrs	r2, r1
 800cdd2:	605a      	str	r2, [r3, #4]
  }
}
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af02      	add	r7, sp, #8
 800cde6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdf0:	f7f9 fc54 	bl	800669c <HAL_GetTick>
 800cdf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 0308 	and.w	r3, r3, #8
 800ce00:	2b08      	cmp	r3, #8
 800ce02:	d10e      	bne.n	800ce22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 f81b 	bl	800ce4e <UART_WaitOnFlagUntilTimeout>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	e011      	b.n	800ce46 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2220      	movs	r2, #32
 800ce26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2220      	movs	r2, #32
 800ce2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b09c      	sub	sp, #112	; 0x70
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	603b      	str	r3, [r7, #0]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce5e:	e0a7      	b.n	800cfb0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce66:	f000 80a3 	beq.w	800cfb0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce6a:	f7f9 fc17 	bl	800669c <HAL_GetTick>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d302      	bcc.n	800ce80 <UART_WaitOnFlagUntilTimeout+0x32>
 800ce7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d13f      	bne.n	800cf00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce88:	e853 3f00 	ldrex	r3, [r3]
 800ce8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ce94:	667b      	str	r3, [r7, #100]	; 0x64
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cea0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cea6:	e841 2300 	strex	r3, r2, [r1]
 800ceaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ceac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1e6      	bne.n	800ce80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cebc:	e853 3f00 	ldrex	r3, [r3]
 800cec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec4:	f023 0301 	bic.w	r3, r3, #1
 800cec8:	663b      	str	r3, [r7, #96]	; 0x60
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	3308      	adds	r3, #8
 800ced0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ced2:	64ba      	str	r2, [r7, #72]	; 0x48
 800ced4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ced8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceda:	e841 2300 	strex	r3, r2, [r1]
 800cede:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1e5      	bne.n	800ceb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2220      	movs	r2, #32
 800ceea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2220      	movs	r2, #32
 800cef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800cefc:	2303      	movs	r3, #3
 800cefe:	e068      	b.n	800cfd2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d050      	beq.n	800cfb0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf1c:	d148      	bne.n	800cfb0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf30:	e853 3f00 	ldrex	r3, [r3]
 800cf34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	461a      	mov	r2, r3
 800cf44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf46:	637b      	str	r3, [r7, #52]	; 0x34
 800cf48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf4e:	e841 2300 	strex	r3, r2, [r1]
 800cf52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1e6      	bne.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	e853 3f00 	ldrex	r3, [r3]
 800cf68:	613b      	str	r3, [r7, #16]
   return(result);
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	f023 0301 	bic.w	r3, r3, #1
 800cf70:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3308      	adds	r3, #8
 800cf78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf7a:	623a      	str	r2, [r7, #32]
 800cf7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7e:	69f9      	ldr	r1, [r7, #28]
 800cf80:	6a3a      	ldr	r2, [r7, #32]
 800cf82:	e841 2300 	strex	r3, r2, [r1]
 800cf86:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1e5      	bne.n	800cf5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2220      	movs	r2, #32
 800cf92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2220      	movs	r2, #32
 800cf98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2220      	movs	r2, #32
 800cfa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800cfac:	2303      	movs	r3, #3
 800cfae:	e010      	b.n	800cfd2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	69da      	ldr	r2, [r3, #28]
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	4013      	ands	r3, r2
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	bf0c      	ite	eq
 800cfc0:	2301      	moveq	r3, #1
 800cfc2:	2300      	movne	r3, #0
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	79fb      	ldrb	r3, [r7, #7]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	f43f af48 	beq.w	800ce60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3770      	adds	r7, #112	; 0x70
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
	...

0800cfdc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d121      	bne.n	800d032 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	4b27      	ldr	r3, [pc, #156]	; (800d090 <FMC_SDRAM_Init+0xb4>)
 800cff4:	4013      	ands	r3, r2
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	6851      	ldr	r1, [r2, #4]
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	6892      	ldr	r2, [r2, #8]
 800cffe:	4311      	orrs	r1, r2
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	68d2      	ldr	r2, [r2, #12]
 800d004:	4311      	orrs	r1, r2
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	6912      	ldr	r2, [r2, #16]
 800d00a:	4311      	orrs	r1, r2
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	6952      	ldr	r2, [r2, #20]
 800d010:	4311      	orrs	r1, r2
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	6992      	ldr	r2, [r2, #24]
 800d016:	4311      	orrs	r1, r2
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	69d2      	ldr	r2, [r2, #28]
 800d01c:	4311      	orrs	r1, r2
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	6a12      	ldr	r2, [r2, #32]
 800d022:	4311      	orrs	r1, r2
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d028:	430a      	orrs	r2, r1
 800d02a:	431a      	orrs	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	e026      	b.n	800d080 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	69d9      	ldr	r1, [r3, #28]
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	6a1b      	ldr	r3, [r3, #32]
 800d042:	4319      	orrs	r1, r3
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d048:	430b      	orrs	r3, r1
 800d04a:	431a      	orrs	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	4b0e      	ldr	r3, [pc, #56]	; (800d090 <FMC_SDRAM_Init+0xb4>)
 800d056:	4013      	ands	r3, r2
 800d058:	683a      	ldr	r2, [r7, #0]
 800d05a:	6851      	ldr	r1, [r2, #4]
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	6892      	ldr	r2, [r2, #8]
 800d060:	4311      	orrs	r1, r2
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	68d2      	ldr	r2, [r2, #12]
 800d066:	4311      	orrs	r1, r2
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	6912      	ldr	r2, [r2, #16]
 800d06c:	4311      	orrs	r1, r2
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	6952      	ldr	r2, [r2, #20]
 800d072:	4311      	orrs	r1, r2
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	6992      	ldr	r2, [r2, #24]
 800d078:	430a      	orrs	r2, r1
 800d07a:	431a      	orrs	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	ffff8000 	.word	0xffff8000

0800d094 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d128      	bne.n	800d0f8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	1e59      	subs	r1, r3, #1
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	011b      	lsls	r3, r3, #4
 800d0bc:	4319      	orrs	r1, r3
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	021b      	lsls	r3, r3, #8
 800d0c6:	4319      	orrs	r1, r3
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	031b      	lsls	r3, r3, #12
 800d0d0:	4319      	orrs	r1, r3
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	041b      	lsls	r3, r3, #16
 800d0da:	4319      	orrs	r1, r3
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	695b      	ldr	r3, [r3, #20]
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	051b      	lsls	r3, r3, #20
 800d0e4:	4319      	orrs	r1, r3
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	061b      	lsls	r3, r3, #24
 800d0ee:	430b      	orrs	r3, r1
 800d0f0:	431a      	orrs	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	609a      	str	r2, [r3, #8]
 800d0f6:	e02d      	b.n	800d154 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	4b19      	ldr	r3, [pc, #100]	; (800d164 <FMC_SDRAM_Timing_Init+0xd0>)
 800d0fe:	4013      	ands	r3, r2
 800d100:	68ba      	ldr	r2, [r7, #8]
 800d102:	68d2      	ldr	r2, [r2, #12]
 800d104:	3a01      	subs	r2, #1
 800d106:	0311      	lsls	r1, r2, #12
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	6952      	ldr	r2, [r2, #20]
 800d10c:	3a01      	subs	r2, #1
 800d10e:	0512      	lsls	r2, r2, #20
 800d110:	430a      	orrs	r2, r1
 800d112:	431a      	orrs	r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	1e59      	subs	r1, r3, #1
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	011b      	lsls	r3, r3, #4
 800d12e:	4319      	orrs	r1, r3
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	3b01      	subs	r3, #1
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	4319      	orrs	r1, r3
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	3b01      	subs	r3, #1
 800d140:	041b      	lsls	r3, r3, #16
 800d142:	4319      	orrs	r1, r3
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	699b      	ldr	r3, [r3, #24]
 800d148:	3b01      	subs	r3, #1
 800d14a:	061b      	lsls	r3, r3, #24
 800d14c:	430b      	orrs	r3, r1
 800d14e:	431a      	orrs	r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	ff0f0fff 	.word	0xff0f0fff

0800d168 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	691a      	ldr	r2, [r3, #16]
 800d178:	4b0c      	ldr	r3, [pc, #48]	; (800d1ac <FMC_SDRAM_SendCommand+0x44>)
 800d17a:	4013      	ands	r3, r2
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	6811      	ldr	r1, [r2, #0]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	6852      	ldr	r2, [r2, #4]
 800d184:	4311      	orrs	r1, r2
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	6892      	ldr	r2, [r2, #8]
 800d18a:	3a01      	subs	r2, #1
 800d18c:	0152      	lsls	r2, r2, #5
 800d18e:	4311      	orrs	r1, r2
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	68d2      	ldr	r2, [r2, #12]
 800d194:	0252      	lsls	r2, r2, #9
 800d196:	430a      	orrs	r2, r1
 800d198:	431a      	orrs	r2, r3
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	ffc00000 	.word	0xffc00000

0800d1b0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	695a      	ldr	r2, [r3, #20]
 800d1be:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	0052      	lsls	r2, r2, #1
 800d1c6:	431a      	orrs	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	ffffc001 	.word	0xffffc001

0800d1e0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	b480      	push	{r7}
 800d1e4:	b085      	sub	sp, #20
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	f107 001c 	add.w	r0, r7, #28
 800d1ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d1f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d1f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d1fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d1fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d202:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d206:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d20a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	4313      	orrs	r3, r2
 800d210:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	4b07      	ldr	r3, [pc, #28]	; (800d234 <SDMMC_Init+0x54>)
 800d218:	4013      	ands	r3, r2
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	431a      	orrs	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	b004      	add	sp, #16
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	ffff8100 	.word	0xffff8100

0800d238 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d246:	4618      	mov	r0, r3
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800d252:	b480      	push	{r7}
 800d254:	b083      	sub	sp, #12
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2203      	movs	r2, #3
 800d280:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d282:	2300      	movs	r3, #0
}
 800d284:	4618      	mov	r0, r3
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f003 0303 	and.w	r3, r3, #3
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d2ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d2d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d2d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	68da      	ldr	r2, [r3, #12]
 800d2e2:	4b06      	ldr	r3, [pc, #24]	; (800d2fc <SDMMC_SendCommand+0x50>)
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	431a      	orrs	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	fffff000 	.word	0xfffff000

0800d300 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	b2db      	uxtb	r3, r3
}
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b085      	sub	sp, #20
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	3314      	adds	r3, #20
 800d328:	461a      	mov	r2, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	4413      	add	r3, r2
 800d32e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
}  
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	685a      	ldr	r2, [r3, #4]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d366:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d36c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d372:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	4313      	orrs	r3, r2
 800d378:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	431a      	orrs	r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d38a:	2300      	movs	r3, #0

}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b088      	sub	sp, #32
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d3a6:	2310      	movs	r3, #16
 800d3a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3aa:	2340      	movs	r3, #64	; 0x40
 800d3ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3b8:	f107 0308 	add.w	r3, r7, #8
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff ff74 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d3c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3c8:	2110      	movs	r1, #16
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f9d6 	bl	800d77c <SDMMC_GetCmdResp1>
 800d3d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3d2:	69fb      	ldr	r3, [r7, #28]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3720      	adds	r7, #32
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b088      	sub	sp, #32
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d3ea:	2311      	movs	r3, #17
 800d3ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3ee:	2340      	movs	r3, #64	; 0x40
 800d3f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3fc:	f107 0308 	add.w	r3, r7, #8
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7ff ff52 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d408:	f241 3288 	movw	r2, #5000	; 0x1388
 800d40c:	2111      	movs	r1, #17
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 f9b4 	bl	800d77c <SDMMC_GetCmdResp1>
 800d414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d416:	69fb      	ldr	r3, [r7, #28]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3720      	adds	r7, #32
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b088      	sub	sp, #32
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d42e:	2312      	movs	r3, #18
 800d430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d432:	2340      	movs	r3, #64	; 0x40
 800d434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d436:	2300      	movs	r3, #0
 800d438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d43a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d43e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d440:	f107 0308 	add.w	r3, r7, #8
 800d444:	4619      	mov	r1, r3
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7ff ff30 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d450:	2112      	movs	r1, #18
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f992 	bl	800d77c <SDMMC_GetCmdResp1>
 800d458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d45a:	69fb      	ldr	r3, [r7, #28]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3720      	adds	r7, #32
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b088      	sub	sp, #32
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d472:	2318      	movs	r3, #24
 800d474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d476:	2340      	movs	r3, #64	; 0x40
 800d478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d47a:	2300      	movs	r3, #0
 800d47c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d484:	f107 0308 	add.w	r3, r7, #8
 800d488:	4619      	mov	r1, r3
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff ff0e 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d490:	f241 3288 	movw	r2, #5000	; 0x1388
 800d494:	2118      	movs	r1, #24
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 f970 	bl	800d77c <SDMMC_GetCmdResp1>
 800d49c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d49e:	69fb      	ldr	r3, [r7, #28]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3720      	adds	r7, #32
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b088      	sub	sp, #32
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d4b6:	2319      	movs	r3, #25
 800d4b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4ba:	2340      	movs	r3, #64	; 0x40
 800d4bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4c8:	f107 0308 	add.w	r3, r7, #8
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f7ff feec 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d4d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d8:	2119      	movs	r1, #25
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f94e 	bl	800d77c <SDMMC_GetCmdResp1>
 800d4e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4e2:	69fb      	ldr	r3, [r7, #28]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3720      	adds	r7, #32
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d4f8:	230c      	movs	r3, #12
 800d4fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4fc:	2340      	movs	r3, #64	; 0x40
 800d4fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d500:	2300      	movs	r3, #0
 800d502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d508:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d50a:	f107 0308 	add.w	r3, r7, #8
 800d50e:	4619      	mov	r1, r3
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff fecb 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d516:	4a05      	ldr	r2, [pc, #20]	; (800d52c <SDMMC_CmdStopTransfer+0x40>)
 800d518:	210c      	movs	r1, #12
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f92e 	bl	800d77c <SDMMC_GetCmdResp1>
 800d520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d522:	69fb      	ldr	r3, [r7, #28]
}
 800d524:	4618      	mov	r0, r3
 800d526:	3720      	adds	r7, #32
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	05f5e100 	.word	0x05f5e100

0800d530 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08a      	sub	sp, #40	; 0x28
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d540:	2307      	movs	r3, #7
 800d542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d544:	2340      	movs	r3, #64	; 0x40
 800d546:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d548:	2300      	movs	r3, #0
 800d54a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d54c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d550:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d552:	f107 0310 	add.w	r3, r7, #16
 800d556:	4619      	mov	r1, r3
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f7ff fea7 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d55e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d562:	2107      	movs	r1, #7
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f000 f909 	bl	800d77c <SDMMC_GetCmdResp1>
 800d56a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3728      	adds	r7, #40	; 0x28
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b088      	sub	sp, #32
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d582:	2300      	movs	r3, #0
 800d584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d586:	2300      	movs	r3, #0
 800d588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d58a:	2300      	movs	r3, #0
 800d58c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d58e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d594:	f107 0308 	add.w	r3, r7, #8
 800d598:	4619      	mov	r1, r3
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff fe86 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fb23 	bl	800dbec <SDMMC_GetCmdError>
 800d5a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5a8:	69fb      	ldr	r3, [r7, #28]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3720      	adds	r7, #32
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b088      	sub	sp, #32
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d5ba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d5be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d5c0:	2308      	movs	r3, #8
 800d5c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5c4:	2340      	movs	r3, #64	; 0x40
 800d5c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5d2:	f107 0308 	add.w	r3, r7, #8
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff fe67 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 fab6 	bl	800db50 <SDMMC_GetCmdResp7>
 800d5e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5e6:	69fb      	ldr	r3, [r7, #28]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3720      	adds	r7, #32
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b088      	sub	sp, #32
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d5fe:	2337      	movs	r3, #55	; 0x37
 800d600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d602:	2340      	movs	r3, #64	; 0x40
 800d604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d606:	2300      	movs	r3, #0
 800d608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d60a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d60e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d610:	f107 0308 	add.w	r3, r7, #8
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff fe48 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d61c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d620:	2137      	movs	r1, #55	; 0x37
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 f8aa 	bl	800d77c <SDMMC_GetCmdResp1>
 800d628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d62a:	69fb      	ldr	r3, [r7, #28]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3720      	adds	r7, #32
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b088      	sub	sp, #32
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	4b0d      	ldr	r3, [pc, #52]	; (800d678 <SDMMC_CmdAppOperCommand+0x44>)
 800d642:	4313      	orrs	r3, r2
 800d644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d646:	2329      	movs	r3, #41	; 0x29
 800d648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d64a:	2340      	movs	r3, #64	; 0x40
 800d64c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d64e:	2300      	movs	r3, #0
 800d650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d656:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d658:	f107 0308 	add.w	r3, r7, #8
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7ff fe24 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f9bf 	bl	800d9e8 <SDMMC_GetCmdResp3>
 800d66a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d66c:	69fb      	ldr	r3, [r7, #28]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3720      	adds	r7, #32
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	80100000 	.word	0x80100000

0800d67c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d684:	2300      	movs	r3, #0
 800d686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d688:	2302      	movs	r3, #2
 800d68a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d68c:	23c0      	movs	r3, #192	; 0xc0
 800d68e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d690:	2300      	movs	r3, #0
 800d692:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d698:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d69a:	f107 0308 	add.w	r3, r7, #8
 800d69e:	4619      	mov	r1, r3
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff fe03 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f956 	bl	800d958 <SDMMC_GetCmdResp2>
 800d6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d6c6:	2309      	movs	r3, #9
 800d6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d6ca:	23c0      	movs	r3, #192	; 0xc0
 800d6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6d8:	f107 0308 	add.w	r3, r7, #8
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff fde4 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f937 	bl	800d958 <SDMMC_GetCmdResp2>
 800d6ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3720      	adds	r7, #32
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b088      	sub	sp, #32
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d700:	2300      	movs	r3, #0
 800d702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d704:	2303      	movs	r3, #3
 800d706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d708:	2340      	movs	r3, #64	; 0x40
 800d70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d70c:	2300      	movs	r3, #0
 800d70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d716:	f107 0308 	add.w	r3, r7, #8
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7ff fdc5 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	2103      	movs	r1, #3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f99c 	bl	800da64 <SDMMC_GetCmdResp6>
 800d72c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d72e:	69fb      	ldr	r3, [r7, #28]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3720      	adds	r7, #32
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b088      	sub	sp, #32
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d746:	230d      	movs	r3, #13
 800d748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d74a:	2340      	movs	r3, #64	; 0x40
 800d74c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d74e:	2300      	movs	r3, #0
 800d750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d758:	f107 0308 	add.w	r3, r7, #8
 800d75c:	4619      	mov	r1, r3
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff fda4 	bl	800d2ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d764:	f241 3288 	movw	r2, #5000	; 0x1388
 800d768:	210d      	movs	r1, #13
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f806 	bl	800d77c <SDMMC_GetCmdResp1>
 800d770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d772:	69fb      	ldr	r3, [r7, #28]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3720      	adds	r7, #32
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	460b      	mov	r3, r1
 800d786:	607a      	str	r2, [r7, #4]
 800d788:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d78a:	4b70      	ldr	r3, [pc, #448]	; (800d94c <SDMMC_GetCmdResp1+0x1d0>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a70      	ldr	r2, [pc, #448]	; (800d950 <SDMMC_GetCmdResp1+0x1d4>)
 800d790:	fba2 2303 	umull	r2, r3, r2, r3
 800d794:	0a5a      	lsrs	r2, r3, #9
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	fb02 f303 	mul.w	r3, r2, r3
 800d79c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	1e5a      	subs	r2, r3, #1
 800d7a2:	61fa      	str	r2, [r7, #28]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d102      	bne.n	800d7ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7ac:	e0c9      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d0ef      	beq.n	800d79e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1ea      	bne.n	800d79e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7cc:	f003 0304 	and.w	r3, r3, #4
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d004      	beq.n	800d7de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2204      	movs	r2, #4
 800d7d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7da:	2304      	movs	r3, #4
 800d7dc:	e0b1      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d004      	beq.n	800d7f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e0a6      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	22c5      	movs	r2, #197	; 0xc5
 800d7f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f7ff fd80 	bl	800d300 <SDMMC_GetCommandResponse>
 800d800:	4603      	mov	r3, r0
 800d802:	461a      	mov	r2, r3
 800d804:	7afb      	ldrb	r3, [r7, #11]
 800d806:	4293      	cmp	r3, r2
 800d808:	d001      	beq.n	800d80e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e099      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d80e:	2100      	movs	r1, #0
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f7ff fd82 	bl	800d31a <SDMMC_GetResponse>
 800d816:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d818:	697a      	ldr	r2, [r7, #20]
 800d81a:	4b4e      	ldr	r3, [pc, #312]	; (800d954 <SDMMC_GetCmdResp1+0x1d8>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d101      	bne.n	800d826 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d822:	2300      	movs	r3, #0
 800d824:	e08d      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	da02      	bge.n	800d832 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d82c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d830:	e087      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d83c:	2340      	movs	r3, #64	; 0x40
 800d83e:	e080      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d84a:	2380      	movs	r3, #128	; 0x80
 800d84c:	e079      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d85c:	e071      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d864:	2b00      	cmp	r3, #0
 800d866:	d002      	beq.n	800d86e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d86c:	e069      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d87c:	e061      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d88c:	e059      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d89c:	e051      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8ac:	e049      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d8b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d8bc:	e041      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d8c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8cc:	e039      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d8d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d8dc:	e031      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d8e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d8ec:	e029      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d8f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d8fc:	e021      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d002      	beq.n	800d90e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d908:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d90c:	e019      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d91c:	e011      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d92c:	e009      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f003 0308 	and.w	r3, r3, #8
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d938:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d93c:	e001      	b.n	800d942 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d93e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d942:	4618      	mov	r0, r3
 800d944:	3720      	adds	r7, #32
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	20000004 	.word	0x20000004
 800d950:	10624dd3 	.word	0x10624dd3
 800d954:	fdffe008 	.word	0xfdffe008

0800d958 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d960:	4b1f      	ldr	r3, [pc, #124]	; (800d9e0 <SDMMC_GetCmdResp2+0x88>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a1f      	ldr	r2, [pc, #124]	; (800d9e4 <SDMMC_GetCmdResp2+0x8c>)
 800d966:	fba2 2303 	umull	r2, r3, r2, r3
 800d96a:	0a5b      	lsrs	r3, r3, #9
 800d96c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d970:	fb02 f303 	mul.w	r3, r2, r3
 800d974:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	1e5a      	subs	r2, r3, #1
 800d97a:	60fa      	str	r2, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d984:	e026      	b.n	800d9d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d992:	2b00      	cmp	r3, #0
 800d994:	d0ef      	beq.n	800d976 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1ea      	bne.n	800d976 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a4:	f003 0304 	and.w	r3, r3, #4
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d004      	beq.n	800d9b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2204      	movs	r2, #4
 800d9b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9b2:	2304      	movs	r3, #4
 800d9b4:	e00e      	b.n	800d9d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ba:	f003 0301 	and.w	r3, r3, #1
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d004      	beq.n	800d9cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e003      	b.n	800d9d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	22c5      	movs	r2, #197	; 0xc5
 800d9d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	20000004 	.word	0x20000004
 800d9e4:	10624dd3 	.word	0x10624dd3

0800d9e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9f0:	4b1a      	ldr	r3, [pc, #104]	; (800da5c <SDMMC_GetCmdResp3+0x74>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a1a      	ldr	r2, [pc, #104]	; (800da60 <SDMMC_GetCmdResp3+0x78>)
 800d9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9fa:	0a5b      	lsrs	r3, r3, #9
 800d9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800da00:	fb02 f303 	mul.w	r3, r2, r3
 800da04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	1e5a      	subs	r2, r3, #1
 800da0a:	60fa      	str	r2, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d102      	bne.n	800da16 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da14:	e01b      	b.n	800da4e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800da22:	2b00      	cmp	r3, #0
 800da24:	d0ef      	beq.n	800da06 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1ea      	bne.n	800da06 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da34:	f003 0304 	and.w	r3, r3, #4
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d004      	beq.n	800da46 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2204      	movs	r2, #4
 800da40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da42:	2304      	movs	r3, #4
 800da44:	e003      	b.n	800da4e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	22c5      	movs	r2, #197	; 0xc5
 800da4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3714      	adds	r7, #20
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	20000004 	.word	0x20000004
 800da60:	10624dd3 	.word	0x10624dd3

0800da64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	460b      	mov	r3, r1
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da72:	4b35      	ldr	r3, [pc, #212]	; (800db48 <SDMMC_GetCmdResp6+0xe4>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a35      	ldr	r2, [pc, #212]	; (800db4c <SDMMC_GetCmdResp6+0xe8>)
 800da78:	fba2 2303 	umull	r2, r3, r2, r3
 800da7c:	0a5b      	lsrs	r3, r3, #9
 800da7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800da82:	fb02 f303 	mul.w	r3, r2, r3
 800da86:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	1e5a      	subs	r2, r3, #1
 800da8c:	61fa      	str	r2, [r7, #28]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d102      	bne.n	800da98 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da96:	e052      	b.n	800db3e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d0ef      	beq.n	800da88 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1ea      	bne.n	800da88 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab6:	f003 0304 	and.w	r3, r3, #4
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d004      	beq.n	800dac8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2204      	movs	r2, #4
 800dac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dac4:	2304      	movs	r3, #4
 800dac6:	e03a      	b.n	800db3e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dacc:	f003 0301 	and.w	r3, r3, #1
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d004      	beq.n	800dade <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2201      	movs	r2, #1
 800dad8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dada:	2301      	movs	r3, #1
 800dadc:	e02f      	b.n	800db3e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f7ff fc0e 	bl	800d300 <SDMMC_GetCommandResponse>
 800dae4:	4603      	mov	r3, r0
 800dae6:	461a      	mov	r2, r3
 800dae8:	7afb      	ldrb	r3, [r7, #11]
 800daea:	4293      	cmp	r3, r2
 800daec:	d001      	beq.n	800daf2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800daee:	2301      	movs	r3, #1
 800daf0:	e025      	b.n	800db3e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	22c5      	movs	r2, #197	; 0xc5
 800daf6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800daf8:	2100      	movs	r1, #0
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff fc0d 	bl	800d31a <SDMMC_GetResponse>
 800db00:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d106      	bne.n	800db1a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	0c1b      	lsrs	r3, r3, #16
 800db10:	b29a      	uxth	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800db16:	2300      	movs	r3, #0
 800db18:	e011      	b.n	800db3e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db20:	2b00      	cmp	r3, #0
 800db22:	d002      	beq.n	800db2a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db28:	e009      	b.n	800db3e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db38:	e001      	b.n	800db3e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3720      	adds	r7, #32
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	20000004 	.word	0x20000004
 800db4c:	10624dd3 	.word	0x10624dd3

0800db50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800db50:	b480      	push	{r7}
 800db52:	b085      	sub	sp, #20
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db58:	4b22      	ldr	r3, [pc, #136]	; (800dbe4 <SDMMC_GetCmdResp7+0x94>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a22      	ldr	r2, [pc, #136]	; (800dbe8 <SDMMC_GetCmdResp7+0x98>)
 800db5e:	fba2 2303 	umull	r2, r3, r2, r3
 800db62:	0a5b      	lsrs	r3, r3, #9
 800db64:	f241 3288 	movw	r2, #5000	; 0x1388
 800db68:	fb02 f303 	mul.w	r3, r2, r3
 800db6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	1e5a      	subs	r2, r3, #1
 800db72:	60fa      	str	r2, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d102      	bne.n	800db7e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db7c:	e02c      	b.n	800dbd8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0ef      	beq.n	800db6e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1ea      	bne.n	800db6e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9c:	f003 0304 	and.w	r3, r3, #4
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d004      	beq.n	800dbae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2204      	movs	r2, #4
 800dba8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbaa:	2304      	movs	r3, #4
 800dbac:	e014      	b.n	800dbd8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d004      	beq.n	800dbc4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e009      	b.n	800dbd8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d002      	beq.n	800dbd6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2240      	movs	r2, #64	; 0x40
 800dbd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dbd6:	2300      	movs	r3, #0
  
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	20000004 	.word	0x20000004
 800dbe8:	10624dd3 	.word	0x10624dd3

0800dbec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbf4:	4b11      	ldr	r3, [pc, #68]	; (800dc3c <SDMMC_GetCmdError+0x50>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a11      	ldr	r2, [pc, #68]	; (800dc40 <SDMMC_GetCmdError+0x54>)
 800dbfa:	fba2 2303 	umull	r2, r3, r2, r3
 800dbfe:	0a5b      	lsrs	r3, r3, #9
 800dc00:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc04:	fb02 f303 	mul.w	r3, r2, r3
 800dc08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	1e5a      	subs	r2, r3, #1
 800dc0e:	60fa      	str	r2, [r7, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d102      	bne.n	800dc1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc18:	e009      	b.n	800dc2e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d0f1      	beq.n	800dc0a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	22c5      	movs	r2, #197	; 0xc5
 800dc2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3714      	adds	r7, #20
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	20000004 	.word	0x20000004
 800dc40:	10624dd3 	.word	0x10624dd3

0800dc44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dc48:	4904      	ldr	r1, [pc, #16]	; (800dc5c <MX_FATFS_Init+0x18>)
 800dc4a:	4805      	ldr	r0, [pc, #20]	; (800dc60 <MX_FATFS_Init+0x1c>)
 800dc4c:	f003 f824 	bl	8010c98 <FATFS_LinkDriver>
 800dc50:	4603      	mov	r3, r0
 800dc52:	461a      	mov	r2, r3
 800dc54:	4b03      	ldr	r3, [pc, #12]	; (800dc64 <MX_FATFS_Init+0x20>)
 800dc56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dc58:	bf00      	nop
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	20000984 	.word	0x20000984
 800dc60:	080182e8 	.word	0x080182e8
 800dc64:	20000980 	.word	0x20000980

0800dc68 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dc6c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dc82:	f000 f888 	bl	800dd96 <BSP_SD_IsDetected>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d001      	beq.n	800dc90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	e005      	b.n	800dc9c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dc90:	4804      	ldr	r0, [pc, #16]	; (800dca4 <BSP_SD_Init+0x2c>)
 800dc92:	f7fc fbd9 	bl	800a448 <HAL_SD_Init>
 800dc96:	4603      	mov	r3, r0
 800dc98:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800dc9a:	79fb      	ldrb	r3, [r7, #7]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	20000434 	.word	0x20000434

0800dca8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	68f9      	ldr	r1, [r7, #12]
 800dcbe:	4806      	ldr	r0, [pc, #24]	; (800dcd8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dcc0:	f7fc fc7a 	bl	800a5b8 <HAL_SD_ReadBlocks_DMA>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dcce:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	20000434 	.word	0x20000434

0800dcdc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	68f9      	ldr	r1, [r7, #12]
 800dcf2:	4806      	ldr	r0, [pc, #24]	; (800dd0c <BSP_SD_WriteBlocks_DMA+0x30>)
 800dcf4:	f7fc fd42 	bl	800a77c <HAL_SD_WriteBlocks_DMA>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	20000434 	.word	0x20000434

0800dd10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd14:	4805      	ldr	r0, [pc, #20]	; (800dd2c <BSP_SD_GetCardState+0x1c>)
 800dd16:	f7fd f967 	bl	800afe8 <HAL_SD_GetCardState>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	bf14      	ite	ne
 800dd20:	2301      	movne	r3, #1
 800dd22:	2300      	moveq	r3, #0
 800dd24:	b2db      	uxtb	r3, r3
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20000434 	.word	0x20000434

0800dd30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dd38:	6879      	ldr	r1, [r7, #4]
 800dd3a:	4803      	ldr	r0, [pc, #12]	; (800dd48 <BSP_SD_GetCardInfo+0x18>)
 800dd3c:	f7fd f928 	bl	800af90 <HAL_SD_GetCardInfo>
}
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	20000434 	.word	0x20000434

0800dd4c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800dd54:	f000 f818 	bl	800dd88 <BSP_SD_AbortCallback>
}
 800dd58:	bf00      	nop
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dd68:	f000 f9a8 	bl	800e0bc <BSP_SD_WriteCpltCallback>
}
 800dd6c:	bf00      	nop
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dd7c:	f000 f9aa 	bl	800e0d4 <BSP_SD_ReadCpltCallback>
}
 800dd80:	bf00      	nop
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	af00      	add	r7, sp, #0

}
 800dd8c:	bf00      	nop
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr

0800dd96 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b082      	sub	sp, #8
 800dd9a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dda0:	f000 f80c 	bl	800ddbc <BSP_PlatformIsDetected>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d101      	bne.n	800ddae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ddae:	79fb      	ldrb	r3, [r7, #7]
 800ddb0:	b2db      	uxtb	r3, r3
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3708      	adds	r7, #8
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
	...

0800ddbc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ddc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ddca:	4806      	ldr	r0, [pc, #24]	; (800dde4 <BSP_PlatformIsDetected+0x28>)
 800ddcc:	f7fa f954 	bl	8008078 <HAL_GPIO_ReadPin>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d001      	beq.n	800ddda <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ddda:	79fb      	ldrb	r3, [r7, #7]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	40020800 	.word	0x40020800

0800dde8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ddf0:	f7f8 fc54 	bl	800669c <HAL_GetTick>
 800ddf4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ddf6:	e006      	b.n	800de06 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ddf8:	f7ff ff8a 	bl	800dd10 <BSP_SD_GetCardState>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d101      	bne.n	800de06 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800de02:	2300      	movs	r3, #0
 800de04:	e009      	b.n	800de1a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800de06:	f7f8 fc49 	bl	800669c <HAL_GetTick>
 800de0a:	4602      	mov	r2, r0
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	429a      	cmp	r2, r3
 800de14:	d8f0      	bhi.n	800ddf8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800de16:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
	...

0800de24 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	4603      	mov	r3, r0
 800de2c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800de2e:	4b0b      	ldr	r3, [pc, #44]	; (800de5c <SD_CheckStatus+0x38>)
 800de30:	2201      	movs	r2, #1
 800de32:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800de34:	f7ff ff6c 	bl	800dd10 <BSP_SD_GetCardState>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d107      	bne.n	800de4e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800de3e:	4b07      	ldr	r3, [pc, #28]	; (800de5c <SD_CheckStatus+0x38>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	b2db      	uxtb	r3, r3
 800de44:	f023 0301 	bic.w	r3, r3, #1
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	4b04      	ldr	r3, [pc, #16]	; (800de5c <SD_CheckStatus+0x38>)
 800de4c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800de4e:	4b03      	ldr	r3, [pc, #12]	; (800de5c <SD_CheckStatus+0x38>)
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	b2db      	uxtb	r3, r3
}
 800de54:	4618      	mov	r0, r3
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	20000021 	.word	0x20000021

0800de60 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	4603      	mov	r3, r0
 800de68:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800de6a:	f7ff ff05 	bl	800dc78 <BSP_SD_Init>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d107      	bne.n	800de84 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800de74:	79fb      	ldrb	r3, [r7, #7]
 800de76:	4618      	mov	r0, r3
 800de78:	f7ff ffd4 	bl	800de24 <SD_CheckStatus>
 800de7c:	4603      	mov	r3, r0
 800de7e:	461a      	mov	r2, r3
 800de80:	4b04      	ldr	r3, [pc, #16]	; (800de94 <SD_initialize+0x34>)
 800de82:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800de84:	4b03      	ldr	r3, [pc, #12]	; (800de94 <SD_initialize+0x34>)
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	b2db      	uxtb	r3, r3
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	20000021 	.word	0x20000021

0800de98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	4603      	mov	r3, r0
 800dea0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7ff ffbd 	bl	800de24 <SD_CheckStatus>
 800deaa:	4603      	mov	r3, r0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b086      	sub	sp, #24
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60b9      	str	r1, [r7, #8]
 800debc:	607a      	str	r2, [r7, #4]
 800debe:	603b      	str	r3, [r7, #0]
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dec8:	f247 5030 	movw	r0, #30000	; 0x7530
 800decc:	f7ff ff8c 	bl	800dde8 <SD_CheckStatusWithTimeout>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	da01      	bge.n	800deda <SD_read+0x26>
  {
    return res;
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
 800ded8:	e03b      	b.n	800df52 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800deda:	683a      	ldr	r2, [r7, #0]
 800dedc:	6879      	ldr	r1, [r7, #4]
 800dede:	68b8      	ldr	r0, [r7, #8]
 800dee0:	f7ff fee2 	bl	800dca8 <BSP_SD_ReadBlocks_DMA>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d132      	bne.n	800df50 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800deea:	4b1c      	ldr	r3, [pc, #112]	; (800df5c <SD_read+0xa8>)
 800deec:	2200      	movs	r2, #0
 800deee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800def0:	f7f8 fbd4 	bl	800669c <HAL_GetTick>
 800def4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800def6:	bf00      	nop
 800def8:	4b18      	ldr	r3, [pc, #96]	; (800df5c <SD_read+0xa8>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d108      	bne.n	800df12 <SD_read+0x5e>
 800df00:	f7f8 fbcc 	bl	800669c <HAL_GetTick>
 800df04:	4602      	mov	r2, r0
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	f247 522f 	movw	r2, #29999	; 0x752f
 800df0e:	4293      	cmp	r3, r2
 800df10:	d9f2      	bls.n	800def8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800df12:	4b12      	ldr	r3, [pc, #72]	; (800df5c <SD_read+0xa8>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d102      	bne.n	800df20 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	75fb      	strb	r3, [r7, #23]
 800df1e:	e017      	b.n	800df50 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800df20:	4b0e      	ldr	r3, [pc, #56]	; (800df5c <SD_read+0xa8>)
 800df22:	2200      	movs	r2, #0
 800df24:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800df26:	f7f8 fbb9 	bl	800669c <HAL_GetTick>
 800df2a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800df2c:	e007      	b.n	800df3e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df2e:	f7ff feef 	bl	800dd10 <BSP_SD_GetCardState>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d102      	bne.n	800df3e <SD_read+0x8a>
          {
            res = RES_OK;
 800df38:	2300      	movs	r3, #0
 800df3a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800df3c:	e008      	b.n	800df50 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800df3e:	f7f8 fbad 	bl	800669c <HAL_GetTick>
 800df42:	4602      	mov	r2, r0
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	f247 522f 	movw	r2, #29999	; 0x752f
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d9ee      	bls.n	800df2e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800df50:	7dfb      	ldrb	r3, [r7, #23]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	20000dec 	.word	0x20000dec

0800df60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	60b9      	str	r1, [r7, #8]
 800df68:	607a      	str	r2, [r7, #4]
 800df6a:	603b      	str	r3, [r7, #0]
 800df6c:	4603      	mov	r3, r0
 800df6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800df74:	4b24      	ldr	r3, [pc, #144]	; (800e008 <SD_write+0xa8>)
 800df76:	2200      	movs	r2, #0
 800df78:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800df7a:	f247 5030 	movw	r0, #30000	; 0x7530
 800df7e:	f7ff ff33 	bl	800dde8 <SD_CheckStatusWithTimeout>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	da01      	bge.n	800df8c <SD_write+0x2c>
  {
    return res;
 800df88:	7dfb      	ldrb	r3, [r7, #23]
 800df8a:	e038      	b.n	800dffe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	6879      	ldr	r1, [r7, #4]
 800df90:	68b8      	ldr	r0, [r7, #8]
 800df92:	f7ff fea3 	bl	800dcdc <BSP_SD_WriteBlocks_DMA>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d12f      	bne.n	800dffc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800df9c:	f7f8 fb7e 	bl	800669c <HAL_GetTick>
 800dfa0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dfa2:	bf00      	nop
 800dfa4:	4b18      	ldr	r3, [pc, #96]	; (800e008 <SD_write+0xa8>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d108      	bne.n	800dfbe <SD_write+0x5e>
 800dfac:	f7f8 fb76 	bl	800669c <HAL_GetTick>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	f247 522f 	movw	r2, #29999	; 0x752f
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d9f2      	bls.n	800dfa4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800dfbe:	4b12      	ldr	r3, [pc, #72]	; (800e008 <SD_write+0xa8>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d102      	bne.n	800dfcc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	75fb      	strb	r3, [r7, #23]
 800dfca:	e017      	b.n	800dffc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800dfcc:	4b0e      	ldr	r3, [pc, #56]	; (800e008 <SD_write+0xa8>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dfd2:	f7f8 fb63 	bl	800669c <HAL_GetTick>
 800dfd6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dfd8:	e007      	b.n	800dfea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dfda:	f7ff fe99 	bl	800dd10 <BSP_SD_GetCardState>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d102      	bne.n	800dfea <SD_write+0x8a>
          {
            res = RES_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	75fb      	strb	r3, [r7, #23]
            break;
 800dfe8:	e008      	b.n	800dffc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dfea:	f7f8 fb57 	bl	800669c <HAL_GetTick>
 800dfee:	4602      	mov	r2, r0
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	1ad3      	subs	r3, r2, r3
 800dff4:	f247 522f 	movw	r2, #29999	; 0x752f
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d9ee      	bls.n	800dfda <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800dffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20000de8 	.word	0x20000de8

0800e00c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08c      	sub	sp, #48	; 0x30
 800e010:	af00      	add	r7, sp, #0
 800e012:	4603      	mov	r3, r0
 800e014:	603a      	str	r2, [r7, #0]
 800e016:	71fb      	strb	r3, [r7, #7]
 800e018:	460b      	mov	r3, r1
 800e01a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e022:	4b25      	ldr	r3, [pc, #148]	; (800e0b8 <SD_ioctl+0xac>)
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d001      	beq.n	800e034 <SD_ioctl+0x28>
 800e030:	2303      	movs	r3, #3
 800e032:	e03c      	b.n	800e0ae <SD_ioctl+0xa2>

  switch (cmd)
 800e034:	79bb      	ldrb	r3, [r7, #6]
 800e036:	2b03      	cmp	r3, #3
 800e038:	d834      	bhi.n	800e0a4 <SD_ioctl+0x98>
 800e03a:	a201      	add	r2, pc, #4	; (adr r2, 800e040 <SD_ioctl+0x34>)
 800e03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e040:	0800e051 	.word	0x0800e051
 800e044:	0800e059 	.word	0x0800e059
 800e048:	0800e071 	.word	0x0800e071
 800e04c:	0800e08b 	.word	0x0800e08b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e056:	e028      	b.n	800e0aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e058:	f107 030c 	add.w	r3, r7, #12
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff fe67 	bl	800dd30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e06e:	e01c      	b.n	800e0aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e070:	f107 030c 	add.w	r3, r7, #12
 800e074:	4618      	mov	r0, r3
 800e076:	f7ff fe5b 	bl	800dd30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e082:	2300      	movs	r3, #0
 800e084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e088:	e00f      	b.n	800e0aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e08a:	f107 030c 	add.w	r3, r7, #12
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff fe4e 	bl	800dd30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	0a5a      	lsrs	r2, r3, #9
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0a2:	e002      	b.n	800e0aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e0a4:	2304      	movs	r3, #4
 800e0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e0aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3730      	adds	r7, #48	; 0x30
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	20000021 	.word	0x20000021

0800e0bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e0c0:	4b03      	ldr	r3, [pc, #12]	; (800e0d0 <BSP_SD_WriteCpltCallback+0x14>)
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	601a      	str	r2, [r3, #0]
}
 800e0c6:	bf00      	nop
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr
 800e0d0:	20000de8 	.word	0x20000de8

0800e0d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e0d8:	4b03      	ldr	r3, [pc, #12]	; (800e0e8 <BSP_SD_ReadCpltCallback+0x14>)
 800e0da:	2201      	movs	r2, #1
 800e0dc:	601a      	str	r2, [r3, #0]
}
 800e0de:	bf00      	nop
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	20000dec 	.word	0x20000dec

0800e0ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	4a08      	ldr	r2, [pc, #32]	; (800e11c <disk_status+0x30>)
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	4413      	add	r3, r2
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	79fa      	ldrb	r2, [r7, #7]
 800e104:	4905      	ldr	r1, [pc, #20]	; (800e11c <disk_status+0x30>)
 800e106:	440a      	add	r2, r1
 800e108:	7a12      	ldrb	r2, [r2, #8]
 800e10a:	4610      	mov	r0, r2
 800e10c:	4798      	blx	r3
 800e10e:	4603      	mov	r3, r0
 800e110:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e112:	7bfb      	ldrb	r3, [r7, #15]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	20000e18 	.word	0x20000e18

0800e120 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	4603      	mov	r3, r0
 800e128:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e12a:	2300      	movs	r3, #0
 800e12c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e12e:	79fb      	ldrb	r3, [r7, #7]
 800e130:	4a0d      	ldr	r2, [pc, #52]	; (800e168 <disk_initialize+0x48>)
 800e132:	5cd3      	ldrb	r3, [r2, r3]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d111      	bne.n	800e15c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e138:	79fb      	ldrb	r3, [r7, #7]
 800e13a:	4a0b      	ldr	r2, [pc, #44]	; (800e168 <disk_initialize+0x48>)
 800e13c:	2101      	movs	r1, #1
 800e13e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e140:	79fb      	ldrb	r3, [r7, #7]
 800e142:	4a09      	ldr	r2, [pc, #36]	; (800e168 <disk_initialize+0x48>)
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4413      	add	r3, r2
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	79fa      	ldrb	r2, [r7, #7]
 800e14e:	4906      	ldr	r1, [pc, #24]	; (800e168 <disk_initialize+0x48>)
 800e150:	440a      	add	r2, r1
 800e152:	7a12      	ldrb	r2, [r2, #8]
 800e154:	4610      	mov	r0, r2
 800e156:	4798      	blx	r3
 800e158:	4603      	mov	r3, r0
 800e15a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	20000e18 	.word	0x20000e18

0800e16c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e16c:	b590      	push	{r4, r7, lr}
 800e16e:	b087      	sub	sp, #28
 800e170:	af00      	add	r7, sp, #0
 800e172:	60b9      	str	r1, [r7, #8]
 800e174:	607a      	str	r2, [r7, #4]
 800e176:	603b      	str	r3, [r7, #0]
 800e178:	4603      	mov	r3, r0
 800e17a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e17c:	7bfb      	ldrb	r3, [r7, #15]
 800e17e:	4a0a      	ldr	r2, [pc, #40]	; (800e1a8 <disk_read+0x3c>)
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4413      	add	r3, r2
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	689c      	ldr	r4, [r3, #8]
 800e188:	7bfb      	ldrb	r3, [r7, #15]
 800e18a:	4a07      	ldr	r2, [pc, #28]	; (800e1a8 <disk_read+0x3c>)
 800e18c:	4413      	add	r3, r2
 800e18e:	7a18      	ldrb	r0, [r3, #8]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	68b9      	ldr	r1, [r7, #8]
 800e196:	47a0      	blx	r4
 800e198:	4603      	mov	r3, r0
 800e19a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	371c      	adds	r7, #28
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd90      	pop	{r4, r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	20000e18 	.word	0x20000e18

0800e1ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e1ac:	b590      	push	{r4, r7, lr}
 800e1ae:	b087      	sub	sp, #28
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60b9      	str	r1, [r7, #8]
 800e1b4:	607a      	str	r2, [r7, #4]
 800e1b6:	603b      	str	r3, [r7, #0]
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e1bc:	7bfb      	ldrb	r3, [r7, #15]
 800e1be:	4a0a      	ldr	r2, [pc, #40]	; (800e1e8 <disk_write+0x3c>)
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	68dc      	ldr	r4, [r3, #12]
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ca:	4a07      	ldr	r2, [pc, #28]	; (800e1e8 <disk_write+0x3c>)
 800e1cc:	4413      	add	r3, r2
 800e1ce:	7a18      	ldrb	r0, [r3, #8]
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	68b9      	ldr	r1, [r7, #8]
 800e1d6:	47a0      	blx	r4
 800e1d8:	4603      	mov	r3, r0
 800e1da:	75fb      	strb	r3, [r7, #23]
  return res;
 800e1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	371c      	adds	r7, #28
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd90      	pop	{r4, r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20000e18 	.word	0x20000e18

0800e1ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	603a      	str	r2, [r7, #0]
 800e1f6:	71fb      	strb	r3, [r7, #7]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	4a09      	ldr	r2, [pc, #36]	; (800e224 <disk_ioctl+0x38>)
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	79fa      	ldrb	r2, [r7, #7]
 800e20a:	4906      	ldr	r1, [pc, #24]	; (800e224 <disk_ioctl+0x38>)
 800e20c:	440a      	add	r2, r1
 800e20e:	7a10      	ldrb	r0, [r2, #8]
 800e210:	79b9      	ldrb	r1, [r7, #6]
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	4798      	blx	r3
 800e216:	4603      	mov	r3, r0
 800e218:	73fb      	strb	r3, [r7, #15]
  return res;
 800e21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	20000e18 	.word	0x20000e18

0800e228 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3301      	adds	r3, #1
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e238:	89fb      	ldrh	r3, [r7, #14]
 800e23a:	021b      	lsls	r3, r3, #8
 800e23c:	b21a      	sxth	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	b21b      	sxth	r3, r3
 800e244:	4313      	orrs	r3, r2
 800e246:	b21b      	sxth	r3, r3
 800e248:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e24a:	89fb      	ldrh	r3, [r7, #14]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3714      	adds	r7, #20
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3303      	adds	r3, #3
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	021b      	lsls	r3, r3, #8
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	3202      	adds	r2, #2
 800e270:	7812      	ldrb	r2, [r2, #0]
 800e272:	4313      	orrs	r3, r2
 800e274:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	021b      	lsls	r3, r3, #8
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	3201      	adds	r2, #1
 800e27e:	7812      	ldrb	r2, [r2, #0]
 800e280:	4313      	orrs	r3, r2
 800e282:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	021b      	lsls	r3, r3, #8
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	7812      	ldrb	r2, [r2, #0]
 800e28c:	4313      	orrs	r3, r2
 800e28e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e290:	68fb      	ldr	r3, [r7, #12]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3714      	adds	r7, #20
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e29e:	b480      	push	{r7}
 800e2a0:	b083      	sub	sp, #12
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	607a      	str	r2, [r7, #4]
 800e2b0:	887a      	ldrh	r2, [r7, #2]
 800e2b2:	b2d2      	uxtb	r2, r2
 800e2b4:	701a      	strb	r2, [r3, #0]
 800e2b6:	887b      	ldrh	r3, [r7, #2]
 800e2b8:	0a1b      	lsrs	r3, r3, #8
 800e2ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	607a      	str	r2, [r7, #4]
 800e2c2:	887a      	ldrh	r2, [r7, #2]
 800e2c4:	b2d2      	uxtb	r2, r2
 800e2c6:	701a      	strb	r2, [r3, #0]
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	1c5a      	adds	r2, r3, #1
 800e2e2:	607a      	str	r2, [r7, #4]
 800e2e4:	683a      	ldr	r2, [r7, #0]
 800e2e6:	b2d2      	uxtb	r2, r2
 800e2e8:	701a      	strb	r2, [r3, #0]
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	0a1b      	lsrs	r3, r3, #8
 800e2ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	607a      	str	r2, [r7, #4]
 800e2f6:	683a      	ldr	r2, [r7, #0]
 800e2f8:	b2d2      	uxtb	r2, r2
 800e2fa:	701a      	strb	r2, [r3, #0]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	0a1b      	lsrs	r3, r3, #8
 800e300:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	1c5a      	adds	r2, r3, #1
 800e306:	607a      	str	r2, [r7, #4]
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	b2d2      	uxtb	r2, r2
 800e30c:	701a      	strb	r2, [r3, #0]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	0a1b      	lsrs	r3, r3, #8
 800e312:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	1c5a      	adds	r2, r3, #1
 800e318:	607a      	str	r2, [r7, #4]
 800e31a:	683a      	ldr	r2, [r7, #0]
 800e31c:	b2d2      	uxtb	r2, r2
 800e31e:	701a      	strb	r2, [r3, #0]
}
 800e320:	bf00      	nop
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e32c:	b480      	push	{r7}
 800e32e:	b087      	sub	sp, #28
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00d      	beq.n	800e362 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	1c53      	adds	r3, r2, #1
 800e34a:	613b      	str	r3, [r7, #16]
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	1c59      	adds	r1, r3, #1
 800e350:	6179      	str	r1, [r7, #20]
 800e352:	7812      	ldrb	r2, [r2, #0]
 800e354:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3b01      	subs	r3, #1
 800e35a:	607b      	str	r3, [r7, #4]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1f1      	bne.n	800e346 <mem_cpy+0x1a>
	}
}
 800e362:	bf00      	nop
 800e364:	371c      	adds	r7, #28
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e36e:	b480      	push	{r7}
 800e370:	b087      	sub	sp, #28
 800e372:	af00      	add	r7, sp, #0
 800e374:	60f8      	str	r0, [r7, #12]
 800e376:	60b9      	str	r1, [r7, #8]
 800e378:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	617a      	str	r2, [r7, #20]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	b2d2      	uxtb	r2, r2
 800e388:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	607b      	str	r3, [r7, #4]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1f3      	bne.n	800e37e <mem_set+0x10>
}
 800e396:	bf00      	nop
 800e398:	bf00      	nop
 800e39a:	371c      	adds	r7, #28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e3a4:	b480      	push	{r7}
 800e3a6:	b089      	sub	sp, #36	; 0x24
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	61fb      	str	r3, [r7, #28]
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	1c5a      	adds	r2, r3, #1
 800e3c0:	61fa      	str	r2, [r7, #28]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	1c5a      	adds	r2, r3, #1
 800e3ca:	61ba      	str	r2, [r7, #24]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	1acb      	subs	r3, r1, r3
 800e3d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	607b      	str	r3, [r7, #4]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d002      	beq.n	800e3e4 <mem_cmp+0x40>
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d0eb      	beq.n	800e3bc <mem_cmp+0x18>

	return r;
 800e3e4:	697b      	ldr	r3, [r7, #20]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3724      	adds	r7, #36	; 0x24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e3f2:	b480      	push	{r7}
 800e3f4:	b083      	sub	sp, #12
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e3fc:	e002      	b.n	800e404 <chk_chr+0x12>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	3301      	adds	r3, #1
 800e402:	607b      	str	r3, [r7, #4]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d005      	beq.n	800e418 <chk_chr+0x26>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	461a      	mov	r2, r3
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	4293      	cmp	r3, r2
 800e416:	d1f2      	bne.n	800e3fe <chk_chr+0xc>
	return *str;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	781b      	ldrb	r3, [r3, #0]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	370c      	adds	r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e432:	2300      	movs	r3, #0
 800e434:	60bb      	str	r3, [r7, #8]
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	60fb      	str	r3, [r7, #12]
 800e43a:	e029      	b.n	800e490 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e43c:	4a27      	ldr	r2, [pc, #156]	; (800e4dc <chk_lock+0xb4>)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	011b      	lsls	r3, r3, #4
 800e442:	4413      	add	r3, r2
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d01d      	beq.n	800e486 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e44a:	4a24      	ldr	r2, [pc, #144]	; (800e4dc <chk_lock+0xb4>)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	011b      	lsls	r3, r3, #4
 800e450:	4413      	add	r3, r2
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d116      	bne.n	800e48a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e45c:	4a1f      	ldr	r2, [pc, #124]	; (800e4dc <chk_lock+0xb4>)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	011b      	lsls	r3, r3, #4
 800e462:	4413      	add	r3, r2
 800e464:	3304      	adds	r3, #4
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d10c      	bne.n	800e48a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e470:	4a1a      	ldr	r2, [pc, #104]	; (800e4dc <chk_lock+0xb4>)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	011b      	lsls	r3, r3, #4
 800e476:	4413      	add	r3, r2
 800e478:	3308      	adds	r3, #8
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e480:	429a      	cmp	r2, r3
 800e482:	d102      	bne.n	800e48a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e484:	e007      	b.n	800e496 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e486:	2301      	movs	r3, #1
 800e488:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3301      	adds	r3, #1
 800e48e:	60fb      	str	r3, [r7, #12]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b01      	cmp	r3, #1
 800e494:	d9d2      	bls.n	800e43c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2b02      	cmp	r3, #2
 800e49a:	d109      	bne.n	800e4b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d102      	bne.n	800e4a8 <chk_lock+0x80>
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d101      	bne.n	800e4ac <chk_lock+0x84>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e010      	b.n	800e4ce <chk_lock+0xa6>
 800e4ac:	2312      	movs	r3, #18
 800e4ae:	e00e      	b.n	800e4ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d108      	bne.n	800e4c8 <chk_lock+0xa0>
 800e4b6:	4a09      	ldr	r2, [pc, #36]	; (800e4dc <chk_lock+0xb4>)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	011b      	lsls	r3, r3, #4
 800e4bc:	4413      	add	r3, r2
 800e4be:	330c      	adds	r3, #12
 800e4c0:	881b      	ldrh	r3, [r3, #0]
 800e4c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4c6:	d101      	bne.n	800e4cc <chk_lock+0xa4>
 800e4c8:	2310      	movs	r3, #16
 800e4ca:	e000      	b.n	800e4ce <chk_lock+0xa6>
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3714      	adds	r7, #20
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	20000df8 	.word	0x20000df8

0800e4e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	607b      	str	r3, [r7, #4]
 800e4ea:	e002      	b.n	800e4f2 <enq_lock+0x12>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	607b      	str	r3, [r7, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d806      	bhi.n	800e506 <enq_lock+0x26>
 800e4f8:	4a09      	ldr	r2, [pc, #36]	; (800e520 <enq_lock+0x40>)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	011b      	lsls	r3, r3, #4
 800e4fe:	4413      	add	r3, r2
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1f2      	bne.n	800e4ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b02      	cmp	r3, #2
 800e50a:	bf14      	ite	ne
 800e50c:	2301      	movne	r3, #1
 800e50e:	2300      	moveq	r3, #0
 800e510:	b2db      	uxtb	r3, r3
}
 800e512:	4618      	mov	r0, r3
 800e514:	370c      	adds	r7, #12
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	20000df8 	.word	0x20000df8

0800e524 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e524:	b480      	push	{r7}
 800e526:	b085      	sub	sp, #20
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e52e:	2300      	movs	r3, #0
 800e530:	60fb      	str	r3, [r7, #12]
 800e532:	e01f      	b.n	800e574 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e534:	4a41      	ldr	r2, [pc, #260]	; (800e63c <inc_lock+0x118>)
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	011b      	lsls	r3, r3, #4
 800e53a:	4413      	add	r3, r2
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d113      	bne.n	800e56e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e546:	4a3d      	ldr	r2, [pc, #244]	; (800e63c <inc_lock+0x118>)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	011b      	lsls	r3, r3, #4
 800e54c:	4413      	add	r3, r2
 800e54e:	3304      	adds	r3, #4
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e556:	429a      	cmp	r2, r3
 800e558:	d109      	bne.n	800e56e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e55a:	4a38      	ldr	r2, [pc, #224]	; (800e63c <inc_lock+0x118>)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	011b      	lsls	r3, r3, #4
 800e560:	4413      	add	r3, r2
 800e562:	3308      	adds	r3, #8
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d006      	beq.n	800e57c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	3301      	adds	r3, #1
 800e572:	60fb      	str	r3, [r7, #12]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d9dc      	bls.n	800e534 <inc_lock+0x10>
 800e57a:	e000      	b.n	800e57e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e57c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d132      	bne.n	800e5ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e584:	2300      	movs	r3, #0
 800e586:	60fb      	str	r3, [r7, #12]
 800e588:	e002      	b.n	800e590 <inc_lock+0x6c>
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	3301      	adds	r3, #1
 800e58e:	60fb      	str	r3, [r7, #12]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d806      	bhi.n	800e5a4 <inc_lock+0x80>
 800e596:	4a29      	ldr	r2, [pc, #164]	; (800e63c <inc_lock+0x118>)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	011b      	lsls	r3, r3, #4
 800e59c:	4413      	add	r3, r2
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1f2      	bne.n	800e58a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d101      	bne.n	800e5ae <inc_lock+0x8a>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e040      	b.n	800e630 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	4922      	ldr	r1, [pc, #136]	; (800e63c <inc_lock+0x118>)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	011b      	lsls	r3, r3, #4
 800e5b8:	440b      	add	r3, r1
 800e5ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	689a      	ldr	r2, [r3, #8]
 800e5c0:	491e      	ldr	r1, [pc, #120]	; (800e63c <inc_lock+0x118>)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	011b      	lsls	r3, r3, #4
 800e5c6:	440b      	add	r3, r1
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	695a      	ldr	r2, [r3, #20]
 800e5d0:	491a      	ldr	r1, [pc, #104]	; (800e63c <inc_lock+0x118>)
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	011b      	lsls	r3, r3, #4
 800e5d6:	440b      	add	r3, r1
 800e5d8:	3308      	adds	r3, #8
 800e5da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e5dc:	4a17      	ldr	r2, [pc, #92]	; (800e63c <inc_lock+0x118>)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	011b      	lsls	r3, r3, #4
 800e5e2:	4413      	add	r3, r2
 800e5e4:	330c      	adds	r3, #12
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d009      	beq.n	800e604 <inc_lock+0xe0>
 800e5f0:	4a12      	ldr	r2, [pc, #72]	; (800e63c <inc_lock+0x118>)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	011b      	lsls	r3, r3, #4
 800e5f6:	4413      	add	r3, r2
 800e5f8:	330c      	adds	r3, #12
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <inc_lock+0xe0>
 800e600:	2300      	movs	r3, #0
 800e602:	e015      	b.n	800e630 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d108      	bne.n	800e61c <inc_lock+0xf8>
 800e60a:	4a0c      	ldr	r2, [pc, #48]	; (800e63c <inc_lock+0x118>)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	011b      	lsls	r3, r3, #4
 800e610:	4413      	add	r3, r2
 800e612:	330c      	adds	r3, #12
 800e614:	881b      	ldrh	r3, [r3, #0]
 800e616:	3301      	adds	r3, #1
 800e618:	b29a      	uxth	r2, r3
 800e61a:	e001      	b.n	800e620 <inc_lock+0xfc>
 800e61c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e620:	4906      	ldr	r1, [pc, #24]	; (800e63c <inc_lock+0x118>)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	011b      	lsls	r3, r3, #4
 800e626:	440b      	add	r3, r1
 800e628:	330c      	adds	r3, #12
 800e62a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	3301      	adds	r3, #1
}
 800e630:	4618      	mov	r0, r3
 800e632:	3714      	adds	r7, #20
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr
 800e63c:	20000df8 	.word	0x20000df8

0800e640 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	3b01      	subs	r3, #1
 800e64c:	607b      	str	r3, [r7, #4]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d825      	bhi.n	800e6a0 <dec_lock+0x60>
		n = Files[i].ctr;
 800e654:	4a17      	ldr	r2, [pc, #92]	; (800e6b4 <dec_lock+0x74>)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	011b      	lsls	r3, r3, #4
 800e65a:	4413      	add	r3, r2
 800e65c:	330c      	adds	r3, #12
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e662:	89fb      	ldrh	r3, [r7, #14]
 800e664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e668:	d101      	bne.n	800e66e <dec_lock+0x2e>
 800e66a:	2300      	movs	r3, #0
 800e66c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e66e:	89fb      	ldrh	r3, [r7, #14]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <dec_lock+0x3a>
 800e674:	89fb      	ldrh	r3, [r7, #14]
 800e676:	3b01      	subs	r3, #1
 800e678:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e67a:	4a0e      	ldr	r2, [pc, #56]	; (800e6b4 <dec_lock+0x74>)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	011b      	lsls	r3, r3, #4
 800e680:	4413      	add	r3, r2
 800e682:	330c      	adds	r3, #12
 800e684:	89fa      	ldrh	r2, [r7, #14]
 800e686:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e688:	89fb      	ldrh	r3, [r7, #14]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <dec_lock+0x5a>
 800e68e:	4a09      	ldr	r2, [pc, #36]	; (800e6b4 <dec_lock+0x74>)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	011b      	lsls	r3, r3, #4
 800e694:	4413      	add	r3, r2
 800e696:	2200      	movs	r2, #0
 800e698:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	737b      	strb	r3, [r7, #13]
 800e69e:	e001      	b.n	800e6a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e6a4:	7b7b      	ldrb	r3, [r7, #13]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3714      	adds	r7, #20
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	20000df8 	.word	0x20000df8

0800e6b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60fb      	str	r3, [r7, #12]
 800e6c4:	e010      	b.n	800e6e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e6c6:	4a0d      	ldr	r2, [pc, #52]	; (800e6fc <clear_lock+0x44>)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	011b      	lsls	r3, r3, #4
 800e6cc:	4413      	add	r3, r2
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d105      	bne.n	800e6e2 <clear_lock+0x2a>
 800e6d6:	4a09      	ldr	r2, [pc, #36]	; (800e6fc <clear_lock+0x44>)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	011b      	lsls	r3, r3, #4
 800e6dc:	4413      	add	r3, r2
 800e6de:	2200      	movs	r2, #0
 800e6e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	60fb      	str	r3, [r7, #12]
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d9eb      	bls.n	800e6c6 <clear_lock+0xe>
	}
}
 800e6ee:	bf00      	nop
 800e6f0:	bf00      	nop
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	20000df8 	.word	0x20000df8

0800e700 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	78db      	ldrb	r3, [r3, #3]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d034      	beq.n	800e77e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e718:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	7858      	ldrb	r0, [r3, #1]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e724:	2301      	movs	r3, #1
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	f7ff fd40 	bl	800e1ac <disk_write>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d002      	beq.n	800e738 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e732:	2301      	movs	r3, #1
 800e734:	73fb      	strb	r3, [r7, #15]
 800e736:	e022      	b.n	800e77e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a1b      	ldr	r3, [r3, #32]
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	1ad2      	subs	r2, r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	699b      	ldr	r3, [r3, #24]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d217      	bcs.n	800e77e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	789b      	ldrb	r3, [r3, #2]
 800e752:	613b      	str	r3, [r7, #16]
 800e754:	e010      	b.n	800e778 <sync_window+0x78>
					wsect += fs->fsize;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	697a      	ldr	r2, [r7, #20]
 800e75c:	4413      	add	r3, r2
 800e75e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7858      	ldrb	r0, [r3, #1]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e76a:	2301      	movs	r3, #1
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	f7ff fd1d 	bl	800e1ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	3b01      	subs	r3, #1
 800e776:	613b      	str	r3, [r7, #16]
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d8eb      	bhi.n	800e756 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3718      	adds	r7, #24
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e792:	2300      	movs	r3, #0
 800e794:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79a:	683a      	ldr	r2, [r7, #0]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d01b      	beq.n	800e7d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7ff ffad 	bl	800e700 <sync_window>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d113      	bne.n	800e7d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	7858      	ldrb	r0, [r3, #1]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	f7ff fcd5 	bl	800e16c <disk_read>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d004      	beq.n	800e7d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	683a      	ldr	r2, [r7, #0]
 800e7d6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800e7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
	...

0800e7e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7ff ff87 	bl	800e700 <sync_window>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d158      	bne.n	800e8ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	2b03      	cmp	r3, #3
 800e802:	d148      	bne.n	800e896 <sync_fs+0xb2>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	791b      	ldrb	r3, [r3, #4]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d144      	bne.n	800e896 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3330      	adds	r3, #48	; 0x30
 800e810:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e814:	2100      	movs	r1, #0
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff fda9 	bl	800e36e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	3330      	adds	r3, #48	; 0x30
 800e820:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e824:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e828:	4618      	mov	r0, r3
 800e82a:	f7ff fd38 	bl	800e29e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	3330      	adds	r3, #48	; 0x30
 800e832:	4921      	ldr	r1, [pc, #132]	; (800e8b8 <sync_fs+0xd4>)
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fd4d 	bl	800e2d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	3330      	adds	r3, #48	; 0x30
 800e83e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e842:	491e      	ldr	r1, [pc, #120]	; (800e8bc <sync_fs+0xd8>)
 800e844:	4618      	mov	r0, r3
 800e846:	f7ff fd45 	bl	800e2d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3330      	adds	r3, #48	; 0x30
 800e84e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	4619      	mov	r1, r3
 800e858:	4610      	mov	r0, r2
 800e85a:	f7ff fd3b 	bl	800e2d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3330      	adds	r3, #48	; 0x30
 800e862:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f7ff fd31 	bl	800e2d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	1c5a      	adds	r2, r3, #1
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	7858      	ldrb	r0, [r3, #1]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e88a:	2301      	movs	r3, #1
 800e88c:	f7ff fc8e 	bl	800e1ac <disk_write>
			fs->fsi_flag = 0;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	785b      	ldrb	r3, [r3, #1]
 800e89a:	2200      	movs	r2, #0
 800e89c:	2100      	movs	r1, #0
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7ff fca4 	bl	800e1ec <disk_ioctl>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <sync_fs+0xca>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	41615252 	.word	0x41615252
 800e8bc:	61417272 	.word	0x61417272

0800e8c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	3b02      	subs	r3, #2
 800e8ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	695b      	ldr	r3, [r3, #20]
 800e8d4:	3b02      	subs	r3, #2
 800e8d6:	683a      	ldr	r2, [r7, #0]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d301      	bcc.n	800e8e0 <clust2sect+0x20>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	e008      	b.n	800e8f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	895b      	ldrh	r3, [r3, #10]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	fb03 f202 	mul.w	r2, r3, r2
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8f0:	4413      	add	r3, r2
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b086      	sub	sp, #24
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
 800e906:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d904      	bls.n	800e91e <get_fat+0x20>
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	683a      	ldr	r2, [r7, #0]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d302      	bcc.n	800e924 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e91e:	2301      	movs	r3, #1
 800e920:	617b      	str	r3, [r7, #20]
 800e922:	e08f      	b.n	800ea44 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e924:	f04f 33ff 	mov.w	r3, #4294967295
 800e928:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	2b03      	cmp	r3, #3
 800e930:	d062      	beq.n	800e9f8 <get_fat+0xfa>
 800e932:	2b03      	cmp	r3, #3
 800e934:	dc7c      	bgt.n	800ea30 <get_fat+0x132>
 800e936:	2b01      	cmp	r3, #1
 800e938:	d002      	beq.n	800e940 <get_fat+0x42>
 800e93a:	2b02      	cmp	r3, #2
 800e93c:	d042      	beq.n	800e9c4 <get_fat+0xc6>
 800e93e:	e077      	b.n	800ea30 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	60fb      	str	r3, [r7, #12]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	085b      	lsrs	r3, r3, #1
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	4413      	add	r3, r2
 800e94c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	6a1a      	ldr	r2, [r3, #32]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	0a5b      	lsrs	r3, r3, #9
 800e956:	4413      	add	r3, r2
 800e958:	4619      	mov	r1, r3
 800e95a:	6938      	ldr	r0, [r7, #16]
 800e95c:	f7ff ff14 	bl	800e788 <move_window>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d167      	bne.n	800ea36 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	1c5a      	adds	r2, r3, #1
 800e96a:	60fa      	str	r2, [r7, #12]
 800e96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e970:	693a      	ldr	r2, [r7, #16]
 800e972:	4413      	add	r3, r2
 800e974:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e978:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	6a1a      	ldr	r2, [r3, #32]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	0a5b      	lsrs	r3, r3, #9
 800e982:	4413      	add	r3, r2
 800e984:	4619      	mov	r1, r3
 800e986:	6938      	ldr	r0, [r7, #16]
 800e988:	f7ff fefe 	bl	800e788 <move_window>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d153      	bne.n	800ea3a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e998:	693a      	ldr	r2, [r7, #16]
 800e99a:	4413      	add	r3, r2
 800e99c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9a0:	021b      	lsls	r3, r3, #8
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	f003 0301 	and.w	r3, r3, #1
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <get_fat+0xbc>
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	091b      	lsrs	r3, r3, #4
 800e9b8:	e002      	b.n	800e9c0 <get_fat+0xc2>
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e9c0:	617b      	str	r3, [r7, #20]
			break;
 800e9c2:	e03f      	b.n	800ea44 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	6a1a      	ldr	r2, [r3, #32]
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	0a1b      	lsrs	r3, r3, #8
 800e9cc:	4413      	add	r3, r2
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	6938      	ldr	r0, [r7, #16]
 800e9d2:	f7ff fed9 	bl	800e788 <move_window>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d130      	bne.n	800ea3e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e9ea:	4413      	add	r3, r2
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7ff fc1b 	bl	800e228 <ld_word>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	617b      	str	r3, [r7, #20]
			break;
 800e9f6:	e025      	b.n	800ea44 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	6a1a      	ldr	r2, [r3, #32]
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	09db      	lsrs	r3, r3, #7
 800ea00:	4413      	add	r3, r2
 800ea02:	4619      	mov	r1, r3
 800ea04:	6938      	ldr	r0, [r7, #16]
 800ea06:	f7ff febf 	bl	800e788 <move_window>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d118      	bne.n	800ea42 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ea1e:	4413      	add	r3, r2
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff fc19 	bl	800e258 <ld_dword>
 800ea26:	4603      	mov	r3, r0
 800ea28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ea2c:	617b      	str	r3, [r7, #20]
			break;
 800ea2e:	e009      	b.n	800ea44 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ea30:	2301      	movs	r3, #1
 800ea32:	617b      	str	r3, [r7, #20]
 800ea34:	e006      	b.n	800ea44 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea36:	bf00      	nop
 800ea38:	e004      	b.n	800ea44 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea3a:	bf00      	nop
 800ea3c:	e002      	b.n	800ea44 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ea3e:	bf00      	nop
 800ea40:	e000      	b.n	800ea44 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ea42:	bf00      	nop
		}
	}

	return val;
 800ea44:	697b      	ldr	r3, [r7, #20]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3718      	adds	r7, #24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ea4e:	b590      	push	{r4, r7, lr}
 800ea50:	b089      	sub	sp, #36	; 0x24
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	60f8      	str	r0, [r7, #12]
 800ea56:	60b9      	str	r1, [r7, #8]
 800ea58:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ea5a:	2302      	movs	r3, #2
 800ea5c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	f240 80d9 	bls.w	800ec18 <put_fat+0x1ca>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	695b      	ldr	r3, [r3, #20]
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	f080 80d3 	bcs.w	800ec18 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	f000 8096 	beq.w	800eba8 <put_fat+0x15a>
 800ea7c:	2b03      	cmp	r3, #3
 800ea7e:	f300 80cb 	bgt.w	800ec18 <put_fat+0x1ca>
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d002      	beq.n	800ea8c <put_fat+0x3e>
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d06e      	beq.n	800eb68 <put_fat+0x11a>
 800ea8a:	e0c5      	b.n	800ec18 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	61bb      	str	r3, [r7, #24]
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	085b      	lsrs	r3, r3, #1
 800ea94:	69ba      	ldr	r2, [r7, #24]
 800ea96:	4413      	add	r3, r2
 800ea98:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6a1a      	ldr	r2, [r3, #32]
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	0a5b      	lsrs	r3, r3, #9
 800eaa2:	4413      	add	r3, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	68f8      	ldr	r0, [r7, #12]
 800eaa8:	f7ff fe6e 	bl	800e788 <move_window>
 800eaac:	4603      	mov	r3, r0
 800eaae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eab0:	7ffb      	ldrb	r3, [r7, #31]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f040 80a9 	bne.w	800ec0a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	1c59      	adds	r1, r3, #1
 800eac2:	61b9      	str	r1, [r7, #24]
 800eac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac8:	4413      	add	r3, r2
 800eaca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d00d      	beq.n	800eaf2 <put_fat+0xa4>
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	b25b      	sxtb	r3, r3
 800eadc:	f003 030f 	and.w	r3, r3, #15
 800eae0:	b25a      	sxtb	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	011b      	lsls	r3, r3, #4
 800eae8:	b25b      	sxtb	r3, r3
 800eaea:	4313      	orrs	r3, r2
 800eaec:	b25b      	sxtb	r3, r3
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	e001      	b.n	800eaf6 <put_fat+0xa8>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	697a      	ldr	r2, [r7, #20]
 800eaf8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2201      	movs	r2, #1
 800eafe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6a1a      	ldr	r2, [r3, #32]
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	0a5b      	lsrs	r3, r3, #9
 800eb08:	4413      	add	r3, r2
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	f7ff fe3b 	bl	800e788 <move_window>
 800eb12:	4603      	mov	r3, r0
 800eb14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb16:	7ffb      	ldrb	r3, [r7, #31]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d178      	bne.n	800ec0e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb28:	4413      	add	r3, r2
 800eb2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	f003 0301 	and.w	r3, r3, #1
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d003      	beq.n	800eb3e <put_fat+0xf0>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	091b      	lsrs	r3, r3, #4
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	e00e      	b.n	800eb5c <put_fat+0x10e>
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	b25b      	sxtb	r3, r3
 800eb44:	f023 030f 	bic.w	r3, r3, #15
 800eb48:	b25a      	sxtb	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	0a1b      	lsrs	r3, r3, #8
 800eb4e:	b25b      	sxtb	r3, r3
 800eb50:	f003 030f 	and.w	r3, r3, #15
 800eb54:	b25b      	sxtb	r3, r3
 800eb56:	4313      	orrs	r3, r2
 800eb58:	b25b      	sxtb	r3, r3
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	697a      	ldr	r2, [r7, #20]
 800eb5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2201      	movs	r2, #1
 800eb64:	70da      	strb	r2, [r3, #3]
			break;
 800eb66:	e057      	b.n	800ec18 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6a1a      	ldr	r2, [r3, #32]
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	0a1b      	lsrs	r3, r3, #8
 800eb70:	4413      	add	r3, r2
 800eb72:	4619      	mov	r1, r3
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f7ff fe07 	bl	800e788 <move_window>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb7e:	7ffb      	ldrb	r3, [r7, #31]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d146      	bne.n	800ec12 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	005b      	lsls	r3, r3, #1
 800eb8e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eb92:	4413      	add	r3, r2
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	b292      	uxth	r2, r2
 800eb98:	4611      	mov	r1, r2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7ff fb7f 	bl	800e29e <st_word>
			fs->wflag = 1;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2201      	movs	r2, #1
 800eba4:	70da      	strb	r2, [r3, #3]
			break;
 800eba6:	e037      	b.n	800ec18 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6a1a      	ldr	r2, [r3, #32]
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	09db      	lsrs	r3, r3, #7
 800ebb0:	4413      	add	r3, r2
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f7ff fde7 	bl	800e788 <move_window>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebbe:	7ffb      	ldrb	r3, [r7, #31]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d128      	bne.n	800ec16 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ebd8:	4413      	add	r3, r2
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7ff fb3c 	bl	800e258 <ld_dword>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ebe6:	4323      	orrs	r3, r4
 800ebe8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ebf8:	4413      	add	r3, r2
 800ebfa:	6879      	ldr	r1, [r7, #4]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff fb69 	bl	800e2d4 <st_dword>
			fs->wflag = 1;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2201      	movs	r2, #1
 800ec06:	70da      	strb	r2, [r3, #3]
			break;
 800ec08:	e006      	b.n	800ec18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ec0a:	bf00      	nop
 800ec0c:	e004      	b.n	800ec18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ec0e:	bf00      	nop
 800ec10:	e002      	b.n	800ec18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ec12:	bf00      	nop
 800ec14:	e000      	b.n	800ec18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ec16:	bf00      	nop
		}
	}
	return res;
 800ec18:	7ffb      	ldrb	r3, [r7, #31]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3724      	adds	r7, #36	; 0x24
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd90      	pop	{r4, r7, pc}

0800ec22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b088      	sub	sp, #32
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	60f8      	str	r0, [r7, #12]
 800ec2a:	60b9      	str	r1, [r7, #8]
 800ec2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d904      	bls.n	800ec48 <remove_chain+0x26>
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	68ba      	ldr	r2, [r7, #8]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d301      	bcc.n	800ec4c <remove_chain+0x2a>
 800ec48:	2302      	movs	r3, #2
 800ec4a:	e04b      	b.n	800ece4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00c      	beq.n	800ec6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ec52:	f04f 32ff 	mov.w	r2, #4294967295
 800ec56:	6879      	ldr	r1, [r7, #4]
 800ec58:	69b8      	ldr	r0, [r7, #24]
 800ec5a:	f7ff fef8 	bl	800ea4e <put_fat>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ec62:	7ffb      	ldrb	r3, [r7, #31]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d001      	beq.n	800ec6c <remove_chain+0x4a>
 800ec68:	7ffb      	ldrb	r3, [r7, #31]
 800ec6a:	e03b      	b.n	800ece4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ec6c:	68b9      	ldr	r1, [r7, #8]
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f7ff fe45 	bl	800e8fe <get_fat>
 800ec74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d031      	beq.n	800ece0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d101      	bne.n	800ec86 <remove_chain+0x64>
 800ec82:	2302      	movs	r3, #2
 800ec84:	e02e      	b.n	800ece4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8c:	d101      	bne.n	800ec92 <remove_chain+0x70>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e028      	b.n	800ece4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ec92:	2200      	movs	r2, #0
 800ec94:	68b9      	ldr	r1, [r7, #8]
 800ec96:	69b8      	ldr	r0, [r7, #24]
 800ec98:	f7ff fed9 	bl	800ea4e <put_fat>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eca0:	7ffb      	ldrb	r3, [r7, #31]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <remove_chain+0x88>
 800eca6:	7ffb      	ldrb	r3, [r7, #31]
 800eca8:	e01c      	b.n	800ece4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	691a      	ldr	r2, [r3, #16]
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	695b      	ldr	r3, [r3, #20]
 800ecb2:	3b02      	subs	r3, #2
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d20b      	bcs.n	800ecd0 <remove_chain+0xae>
			fs->free_clst++;
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	691b      	ldr	r3, [r3, #16]
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	791b      	ldrb	r3, [r3, #4]
 800ecc6:	f043 0301 	orr.w	r3, r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	695b      	ldr	r3, [r3, #20]
 800ecd8:	68ba      	ldr	r2, [r7, #8]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d3c6      	bcc.n	800ec6c <remove_chain+0x4a>
 800ecde:	e000      	b.n	800ece2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ece0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3720      	adds	r7, #32
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b088      	sub	sp, #32
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d10d      	bne.n	800ed1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d004      	beq.n	800ed18 <create_chain+0x2c>
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	69ba      	ldr	r2, [r7, #24]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d31b      	bcc.n	800ed50 <create_chain+0x64>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	61bb      	str	r3, [r7, #24]
 800ed1c:	e018      	b.n	800ed50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ed1e:	6839      	ldr	r1, [r7, #0]
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7ff fdec 	bl	800e8fe <get_fat>
 800ed26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d801      	bhi.n	800ed32 <create_chain+0x46>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e070      	b.n	800ee14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed38:	d101      	bne.n	800ed3e <create_chain+0x52>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	e06a      	b.n	800ee14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	695b      	ldr	r3, [r3, #20]
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d201      	bcs.n	800ed4c <create_chain+0x60>
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	e063      	b.n	800ee14 <create_chain+0x128>
		scl = clst;
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	3301      	adds	r3, #1
 800ed58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	69fa      	ldr	r2, [r7, #28]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d307      	bcc.n	800ed74 <create_chain+0x88>
				ncl = 2;
 800ed64:	2302      	movs	r3, #2
 800ed66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ed68:	69fa      	ldr	r2, [r7, #28]
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d901      	bls.n	800ed74 <create_chain+0x88>
 800ed70:	2300      	movs	r3, #0
 800ed72:	e04f      	b.n	800ee14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ed74:	69f9      	ldr	r1, [r7, #28]
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7ff fdc1 	bl	800e8fe <get_fat>
 800ed7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00e      	beq.n	800eda2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d003      	beq.n	800ed92 <create_chain+0xa6>
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed90:	d101      	bne.n	800ed96 <create_chain+0xaa>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	e03e      	b.n	800ee14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ed96:	69fa      	ldr	r2, [r7, #28]
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d1da      	bne.n	800ed54 <create_chain+0x68>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e038      	b.n	800ee14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800eda2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800eda4:	f04f 32ff 	mov.w	r2, #4294967295
 800eda8:	69f9      	ldr	r1, [r7, #28]
 800edaa:	6938      	ldr	r0, [r7, #16]
 800edac:	f7ff fe4f 	bl	800ea4e <put_fat>
 800edb0:	4603      	mov	r3, r0
 800edb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800edb4:	7dfb      	ldrb	r3, [r7, #23]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d109      	bne.n	800edce <create_chain+0xe2>
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d006      	beq.n	800edce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800edc0:	69fa      	ldr	r2, [r7, #28]
 800edc2:	6839      	ldr	r1, [r7, #0]
 800edc4:	6938      	ldr	r0, [r7, #16]
 800edc6:	f7ff fe42 	bl	800ea4e <put_fat>
 800edca:	4603      	mov	r3, r0
 800edcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800edce:	7dfb      	ldrb	r3, [r7, #23]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d116      	bne.n	800ee02 <create_chain+0x116>
		fs->last_clst = ncl;
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	69fa      	ldr	r2, [r7, #28]
 800edd8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	691a      	ldr	r2, [r3, #16]
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	695b      	ldr	r3, [r3, #20]
 800ede2:	3b02      	subs	r3, #2
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d804      	bhi.n	800edf2 <create_chain+0x106>
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	1e5a      	subs	r2, r3, #1
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	791b      	ldrb	r3, [r3, #4]
 800edf6:	f043 0301 	orr.w	r3, r3, #1
 800edfa:	b2da      	uxtb	r2, r3
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	711a      	strb	r2, [r3, #4]
 800ee00:	e007      	b.n	800ee12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ee02:	7dfb      	ldrb	r3, [r7, #23]
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d102      	bne.n	800ee0e <create_chain+0x122>
 800ee08:	f04f 33ff 	mov.w	r3, #4294967295
 800ee0c:	e000      	b.n	800ee10 <create_chain+0x124>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ee12:	69fb      	ldr	r3, [r7, #28]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3720      	adds	r7, #32
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b087      	sub	sp, #28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee30:	3304      	adds	r3, #4
 800ee32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	0a5b      	lsrs	r3, r3, #9
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	8952      	ldrh	r2, [r2, #10]
 800ee3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	1d1a      	adds	r2, r3, #4
 800ee46:	613a      	str	r2, [r7, #16]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d101      	bne.n	800ee56 <clmt_clust+0x3a>
 800ee52:	2300      	movs	r3, #0
 800ee54:	e010      	b.n	800ee78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d307      	bcc.n	800ee6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ee5e:	697a      	ldr	r2, [r7, #20]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	617b      	str	r3, [r7, #20]
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	3304      	adds	r3, #4
 800ee6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ee6c:	e7e9      	b.n	800ee42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ee6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	4413      	add	r3, r2
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	371c      	adds	r7, #28
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee9a:	d204      	bcs.n	800eea6 <dir_sdi+0x22>
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	f003 031f 	and.w	r3, r3, #31
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <dir_sdi+0x26>
		return FR_INT_ERR;
 800eea6:	2302      	movs	r3, #2
 800eea8:	e063      	b.n	800ef72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	683a      	ldr	r2, [r7, #0]
 800eeae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d106      	bne.n	800eeca <dir_sdi+0x46>
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d902      	bls.n	800eeca <dir_sdi+0x46>
		clst = fs->dirbase;
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10c      	bne.n	800eeea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	095b      	lsrs	r3, r3, #5
 800eed4:	693a      	ldr	r2, [r7, #16]
 800eed6:	8912      	ldrh	r2, [r2, #8]
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d301      	bcc.n	800eee0 <dir_sdi+0x5c>
 800eedc:	2302      	movs	r3, #2
 800eede:	e048      	b.n	800ef72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	61da      	str	r2, [r3, #28]
 800eee8:	e029      	b.n	800ef3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	895b      	ldrh	r3, [r3, #10]
 800eeee:	025b      	lsls	r3, r3, #9
 800eef0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eef2:	e019      	b.n	800ef28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6979      	ldr	r1, [r7, #20]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff fd00 	bl	800e8fe <get_fat>
 800eefe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef06:	d101      	bne.n	800ef0c <dir_sdi+0x88>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e032      	b.n	800ef72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d904      	bls.n	800ef1c <dir_sdi+0x98>
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	695b      	ldr	r3, [r3, #20]
 800ef16:	697a      	ldr	r2, [r7, #20]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d301      	bcc.n	800ef20 <dir_sdi+0x9c>
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	e028      	b.n	800ef72 <dir_sdi+0xee>
			ofs -= csz;
 800ef20:	683a      	ldr	r2, [r7, #0]
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	1ad3      	subs	r3, r2, r3
 800ef26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d2e1      	bcs.n	800eef4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ef30:	6979      	ldr	r1, [r7, #20]
 800ef32:	6938      	ldr	r0, [r7, #16]
 800ef34:	f7ff fcc4 	bl	800e8c0 <clust2sect>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	697a      	ldr	r2, [r7, #20]
 800ef42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	69db      	ldr	r3, [r3, #28]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d101      	bne.n	800ef50 <dir_sdi+0xcc>
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	e010      	b.n	800ef72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	69da      	ldr	r2, [r3, #28]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	0a5b      	lsrs	r3, r3, #9
 800ef58:	441a      	add	r2, r3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef6a:	441a      	add	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3718      	adds	r7, #24
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b086      	sub	sp, #24
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
 800ef82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	695b      	ldr	r3, [r3, #20]
 800ef8e:	3320      	adds	r3, #32
 800ef90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	69db      	ldr	r3, [r3, #28]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d003      	beq.n	800efa2 <dir_next+0x28>
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800efa0:	d301      	bcc.n	800efa6 <dir_next+0x2c>
 800efa2:	2304      	movs	r3, #4
 800efa4:	e0aa      	b.n	800f0fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efac:	2b00      	cmp	r3, #0
 800efae:	f040 8098 	bne.w	800f0e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	69db      	ldr	r3, [r3, #28]
 800efb6:	1c5a      	adds	r2, r3, #1
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10b      	bne.n	800efdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	095b      	lsrs	r3, r3, #5
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	8912      	ldrh	r2, [r2, #8]
 800efcc:	4293      	cmp	r3, r2
 800efce:	f0c0 8088 	bcc.w	800f0e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	61da      	str	r2, [r3, #28]
 800efd8:	2304      	movs	r3, #4
 800efda:	e08f      	b.n	800f0fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	0a5b      	lsrs	r3, r3, #9
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	8952      	ldrh	r2, [r2, #10]
 800efe4:	3a01      	subs	r2, #1
 800efe6:	4013      	ands	r3, r2
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d17a      	bne.n	800f0e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	699b      	ldr	r3, [r3, #24]
 800eff2:	4619      	mov	r1, r3
 800eff4:	4610      	mov	r0, r2
 800eff6:	f7ff fc82 	bl	800e8fe <get_fat>
 800effa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d801      	bhi.n	800f006 <dir_next+0x8c>
 800f002:	2302      	movs	r3, #2
 800f004:	e07a      	b.n	800f0fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00c:	d101      	bne.n	800f012 <dir_next+0x98>
 800f00e:	2301      	movs	r3, #1
 800f010:	e074      	b.n	800f0fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	695b      	ldr	r3, [r3, #20]
 800f016:	697a      	ldr	r2, [r7, #20]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d358      	bcc.n	800f0ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d104      	bne.n	800f02c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	61da      	str	r2, [r3, #28]
 800f028:	2304      	movs	r3, #4
 800f02a:	e067      	b.n	800f0fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	4619      	mov	r1, r3
 800f034:	4610      	mov	r0, r2
 800f036:	f7ff fe59 	bl	800ecec <create_chain>
 800f03a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d101      	bne.n	800f046 <dir_next+0xcc>
 800f042:	2307      	movs	r3, #7
 800f044:	e05a      	b.n	800f0fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d101      	bne.n	800f050 <dir_next+0xd6>
 800f04c:	2302      	movs	r3, #2
 800f04e:	e055      	b.n	800f0fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f056:	d101      	bne.n	800f05c <dir_next+0xe2>
 800f058:	2301      	movs	r3, #1
 800f05a:	e04f      	b.n	800f0fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f7ff fb4f 	bl	800e700 <sync_window>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d001      	beq.n	800f06c <dir_next+0xf2>
 800f068:	2301      	movs	r3, #1
 800f06a:	e047      	b.n	800f0fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	3330      	adds	r3, #48	; 0x30
 800f070:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f074:	2100      	movs	r1, #0
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff f979 	bl	800e36e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f07c:	2300      	movs	r3, #0
 800f07e:	613b      	str	r3, [r7, #16]
 800f080:	6979      	ldr	r1, [r7, #20]
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f7ff fc1c 	bl	800e8c0 <clust2sect>
 800f088:	4602      	mov	r2, r0
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	62da      	str	r2, [r3, #44]	; 0x2c
 800f08e:	e012      	b.n	800f0b6 <dir_next+0x13c>
						fs->wflag = 1;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2201      	movs	r2, #1
 800f094:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f7ff fb32 	bl	800e700 <sync_window>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <dir_next+0x12c>
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e02a      	b.n	800f0fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	613b      	str	r3, [r7, #16]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	62da      	str	r2, [r3, #44]	; 0x2c
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	895b      	ldrh	r3, [r3, #10]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d3e6      	bcc.n	800f090 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	1ad2      	subs	r2, r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	697a      	ldr	r2, [r7, #20]
 800f0d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f0d4:	6979      	ldr	r1, [r7, #20]
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f7ff fbf2 	bl	800e8c0 <clust2sect>
 800f0dc:	4602      	mov	r2, r0
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	68ba      	ldr	r2, [r7, #8]
 800f0e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0f4:	441a      	add	r2, r3
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f0fa:	2300      	movs	r3, #0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3718      	adds	r7, #24
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b086      	sub	sp, #24
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f114:	2100      	movs	r1, #0
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7ff feb4 	bl	800ee84 <dir_sdi>
 800f11c:	4603      	mov	r3, r0
 800f11e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f120:	7dfb      	ldrb	r3, [r7, #23]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d12b      	bne.n	800f17e <dir_alloc+0x7a>
		n = 0;
 800f126:	2300      	movs	r3, #0
 800f128:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	69db      	ldr	r3, [r3, #28]
 800f12e:	4619      	mov	r1, r3
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f7ff fb29 	bl	800e788 <move_window>
 800f136:	4603      	mov	r3, r0
 800f138:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f13a:	7dfb      	ldrb	r3, [r7, #23]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d11d      	bne.n	800f17c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a1b      	ldr	r3, [r3, #32]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2be5      	cmp	r3, #229	; 0xe5
 800f148:	d004      	beq.n	800f154 <dir_alloc+0x50>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a1b      	ldr	r3, [r3, #32]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d107      	bne.n	800f164 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	3301      	adds	r3, #1
 800f158:	613b      	str	r3, [r7, #16]
 800f15a:	693a      	ldr	r2, [r7, #16]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d102      	bne.n	800f168 <dir_alloc+0x64>
 800f162:	e00c      	b.n	800f17e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f164:	2300      	movs	r3, #0
 800f166:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f168:	2101      	movs	r1, #1
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f7ff ff05 	bl	800ef7a <dir_next>
 800f170:	4603      	mov	r3, r0
 800f172:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f174:	7dfb      	ldrb	r3, [r7, #23]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d0d7      	beq.n	800f12a <dir_alloc+0x26>
 800f17a:	e000      	b.n	800f17e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f17c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
 800f180:	2b04      	cmp	r3, #4
 800f182:	d101      	bne.n	800f188 <dir_alloc+0x84>
 800f184:	2307      	movs	r3, #7
 800f186:	75fb      	strb	r3, [r7, #23]
	return res;
 800f188:	7dfb      	ldrb	r3, [r7, #23]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3718      	adds	r7, #24
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f192:	b580      	push	{r7, lr}
 800f194:	b084      	sub	sp, #16
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
 800f19a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	331a      	adds	r3, #26
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7ff f841 	bl	800e228 <ld_word>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	2b03      	cmp	r3, #3
 800f1b0:	d109      	bne.n	800f1c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	3314      	adds	r3, #20
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff f836 	bl	800e228 <ld_word>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	041b      	lsls	r3, r3, #16
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	331a      	adds	r3, #26
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	b292      	uxth	r2, r2
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7ff f859 	bl	800e29e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	2b03      	cmp	r3, #3
 800f1f2:	d109      	bne.n	800f208 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	f103 0214 	add.w	r2, r3, #20
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	0c1b      	lsrs	r3, r3, #16
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	4619      	mov	r1, r3
 800f202:	4610      	mov	r0, r2
 800f204:	f7ff f84b 	bl	800e29e <st_word>
	}
}
 800f208:	bf00      	nop
 800f20a:	3710      	adds	r7, #16
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f21e:	2100      	movs	r1, #0
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f7ff fe2f 	bl	800ee84 <dir_sdi>
 800f226:	4603      	mov	r3, r0
 800f228:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f22a:	7dfb      	ldrb	r3, [r7, #23]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <dir_find+0x24>
 800f230:	7dfb      	ldrb	r3, [r7, #23]
 800f232:	e03e      	b.n	800f2b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	69db      	ldr	r3, [r3, #28]
 800f238:	4619      	mov	r1, r3
 800f23a:	6938      	ldr	r0, [r7, #16]
 800f23c:	f7ff faa4 	bl	800e788 <move_window>
 800f240:	4603      	mov	r3, r0
 800f242:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f244:	7dfb      	ldrb	r3, [r7, #23]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d12f      	bne.n	800f2aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f252:	7bfb      	ldrb	r3, [r7, #15]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d102      	bne.n	800f25e <dir_find+0x4e>
 800f258:	2304      	movs	r3, #4
 800f25a:	75fb      	strb	r3, [r7, #23]
 800f25c:	e028      	b.n	800f2b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a1b      	ldr	r3, [r3, #32]
 800f262:	330b      	adds	r3, #11
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f26a:	b2da      	uxtb	r2, r3
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6a1b      	ldr	r3, [r3, #32]
 800f274:	330b      	adds	r3, #11
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	f003 0308 	and.w	r3, r3, #8
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d10a      	bne.n	800f296 <dir_find+0x86>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a18      	ldr	r0, [r3, #32]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3324      	adds	r3, #36	; 0x24
 800f288:	220b      	movs	r2, #11
 800f28a:	4619      	mov	r1, r3
 800f28c:	f7ff f88a 	bl	800e3a4 <mem_cmp>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00b      	beq.n	800f2ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f296:	2100      	movs	r1, #0
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7ff fe6e 	bl	800ef7a <dir_next>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f2a2:	7dfb      	ldrb	r3, [r7, #23]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d0c5      	beq.n	800f234 <dir_find+0x24>
 800f2a8:	e002      	b.n	800f2b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f2aa:	bf00      	nop
 800f2ac:	e000      	b.n	800f2b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f2ae:	bf00      	nop

	return res;
 800f2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3718      	adds	r7, #24
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b084      	sub	sp, #16
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f2c8:	2101      	movs	r1, #1
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff ff1a 	bl	800f104 <dir_alloc>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f2d4:	7bfb      	ldrb	r3, [r7, #15]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d11c      	bne.n	800f314 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	69db      	ldr	r3, [r3, #28]
 800f2de:	4619      	mov	r1, r3
 800f2e0:	68b8      	ldr	r0, [r7, #8]
 800f2e2:	f7ff fa51 	bl	800e788 <move_window>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d111      	bne.n	800f314 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6a1b      	ldr	r3, [r3, #32]
 800f2f4:	2220      	movs	r2, #32
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff f838 	bl	800e36e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a18      	ldr	r0, [r3, #32]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3324      	adds	r3, #36	; 0x24
 800f306:	220b      	movs	r2, #11
 800f308:	4619      	mov	r1, r3
 800f30a:	f7ff f80f 	bl	800e32c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	2201      	movs	r2, #1
 800f312:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f314:	7bfb      	ldrb	r3, [r7, #15]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
	...

0800f320 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b088      	sub	sp, #32
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	3324      	adds	r3, #36	; 0x24
 800f334:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f336:	220b      	movs	r2, #11
 800f338:	2120      	movs	r1, #32
 800f33a:	68b8      	ldr	r0, [r7, #8]
 800f33c:	f7ff f817 	bl	800e36e <mem_set>
	si = i = 0; ni = 8;
 800f340:	2300      	movs	r3, #0
 800f342:	613b      	str	r3, [r7, #16]
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	61fb      	str	r3, [r7, #28]
 800f348:	2308      	movs	r3, #8
 800f34a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	1c5a      	adds	r2, r3, #1
 800f350:	61fa      	str	r2, [r7, #28]
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	4413      	add	r3, r2
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f35a:	7efb      	ldrb	r3, [r7, #27]
 800f35c:	2b20      	cmp	r3, #32
 800f35e:	d94e      	bls.n	800f3fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f360:	7efb      	ldrb	r3, [r7, #27]
 800f362:	2b2f      	cmp	r3, #47	; 0x2f
 800f364:	d006      	beq.n	800f374 <create_name+0x54>
 800f366:	7efb      	ldrb	r3, [r7, #27]
 800f368:	2b5c      	cmp	r3, #92	; 0x5c
 800f36a:	d110      	bne.n	800f38e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f36c:	e002      	b.n	800f374 <create_name+0x54>
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	3301      	adds	r3, #1
 800f372:	61fb      	str	r3, [r7, #28]
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	4413      	add	r3, r2
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	2b2f      	cmp	r3, #47	; 0x2f
 800f37e:	d0f6      	beq.n	800f36e <create_name+0x4e>
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	4413      	add	r3, r2
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	2b5c      	cmp	r3, #92	; 0x5c
 800f38a:	d0f0      	beq.n	800f36e <create_name+0x4e>
			break;
 800f38c:	e038      	b.n	800f400 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f38e:	7efb      	ldrb	r3, [r7, #27]
 800f390:	2b2e      	cmp	r3, #46	; 0x2e
 800f392:	d003      	beq.n	800f39c <create_name+0x7c>
 800f394:	693a      	ldr	r2, [r7, #16]
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d30c      	bcc.n	800f3b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	2b0b      	cmp	r3, #11
 800f3a0:	d002      	beq.n	800f3a8 <create_name+0x88>
 800f3a2:	7efb      	ldrb	r3, [r7, #27]
 800f3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800f3a6:	d001      	beq.n	800f3ac <create_name+0x8c>
 800f3a8:	2306      	movs	r3, #6
 800f3aa:	e044      	b.n	800f436 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f3ac:	2308      	movs	r3, #8
 800f3ae:	613b      	str	r3, [r7, #16]
 800f3b0:	230b      	movs	r3, #11
 800f3b2:	617b      	str	r3, [r7, #20]
			continue;
 800f3b4:	e022      	b.n	800f3fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f3b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	da04      	bge.n	800f3c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f3be:	7efb      	ldrb	r3, [r7, #27]
 800f3c0:	3b80      	subs	r3, #128	; 0x80
 800f3c2:	4a1f      	ldr	r2, [pc, #124]	; (800f440 <create_name+0x120>)
 800f3c4:	5cd3      	ldrb	r3, [r2, r3]
 800f3c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f3c8:	7efb      	ldrb	r3, [r7, #27]
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	481d      	ldr	r0, [pc, #116]	; (800f444 <create_name+0x124>)
 800f3ce:	f7ff f810 	bl	800e3f2 <chk_chr>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d001      	beq.n	800f3dc <create_name+0xbc>
 800f3d8:	2306      	movs	r3, #6
 800f3da:	e02c      	b.n	800f436 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f3dc:	7efb      	ldrb	r3, [r7, #27]
 800f3de:	2b60      	cmp	r3, #96	; 0x60
 800f3e0:	d905      	bls.n	800f3ee <create_name+0xce>
 800f3e2:	7efb      	ldrb	r3, [r7, #27]
 800f3e4:	2b7a      	cmp	r3, #122	; 0x7a
 800f3e6:	d802      	bhi.n	800f3ee <create_name+0xce>
 800f3e8:	7efb      	ldrb	r3, [r7, #27]
 800f3ea:	3b20      	subs	r3, #32
 800f3ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	1c5a      	adds	r2, r3, #1
 800f3f2:	613a      	str	r2, [r7, #16]
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	7efa      	ldrb	r2, [r7, #27]
 800f3fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f3fc:	e7a6      	b.n	800f34c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f3fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	441a      	add	r2, r3
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d101      	bne.n	800f414 <create_name+0xf4>
 800f410:	2306      	movs	r3, #6
 800f412:	e010      	b.n	800f436 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	2be5      	cmp	r3, #229	; 0xe5
 800f41a:	d102      	bne.n	800f422 <create_name+0x102>
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	2205      	movs	r2, #5
 800f420:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f422:	7efb      	ldrb	r3, [r7, #27]
 800f424:	2b20      	cmp	r3, #32
 800f426:	d801      	bhi.n	800f42c <create_name+0x10c>
 800f428:	2204      	movs	r2, #4
 800f42a:	e000      	b.n	800f42e <create_name+0x10e>
 800f42c:	2200      	movs	r2, #0
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	330b      	adds	r3, #11
 800f432:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f434:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f436:	4618      	mov	r0, r3
 800f438:	3720      	adds	r7, #32
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	080182fc 	.word	0x080182fc
 800f444:	08015bec 	.word	0x08015bec

0800f448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f45c:	e002      	b.n	800f464 <follow_path+0x1c>
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	3301      	adds	r3, #1
 800f462:	603b      	str	r3, [r7, #0]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	2b2f      	cmp	r3, #47	; 0x2f
 800f46a:	d0f8      	beq.n	800f45e <follow_path+0x16>
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	2b5c      	cmp	r3, #92	; 0x5c
 800f472:	d0f4      	beq.n	800f45e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	2200      	movs	r2, #0
 800f478:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	2b1f      	cmp	r3, #31
 800f480:	d80a      	bhi.n	800f498 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2280      	movs	r2, #128	; 0x80
 800f486:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f48a:	2100      	movs	r1, #0
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff fcf9 	bl	800ee84 <dir_sdi>
 800f492:	4603      	mov	r3, r0
 800f494:	75fb      	strb	r3, [r7, #23]
 800f496:	e043      	b.n	800f520 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f498:	463b      	mov	r3, r7
 800f49a:	4619      	mov	r1, r3
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7ff ff3f 	bl	800f320 <create_name>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f4a6:	7dfb      	ldrb	r3, [r7, #23]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d134      	bne.n	800f516 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7ff feaf 	bl	800f210 <dir_find>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f4bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f4be:	7dfb      	ldrb	r3, [r7, #23]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d00a      	beq.n	800f4da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f4c4:	7dfb      	ldrb	r3, [r7, #23]
 800f4c6:	2b04      	cmp	r3, #4
 800f4c8:	d127      	bne.n	800f51a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f4ca:	7afb      	ldrb	r3, [r7, #11]
 800f4cc:	f003 0304 	and.w	r3, r3, #4
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d122      	bne.n	800f51a <follow_path+0xd2>
 800f4d4:	2305      	movs	r3, #5
 800f4d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f4d8:	e01f      	b.n	800f51a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f4da:	7afb      	ldrb	r3, [r7, #11]
 800f4dc:	f003 0304 	and.w	r3, r3, #4
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d11c      	bne.n	800f51e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	799b      	ldrb	r3, [r3, #6]
 800f4e8:	f003 0310 	and.w	r3, r3, #16
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d102      	bne.n	800f4f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f4f0:	2305      	movs	r3, #5
 800f4f2:	75fb      	strb	r3, [r7, #23]
 800f4f4:	e014      	b.n	800f520 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	695b      	ldr	r3, [r3, #20]
 800f500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f504:	4413      	add	r3, r2
 800f506:	4619      	mov	r1, r3
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f7ff fe42 	bl	800f192 <ld_clust>
 800f50e:	4602      	mov	r2, r0
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f514:	e7c0      	b.n	800f498 <follow_path+0x50>
			if (res != FR_OK) break;
 800f516:	bf00      	nop
 800f518:	e002      	b.n	800f520 <follow_path+0xd8>
				break;
 800f51a:	bf00      	nop
 800f51c:	e000      	b.n	800f520 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f51e:	bf00      	nop
			}
		}
	}

	return res;
 800f520:	7dfb      	ldrb	r3, [r7, #23]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3718      	adds	r7, #24
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f52a:	b480      	push	{r7}
 800f52c:	b087      	sub	sp, #28
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f532:	f04f 33ff 	mov.w	r3, #4294967295
 800f536:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d031      	beq.n	800f5a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	e002      	b.n	800f54e <get_ldnumber+0x24>
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	3301      	adds	r3, #1
 800f54c:	617b      	str	r3, [r7, #20]
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	2b20      	cmp	r3, #32
 800f554:	d903      	bls.n	800f55e <get_ldnumber+0x34>
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b3a      	cmp	r3, #58	; 0x3a
 800f55c:	d1f4      	bne.n	800f548 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	2b3a      	cmp	r3, #58	; 0x3a
 800f564:	d11c      	bne.n	800f5a0 <get_ldnumber+0x76>
			tp = *path;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	60fa      	str	r2, [r7, #12]
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	3b30      	subs	r3, #48	; 0x30
 800f576:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	2b09      	cmp	r3, #9
 800f57c:	d80e      	bhi.n	800f59c <get_ldnumber+0x72>
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	429a      	cmp	r2, r3
 800f584:	d10a      	bne.n	800f59c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d107      	bne.n	800f59c <get_ldnumber+0x72>
					vol = (int)i;
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	3301      	adds	r3, #1
 800f594:	617b      	str	r3, [r7, #20]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	697a      	ldr	r2, [r7, #20]
 800f59a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	e002      	b.n	800f5a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f5a4:	693b      	ldr	r3, [r7, #16]
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	371c      	adds	r7, #28
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
	...

0800f5b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	70da      	strb	r2, [r3, #3]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f5cc:	6839      	ldr	r1, [r7, #0]
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f7ff f8da 	bl	800e788 <move_window>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <check_fs+0x2a>
 800f5da:	2304      	movs	r3, #4
 800f5dc:	e038      	b.n	800f650 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	3330      	adds	r3, #48	; 0x30
 800f5e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fe fe1e 	bl	800e228 <ld_word>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d001      	beq.n	800f5fc <check_fs+0x48>
 800f5f8:	2303      	movs	r3, #3
 800f5fa:	e029      	b.n	800f650 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f602:	2be9      	cmp	r3, #233	; 0xe9
 800f604:	d009      	beq.n	800f61a <check_fs+0x66>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f60c:	2beb      	cmp	r3, #235	; 0xeb
 800f60e:	d11e      	bne.n	800f64e <check_fs+0x9a>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f616:	2b90      	cmp	r3, #144	; 0x90
 800f618:	d119      	bne.n	800f64e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	3330      	adds	r3, #48	; 0x30
 800f61e:	3336      	adds	r3, #54	; 0x36
 800f620:	4618      	mov	r0, r3
 800f622:	f7fe fe19 	bl	800e258 <ld_dword>
 800f626:	4603      	mov	r3, r0
 800f628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f62c:	4a0a      	ldr	r2, [pc, #40]	; (800f658 <check_fs+0xa4>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d101      	bne.n	800f636 <check_fs+0x82>
 800f632:	2300      	movs	r3, #0
 800f634:	e00c      	b.n	800f650 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3330      	adds	r3, #48	; 0x30
 800f63a:	3352      	adds	r3, #82	; 0x52
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fe fe0b 	bl	800e258 <ld_dword>
 800f642:	4603      	mov	r3, r0
 800f644:	4a05      	ldr	r2, [pc, #20]	; (800f65c <check_fs+0xa8>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d101      	bne.n	800f64e <check_fs+0x9a>
 800f64a:	2300      	movs	r3, #0
 800f64c:	e000      	b.n	800f650 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f64e:	2302      	movs	r3, #2
}
 800f650:	4618      	mov	r0, r3
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	00544146 	.word	0x00544146
 800f65c:	33544146 	.word	0x33544146

0800f660 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b096      	sub	sp, #88	; 0x58
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	4613      	mov	r3, r2
 800f66c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2200      	movs	r2, #0
 800f672:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f7ff ff58 	bl	800f52a <get_ldnumber>
 800f67a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f67e:	2b00      	cmp	r3, #0
 800f680:	da01      	bge.n	800f686 <find_volume+0x26>
 800f682:	230b      	movs	r3, #11
 800f684:	e22d      	b.n	800fae2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f686:	4aa1      	ldr	r2, [pc, #644]	; (800f90c <find_volume+0x2ac>)
 800f688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f68e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f692:	2b00      	cmp	r3, #0
 800f694:	d101      	bne.n	800f69a <find_volume+0x3a>
 800f696:	230c      	movs	r3, #12
 800f698:	e223      	b.n	800fae2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f69e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f6a0:	79fb      	ldrb	r3, [r7, #7]
 800f6a2:	f023 0301 	bic.w	r3, r3, #1
 800f6a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d01a      	beq.n	800f6e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	785b      	ldrb	r3, [r3, #1]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fe fd19 	bl	800e0ec <disk_status>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f6c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6c4:	f003 0301 	and.w	r3, r3, #1
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d10c      	bne.n	800f6e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f6cc:	79fb      	ldrb	r3, [r7, #7]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d007      	beq.n	800f6e2 <find_volume+0x82>
 800f6d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6d6:	f003 0304 	and.w	r3, r3, #4
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d001      	beq.n	800f6e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f6de:	230a      	movs	r3, #10
 800f6e0:	e1ff      	b.n	800fae2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e1fd      	b.n	800fae2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f6:	785b      	ldrb	r3, [r3, #1]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fe fd11 	bl	800e120 <disk_initialize>
 800f6fe:	4603      	mov	r3, r0
 800f700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f708:	f003 0301 	and.w	r3, r3, #1
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d001      	beq.n	800f714 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f710:	2303      	movs	r3, #3
 800f712:	e1e6      	b.n	800fae2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f714:	79fb      	ldrb	r3, [r7, #7]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d007      	beq.n	800f72a <find_volume+0xca>
 800f71a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f71e:	f003 0304 	and.w	r3, r3, #4
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f726:	230a      	movs	r3, #10
 800f728:	e1db      	b.n	800fae2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f72e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f732:	f7ff ff3f 	bl	800f5b4 <check_fs>
 800f736:	4603      	mov	r3, r0
 800f738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f73c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f740:	2b02      	cmp	r3, #2
 800f742:	d149      	bne.n	800f7d8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f744:	2300      	movs	r3, #0
 800f746:	643b      	str	r3, [r7, #64]	; 0x40
 800f748:	e01e      	b.n	800f788 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f752:	011b      	lsls	r3, r3, #4
 800f754:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f758:	4413      	add	r3, r2
 800f75a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	3304      	adds	r3, #4
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d006      	beq.n	800f774 <find_volume+0x114>
 800f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f768:	3308      	adds	r3, #8
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fe fd74 	bl	800e258 <ld_dword>
 800f770:	4602      	mov	r2, r0
 800f772:	e000      	b.n	800f776 <find_volume+0x116>
 800f774:	2200      	movs	r2, #0
 800f776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	3358      	adds	r3, #88	; 0x58
 800f77c:	443b      	add	r3, r7
 800f77e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f784:	3301      	adds	r3, #1
 800f786:	643b      	str	r3, [r7, #64]	; 0x40
 800f788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	d9dd      	bls.n	800f74a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f78e:	2300      	movs	r3, #0
 800f790:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f794:	2b00      	cmp	r3, #0
 800f796:	d002      	beq.n	800f79e <find_volume+0x13e>
 800f798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f79a:	3b01      	subs	r3, #1
 800f79c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	3358      	adds	r3, #88	; 0x58
 800f7a4:	443b      	add	r3, r7
 800f7a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f7aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d005      	beq.n	800f7be <find_volume+0x15e>
 800f7b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f7b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f7b6:	f7ff fefd 	bl	800f5b4 <check_fs>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	e000      	b.n	800f7c0 <find_volume+0x160>
 800f7be:	2303      	movs	r3, #3
 800f7c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f7c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d905      	bls.n	800f7d8 <find_volume+0x178>
 800f7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	643b      	str	r3, [r7, #64]	; 0x40
 800f7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d4:	2b03      	cmp	r3, #3
 800f7d6:	d9e2      	bls.n	800f79e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f7d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7dc:	2b04      	cmp	r3, #4
 800f7de:	d101      	bne.n	800f7e4 <find_volume+0x184>
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e17e      	b.n	800fae2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f7e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d901      	bls.n	800f7f0 <find_volume+0x190>
 800f7ec:	230d      	movs	r3, #13
 800f7ee:	e178      	b.n	800fae2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f2:	3330      	adds	r3, #48	; 0x30
 800f7f4:	330b      	adds	r3, #11
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fe fd16 	bl	800e228 <ld_word>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f802:	d001      	beq.n	800f808 <find_volume+0x1a8>
 800f804:	230d      	movs	r3, #13
 800f806:	e16c      	b.n	800fae2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80a:	3330      	adds	r3, #48	; 0x30
 800f80c:	3316      	adds	r3, #22
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fe fd0a 	bl	800e228 <ld_word>
 800f814:	4603      	mov	r3, r0
 800f816:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d106      	bne.n	800f82c <find_volume+0x1cc>
 800f81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f820:	3330      	adds	r3, #48	; 0x30
 800f822:	3324      	adds	r3, #36	; 0x24
 800f824:	4618      	mov	r0, r3
 800f826:	f7fe fd17 	bl	800e258 <ld_dword>
 800f82a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f830:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f834:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	789b      	ldrb	r3, [r3, #2]
 800f840:	2b01      	cmp	r3, #1
 800f842:	d005      	beq.n	800f850 <find_volume+0x1f0>
 800f844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f846:	789b      	ldrb	r3, [r3, #2]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d001      	beq.n	800f850 <find_volume+0x1f0>
 800f84c:	230d      	movs	r3, #13
 800f84e:	e148      	b.n	800fae2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f852:	789b      	ldrb	r3, [r3, #2]
 800f854:	461a      	mov	r2, r3
 800f856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f858:	fb02 f303 	mul.w	r3, r2, r3
 800f85c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f864:	b29a      	uxth	r2, r3
 800f866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f868:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86c:	895b      	ldrh	r3, [r3, #10]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d008      	beq.n	800f884 <find_volume+0x224>
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	895b      	ldrh	r3, [r3, #10]
 800f876:	461a      	mov	r2, r3
 800f878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87a:	895b      	ldrh	r3, [r3, #10]
 800f87c:	3b01      	subs	r3, #1
 800f87e:	4013      	ands	r3, r2
 800f880:	2b00      	cmp	r3, #0
 800f882:	d001      	beq.n	800f888 <find_volume+0x228>
 800f884:	230d      	movs	r3, #13
 800f886:	e12c      	b.n	800fae2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88a:	3330      	adds	r3, #48	; 0x30
 800f88c:	3311      	adds	r3, #17
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fe fcca 	bl	800e228 <ld_word>
 800f894:	4603      	mov	r3, r0
 800f896:	461a      	mov	r2, r3
 800f898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89e:	891b      	ldrh	r3, [r3, #8]
 800f8a0:	f003 030f 	and.w	r3, r3, #15
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d001      	beq.n	800f8ae <find_volume+0x24e>
 800f8aa:	230d      	movs	r3, #13
 800f8ac:	e119      	b.n	800fae2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	3330      	adds	r3, #48	; 0x30
 800f8b2:	3313      	adds	r3, #19
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fe fcb7 	bl	800e228 <ld_word>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d106      	bne.n	800f8d2 <find_volume+0x272>
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c6:	3330      	adds	r3, #48	; 0x30
 800f8c8:	3320      	adds	r3, #32
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fe fcc4 	bl	800e258 <ld_dword>
 800f8d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d4:	3330      	adds	r3, #48	; 0x30
 800f8d6:	330e      	adds	r3, #14
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fe fca5 	bl	800e228 <ld_word>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f8e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d101      	bne.n	800f8ec <find_volume+0x28c>
 800f8e8:	230d      	movs	r3, #13
 800f8ea:	e0fa      	b.n	800fae2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f8ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8f0:	4413      	add	r3, r2
 800f8f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8f4:	8912      	ldrh	r2, [r2, #8]
 800f8f6:	0912      	lsrs	r2, r2, #4
 800f8f8:	b292      	uxth	r2, r2
 800f8fa:	4413      	add	r3, r2
 800f8fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f8fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f902:	429a      	cmp	r2, r3
 800f904:	d204      	bcs.n	800f910 <find_volume+0x2b0>
 800f906:	230d      	movs	r3, #13
 800f908:	e0eb      	b.n	800fae2 <find_volume+0x482>
 800f90a:	bf00      	nop
 800f90c:	20000df0 	.word	0x20000df0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f918:	8952      	ldrh	r2, [r2, #10]
 800f91a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f91e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f922:	2b00      	cmp	r3, #0
 800f924:	d101      	bne.n	800f92a <find_volume+0x2ca>
 800f926:	230d      	movs	r3, #13
 800f928:	e0db      	b.n	800fae2 <find_volume+0x482>
		fmt = FS_FAT32;
 800f92a:	2303      	movs	r3, #3
 800f92c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f932:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f936:	4293      	cmp	r3, r2
 800f938:	d802      	bhi.n	800f940 <find_volume+0x2e0>
 800f93a:	2302      	movs	r3, #2
 800f93c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f942:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f946:	4293      	cmp	r3, r2
 800f948:	d802      	bhi.n	800f950 <find_volume+0x2f0>
 800f94a:	2301      	movs	r3, #1
 800f94c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f952:	1c9a      	adds	r2, r3, #2
 800f954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f956:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f95c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f95e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f962:	441a      	add	r2, r3
 800f964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f966:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	441a      	add	r2, r3
 800f96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f970:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800f972:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f976:	2b03      	cmp	r3, #3
 800f978:	d11e      	bne.n	800f9b8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97c:	3330      	adds	r3, #48	; 0x30
 800f97e:	332a      	adds	r3, #42	; 0x2a
 800f980:	4618      	mov	r0, r3
 800f982:	f7fe fc51 	bl	800e228 <ld_word>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d001      	beq.n	800f990 <find_volume+0x330>
 800f98c:	230d      	movs	r3, #13
 800f98e:	e0a8      	b.n	800fae2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f992:	891b      	ldrh	r3, [r3, #8]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d001      	beq.n	800f99c <find_volume+0x33c>
 800f998:	230d      	movs	r3, #13
 800f99a:	e0a2      	b.n	800fae2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99e:	3330      	adds	r3, #48	; 0x30
 800f9a0:	332c      	adds	r3, #44	; 0x2c
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fe fc58 	bl	800e258 <ld_dword>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ac:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b0:	695b      	ldr	r3, [r3, #20]
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800f9b6:	e01f      	b.n	800f9f8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	891b      	ldrh	r3, [r3, #8]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d101      	bne.n	800f9c4 <find_volume+0x364>
 800f9c0:	230d      	movs	r3, #13
 800f9c2:	e08e      	b.n	800fae2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c6:	6a1a      	ldr	r2, [r3, #32]
 800f9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ca:	441a      	add	r2, r3
 800f9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ce:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f9d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	d103      	bne.n	800f9e0 <find_volume+0x380>
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	695b      	ldr	r3, [r3, #20]
 800f9dc:	005b      	lsls	r3, r3, #1
 800f9de:	e00a      	b.n	800f9f6 <find_volume+0x396>
 800f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e2:	695a      	ldr	r2, [r3, #20]
 800f9e4:	4613      	mov	r3, r2
 800f9e6:	005b      	lsls	r3, r3, #1
 800f9e8:	4413      	add	r3, r2
 800f9ea:	085a      	lsrs	r2, r3, #1
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	695b      	ldr	r3, [r3, #20]
 800f9f0:	f003 0301 	and.w	r3, r3, #1
 800f9f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f9f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fa:	699a      	ldr	r2, [r3, #24]
 800f9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fa02:	0a5b      	lsrs	r3, r3, #9
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d201      	bcs.n	800fa0c <find_volume+0x3ac>
 800fa08:	230d      	movs	r3, #13
 800fa0a:	e06a      	b.n	800fae2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa12:	611a      	str	r2, [r3, #16]
 800fa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa16:	691a      	ldr	r2, [r3, #16]
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1e:	2280      	movs	r2, #128	; 0x80
 800fa20:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fa22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa26:	2b03      	cmp	r3, #3
 800fa28:	d149      	bne.n	800fabe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2c:	3330      	adds	r3, #48	; 0x30
 800fa2e:	3330      	adds	r3, #48	; 0x30
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7fe fbf9 	bl	800e228 <ld_word>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d140      	bne.n	800fabe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fa3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa3e:	3301      	adds	r3, #1
 800fa40:	4619      	mov	r1, r3
 800fa42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa44:	f7fe fea0 	bl	800e788 <move_window>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d137      	bne.n	800fabe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa50:	2200      	movs	r2, #0
 800fa52:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	3330      	adds	r3, #48	; 0x30
 800fa58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fe fbe3 	bl	800e228 <ld_word>
 800fa62:	4603      	mov	r3, r0
 800fa64:	461a      	mov	r2, r3
 800fa66:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d127      	bne.n	800fabe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	3330      	adds	r3, #48	; 0x30
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fe fbf0 	bl	800e258 <ld_dword>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	4a1c      	ldr	r2, [pc, #112]	; (800faec <find_volume+0x48c>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d11e      	bne.n	800fabe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa82:	3330      	adds	r3, #48	; 0x30
 800fa84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe fbe5 	bl	800e258 <ld_dword>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	4a17      	ldr	r2, [pc, #92]	; (800faf0 <find_volume+0x490>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d113      	bne.n	800fabe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa98:	3330      	adds	r3, #48	; 0x30
 800fa9a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe fbda 	bl	800e258 <ld_dword>
 800faa4:	4602      	mov	r2, r0
 800faa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800faaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faac:	3330      	adds	r3, #48	; 0x30
 800faae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fe fbd0 	bl	800e258 <ld_dword>
 800fab8:	4602      	mov	r2, r0
 800faba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fac4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fac6:	4b0b      	ldr	r3, [pc, #44]	; (800faf4 <find_volume+0x494>)
 800fac8:	881b      	ldrh	r3, [r3, #0]
 800faca:	3301      	adds	r3, #1
 800facc:	b29a      	uxth	r2, r3
 800face:	4b09      	ldr	r3, [pc, #36]	; (800faf4 <find_volume+0x494>)
 800fad0:	801a      	strh	r2, [r3, #0]
 800fad2:	4b08      	ldr	r3, [pc, #32]	; (800faf4 <find_volume+0x494>)
 800fad4:	881a      	ldrh	r2, [r3, #0]
 800fad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fada:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fadc:	f7fe fdec 	bl	800e6b8 <clear_lock>
#endif
	return FR_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3758      	adds	r7, #88	; 0x58
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	41615252 	.word	0x41615252
 800faf0:	61417272 	.word	0x61417272
 800faf4:	20000df4 	.word	0x20000df4

0800faf8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fb02:	2309      	movs	r3, #9
 800fb04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d01c      	beq.n	800fb46 <validate+0x4e>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d018      	beq.n	800fb46 <validate+0x4e>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d013      	beq.n	800fb46 <validate+0x4e>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	889a      	ldrh	r2, [r3, #4]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	88db      	ldrh	r3, [r3, #6]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d10c      	bne.n	800fb46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	785b      	ldrb	r3, [r3, #1]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fe fada 	bl	800e0ec <disk_status>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	f003 0301 	and.w	r3, r3, #1
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d101      	bne.n	800fb46 <validate+0x4e>
			res = FR_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fb46:	7bfb      	ldrb	r3, [r7, #15]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d102      	bne.n	800fb52 <validate+0x5a>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	e000      	b.n	800fb54 <validate+0x5c>
 800fb52:	2300      	movs	r3, #0
 800fb54:	683a      	ldr	r2, [r7, #0]
 800fb56:	6013      	str	r3, [r2, #0]
	return res;
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
	...

0800fb64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b088      	sub	sp, #32
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	4613      	mov	r3, r2
 800fb70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fb76:	f107 0310 	add.w	r3, r7, #16
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7ff fcd5 	bl	800f52a <get_ldnumber>
 800fb80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	da01      	bge.n	800fb8c <f_mount+0x28>
 800fb88:	230b      	movs	r3, #11
 800fb8a:	e02b      	b.n	800fbe4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fb8c:	4a17      	ldr	r2, [pc, #92]	; (800fbec <f_mount+0x88>)
 800fb8e:	69fb      	ldr	r3, [r7, #28]
 800fb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d005      	beq.n	800fba8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fb9c:	69b8      	ldr	r0, [r7, #24]
 800fb9e:	f7fe fd8b 	bl	800e6b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fba2:	69bb      	ldr	r3, [r7, #24]
 800fba4:	2200      	movs	r2, #0
 800fba6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d002      	beq.n	800fbb4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	490d      	ldr	r1, [pc, #52]	; (800fbec <f_mount+0x88>)
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d002      	beq.n	800fbca <f_mount+0x66>
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d001      	beq.n	800fbce <f_mount+0x6a>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	e00a      	b.n	800fbe4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fbce:	f107 010c 	add.w	r1, r7, #12
 800fbd2:	f107 0308 	add.w	r3, r7, #8
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7ff fd41 	bl	800f660 <find_volume>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3720      	adds	r7, #32
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	20000df0 	.word	0x20000df0

0800fbf0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b098      	sub	sp, #96	; 0x60
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d101      	bne.n	800fc08 <f_open+0x18>
 800fc04:	2309      	movs	r3, #9
 800fc06:	e1ad      	b.n	800ff64 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fc08:	79fb      	ldrb	r3, [r7, #7]
 800fc0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fc10:	79fa      	ldrb	r2, [r7, #7]
 800fc12:	f107 0110 	add.w	r1, r7, #16
 800fc16:	f107 0308 	add.w	r3, r7, #8
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7ff fd20 	bl	800f660 <find_volume>
 800fc20:	4603      	mov	r3, r0
 800fc22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fc26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f040 8191 	bne.w	800ff52 <f_open+0x362>
		dj.obj.fs = fs;
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fc34:	68ba      	ldr	r2, [r7, #8]
 800fc36:	f107 0314 	add.w	r3, r7, #20
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff fc03 	bl	800f448 <follow_path>
 800fc42:	4603      	mov	r3, r0
 800fc44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fc48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d11a      	bne.n	800fc86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fc50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc54:	b25b      	sxtb	r3, r3
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	da03      	bge.n	800fc62 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fc5a:	2306      	movs	r3, #6
 800fc5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc60:	e011      	b.n	800fc86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	f023 0301 	bic.w	r3, r3, #1
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	bf14      	ite	ne
 800fc6c:	2301      	movne	r3, #1
 800fc6e:	2300      	moveq	r3, #0
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	461a      	mov	r2, r3
 800fc74:	f107 0314 	add.w	r3, r7, #20
 800fc78:	4611      	mov	r1, r2
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fe fbd4 	bl	800e428 <chk_lock>
 800fc80:	4603      	mov	r3, r0
 800fc82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fc86:	79fb      	ldrb	r3, [r7, #7]
 800fc88:	f003 031c 	and.w	r3, r3, #28
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d07f      	beq.n	800fd90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fc90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d017      	beq.n	800fcc8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fc98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc9c:	2b04      	cmp	r3, #4
 800fc9e:	d10e      	bne.n	800fcbe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fca0:	f7fe fc1e 	bl	800e4e0 <enq_lock>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d006      	beq.n	800fcb8 <f_open+0xc8>
 800fcaa:	f107 0314 	add.w	r3, r7, #20
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7ff fb03 	bl	800f2ba <dir_register>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	e000      	b.n	800fcba <f_open+0xca>
 800fcb8:	2312      	movs	r3, #18
 800fcba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	f043 0308 	orr.w	r3, r3, #8
 800fcc4:	71fb      	strb	r3, [r7, #7]
 800fcc6:	e010      	b.n	800fcea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fcc8:	7ebb      	ldrb	r3, [r7, #26]
 800fcca:	f003 0311 	and.w	r3, r3, #17
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d003      	beq.n	800fcda <f_open+0xea>
					res = FR_DENIED;
 800fcd2:	2307      	movs	r3, #7
 800fcd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fcd8:	e007      	b.n	800fcea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fcda:	79fb      	ldrb	r3, [r7, #7]
 800fcdc:	f003 0304 	and.w	r3, r3, #4
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <f_open+0xfa>
 800fce4:	2308      	movs	r3, #8
 800fce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fcea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d168      	bne.n	800fdc4 <f_open+0x1d4>
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	f003 0308 	and.w	r3, r3, #8
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d063      	beq.n	800fdc4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fcfc:	f7fd ffb4 	bl	800dc68 <get_fattime>
 800fd00:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd04:	330e      	adds	r3, #14
 800fd06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fe fae3 	bl	800e2d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd10:	3316      	adds	r3, #22
 800fd12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7fe fadd 	bl	800e2d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1c:	330b      	adds	r3, #11
 800fd1e:	2220      	movs	r2, #32
 800fd20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd26:	4611      	mov	r1, r2
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff fa32 	bl	800f192 <ld_clust>
 800fd2e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd34:	2200      	movs	r2, #0
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff fa4a 	bl	800f1d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fd3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd3e:	331c      	adds	r3, #28
 800fd40:	2100      	movs	r1, #0
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fe fac6 	bl	800e2d4 <st_dword>
					fs->wflag = 1;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fd4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d037      	beq.n	800fdc4 <f_open+0x1d4>
						dw = fs->winsect;
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd58:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fd5a:	f107 0314 	add.w	r3, r7, #20
 800fd5e:	2200      	movs	r2, #0
 800fd60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fe ff5d 	bl	800ec22 <remove_chain>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800fd6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d126      	bne.n	800fdc4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fe fd04 	bl	800e788 <move_window>
 800fd80:	4603      	mov	r3, r0
 800fd82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd8a:	3a01      	subs	r2, #1
 800fd8c:	60da      	str	r2, [r3, #12]
 800fd8e:	e019      	b.n	800fdc4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fd90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d115      	bne.n	800fdc4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fd98:	7ebb      	ldrb	r3, [r7, #26]
 800fd9a:	f003 0310 	and.w	r3, r3, #16
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d003      	beq.n	800fdaa <f_open+0x1ba>
					res = FR_NO_FILE;
 800fda2:	2304      	movs	r3, #4
 800fda4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fda8:	e00c      	b.n	800fdc4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
 800fdac:	f003 0302 	and.w	r3, r3, #2
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d007      	beq.n	800fdc4 <f_open+0x1d4>
 800fdb4:	7ebb      	ldrb	r3, [r7, #26]
 800fdb6:	f003 0301 	and.w	r3, r3, #1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d002      	beq.n	800fdc4 <f_open+0x1d4>
						res = FR_DENIED;
 800fdbe:	2307      	movs	r3, #7
 800fdc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fdc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d128      	bne.n	800fe1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fdcc:	79fb      	ldrb	r3, [r7, #7]
 800fdce:	f003 0308 	and.w	r3, r3, #8
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d003      	beq.n	800fdde <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fddc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fde6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	f023 0301 	bic.w	r3, r3, #1
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	bf14      	ite	ne
 800fdf6:	2301      	movne	r3, #1
 800fdf8:	2300      	moveq	r3, #0
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	f107 0314 	add.w	r3, r7, #20
 800fe02:	4611      	mov	r1, r2
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7fe fb8d 	bl	800e524 <inc_lock>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d102      	bne.n	800fe1e <f_open+0x22e>
 800fe18:	2302      	movs	r3, #2
 800fe1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fe1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	f040 8095 	bne.w	800ff52 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7ff f9af 	bl	800f192 <ld_clust>
 800fe34:	4602      	mov	r2, r0
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fe3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe3c:	331c      	adds	r3, #28
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fe fa0a 	bl	800e258 <ld_dword>
 800fe44:	4602      	mov	r2, r0
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fe50:	693a      	ldr	r2, [r7, #16]
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	88da      	ldrh	r2, [r3, #6]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	79fa      	ldrb	r2, [r7, #7]
 800fe62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2200      	movs	r2, #0
 800fe68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2200      	movs	r2, #0
 800fe74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	3330      	adds	r3, #48	; 0x30
 800fe7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe7e:	2100      	movs	r1, #0
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fe fa74 	bl	800e36e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fe86:	79fb      	ldrb	r3, [r7, #7]
 800fe88:	f003 0320 	and.w	r3, r3, #32
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d060      	beq.n	800ff52 <f_open+0x362>
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d05c      	beq.n	800ff52 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	68da      	ldr	r2, [r3, #12]
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	895b      	ldrh	r3, [r3, #10]
 800fea4:	025b      	lsls	r3, r3, #9
 800fea6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	657b      	str	r3, [r7, #84]	; 0x54
 800feb4:	e016      	b.n	800fee4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800feba:	4618      	mov	r0, r3
 800febc:	f7fe fd1f 	bl	800e8fe <get_fat>
 800fec0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d802      	bhi.n	800fece <f_open+0x2de>
 800fec8:	2302      	movs	r3, #2
 800feca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fed4:	d102      	bne.n	800fedc <f_open+0x2ec>
 800fed6:	2301      	movs	r3, #1
 800fed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fedc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	657b      	str	r3, [r7, #84]	; 0x54
 800fee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d103      	bne.n	800fef4 <f_open+0x304>
 800feec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800feee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d8e0      	bhi.n	800feb6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fef8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fefa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d127      	bne.n	800ff52 <f_open+0x362>
 800ff02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d022      	beq.n	800ff52 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fe fcd5 	bl	800e8c0 <clust2sect>
 800ff16:	6478      	str	r0, [r7, #68]	; 0x44
 800ff18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d103      	bne.n	800ff26 <f_open+0x336>
						res = FR_INT_ERR;
 800ff1e:	2302      	movs	r3, #2
 800ff20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ff24:	e015      	b.n	800ff52 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ff26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff28:	0a5a      	lsrs	r2, r3, #9
 800ff2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff2c:	441a      	add	r2, r3
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	7858      	ldrb	r0, [r3, #1]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6a1a      	ldr	r2, [r3, #32]
 800ff40:	2301      	movs	r3, #1
 800ff42:	f7fe f913 	bl	800e16c <disk_read>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d002      	beq.n	800ff52 <f_open+0x362>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ff52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d002      	beq.n	800ff60 <f_open+0x370>
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ff60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3760      	adds	r7, #96	; 0x60
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08c      	sub	sp, #48	; 0x30
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
 800ff78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	2200      	movs	r2, #0
 800ff82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f107 0210 	add.w	r2, r7, #16
 800ff8a:	4611      	mov	r1, r2
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7ff fdb3 	bl	800faf8 <validate>
 800ff92:	4603      	mov	r3, r0
 800ff94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ff98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d107      	bne.n	800ffb0 <f_write+0x44>
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	7d5b      	ldrb	r3, [r3, #21]
 800ffa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ffa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d002      	beq.n	800ffb6 <f_write+0x4a>
 800ffb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffb4:	e14b      	b.n	801024e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	7d1b      	ldrb	r3, [r3, #20]
 800ffba:	f003 0302 	and.w	r3, r3, #2
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d101      	bne.n	800ffc6 <f_write+0x5a>
 800ffc2:	2307      	movs	r3, #7
 800ffc4:	e143      	b.n	801024e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	699a      	ldr	r2, [r3, #24]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	441a      	add	r2, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	699b      	ldr	r3, [r3, #24]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	f080 812d 	bcs.w	8010232 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	699b      	ldr	r3, [r3, #24]
 800ffdc:	43db      	mvns	r3, r3
 800ffde:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ffe0:	e127      	b.n	8010232 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	699b      	ldr	r3, [r3, #24]
 800ffe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f040 80e3 	bne.w	80101b6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	699b      	ldr	r3, [r3, #24]
 800fff4:	0a5b      	lsrs	r3, r3, #9
 800fff6:	693a      	ldr	r2, [r7, #16]
 800fff8:	8952      	ldrh	r2, [r2, #10]
 800fffa:	3a01      	subs	r2, #1
 800fffc:	4013      	ands	r3, r2
 800fffe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d143      	bne.n	801008e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	699b      	ldr	r3, [r3, #24]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d10c      	bne.n	8010028 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010016:	2b00      	cmp	r3, #0
 8010018:	d11a      	bne.n	8010050 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2100      	movs	r1, #0
 801001e:	4618      	mov	r0, r3
 8010020:	f7fe fe64 	bl	800ecec <create_chain>
 8010024:	62b8      	str	r0, [r7, #40]	; 0x28
 8010026:	e013      	b.n	8010050 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801002c:	2b00      	cmp	r3, #0
 801002e:	d007      	beq.n	8010040 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	699b      	ldr	r3, [r3, #24]
 8010034:	4619      	mov	r1, r3
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	f7fe fef0 	bl	800ee1c <clmt_clust>
 801003c:	62b8      	str	r0, [r7, #40]	; 0x28
 801003e:	e007      	b.n	8010050 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	69db      	ldr	r3, [r3, #28]
 8010046:	4619      	mov	r1, r3
 8010048:	4610      	mov	r0, r2
 801004a:	f7fe fe4f 	bl	800ecec <create_chain>
 801004e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010052:	2b00      	cmp	r3, #0
 8010054:	f000 80f2 	beq.w	801023c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801005a:	2b01      	cmp	r3, #1
 801005c:	d104      	bne.n	8010068 <f_write+0xfc>
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2202      	movs	r2, #2
 8010062:	755a      	strb	r2, [r3, #21]
 8010064:	2302      	movs	r3, #2
 8010066:	e0f2      	b.n	801024e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006e:	d104      	bne.n	801007a <f_write+0x10e>
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2201      	movs	r2, #1
 8010074:	755a      	strb	r2, [r3, #21]
 8010076:	2301      	movs	r3, #1
 8010078:	e0e9      	b.n	801024e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801007e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d102      	bne.n	801008e <f_write+0x122>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801008c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	7d1b      	ldrb	r3, [r3, #20]
 8010092:	b25b      	sxtb	r3, r3
 8010094:	2b00      	cmp	r3, #0
 8010096:	da18      	bge.n	80100ca <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	7858      	ldrb	r0, [r3, #1]
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	6a1a      	ldr	r2, [r3, #32]
 80100a6:	2301      	movs	r3, #1
 80100a8:	f7fe f880 	bl	800e1ac <disk_write>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d004      	beq.n	80100bc <f_write+0x150>
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2201      	movs	r2, #1
 80100b6:	755a      	strb	r2, [r3, #21]
 80100b8:	2301      	movs	r3, #1
 80100ba:	e0c8      	b.n	801024e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	7d1b      	ldrb	r3, [r3, #20]
 80100c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100c4:	b2da      	uxtb	r2, r3
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80100ca:	693a      	ldr	r2, [r7, #16]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	69db      	ldr	r3, [r3, #28]
 80100d0:	4619      	mov	r1, r3
 80100d2:	4610      	mov	r0, r2
 80100d4:	f7fe fbf4 	bl	800e8c0 <clust2sect>
 80100d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d104      	bne.n	80100ea <f_write+0x17e>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2202      	movs	r2, #2
 80100e4:	755a      	strb	r2, [r3, #21]
 80100e6:	2302      	movs	r3, #2
 80100e8:	e0b1      	b.n	801024e <f_write+0x2e2>
			sect += csect;
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	69bb      	ldr	r3, [r7, #24]
 80100ee:	4413      	add	r3, r2
 80100f0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	0a5b      	lsrs	r3, r3, #9
 80100f6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80100f8:	6a3b      	ldr	r3, [r7, #32]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d03c      	beq.n	8010178 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80100fe:	69ba      	ldr	r2, [r7, #24]
 8010100:	6a3b      	ldr	r3, [r7, #32]
 8010102:	4413      	add	r3, r2
 8010104:	693a      	ldr	r2, [r7, #16]
 8010106:	8952      	ldrh	r2, [r2, #10]
 8010108:	4293      	cmp	r3, r2
 801010a:	d905      	bls.n	8010118 <f_write+0x1ac>
					cc = fs->csize - csect;
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	895b      	ldrh	r3, [r3, #10]
 8010110:	461a      	mov	r2, r3
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	1ad3      	subs	r3, r2, r3
 8010116:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	7858      	ldrb	r0, [r3, #1]
 801011c:	6a3b      	ldr	r3, [r7, #32]
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	69f9      	ldr	r1, [r7, #28]
 8010122:	f7fe f843 	bl	800e1ac <disk_write>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d004      	beq.n	8010136 <f_write+0x1ca>
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2201      	movs	r2, #1
 8010130:	755a      	strb	r2, [r3, #21]
 8010132:	2301      	movs	r3, #1
 8010134:	e08b      	b.n	801024e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	6a1a      	ldr	r2, [r3, #32]
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	1ad3      	subs	r3, r2, r3
 801013e:	6a3a      	ldr	r2, [r7, #32]
 8010140:	429a      	cmp	r2, r3
 8010142:	d915      	bls.n	8010170 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6a1a      	ldr	r2, [r3, #32]
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	025b      	lsls	r3, r3, #9
 8010154:	69fa      	ldr	r2, [r7, #28]
 8010156:	4413      	add	r3, r2
 8010158:	f44f 7200 	mov.w	r2, #512	; 0x200
 801015c:	4619      	mov	r1, r3
 801015e:	f7fe f8e5 	bl	800e32c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	7d1b      	ldrb	r3, [r3, #20]
 8010166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801016a:	b2da      	uxtb	r2, r3
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010170:	6a3b      	ldr	r3, [r7, #32]
 8010172:	025b      	lsls	r3, r3, #9
 8010174:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010176:	e03f      	b.n	80101f8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6a1b      	ldr	r3, [r3, #32]
 801017c:	697a      	ldr	r2, [r7, #20]
 801017e:	429a      	cmp	r2, r3
 8010180:	d016      	beq.n	80101b0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	699a      	ldr	r2, [r3, #24]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801018a:	429a      	cmp	r2, r3
 801018c:	d210      	bcs.n	80101b0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	7858      	ldrb	r0, [r3, #1]
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010198:	2301      	movs	r3, #1
 801019a:	697a      	ldr	r2, [r7, #20]
 801019c:	f7fd ffe6 	bl	800e16c <disk_read>
 80101a0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d004      	beq.n	80101b0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2201      	movs	r2, #1
 80101aa:	755a      	strb	r2, [r3, #21]
 80101ac:	2301      	movs	r3, #1
 80101ae:	e04e      	b.n	801024e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	697a      	ldr	r2, [r7, #20]
 80101b4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80101c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80101c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d901      	bls.n	80101d0 <f_write+0x264>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	699b      	ldr	r3, [r3, #24]
 80101da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101de:	4413      	add	r3, r2
 80101e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101e2:	69f9      	ldr	r1, [r7, #28]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7fe f8a1 	bl	800e32c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	7d1b      	ldrb	r3, [r3, #20]
 80101ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80101f2:	b2da      	uxtb	r2, r3
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80101f8:	69fa      	ldr	r2, [r7, #28]
 80101fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fc:	4413      	add	r3, r2
 80101fe:	61fb      	str	r3, [r7, #28]
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	699a      	ldr	r2, [r3, #24]
 8010204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010206:	441a      	add	r2, r3
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	619a      	str	r2, [r3, #24]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	68da      	ldr	r2, [r3, #12]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	699b      	ldr	r3, [r3, #24]
 8010214:	429a      	cmp	r2, r3
 8010216:	bf38      	it	cc
 8010218:	461a      	movcc	r2, r3
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	60da      	str	r2, [r3, #12]
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010224:	441a      	add	r2, r3
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	601a      	str	r2, [r3, #0]
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022e:	1ad3      	subs	r3, r2, r3
 8010230:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	f47f aed4 	bne.w	800ffe2 <f_write+0x76>
 801023a:	e000      	b.n	801023e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801023c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	7d1b      	ldrb	r3, [r3, #20]
 8010242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010246:	b2da      	uxtb	r2, r3
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	3730      	adds	r7, #48	; 0x30
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b086      	sub	sp, #24
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f107 0208 	add.w	r2, r7, #8
 8010264:	4611      	mov	r1, r2
 8010266:	4618      	mov	r0, r3
 8010268:	f7ff fc46 	bl	800faf8 <validate>
 801026c:	4603      	mov	r3, r0
 801026e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010270:	7dfb      	ldrb	r3, [r7, #23]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d168      	bne.n	8010348 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	7d1b      	ldrb	r3, [r3, #20]
 801027a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801027e:	2b00      	cmp	r3, #0
 8010280:	d062      	beq.n	8010348 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	7d1b      	ldrb	r3, [r3, #20]
 8010286:	b25b      	sxtb	r3, r3
 8010288:	2b00      	cmp	r3, #0
 801028a:	da15      	bge.n	80102b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	7858      	ldrb	r0, [r3, #1]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6a1a      	ldr	r2, [r3, #32]
 801029a:	2301      	movs	r3, #1
 801029c:	f7fd ff86 	bl	800e1ac <disk_write>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d001      	beq.n	80102aa <f_sync+0x54>
 80102a6:	2301      	movs	r3, #1
 80102a8:	e04f      	b.n	801034a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	7d1b      	ldrb	r3, [r3, #20]
 80102ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102b2:	b2da      	uxtb	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80102b8:	f7fd fcd6 	bl	800dc68 <get_fattime>
 80102bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c4:	4619      	mov	r1, r3
 80102c6:	4610      	mov	r0, r2
 80102c8:	f7fe fa5e 	bl	800e788 <move_window>
 80102cc:	4603      	mov	r3, r0
 80102ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80102d0:	7dfb      	ldrb	r3, [r7, #23]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d138      	bne.n	8010348 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	330b      	adds	r3, #11
 80102e0:	781a      	ldrb	r2, [r3, #0]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	330b      	adds	r3, #11
 80102e6:	f042 0220 	orr.w	r2, r2, #32
 80102ea:	b2d2      	uxtb	r2, r2
 80102ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6818      	ldr	r0, [r3, #0]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	461a      	mov	r2, r3
 80102f8:	68f9      	ldr	r1, [r7, #12]
 80102fa:	f7fe ff69 	bl	800f1d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f103 021c 	add.w	r2, r3, #28
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	4619      	mov	r1, r3
 801030a:	4610      	mov	r0, r2
 801030c:	f7fd ffe2 	bl	800e2d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	3316      	adds	r3, #22
 8010314:	6939      	ldr	r1, [r7, #16]
 8010316:	4618      	mov	r0, r3
 8010318:	f7fd ffdc 	bl	800e2d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	3312      	adds	r3, #18
 8010320:	2100      	movs	r1, #0
 8010322:	4618      	mov	r0, r3
 8010324:	f7fd ffbb 	bl	800e29e <st_word>
					fs->wflag = 1;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2201      	movs	r2, #1
 801032c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	4618      	mov	r0, r3
 8010332:	f7fe fa57 	bl	800e7e4 <sync_fs>
 8010336:	4603      	mov	r3, r0
 8010338:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	7d1b      	ldrb	r3, [r3, #20]
 801033e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010342:	b2da      	uxtb	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010348:	7dfb      	ldrb	r3, [r7, #23]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3718      	adds	r7, #24
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b084      	sub	sp, #16
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7ff ff7b 	bl	8010256 <f_sync>
 8010360:	4603      	mov	r3, r0
 8010362:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010364:	7bfb      	ldrb	r3, [r7, #15]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d118      	bne.n	801039c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f107 0208 	add.w	r2, r7, #8
 8010370:	4611      	mov	r1, r2
 8010372:	4618      	mov	r0, r3
 8010374:	f7ff fbc0 	bl	800faf8 <validate>
 8010378:	4603      	mov	r3, r0
 801037a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801037c:	7bfb      	ldrb	r3, [r7, #15]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d10c      	bne.n	801039c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	4618      	mov	r0, r3
 8010388:	f7fe f95a 	bl	800e640 <dec_lock>
 801038c:	4603      	mov	r3, r0
 801038e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010390:	7bfb      	ldrb	r3, [r7, #15]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d102      	bne.n	801039c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801039c:	7bfb      	ldrb	r3, [r7, #15]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3710      	adds	r7, #16
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80103a8:	b590      	push	{r4, r7, lr}
 80103aa:	b09d      	sub	sp, #116	; 0x74
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	607a      	str	r2, [r7, #4]
 80103b2:	603b      	str	r3, [r7, #0]
 80103b4:	460b      	mov	r3, r1
 80103b6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80103b8:	2301      	movs	r3, #1
 80103ba:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80103bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103c0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80103c2:	f107 030c 	add.w	r3, r7, #12
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7ff f8af 	bl	800f52a <get_ldnumber>
 80103cc:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80103ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	da02      	bge.n	80103da <f_mkfs+0x32>
 80103d4:	230b      	movs	r3, #11
 80103d6:	f000 bc0d 	b.w	8010bf4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80103da:	4a94      	ldr	r2, [pc, #592]	; (801062c <f_mkfs+0x284>)
 80103dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d005      	beq.n	80103f2 <f_mkfs+0x4a>
 80103e6:	4a91      	ldr	r2, [pc, #580]	; (801062c <f_mkfs+0x284>)
 80103e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103ee:	2200      	movs	r2, #0
 80103f0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80103f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80103f8:	2300      	movs	r3, #0
 80103fa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80103fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010402:	4618      	mov	r0, r3
 8010404:	f7fd fe8c 	bl	800e120 <disk_initialize>
 8010408:	4603      	mov	r3, r0
 801040a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801040e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010412:	f003 0301 	and.w	r3, r3, #1
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <f_mkfs+0x76>
 801041a:	2303      	movs	r3, #3
 801041c:	e3ea      	b.n	8010bf4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801041e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010422:	f003 0304 	and.w	r3, r3, #4
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <f_mkfs+0x86>
 801042a:	230a      	movs	r3, #10
 801042c:	e3e2      	b.n	8010bf4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801042e:	f107 0214 	add.w	r2, r7, #20
 8010432:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010436:	2103      	movs	r1, #3
 8010438:	4618      	mov	r0, r3
 801043a:	f7fd fed7 	bl	800e1ec <disk_ioctl>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d10c      	bne.n	801045e <f_mkfs+0xb6>
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d009      	beq.n	801045e <f_mkfs+0xb6>
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010450:	d805      	bhi.n	801045e <f_mkfs+0xb6>
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	1e5a      	subs	r2, r3, #1
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	4013      	ands	r3, r2
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <f_mkfs+0xba>
 801045e:	2301      	movs	r3, #1
 8010460:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8010462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010466:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d003      	beq.n	8010476 <f_mkfs+0xce>
 801046e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	429a      	cmp	r2, r3
 8010474:	d309      	bcc.n	801048a <f_mkfs+0xe2>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801047c:	d805      	bhi.n	801048a <f_mkfs+0xe2>
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	1e5a      	subs	r2, r3, #1
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4013      	ands	r3, r2
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <f_mkfs+0xe6>
 801048a:	2313      	movs	r3, #19
 801048c:	e3b2      	b.n	8010bf4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 801048e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	fbb2 f3f3 	udiv	r3, r2, r3
 8010496:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 801049c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801049e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80104a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80104a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80104a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80104aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ac:	fb02 f303 	mul.w	r3, r2, r3
 80104b0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80104b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d101      	bne.n	80104bc <f_mkfs+0x114>
 80104b8:	230e      	movs	r3, #14
 80104ba:	e39b      	b.n	8010bf4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80104bc:	f107 0210 	add.w	r2, r7, #16
 80104c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80104c4:	2101      	movs	r1, #1
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fd fe90 	bl	800e1ec <disk_ioctl>
 80104cc:	4603      	mov	r3, r0
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d001      	beq.n	80104d6 <f_mkfs+0x12e>
 80104d2:	2301      	movs	r3, #1
 80104d4:	e38e      	b.n	8010bf4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80104d6:	7afb      	ldrb	r3, [r7, #11]
 80104d8:	f003 0308 	and.w	r3, r3, #8
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d001      	beq.n	80104e4 <f_mkfs+0x13c>
 80104e0:	2300      	movs	r3, #0
 80104e2:	e000      	b.n	80104e6 <f_mkfs+0x13e>
 80104e4:	233f      	movs	r3, #63	; 0x3f
 80104e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d901      	bls.n	80104f4 <f_mkfs+0x14c>
 80104f0:	230e      	movs	r3, #14
 80104f2:	e37f      	b.n	8010bf4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80104f4:	693a      	ldr	r2, [r7, #16]
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	2b7f      	cmp	r3, #127	; 0x7f
 8010500:	d801      	bhi.n	8010506 <f_mkfs+0x15e>
 8010502:	230e      	movs	r3, #14
 8010504:	e376      	b.n	8010bf4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b80      	cmp	r3, #128	; 0x80
 801050a:	d901      	bls.n	8010510 <f_mkfs+0x168>
 801050c:	2313      	movs	r3, #19
 801050e:	e371      	b.n	8010bf4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8010510:	7afb      	ldrb	r3, [r7, #11]
 8010512:	f003 0302 	and.w	r3, r3, #2
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00d      	beq.n	8010536 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801051a:	7afb      	ldrb	r3, [r7, #11]
 801051c:	f003 0307 	and.w	r3, r3, #7
 8010520:	2b02      	cmp	r3, #2
 8010522:	d004      	beq.n	801052e <f_mkfs+0x186>
 8010524:	7afb      	ldrb	r3, [r7, #11]
 8010526:	f003 0301 	and.w	r3, r3, #1
 801052a:	2b00      	cmp	r3, #0
 801052c:	d103      	bne.n	8010536 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801052e:	2303      	movs	r3, #3
 8010530:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010534:	e009      	b.n	801054a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010536:	7afb      	ldrb	r3, [r7, #11]
 8010538:	f003 0301 	and.w	r3, r3, #1
 801053c:	2b00      	cmp	r3, #0
 801053e:	d101      	bne.n	8010544 <f_mkfs+0x19c>
 8010540:	2313      	movs	r3, #19
 8010542:	e357      	b.n	8010bf4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8010544:	2302      	movs	r3, #2
 8010546:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801054e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010552:	2b03      	cmp	r3, #3
 8010554:	d13c      	bne.n	80105d0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8010556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010558:	2b00      	cmp	r3, #0
 801055a:	d11b      	bne.n	8010594 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	0c5b      	lsrs	r3, r3, #17
 8010560:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8010562:	2300      	movs	r3, #0
 8010564:	64bb      	str	r3, [r7, #72]	; 0x48
 8010566:	2301      	movs	r3, #1
 8010568:	653b      	str	r3, [r7, #80]	; 0x50
 801056a:	e005      	b.n	8010578 <f_mkfs+0x1d0>
 801056c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801056e:	3301      	adds	r3, #1
 8010570:	64bb      	str	r3, [r7, #72]	; 0x48
 8010572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010574:	005b      	lsls	r3, r3, #1
 8010576:	653b      	str	r3, [r7, #80]	; 0x50
 8010578:	4a2d      	ldr	r2, [pc, #180]	; (8010630 <f_mkfs+0x288>)
 801057a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801057c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d007      	beq.n	8010594 <f_mkfs+0x1ec>
 8010584:	4a2a      	ldr	r2, [pc, #168]	; (8010630 <f_mkfs+0x288>)
 8010586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801058c:	461a      	mov	r2, r3
 801058e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010590:	4293      	cmp	r3, r2
 8010592:	d2eb      	bcs.n	801056c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8010594:	693a      	ldr	r2, [r7, #16]
 8010596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010598:	fbb2 f3f3 	udiv	r3, r2, r3
 801059c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801059e:	6a3b      	ldr	r3, [r7, #32]
 80105a0:	3302      	adds	r3, #2
 80105a2:	009a      	lsls	r2, r3, #2
 80105a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80105a6:	4413      	add	r3, r2
 80105a8:	1e5a      	subs	r2, r3, #1
 80105aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80105ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80105b0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80105b2:	2320      	movs	r3, #32
 80105b4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80105b6:	2300      	movs	r3, #0
 80105b8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d903      	bls.n	80105cc <f_mkfs+0x224>
 80105c4:	6a3b      	ldr	r3, [r7, #32]
 80105c6:	4a1b      	ldr	r2, [pc, #108]	; (8010634 <f_mkfs+0x28c>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d952      	bls.n	8010672 <f_mkfs+0x2ca>
 80105cc:	230e      	movs	r3, #14
 80105ce:	e311      	b.n	8010bf4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80105d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d11b      	bne.n	801060e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	0b1b      	lsrs	r3, r3, #12
 80105da:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80105dc:	2300      	movs	r3, #0
 80105de:	64bb      	str	r3, [r7, #72]	; 0x48
 80105e0:	2301      	movs	r3, #1
 80105e2:	653b      	str	r3, [r7, #80]	; 0x50
 80105e4:	e005      	b.n	80105f2 <f_mkfs+0x24a>
 80105e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105e8:	3301      	adds	r3, #1
 80105ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80105ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ee:	005b      	lsls	r3, r3, #1
 80105f0:	653b      	str	r3, [r7, #80]	; 0x50
 80105f2:	4a11      	ldr	r2, [pc, #68]	; (8010638 <f_mkfs+0x290>)
 80105f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d007      	beq.n	801060e <f_mkfs+0x266>
 80105fe:	4a0e      	ldr	r2, [pc, #56]	; (8010638 <f_mkfs+0x290>)
 8010600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010606:	461a      	mov	r2, r3
 8010608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801060a:	4293      	cmp	r3, r2
 801060c:	d2eb      	bcs.n	80105e6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 801060e:	693a      	ldr	r2, [r7, #16]
 8010610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010612:	fbb2 f3f3 	udiv	r3, r2, r3
 8010616:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8010618:	6a3b      	ldr	r3, [r7, #32]
 801061a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801061e:	4293      	cmp	r3, r2
 8010620:	d90c      	bls.n	801063c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8010622:	6a3b      	ldr	r3, [r7, #32]
 8010624:	3302      	adds	r3, #2
 8010626:	005b      	lsls	r3, r3, #1
 8010628:	65fb      	str	r3, [r7, #92]	; 0x5c
 801062a:	e012      	b.n	8010652 <f_mkfs+0x2aa>
 801062c:	20000df0 	.word	0x20000df0
 8010630:	0801837c 	.word	0x0801837c
 8010634:	0ffffff5 	.word	0x0ffffff5
 8010638:	0801838c 	.word	0x0801838c
				} else {
					fmt = FS_FAT12;
 801063c:	2301      	movs	r3, #1
 801063e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8010642:	6a3a      	ldr	r2, [r7, #32]
 8010644:	4613      	mov	r3, r2
 8010646:	005b      	lsls	r3, r3, #1
 8010648:	4413      	add	r3, r2
 801064a:	3301      	adds	r3, #1
 801064c:	085b      	lsrs	r3, r3, #1
 801064e:	3303      	adds	r3, #3
 8010650:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8010652:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010656:	4413      	add	r3, r2
 8010658:	1e5a      	subs	r2, r3, #1
 801065a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801065c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010660:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8010662:	2301      	movs	r3, #1
 8010664:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8010666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010668:	015a      	lsls	r2, r3, #5
 801066a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801066c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010670:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8010672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010676:	4413      	add	r3, r2
 8010678:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801067a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801067c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801067e:	fb03 f202 	mul.w	r2, r3, r2
 8010682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010684:	4413      	add	r3, r2
 8010686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010688:	4413      	add	r3, r2
 801068a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 801068c:	697a      	ldr	r2, [r7, #20]
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	4413      	add	r3, r2
 8010692:	1e5a      	subs	r2, r3, #1
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	425b      	negs	r3, r3
 8010698:	401a      	ands	r2, r3
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	1ad3      	subs	r3, r2, r3
 801069e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80106a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80106a4:	2b03      	cmp	r3, #3
 80106a6:	d108      	bne.n	80106ba <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80106a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ac:	4413      	add	r3, r2
 80106ae:	657b      	str	r3, [r7, #84]	; 0x54
 80106b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106b4:	4413      	add	r3, r2
 80106b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80106b8:	e006      	b.n	80106c8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80106ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80106bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106be:	fbb2 f3f3 	udiv	r3, r2, r3
 80106c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106c4:	4413      	add	r3, r2
 80106c6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80106c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106ca:	011a      	lsls	r2, r3, #4
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	441a      	add	r2, r3
 80106d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d2:	1ad2      	subs	r2, r2, r3
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d901      	bls.n	80106de <f_mkfs+0x336>
 80106da:	230e      	movs	r3, #14
 80106dc:	e28a      	b.n	8010bf4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80106de:	693a      	ldr	r2, [r7, #16]
 80106e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106e2:	1ad2      	subs	r2, r2, r3
 80106e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106e8:	fb01 f303 	mul.w	r3, r1, r3
 80106ec:	1ad2      	subs	r2, r2, r3
 80106ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106f0:	1ad2      	subs	r2, r2, r3
 80106f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80106f8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80106fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80106fe:	2b03      	cmp	r3, #3
 8010700:	d10f      	bne.n	8010722 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8010702:	6a3b      	ldr	r3, [r7, #32]
 8010704:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010708:	4293      	cmp	r3, r2
 801070a:	d80a      	bhi.n	8010722 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d105      	bne.n	801071e <f_mkfs+0x376>
 8010712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010714:	085b      	lsrs	r3, r3, #1
 8010716:	607b      	str	r3, [r7, #4]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d144      	bne.n	80107a8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801071e:	230e      	movs	r3, #14
 8010720:	e268      	b.n	8010bf4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8010722:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010726:	2b02      	cmp	r3, #2
 8010728:	d133      	bne.n	8010792 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801072a:	6a3b      	ldr	r3, [r7, #32]
 801072c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010730:	4293      	cmp	r3, r2
 8010732:	d91e      	bls.n	8010772 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d107      	bne.n	801074a <f_mkfs+0x3a2>
 801073a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801073c:	005b      	lsls	r3, r3, #1
 801073e:	2b40      	cmp	r3, #64	; 0x40
 8010740:	d803      	bhi.n	801074a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8010742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	607b      	str	r3, [r7, #4]
 8010748:	e033      	b.n	80107b2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801074a:	7afb      	ldrb	r3, [r7, #11]
 801074c:	f003 0302 	and.w	r3, r3, #2
 8010750:	2b00      	cmp	r3, #0
 8010752:	d003      	beq.n	801075c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8010754:	2303      	movs	r3, #3
 8010756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801075a:	e02a      	b.n	80107b2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d105      	bne.n	801076e <f_mkfs+0x3c6>
 8010762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010764:	005b      	lsls	r3, r3, #1
 8010766:	607b      	str	r3, [r7, #4]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2b80      	cmp	r3, #128	; 0x80
 801076c:	d91e      	bls.n	80107ac <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801076e:	230e      	movs	r3, #14
 8010770:	e240      	b.n	8010bf4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8010772:	6a3b      	ldr	r3, [r7, #32]
 8010774:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010778:	4293      	cmp	r3, r2
 801077a:	d80a      	bhi.n	8010792 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d105      	bne.n	801078e <f_mkfs+0x3e6>
 8010782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	607b      	str	r3, [r7, #4]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b80      	cmp	r3, #128	; 0x80
 801078c:	d910      	bls.n	80107b0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 801078e:	230e      	movs	r3, #14
 8010790:	e230      	b.n	8010bf4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8010792:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010796:	2b01      	cmp	r3, #1
 8010798:	d10c      	bne.n	80107b4 <f_mkfs+0x40c>
 801079a:	6a3b      	ldr	r3, [r7, #32]
 801079c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d907      	bls.n	80107b4 <f_mkfs+0x40c>
 80107a4:	230e      	movs	r3, #14
 80107a6:	e225      	b.n	8010bf4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80107a8:	bf00      	nop
 80107aa:	e6ce      	b.n	801054a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80107ac:	bf00      	nop
 80107ae:	e6cc      	b.n	801054a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80107b0:	bf00      	nop
			pau = au;
 80107b2:	e6ca      	b.n	801054a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80107b4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80107b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80107b8:	461a      	mov	r2, r3
 80107ba:	2100      	movs	r1, #0
 80107bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107be:	f7fd fdd6 	bl	800e36e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80107c2:	220b      	movs	r2, #11
 80107c4:	49b2      	ldr	r1, [pc, #712]	; (8010a90 <f_mkfs+0x6e8>)
 80107c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107c8:	f7fd fdb0 	bl	800e32c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	330b      	adds	r3, #11
 80107d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80107d2:	4611      	mov	r1, r2
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7fd fd62 	bl	800e29e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80107da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107dc:	330d      	adds	r3, #13
 80107de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107e0:	b2d2      	uxtb	r2, r2
 80107e2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80107e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e6:	330e      	adds	r3, #14
 80107e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80107ea:	b292      	uxth	r2, r2
 80107ec:	4611      	mov	r1, r2
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fd fd55 	bl	800e29e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80107f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f6:	3310      	adds	r3, #16
 80107f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107fa:	b2d2      	uxtb	r2, r2
 80107fc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80107fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010800:	f103 0211 	add.w	r2, r3, #17
 8010804:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010808:	2b03      	cmp	r3, #3
 801080a:	d002      	beq.n	8010812 <f_mkfs+0x46a>
 801080c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801080e:	b29b      	uxth	r3, r3
 8010810:	e000      	b.n	8010814 <f_mkfs+0x46c>
 8010812:	2300      	movs	r3, #0
 8010814:	4619      	mov	r1, r3
 8010816:	4610      	mov	r0, r2
 8010818:	f7fd fd41 	bl	800e29e <st_word>
		if (sz_vol < 0x10000) {
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010822:	d208      	bcs.n	8010836 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	3313      	adds	r3, #19
 8010828:	693a      	ldr	r2, [r7, #16]
 801082a:	b292      	uxth	r2, r2
 801082c:	4611      	mov	r1, r2
 801082e:	4618      	mov	r0, r3
 8010830:	f7fd fd35 	bl	800e29e <st_word>
 8010834:	e006      	b.n	8010844 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8010836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010838:	3320      	adds	r3, #32
 801083a:	693a      	ldr	r2, [r7, #16]
 801083c:	4611      	mov	r1, r2
 801083e:	4618      	mov	r0, r3
 8010840:	f7fd fd48 	bl	800e2d4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8010844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010846:	3315      	adds	r3, #21
 8010848:	22f8      	movs	r2, #248	; 0xf8
 801084a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 801084c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084e:	3318      	adds	r3, #24
 8010850:	213f      	movs	r1, #63	; 0x3f
 8010852:	4618      	mov	r0, r3
 8010854:	f7fd fd23 	bl	800e29e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8010858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085a:	331a      	adds	r3, #26
 801085c:	21ff      	movs	r1, #255	; 0xff
 801085e:	4618      	mov	r0, r3
 8010860:	f7fd fd1d 	bl	800e29e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8010864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010866:	331c      	adds	r3, #28
 8010868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801086a:	4618      	mov	r0, r3
 801086c:	f7fd fd32 	bl	800e2d4 <st_dword>
		if (fmt == FS_FAT32) {
 8010870:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010874:	2b03      	cmp	r3, #3
 8010876:	d131      	bne.n	80108dc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8010878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 801087e:	f7fd f9f3 	bl	800dc68 <get_fattime>
 8010882:	4603      	mov	r3, r0
 8010884:	4619      	mov	r1, r3
 8010886:	4620      	mov	r0, r4
 8010888:	f7fd fd24 	bl	800e2d4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 801088c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088e:	3324      	adds	r3, #36	; 0x24
 8010890:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010892:	4618      	mov	r0, r3
 8010894:	f7fd fd1e 	bl	800e2d4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8010898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089a:	332c      	adds	r3, #44	; 0x2c
 801089c:	2102      	movs	r1, #2
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fd fd18 	bl	800e2d4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80108a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a6:	3330      	adds	r3, #48	; 0x30
 80108a8:	2101      	movs	r1, #1
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fd fcf7 	bl	800e29e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80108b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b2:	3332      	adds	r3, #50	; 0x32
 80108b4:	2106      	movs	r1, #6
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fd fcf1 	bl	800e29e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80108bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108be:	3340      	adds	r3, #64	; 0x40
 80108c0:	2280      	movs	r2, #128	; 0x80
 80108c2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80108c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c6:	3342      	adds	r3, #66	; 0x42
 80108c8:	2229      	movs	r2, #41	; 0x29
 80108ca:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80108cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ce:	3347      	adds	r3, #71	; 0x47
 80108d0:	2213      	movs	r2, #19
 80108d2:	4970      	ldr	r1, [pc, #448]	; (8010a94 <f_mkfs+0x6ec>)
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7fd fd29 	bl	800e32c <mem_cpy>
 80108da:	e020      	b.n	801091e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80108dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108de:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80108e2:	f7fd f9c1 	bl	800dc68 <get_fattime>
 80108e6:	4603      	mov	r3, r0
 80108e8:	4619      	mov	r1, r3
 80108ea:	4620      	mov	r0, r4
 80108ec:	f7fd fcf2 	bl	800e2d4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80108f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f2:	3316      	adds	r3, #22
 80108f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80108f6:	b292      	uxth	r2, r2
 80108f8:	4611      	mov	r1, r2
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fd fccf 	bl	800e29e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8010900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010902:	3324      	adds	r3, #36	; 0x24
 8010904:	2280      	movs	r2, #128	; 0x80
 8010906:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8010908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090a:	3326      	adds	r3, #38	; 0x26
 801090c:	2229      	movs	r2, #41	; 0x29
 801090e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8010910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010912:	332b      	adds	r3, #43	; 0x2b
 8010914:	2213      	movs	r2, #19
 8010916:	4960      	ldr	r1, [pc, #384]	; (8010a98 <f_mkfs+0x6f0>)
 8010918:	4618      	mov	r0, r3
 801091a:	f7fd fd07 	bl	800e32c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 801091e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010920:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010924:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010928:	4618      	mov	r0, r3
 801092a:	f7fd fcb8 	bl	800e29e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801092e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010932:	2301      	movs	r3, #1
 8010934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010938:	f7fd fc38 	bl	800e1ac <disk_write>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d001      	beq.n	8010946 <f_mkfs+0x59e>
 8010942:	2301      	movs	r3, #1
 8010944:	e156      	b.n	8010bf4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8010946:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801094a:	2b03      	cmp	r3, #3
 801094c:	d140      	bne.n	80109d0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010950:	1d9a      	adds	r2, r3, #6
 8010952:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010956:	2301      	movs	r3, #1
 8010958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801095a:	f7fd fc27 	bl	800e1ac <disk_write>
			mem_set(buf, 0, ss);
 801095e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010960:	461a      	mov	r2, r3
 8010962:	2100      	movs	r1, #0
 8010964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010966:	f7fd fd02 	bl	800e36e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801096a:	494c      	ldr	r1, [pc, #304]	; (8010a9c <f_mkfs+0x6f4>)
 801096c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801096e:	f7fd fcb1 	bl	800e2d4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8010972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010974:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010978:	4949      	ldr	r1, [pc, #292]	; (8010aa0 <f_mkfs+0x6f8>)
 801097a:	4618      	mov	r0, r3
 801097c:	f7fd fcaa 	bl	800e2d4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8010980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010982:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010986:	6a3b      	ldr	r3, [r7, #32]
 8010988:	3b01      	subs	r3, #1
 801098a:	4619      	mov	r1, r3
 801098c:	4610      	mov	r0, r2
 801098e:	f7fd fca1 	bl	800e2d4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8010992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010994:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010998:	2102      	movs	r1, #2
 801099a:	4618      	mov	r0, r3
 801099c:	f7fd fc9a 	bl	800e2d4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80109a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80109a6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fd fc77 	bl	800e29e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b2:	1dda      	adds	r2, r3, #7
 80109b4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80109b8:	2301      	movs	r3, #1
 80109ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109bc:	f7fd fbf6 	bl	800e1ac <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c2:	1c5a      	adds	r2, r3, #1
 80109c4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80109c8:	2301      	movs	r3, #1
 80109ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109cc:	f7fd fbee 	bl	800e1ac <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80109d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109d2:	2100      	movs	r1, #0
 80109d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109d6:	f7fd fcca 	bl	800e36e <mem_set>
		sect = b_fat;		/* FAT start sector */
 80109da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109dc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80109de:	2300      	movs	r3, #0
 80109e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80109e2:	e04b      	b.n	8010a7c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80109e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80109e8:	2b03      	cmp	r3, #3
 80109ea:	d113      	bne.n	8010a14 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80109ec:	f06f 0107 	mvn.w	r1, #7
 80109f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109f2:	f7fd fc6f 	bl	800e2d4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80109f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f8:	3304      	adds	r3, #4
 80109fa:	f04f 31ff 	mov.w	r1, #4294967295
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fd fc68 	bl	800e2d4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8010a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a06:	3308      	adds	r3, #8
 8010a08:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fd fc61 	bl	800e2d4 <st_dword>
 8010a12:	e00b      	b.n	8010a2c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8010a14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d101      	bne.n	8010a20 <f_mkfs+0x678>
 8010a1c:	4b21      	ldr	r3, [pc, #132]	; (8010aa4 <f_mkfs+0x6fc>)
 8010a1e:	e001      	b.n	8010a24 <f_mkfs+0x67c>
 8010a20:	f06f 0307 	mvn.w	r3, #7
 8010a24:	4619      	mov	r1, r3
 8010a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a28:	f7fd fc54 	bl	800e2d4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a2e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a34:	4293      	cmp	r3, r2
 8010a36:	bf28      	it	cs
 8010a38:	4613      	movcs	r3, r2
 8010a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010a3c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a46:	f7fd fbb1 	bl	800e1ac <disk_write>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d001      	beq.n	8010a54 <f_mkfs+0x6ac>
 8010a50:	2301      	movs	r3, #1
 8010a52:	e0cf      	b.n	8010bf4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8010a54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010a56:	461a      	mov	r2, r3
 8010a58:	2100      	movs	r1, #0
 8010a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a5c:	f7fd fc87 	bl	800e36e <mem_set>
				sect += n; nsect -= n;
 8010a60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a64:	4413      	add	r3, r2
 8010a66:	667b      	str	r3, [r7, #100]	; 0x64
 8010a68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8010a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d1dc      	bne.n	8010a30 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a78:	3301      	adds	r3, #1
 8010a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d3af      	bcc.n	80109e4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8010a84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010a88:	2b03      	cmp	r3, #3
 8010a8a:	d10d      	bne.n	8010aa8 <f_mkfs+0x700>
 8010a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a8e:	e00c      	b.n	8010aaa <f_mkfs+0x702>
 8010a90:	08015bfc 	.word	0x08015bfc
 8010a94:	08015c08 	.word	0x08015c08
 8010a98:	08015c1c 	.word	0x08015c1c
 8010a9c:	41615252 	.word	0x41615252
 8010aa0:	61417272 	.word	0x61417272
 8010aa4:	00fffff8 	.word	0x00fffff8
 8010aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010aaa:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8010aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	bf28      	it	cs
 8010ab4:	4613      	movcs	r3, r2
 8010ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010ab8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010abe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ac2:	f7fd fb73 	bl	800e1ac <disk_write>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d001      	beq.n	8010ad0 <f_mkfs+0x728>
 8010acc:	2301      	movs	r3, #1
 8010ace:	e091      	b.n	8010bf4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8010ad0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ad4:	4413      	add	r3, r2
 8010ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8010ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010adc:	1ad3      	subs	r3, r2, r3
 8010ade:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8010ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1e2      	bne.n	8010aac <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8010ae6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010aea:	2b03      	cmp	r3, #3
 8010aec:	d103      	bne.n	8010af6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010aee:	230c      	movs	r3, #12
 8010af0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010af4:	e010      	b.n	8010b18 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010afc:	d303      	bcc.n	8010b06 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010afe:	2306      	movs	r3, #6
 8010b00:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010b04:	e008      	b.n	8010b18 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8010b06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b0a:	2b02      	cmp	r3, #2
 8010b0c:	d101      	bne.n	8010b12 <f_mkfs+0x76a>
 8010b0e:	2304      	movs	r3, #4
 8010b10:	e000      	b.n	8010b14 <f_mkfs+0x76c>
 8010b12:	2301      	movs	r3, #1
 8010b14:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8010b18:	7afb      	ldrb	r3, [r7, #11]
 8010b1a:	f003 0308 	and.w	r3, r3, #8
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d15b      	bne.n	8010bda <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8010b22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010b24:	461a      	mov	r2, r3
 8010b26:	2100      	movs	r1, #0
 8010b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b2a:	f7fd fc20 	bl	800e36e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fd fbb0 	bl	800e29e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010b44:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010b4c:	69bb      	ldr	r3, [r7, #24]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	2201      	movs	r2, #1
 8010b52:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	3302      	adds	r3, #2
 8010b58:	2201      	movs	r2, #1
 8010b5a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	3303      	adds	r3, #3
 8010b60:	2200      	movs	r2, #0
 8010b62:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	3304      	adds	r3, #4
 8010b68:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8010b6c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010b6e:	693a      	ldr	r2, [r7, #16]
 8010b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b72:	441a      	add	r2, r3
 8010b74:	4b21      	ldr	r3, [pc, #132]	; (8010bfc <f_mkfs+0x854>)
 8010b76:	fba3 1302 	umull	r1, r3, r3, r2
 8010b7a:	1ad2      	subs	r2, r2, r3
 8010b7c:	0852      	lsrs	r2, r2, #1
 8010b7e:	4413      	add	r3, r2
 8010b80:	0b5b      	lsrs	r3, r3, #13
 8010b82:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	3305      	adds	r3, #5
 8010b88:	22fe      	movs	r2, #254	; 0xfe
 8010b8a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8010b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b8e:	089b      	lsrs	r3, r3, #2
 8010b90:	b2da      	uxtb	r2, r3
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	3306      	adds	r3, #6
 8010b96:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8010b9a:	b2d2      	uxtb	r2, r2
 8010b9c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010b9e:	69bb      	ldr	r3, [r7, #24]
 8010ba0:	3307      	adds	r3, #7
 8010ba2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ba4:	b2d2      	uxtb	r2, r2
 8010ba6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	3308      	adds	r3, #8
 8010bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fd fb90 	bl	800e2d4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8010bb4:	69bb      	ldr	r3, [r7, #24]
 8010bb6:	330c      	adds	r3, #12
 8010bb8:	693a      	ldr	r2, [r7, #16]
 8010bba:	4611      	mov	r1, r2
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7fd fb89 	bl	800e2d4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8010bc2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	2200      	movs	r2, #0
 8010bca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010bcc:	f7fd faee 	bl	800e1ac <disk_write>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d001      	beq.n	8010bda <f_mkfs+0x832>
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	e00c      	b.n	8010bf4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8010bda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010bde:	2200      	movs	r2, #0
 8010be0:	2100      	movs	r1, #0
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fd fb02 	bl	800e1ec <disk_ioctl>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d001      	beq.n	8010bf2 <f_mkfs+0x84a>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e000      	b.n	8010bf4 <f_mkfs+0x84c>

	return FR_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3774      	adds	r7, #116	; 0x74
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd90      	pop	{r4, r7, pc}
 8010bfc:	0515565b 	.word	0x0515565b

08010c00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b087      	sub	sp, #28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010c16:	4b1f      	ldr	r3, [pc, #124]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c18:	7a5b      	ldrb	r3, [r3, #9]
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d131      	bne.n	8010c84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010c20:	4b1c      	ldr	r3, [pc, #112]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c22:	7a5b      	ldrb	r3, [r3, #9]
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	461a      	mov	r2, r3
 8010c28:	4b1a      	ldr	r3, [pc, #104]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c2a:	2100      	movs	r1, #0
 8010c2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010c2e:	4b19      	ldr	r3, [pc, #100]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c30:	7a5b      	ldrb	r3, [r3, #9]
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	4a17      	ldr	r2, [pc, #92]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	4413      	add	r3, r2
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010c3e:	4b15      	ldr	r3, [pc, #84]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c40:	7a5b      	ldrb	r3, [r3, #9]
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	461a      	mov	r2, r3
 8010c46:	4b13      	ldr	r3, [pc, #76]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c48:	4413      	add	r3, r2
 8010c4a:	79fa      	ldrb	r2, [r7, #7]
 8010c4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010c4e:	4b11      	ldr	r3, [pc, #68]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c50:	7a5b      	ldrb	r3, [r3, #9]
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	1c5a      	adds	r2, r3, #1
 8010c56:	b2d1      	uxtb	r1, r2
 8010c58:	4a0e      	ldr	r2, [pc, #56]	; (8010c94 <FATFS_LinkDriverEx+0x94>)
 8010c5a:	7251      	strb	r1, [r2, #9]
 8010c5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010c5e:	7dbb      	ldrb	r3, [r7, #22]
 8010c60:	3330      	adds	r3, #48	; 0x30
 8010c62:	b2da      	uxtb	r2, r3
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	223a      	movs	r2, #58	; 0x3a
 8010c6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	3302      	adds	r3, #2
 8010c74:	222f      	movs	r2, #47	; 0x2f
 8010c76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	3303      	adds	r3, #3
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010c80:	2300      	movs	r3, #0
 8010c82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	371c      	adds	r7, #28
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	20000e18 	.word	0x20000e18

08010c98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	6839      	ldr	r1, [r7, #0]
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f7ff ffaa 	bl	8010c00 <FATFS_LinkDriverEx>
 8010cac:	4603      	mov	r3, r0
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3708      	adds	r7, #8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
	...

08010cb8 <malloc>:
 8010cb8:	4b02      	ldr	r3, [pc, #8]	; (8010cc4 <malloc+0xc>)
 8010cba:	4601      	mov	r1, r0
 8010cbc:	6818      	ldr	r0, [r3, #0]
 8010cbe:	f000 b823 	b.w	8010d08 <_malloc_r>
 8010cc2:	bf00      	nop
 8010cc4:	2000007c 	.word	0x2000007c

08010cc8 <sbrk_aligned>:
 8010cc8:	b570      	push	{r4, r5, r6, lr}
 8010cca:	4e0e      	ldr	r6, [pc, #56]	; (8010d04 <sbrk_aligned+0x3c>)
 8010ccc:	460c      	mov	r4, r1
 8010cce:	6831      	ldr	r1, [r6, #0]
 8010cd0:	4605      	mov	r5, r0
 8010cd2:	b911      	cbnz	r1, 8010cda <sbrk_aligned+0x12>
 8010cd4:	f001 f880 	bl	8011dd8 <_sbrk_r>
 8010cd8:	6030      	str	r0, [r6, #0]
 8010cda:	4621      	mov	r1, r4
 8010cdc:	4628      	mov	r0, r5
 8010cde:	f001 f87b 	bl	8011dd8 <_sbrk_r>
 8010ce2:	1c43      	adds	r3, r0, #1
 8010ce4:	d00a      	beq.n	8010cfc <sbrk_aligned+0x34>
 8010ce6:	1cc4      	adds	r4, r0, #3
 8010ce8:	f024 0403 	bic.w	r4, r4, #3
 8010cec:	42a0      	cmp	r0, r4
 8010cee:	d007      	beq.n	8010d00 <sbrk_aligned+0x38>
 8010cf0:	1a21      	subs	r1, r4, r0
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	f001 f870 	bl	8011dd8 <_sbrk_r>
 8010cf8:	3001      	adds	r0, #1
 8010cfa:	d101      	bne.n	8010d00 <sbrk_aligned+0x38>
 8010cfc:	f04f 34ff 	mov.w	r4, #4294967295
 8010d00:	4620      	mov	r0, r4
 8010d02:	bd70      	pop	{r4, r5, r6, pc}
 8010d04:	20000e28 	.word	0x20000e28

08010d08 <_malloc_r>:
 8010d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d0c:	1ccd      	adds	r5, r1, #3
 8010d0e:	f025 0503 	bic.w	r5, r5, #3
 8010d12:	3508      	adds	r5, #8
 8010d14:	2d0c      	cmp	r5, #12
 8010d16:	bf38      	it	cc
 8010d18:	250c      	movcc	r5, #12
 8010d1a:	2d00      	cmp	r5, #0
 8010d1c:	4607      	mov	r7, r0
 8010d1e:	db01      	blt.n	8010d24 <_malloc_r+0x1c>
 8010d20:	42a9      	cmp	r1, r5
 8010d22:	d905      	bls.n	8010d30 <_malloc_r+0x28>
 8010d24:	230c      	movs	r3, #12
 8010d26:	603b      	str	r3, [r7, #0]
 8010d28:	2600      	movs	r6, #0
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010e04 <_malloc_r+0xfc>
 8010d34:	f000 f868 	bl	8010e08 <__malloc_lock>
 8010d38:	f8d8 3000 	ldr.w	r3, [r8]
 8010d3c:	461c      	mov	r4, r3
 8010d3e:	bb5c      	cbnz	r4, 8010d98 <_malloc_r+0x90>
 8010d40:	4629      	mov	r1, r5
 8010d42:	4638      	mov	r0, r7
 8010d44:	f7ff ffc0 	bl	8010cc8 <sbrk_aligned>
 8010d48:	1c43      	adds	r3, r0, #1
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	d155      	bne.n	8010dfa <_malloc_r+0xf2>
 8010d4e:	f8d8 4000 	ldr.w	r4, [r8]
 8010d52:	4626      	mov	r6, r4
 8010d54:	2e00      	cmp	r6, #0
 8010d56:	d145      	bne.n	8010de4 <_malloc_r+0xdc>
 8010d58:	2c00      	cmp	r4, #0
 8010d5a:	d048      	beq.n	8010dee <_malloc_r+0xe6>
 8010d5c:	6823      	ldr	r3, [r4, #0]
 8010d5e:	4631      	mov	r1, r6
 8010d60:	4638      	mov	r0, r7
 8010d62:	eb04 0903 	add.w	r9, r4, r3
 8010d66:	f001 f837 	bl	8011dd8 <_sbrk_r>
 8010d6a:	4581      	cmp	r9, r0
 8010d6c:	d13f      	bne.n	8010dee <_malloc_r+0xe6>
 8010d6e:	6821      	ldr	r1, [r4, #0]
 8010d70:	1a6d      	subs	r5, r5, r1
 8010d72:	4629      	mov	r1, r5
 8010d74:	4638      	mov	r0, r7
 8010d76:	f7ff ffa7 	bl	8010cc8 <sbrk_aligned>
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	d037      	beq.n	8010dee <_malloc_r+0xe6>
 8010d7e:	6823      	ldr	r3, [r4, #0]
 8010d80:	442b      	add	r3, r5
 8010d82:	6023      	str	r3, [r4, #0]
 8010d84:	f8d8 3000 	ldr.w	r3, [r8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d038      	beq.n	8010dfe <_malloc_r+0xf6>
 8010d8c:	685a      	ldr	r2, [r3, #4]
 8010d8e:	42a2      	cmp	r2, r4
 8010d90:	d12b      	bne.n	8010dea <_malloc_r+0xe2>
 8010d92:	2200      	movs	r2, #0
 8010d94:	605a      	str	r2, [r3, #4]
 8010d96:	e00f      	b.n	8010db8 <_malloc_r+0xb0>
 8010d98:	6822      	ldr	r2, [r4, #0]
 8010d9a:	1b52      	subs	r2, r2, r5
 8010d9c:	d41f      	bmi.n	8010dde <_malloc_r+0xd6>
 8010d9e:	2a0b      	cmp	r2, #11
 8010da0:	d917      	bls.n	8010dd2 <_malloc_r+0xca>
 8010da2:	1961      	adds	r1, r4, r5
 8010da4:	42a3      	cmp	r3, r4
 8010da6:	6025      	str	r5, [r4, #0]
 8010da8:	bf18      	it	ne
 8010daa:	6059      	strne	r1, [r3, #4]
 8010dac:	6863      	ldr	r3, [r4, #4]
 8010dae:	bf08      	it	eq
 8010db0:	f8c8 1000 	streq.w	r1, [r8]
 8010db4:	5162      	str	r2, [r4, r5]
 8010db6:	604b      	str	r3, [r1, #4]
 8010db8:	4638      	mov	r0, r7
 8010dba:	f104 060b 	add.w	r6, r4, #11
 8010dbe:	f000 f829 	bl	8010e14 <__malloc_unlock>
 8010dc2:	f026 0607 	bic.w	r6, r6, #7
 8010dc6:	1d23      	adds	r3, r4, #4
 8010dc8:	1af2      	subs	r2, r6, r3
 8010dca:	d0ae      	beq.n	8010d2a <_malloc_r+0x22>
 8010dcc:	1b9b      	subs	r3, r3, r6
 8010dce:	50a3      	str	r3, [r4, r2]
 8010dd0:	e7ab      	b.n	8010d2a <_malloc_r+0x22>
 8010dd2:	42a3      	cmp	r3, r4
 8010dd4:	6862      	ldr	r2, [r4, #4]
 8010dd6:	d1dd      	bne.n	8010d94 <_malloc_r+0x8c>
 8010dd8:	f8c8 2000 	str.w	r2, [r8]
 8010ddc:	e7ec      	b.n	8010db8 <_malloc_r+0xb0>
 8010dde:	4623      	mov	r3, r4
 8010de0:	6864      	ldr	r4, [r4, #4]
 8010de2:	e7ac      	b.n	8010d3e <_malloc_r+0x36>
 8010de4:	4634      	mov	r4, r6
 8010de6:	6876      	ldr	r6, [r6, #4]
 8010de8:	e7b4      	b.n	8010d54 <_malloc_r+0x4c>
 8010dea:	4613      	mov	r3, r2
 8010dec:	e7cc      	b.n	8010d88 <_malloc_r+0x80>
 8010dee:	230c      	movs	r3, #12
 8010df0:	603b      	str	r3, [r7, #0]
 8010df2:	4638      	mov	r0, r7
 8010df4:	f000 f80e 	bl	8010e14 <__malloc_unlock>
 8010df8:	e797      	b.n	8010d2a <_malloc_r+0x22>
 8010dfa:	6025      	str	r5, [r4, #0]
 8010dfc:	e7dc      	b.n	8010db8 <_malloc_r+0xb0>
 8010dfe:	605b      	str	r3, [r3, #4]
 8010e00:	deff      	udf	#255	; 0xff
 8010e02:	bf00      	nop
 8010e04:	20000e24 	.word	0x20000e24

08010e08 <__malloc_lock>:
 8010e08:	4801      	ldr	r0, [pc, #4]	; (8010e10 <__malloc_lock+0x8>)
 8010e0a:	f001 b832 	b.w	8011e72 <__retarget_lock_acquire_recursive>
 8010e0e:	bf00      	nop
 8010e10:	20000f6c 	.word	0x20000f6c

08010e14 <__malloc_unlock>:
 8010e14:	4801      	ldr	r0, [pc, #4]	; (8010e1c <__malloc_unlock+0x8>)
 8010e16:	f001 b82d 	b.w	8011e74 <__retarget_lock_release_recursive>
 8010e1a:	bf00      	nop
 8010e1c:	20000f6c 	.word	0x20000f6c

08010e20 <__cvt>:
 8010e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e24:	ec55 4b10 	vmov	r4, r5, d0
 8010e28:	2d00      	cmp	r5, #0
 8010e2a:	460e      	mov	r6, r1
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	462b      	mov	r3, r5
 8010e30:	bfbb      	ittet	lt
 8010e32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010e36:	461d      	movlt	r5, r3
 8010e38:	2300      	movge	r3, #0
 8010e3a:	232d      	movlt	r3, #45	; 0x2d
 8010e3c:	700b      	strb	r3, [r1, #0]
 8010e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010e44:	4691      	mov	r9, r2
 8010e46:	f023 0820 	bic.w	r8, r3, #32
 8010e4a:	bfbc      	itt	lt
 8010e4c:	4622      	movlt	r2, r4
 8010e4e:	4614      	movlt	r4, r2
 8010e50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010e54:	d005      	beq.n	8010e62 <__cvt+0x42>
 8010e56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010e5a:	d100      	bne.n	8010e5e <__cvt+0x3e>
 8010e5c:	3601      	adds	r6, #1
 8010e5e:	2102      	movs	r1, #2
 8010e60:	e000      	b.n	8010e64 <__cvt+0x44>
 8010e62:	2103      	movs	r1, #3
 8010e64:	ab03      	add	r3, sp, #12
 8010e66:	9301      	str	r3, [sp, #4]
 8010e68:	ab02      	add	r3, sp, #8
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	ec45 4b10 	vmov	d0, r4, r5
 8010e70:	4653      	mov	r3, sl
 8010e72:	4632      	mov	r2, r6
 8010e74:	f001 f8a4 	bl	8011fc0 <_dtoa_r>
 8010e78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010e7c:	4607      	mov	r7, r0
 8010e7e:	d102      	bne.n	8010e86 <__cvt+0x66>
 8010e80:	f019 0f01 	tst.w	r9, #1
 8010e84:	d022      	beq.n	8010ecc <__cvt+0xac>
 8010e86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010e8a:	eb07 0906 	add.w	r9, r7, r6
 8010e8e:	d110      	bne.n	8010eb2 <__cvt+0x92>
 8010e90:	783b      	ldrb	r3, [r7, #0]
 8010e92:	2b30      	cmp	r3, #48	; 0x30
 8010e94:	d10a      	bne.n	8010eac <__cvt+0x8c>
 8010e96:	2200      	movs	r2, #0
 8010e98:	2300      	movs	r3, #0
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	4629      	mov	r1, r5
 8010e9e:	f7ef fe43 	bl	8000b28 <__aeabi_dcmpeq>
 8010ea2:	b918      	cbnz	r0, 8010eac <__cvt+0x8c>
 8010ea4:	f1c6 0601 	rsb	r6, r6, #1
 8010ea8:	f8ca 6000 	str.w	r6, [sl]
 8010eac:	f8da 3000 	ldr.w	r3, [sl]
 8010eb0:	4499      	add	r9, r3
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	4629      	mov	r1, r5
 8010eba:	f7ef fe35 	bl	8000b28 <__aeabi_dcmpeq>
 8010ebe:	b108      	cbz	r0, 8010ec4 <__cvt+0xa4>
 8010ec0:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ec4:	2230      	movs	r2, #48	; 0x30
 8010ec6:	9b03      	ldr	r3, [sp, #12]
 8010ec8:	454b      	cmp	r3, r9
 8010eca:	d307      	bcc.n	8010edc <__cvt+0xbc>
 8010ecc:	9b03      	ldr	r3, [sp, #12]
 8010ece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ed0:	1bdb      	subs	r3, r3, r7
 8010ed2:	4638      	mov	r0, r7
 8010ed4:	6013      	str	r3, [r2, #0]
 8010ed6:	b004      	add	sp, #16
 8010ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010edc:	1c59      	adds	r1, r3, #1
 8010ede:	9103      	str	r1, [sp, #12]
 8010ee0:	701a      	strb	r2, [r3, #0]
 8010ee2:	e7f0      	b.n	8010ec6 <__cvt+0xa6>

08010ee4 <__exponent>:
 8010ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2900      	cmp	r1, #0
 8010eea:	bfb8      	it	lt
 8010eec:	4249      	neglt	r1, r1
 8010eee:	f803 2b02 	strb.w	r2, [r3], #2
 8010ef2:	bfb4      	ite	lt
 8010ef4:	222d      	movlt	r2, #45	; 0x2d
 8010ef6:	222b      	movge	r2, #43	; 0x2b
 8010ef8:	2909      	cmp	r1, #9
 8010efa:	7042      	strb	r2, [r0, #1]
 8010efc:	dd2a      	ble.n	8010f54 <__exponent+0x70>
 8010efe:	f10d 0207 	add.w	r2, sp, #7
 8010f02:	4617      	mov	r7, r2
 8010f04:	260a      	movs	r6, #10
 8010f06:	4694      	mov	ip, r2
 8010f08:	fb91 f5f6 	sdiv	r5, r1, r6
 8010f0c:	fb06 1415 	mls	r4, r6, r5, r1
 8010f10:	3430      	adds	r4, #48	; 0x30
 8010f12:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010f16:	460c      	mov	r4, r1
 8010f18:	2c63      	cmp	r4, #99	; 0x63
 8010f1a:	f102 32ff 	add.w	r2, r2, #4294967295
 8010f1e:	4629      	mov	r1, r5
 8010f20:	dcf1      	bgt.n	8010f06 <__exponent+0x22>
 8010f22:	3130      	adds	r1, #48	; 0x30
 8010f24:	f1ac 0402 	sub.w	r4, ip, #2
 8010f28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010f2c:	1c41      	adds	r1, r0, #1
 8010f2e:	4622      	mov	r2, r4
 8010f30:	42ba      	cmp	r2, r7
 8010f32:	d30a      	bcc.n	8010f4a <__exponent+0x66>
 8010f34:	f10d 0209 	add.w	r2, sp, #9
 8010f38:	eba2 020c 	sub.w	r2, r2, ip
 8010f3c:	42bc      	cmp	r4, r7
 8010f3e:	bf88      	it	hi
 8010f40:	2200      	movhi	r2, #0
 8010f42:	4413      	add	r3, r2
 8010f44:	1a18      	subs	r0, r3, r0
 8010f46:	b003      	add	sp, #12
 8010f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010f4e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010f52:	e7ed      	b.n	8010f30 <__exponent+0x4c>
 8010f54:	2330      	movs	r3, #48	; 0x30
 8010f56:	3130      	adds	r1, #48	; 0x30
 8010f58:	7083      	strb	r3, [r0, #2]
 8010f5a:	70c1      	strb	r1, [r0, #3]
 8010f5c:	1d03      	adds	r3, r0, #4
 8010f5e:	e7f1      	b.n	8010f44 <__exponent+0x60>

08010f60 <_printf_float>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	ed2d 8b02 	vpush	{d8}
 8010f68:	b08d      	sub	sp, #52	; 0x34
 8010f6a:	460c      	mov	r4, r1
 8010f6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010f70:	4616      	mov	r6, r2
 8010f72:	461f      	mov	r7, r3
 8010f74:	4605      	mov	r5, r0
 8010f76:	f000 fef7 	bl	8011d68 <_localeconv_r>
 8010f7a:	f8d0 a000 	ldr.w	sl, [r0]
 8010f7e:	4650      	mov	r0, sl
 8010f80:	f7ef f9a6 	bl	80002d0 <strlen>
 8010f84:	2300      	movs	r3, #0
 8010f86:	930a      	str	r3, [sp, #40]	; 0x28
 8010f88:	6823      	ldr	r3, [r4, #0]
 8010f8a:	9305      	str	r3, [sp, #20]
 8010f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8010f90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010f94:	3307      	adds	r3, #7
 8010f96:	f023 0307 	bic.w	r3, r3, #7
 8010f9a:	f103 0208 	add.w	r2, r3, #8
 8010f9e:	f8c8 2000 	str.w	r2, [r8]
 8010fa2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010faa:	9307      	str	r3, [sp, #28]
 8010fac:	f8cd 8018 	str.w	r8, [sp, #24]
 8010fb0:	ee08 0a10 	vmov	s16, r0
 8010fb4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010fb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fbc:	4b9e      	ldr	r3, [pc, #632]	; (8011238 <_printf_float+0x2d8>)
 8010fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc2:	f7ef fde3 	bl	8000b8c <__aeabi_dcmpun>
 8010fc6:	bb88      	cbnz	r0, 801102c <_printf_float+0xcc>
 8010fc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fcc:	4b9a      	ldr	r3, [pc, #616]	; (8011238 <_printf_float+0x2d8>)
 8010fce:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd2:	f7ef fdbd 	bl	8000b50 <__aeabi_dcmple>
 8010fd6:	bb48      	cbnz	r0, 801102c <_printf_float+0xcc>
 8010fd8:	2200      	movs	r2, #0
 8010fda:	2300      	movs	r3, #0
 8010fdc:	4640      	mov	r0, r8
 8010fde:	4649      	mov	r1, r9
 8010fe0:	f7ef fdac 	bl	8000b3c <__aeabi_dcmplt>
 8010fe4:	b110      	cbz	r0, 8010fec <_printf_float+0x8c>
 8010fe6:	232d      	movs	r3, #45	; 0x2d
 8010fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fec:	4a93      	ldr	r2, [pc, #588]	; (801123c <_printf_float+0x2dc>)
 8010fee:	4b94      	ldr	r3, [pc, #592]	; (8011240 <_printf_float+0x2e0>)
 8010ff0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010ff4:	bf94      	ite	ls
 8010ff6:	4690      	movls	r8, r2
 8010ff8:	4698      	movhi	r8, r3
 8010ffa:	2303      	movs	r3, #3
 8010ffc:	6123      	str	r3, [r4, #16]
 8010ffe:	9b05      	ldr	r3, [sp, #20]
 8011000:	f023 0304 	bic.w	r3, r3, #4
 8011004:	6023      	str	r3, [r4, #0]
 8011006:	f04f 0900 	mov.w	r9, #0
 801100a:	9700      	str	r7, [sp, #0]
 801100c:	4633      	mov	r3, r6
 801100e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011010:	4621      	mov	r1, r4
 8011012:	4628      	mov	r0, r5
 8011014:	f000 f9da 	bl	80113cc <_printf_common>
 8011018:	3001      	adds	r0, #1
 801101a:	f040 8090 	bne.w	801113e <_printf_float+0x1de>
 801101e:	f04f 30ff 	mov.w	r0, #4294967295
 8011022:	b00d      	add	sp, #52	; 0x34
 8011024:	ecbd 8b02 	vpop	{d8}
 8011028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102c:	4642      	mov	r2, r8
 801102e:	464b      	mov	r3, r9
 8011030:	4640      	mov	r0, r8
 8011032:	4649      	mov	r1, r9
 8011034:	f7ef fdaa 	bl	8000b8c <__aeabi_dcmpun>
 8011038:	b140      	cbz	r0, 801104c <_printf_float+0xec>
 801103a:	464b      	mov	r3, r9
 801103c:	2b00      	cmp	r3, #0
 801103e:	bfbc      	itt	lt
 8011040:	232d      	movlt	r3, #45	; 0x2d
 8011042:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011046:	4a7f      	ldr	r2, [pc, #508]	; (8011244 <_printf_float+0x2e4>)
 8011048:	4b7f      	ldr	r3, [pc, #508]	; (8011248 <_printf_float+0x2e8>)
 801104a:	e7d1      	b.n	8010ff0 <_printf_float+0x90>
 801104c:	6863      	ldr	r3, [r4, #4]
 801104e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011052:	9206      	str	r2, [sp, #24]
 8011054:	1c5a      	adds	r2, r3, #1
 8011056:	d13f      	bne.n	80110d8 <_printf_float+0x178>
 8011058:	2306      	movs	r3, #6
 801105a:	6063      	str	r3, [r4, #4]
 801105c:	9b05      	ldr	r3, [sp, #20]
 801105e:	6861      	ldr	r1, [r4, #4]
 8011060:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011064:	2300      	movs	r3, #0
 8011066:	9303      	str	r3, [sp, #12]
 8011068:	ab0a      	add	r3, sp, #40	; 0x28
 801106a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801106e:	ab09      	add	r3, sp, #36	; 0x24
 8011070:	ec49 8b10 	vmov	d0, r8, r9
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	6022      	str	r2, [r4, #0]
 8011078:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801107c:	4628      	mov	r0, r5
 801107e:	f7ff fecf 	bl	8010e20 <__cvt>
 8011082:	9b06      	ldr	r3, [sp, #24]
 8011084:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011086:	2b47      	cmp	r3, #71	; 0x47
 8011088:	4680      	mov	r8, r0
 801108a:	d108      	bne.n	801109e <_printf_float+0x13e>
 801108c:	1cc8      	adds	r0, r1, #3
 801108e:	db02      	blt.n	8011096 <_printf_float+0x136>
 8011090:	6863      	ldr	r3, [r4, #4]
 8011092:	4299      	cmp	r1, r3
 8011094:	dd41      	ble.n	801111a <_printf_float+0x1ba>
 8011096:	f1ab 0302 	sub.w	r3, fp, #2
 801109a:	fa5f fb83 	uxtb.w	fp, r3
 801109e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80110a2:	d820      	bhi.n	80110e6 <_printf_float+0x186>
 80110a4:	3901      	subs	r1, #1
 80110a6:	465a      	mov	r2, fp
 80110a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80110ac:	9109      	str	r1, [sp, #36]	; 0x24
 80110ae:	f7ff ff19 	bl	8010ee4 <__exponent>
 80110b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110b4:	1813      	adds	r3, r2, r0
 80110b6:	2a01      	cmp	r2, #1
 80110b8:	4681      	mov	r9, r0
 80110ba:	6123      	str	r3, [r4, #16]
 80110bc:	dc02      	bgt.n	80110c4 <_printf_float+0x164>
 80110be:	6822      	ldr	r2, [r4, #0]
 80110c0:	07d2      	lsls	r2, r2, #31
 80110c2:	d501      	bpl.n	80110c8 <_printf_float+0x168>
 80110c4:	3301      	adds	r3, #1
 80110c6:	6123      	str	r3, [r4, #16]
 80110c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d09c      	beq.n	801100a <_printf_float+0xaa>
 80110d0:	232d      	movs	r3, #45	; 0x2d
 80110d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110d6:	e798      	b.n	801100a <_printf_float+0xaa>
 80110d8:	9a06      	ldr	r2, [sp, #24]
 80110da:	2a47      	cmp	r2, #71	; 0x47
 80110dc:	d1be      	bne.n	801105c <_printf_float+0xfc>
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d1bc      	bne.n	801105c <_printf_float+0xfc>
 80110e2:	2301      	movs	r3, #1
 80110e4:	e7b9      	b.n	801105a <_printf_float+0xfa>
 80110e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80110ea:	d118      	bne.n	801111e <_printf_float+0x1be>
 80110ec:	2900      	cmp	r1, #0
 80110ee:	6863      	ldr	r3, [r4, #4]
 80110f0:	dd0b      	ble.n	801110a <_printf_float+0x1aa>
 80110f2:	6121      	str	r1, [r4, #16]
 80110f4:	b913      	cbnz	r3, 80110fc <_printf_float+0x19c>
 80110f6:	6822      	ldr	r2, [r4, #0]
 80110f8:	07d0      	lsls	r0, r2, #31
 80110fa:	d502      	bpl.n	8011102 <_printf_float+0x1a2>
 80110fc:	3301      	adds	r3, #1
 80110fe:	440b      	add	r3, r1
 8011100:	6123      	str	r3, [r4, #16]
 8011102:	65a1      	str	r1, [r4, #88]	; 0x58
 8011104:	f04f 0900 	mov.w	r9, #0
 8011108:	e7de      	b.n	80110c8 <_printf_float+0x168>
 801110a:	b913      	cbnz	r3, 8011112 <_printf_float+0x1b2>
 801110c:	6822      	ldr	r2, [r4, #0]
 801110e:	07d2      	lsls	r2, r2, #31
 8011110:	d501      	bpl.n	8011116 <_printf_float+0x1b6>
 8011112:	3302      	adds	r3, #2
 8011114:	e7f4      	b.n	8011100 <_printf_float+0x1a0>
 8011116:	2301      	movs	r3, #1
 8011118:	e7f2      	b.n	8011100 <_printf_float+0x1a0>
 801111a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801111e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011120:	4299      	cmp	r1, r3
 8011122:	db05      	blt.n	8011130 <_printf_float+0x1d0>
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	6121      	str	r1, [r4, #16]
 8011128:	07d8      	lsls	r0, r3, #31
 801112a:	d5ea      	bpl.n	8011102 <_printf_float+0x1a2>
 801112c:	1c4b      	adds	r3, r1, #1
 801112e:	e7e7      	b.n	8011100 <_printf_float+0x1a0>
 8011130:	2900      	cmp	r1, #0
 8011132:	bfd4      	ite	le
 8011134:	f1c1 0202 	rsble	r2, r1, #2
 8011138:	2201      	movgt	r2, #1
 801113a:	4413      	add	r3, r2
 801113c:	e7e0      	b.n	8011100 <_printf_float+0x1a0>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	055a      	lsls	r2, r3, #21
 8011142:	d407      	bmi.n	8011154 <_printf_float+0x1f4>
 8011144:	6923      	ldr	r3, [r4, #16]
 8011146:	4642      	mov	r2, r8
 8011148:	4631      	mov	r1, r6
 801114a:	4628      	mov	r0, r5
 801114c:	47b8      	blx	r7
 801114e:	3001      	adds	r0, #1
 8011150:	d12c      	bne.n	80111ac <_printf_float+0x24c>
 8011152:	e764      	b.n	801101e <_printf_float+0xbe>
 8011154:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011158:	f240 80e0 	bls.w	801131c <_printf_float+0x3bc>
 801115c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011160:	2200      	movs	r2, #0
 8011162:	2300      	movs	r3, #0
 8011164:	f7ef fce0 	bl	8000b28 <__aeabi_dcmpeq>
 8011168:	2800      	cmp	r0, #0
 801116a:	d034      	beq.n	80111d6 <_printf_float+0x276>
 801116c:	4a37      	ldr	r2, [pc, #220]	; (801124c <_printf_float+0x2ec>)
 801116e:	2301      	movs	r3, #1
 8011170:	4631      	mov	r1, r6
 8011172:	4628      	mov	r0, r5
 8011174:	47b8      	blx	r7
 8011176:	3001      	adds	r0, #1
 8011178:	f43f af51 	beq.w	801101e <_printf_float+0xbe>
 801117c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011180:	429a      	cmp	r2, r3
 8011182:	db02      	blt.n	801118a <_printf_float+0x22a>
 8011184:	6823      	ldr	r3, [r4, #0]
 8011186:	07d8      	lsls	r0, r3, #31
 8011188:	d510      	bpl.n	80111ac <_printf_float+0x24c>
 801118a:	ee18 3a10 	vmov	r3, s16
 801118e:	4652      	mov	r2, sl
 8011190:	4631      	mov	r1, r6
 8011192:	4628      	mov	r0, r5
 8011194:	47b8      	blx	r7
 8011196:	3001      	adds	r0, #1
 8011198:	f43f af41 	beq.w	801101e <_printf_float+0xbe>
 801119c:	f04f 0800 	mov.w	r8, #0
 80111a0:	f104 091a 	add.w	r9, r4, #26
 80111a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111a6:	3b01      	subs	r3, #1
 80111a8:	4543      	cmp	r3, r8
 80111aa:	dc09      	bgt.n	80111c0 <_printf_float+0x260>
 80111ac:	6823      	ldr	r3, [r4, #0]
 80111ae:	079b      	lsls	r3, r3, #30
 80111b0:	f100 8107 	bmi.w	80113c2 <_printf_float+0x462>
 80111b4:	68e0      	ldr	r0, [r4, #12]
 80111b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111b8:	4298      	cmp	r0, r3
 80111ba:	bfb8      	it	lt
 80111bc:	4618      	movlt	r0, r3
 80111be:	e730      	b.n	8011022 <_printf_float+0xc2>
 80111c0:	2301      	movs	r3, #1
 80111c2:	464a      	mov	r2, r9
 80111c4:	4631      	mov	r1, r6
 80111c6:	4628      	mov	r0, r5
 80111c8:	47b8      	blx	r7
 80111ca:	3001      	adds	r0, #1
 80111cc:	f43f af27 	beq.w	801101e <_printf_float+0xbe>
 80111d0:	f108 0801 	add.w	r8, r8, #1
 80111d4:	e7e6      	b.n	80111a4 <_printf_float+0x244>
 80111d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111d8:	2b00      	cmp	r3, #0
 80111da:	dc39      	bgt.n	8011250 <_printf_float+0x2f0>
 80111dc:	4a1b      	ldr	r2, [pc, #108]	; (801124c <_printf_float+0x2ec>)
 80111de:	2301      	movs	r3, #1
 80111e0:	4631      	mov	r1, r6
 80111e2:	4628      	mov	r0, r5
 80111e4:	47b8      	blx	r7
 80111e6:	3001      	adds	r0, #1
 80111e8:	f43f af19 	beq.w	801101e <_printf_float+0xbe>
 80111ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80111f0:	4313      	orrs	r3, r2
 80111f2:	d102      	bne.n	80111fa <_printf_float+0x29a>
 80111f4:	6823      	ldr	r3, [r4, #0]
 80111f6:	07d9      	lsls	r1, r3, #31
 80111f8:	d5d8      	bpl.n	80111ac <_printf_float+0x24c>
 80111fa:	ee18 3a10 	vmov	r3, s16
 80111fe:	4652      	mov	r2, sl
 8011200:	4631      	mov	r1, r6
 8011202:	4628      	mov	r0, r5
 8011204:	47b8      	blx	r7
 8011206:	3001      	adds	r0, #1
 8011208:	f43f af09 	beq.w	801101e <_printf_float+0xbe>
 801120c:	f04f 0900 	mov.w	r9, #0
 8011210:	f104 0a1a 	add.w	sl, r4, #26
 8011214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011216:	425b      	negs	r3, r3
 8011218:	454b      	cmp	r3, r9
 801121a:	dc01      	bgt.n	8011220 <_printf_float+0x2c0>
 801121c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801121e:	e792      	b.n	8011146 <_printf_float+0x1e6>
 8011220:	2301      	movs	r3, #1
 8011222:	4652      	mov	r2, sl
 8011224:	4631      	mov	r1, r6
 8011226:	4628      	mov	r0, r5
 8011228:	47b8      	blx	r7
 801122a:	3001      	adds	r0, #1
 801122c:	f43f aef7 	beq.w	801101e <_printf_float+0xbe>
 8011230:	f109 0901 	add.w	r9, r9, #1
 8011234:	e7ee      	b.n	8011214 <_printf_float+0x2b4>
 8011236:	bf00      	nop
 8011238:	7fefffff 	.word	0x7fefffff
 801123c:	0801839a 	.word	0x0801839a
 8011240:	0801839e 	.word	0x0801839e
 8011244:	080183a2 	.word	0x080183a2
 8011248:	080183a6 	.word	0x080183a6
 801124c:	080183aa 	.word	0x080183aa
 8011250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011254:	429a      	cmp	r2, r3
 8011256:	bfa8      	it	ge
 8011258:	461a      	movge	r2, r3
 801125a:	2a00      	cmp	r2, #0
 801125c:	4691      	mov	r9, r2
 801125e:	dc37      	bgt.n	80112d0 <_printf_float+0x370>
 8011260:	f04f 0b00 	mov.w	fp, #0
 8011264:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011268:	f104 021a 	add.w	r2, r4, #26
 801126c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801126e:	9305      	str	r3, [sp, #20]
 8011270:	eba3 0309 	sub.w	r3, r3, r9
 8011274:	455b      	cmp	r3, fp
 8011276:	dc33      	bgt.n	80112e0 <_printf_float+0x380>
 8011278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801127c:	429a      	cmp	r2, r3
 801127e:	db3b      	blt.n	80112f8 <_printf_float+0x398>
 8011280:	6823      	ldr	r3, [r4, #0]
 8011282:	07da      	lsls	r2, r3, #31
 8011284:	d438      	bmi.n	80112f8 <_printf_float+0x398>
 8011286:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801128a:	eba2 0903 	sub.w	r9, r2, r3
 801128e:	9b05      	ldr	r3, [sp, #20]
 8011290:	1ad2      	subs	r2, r2, r3
 8011292:	4591      	cmp	r9, r2
 8011294:	bfa8      	it	ge
 8011296:	4691      	movge	r9, r2
 8011298:	f1b9 0f00 	cmp.w	r9, #0
 801129c:	dc35      	bgt.n	801130a <_printf_float+0x3aa>
 801129e:	f04f 0800 	mov.w	r8, #0
 80112a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112a6:	f104 0a1a 	add.w	sl, r4, #26
 80112aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80112ae:	1a9b      	subs	r3, r3, r2
 80112b0:	eba3 0309 	sub.w	r3, r3, r9
 80112b4:	4543      	cmp	r3, r8
 80112b6:	f77f af79 	ble.w	80111ac <_printf_float+0x24c>
 80112ba:	2301      	movs	r3, #1
 80112bc:	4652      	mov	r2, sl
 80112be:	4631      	mov	r1, r6
 80112c0:	4628      	mov	r0, r5
 80112c2:	47b8      	blx	r7
 80112c4:	3001      	adds	r0, #1
 80112c6:	f43f aeaa 	beq.w	801101e <_printf_float+0xbe>
 80112ca:	f108 0801 	add.w	r8, r8, #1
 80112ce:	e7ec      	b.n	80112aa <_printf_float+0x34a>
 80112d0:	4613      	mov	r3, r2
 80112d2:	4631      	mov	r1, r6
 80112d4:	4642      	mov	r2, r8
 80112d6:	4628      	mov	r0, r5
 80112d8:	47b8      	blx	r7
 80112da:	3001      	adds	r0, #1
 80112dc:	d1c0      	bne.n	8011260 <_printf_float+0x300>
 80112de:	e69e      	b.n	801101e <_printf_float+0xbe>
 80112e0:	2301      	movs	r3, #1
 80112e2:	4631      	mov	r1, r6
 80112e4:	4628      	mov	r0, r5
 80112e6:	9205      	str	r2, [sp, #20]
 80112e8:	47b8      	blx	r7
 80112ea:	3001      	adds	r0, #1
 80112ec:	f43f ae97 	beq.w	801101e <_printf_float+0xbe>
 80112f0:	9a05      	ldr	r2, [sp, #20]
 80112f2:	f10b 0b01 	add.w	fp, fp, #1
 80112f6:	e7b9      	b.n	801126c <_printf_float+0x30c>
 80112f8:	ee18 3a10 	vmov	r3, s16
 80112fc:	4652      	mov	r2, sl
 80112fe:	4631      	mov	r1, r6
 8011300:	4628      	mov	r0, r5
 8011302:	47b8      	blx	r7
 8011304:	3001      	adds	r0, #1
 8011306:	d1be      	bne.n	8011286 <_printf_float+0x326>
 8011308:	e689      	b.n	801101e <_printf_float+0xbe>
 801130a:	9a05      	ldr	r2, [sp, #20]
 801130c:	464b      	mov	r3, r9
 801130e:	4442      	add	r2, r8
 8011310:	4631      	mov	r1, r6
 8011312:	4628      	mov	r0, r5
 8011314:	47b8      	blx	r7
 8011316:	3001      	adds	r0, #1
 8011318:	d1c1      	bne.n	801129e <_printf_float+0x33e>
 801131a:	e680      	b.n	801101e <_printf_float+0xbe>
 801131c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801131e:	2a01      	cmp	r2, #1
 8011320:	dc01      	bgt.n	8011326 <_printf_float+0x3c6>
 8011322:	07db      	lsls	r3, r3, #31
 8011324:	d53a      	bpl.n	801139c <_printf_float+0x43c>
 8011326:	2301      	movs	r3, #1
 8011328:	4642      	mov	r2, r8
 801132a:	4631      	mov	r1, r6
 801132c:	4628      	mov	r0, r5
 801132e:	47b8      	blx	r7
 8011330:	3001      	adds	r0, #1
 8011332:	f43f ae74 	beq.w	801101e <_printf_float+0xbe>
 8011336:	ee18 3a10 	vmov	r3, s16
 801133a:	4652      	mov	r2, sl
 801133c:	4631      	mov	r1, r6
 801133e:	4628      	mov	r0, r5
 8011340:	47b8      	blx	r7
 8011342:	3001      	adds	r0, #1
 8011344:	f43f ae6b 	beq.w	801101e <_printf_float+0xbe>
 8011348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801134c:	2200      	movs	r2, #0
 801134e:	2300      	movs	r3, #0
 8011350:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011354:	f7ef fbe8 	bl	8000b28 <__aeabi_dcmpeq>
 8011358:	b9d8      	cbnz	r0, 8011392 <_printf_float+0x432>
 801135a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801135e:	f108 0201 	add.w	r2, r8, #1
 8011362:	4631      	mov	r1, r6
 8011364:	4628      	mov	r0, r5
 8011366:	47b8      	blx	r7
 8011368:	3001      	adds	r0, #1
 801136a:	d10e      	bne.n	801138a <_printf_float+0x42a>
 801136c:	e657      	b.n	801101e <_printf_float+0xbe>
 801136e:	2301      	movs	r3, #1
 8011370:	4652      	mov	r2, sl
 8011372:	4631      	mov	r1, r6
 8011374:	4628      	mov	r0, r5
 8011376:	47b8      	blx	r7
 8011378:	3001      	adds	r0, #1
 801137a:	f43f ae50 	beq.w	801101e <_printf_float+0xbe>
 801137e:	f108 0801 	add.w	r8, r8, #1
 8011382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011384:	3b01      	subs	r3, #1
 8011386:	4543      	cmp	r3, r8
 8011388:	dcf1      	bgt.n	801136e <_printf_float+0x40e>
 801138a:	464b      	mov	r3, r9
 801138c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011390:	e6da      	b.n	8011148 <_printf_float+0x1e8>
 8011392:	f04f 0800 	mov.w	r8, #0
 8011396:	f104 0a1a 	add.w	sl, r4, #26
 801139a:	e7f2      	b.n	8011382 <_printf_float+0x422>
 801139c:	2301      	movs	r3, #1
 801139e:	4642      	mov	r2, r8
 80113a0:	e7df      	b.n	8011362 <_printf_float+0x402>
 80113a2:	2301      	movs	r3, #1
 80113a4:	464a      	mov	r2, r9
 80113a6:	4631      	mov	r1, r6
 80113a8:	4628      	mov	r0, r5
 80113aa:	47b8      	blx	r7
 80113ac:	3001      	adds	r0, #1
 80113ae:	f43f ae36 	beq.w	801101e <_printf_float+0xbe>
 80113b2:	f108 0801 	add.w	r8, r8, #1
 80113b6:	68e3      	ldr	r3, [r4, #12]
 80113b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80113ba:	1a5b      	subs	r3, r3, r1
 80113bc:	4543      	cmp	r3, r8
 80113be:	dcf0      	bgt.n	80113a2 <_printf_float+0x442>
 80113c0:	e6f8      	b.n	80111b4 <_printf_float+0x254>
 80113c2:	f04f 0800 	mov.w	r8, #0
 80113c6:	f104 0919 	add.w	r9, r4, #25
 80113ca:	e7f4      	b.n	80113b6 <_printf_float+0x456>

080113cc <_printf_common>:
 80113cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d0:	4616      	mov	r6, r2
 80113d2:	4699      	mov	r9, r3
 80113d4:	688a      	ldr	r2, [r1, #8]
 80113d6:	690b      	ldr	r3, [r1, #16]
 80113d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113dc:	4293      	cmp	r3, r2
 80113de:	bfb8      	it	lt
 80113e0:	4613      	movlt	r3, r2
 80113e2:	6033      	str	r3, [r6, #0]
 80113e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80113e8:	4607      	mov	r7, r0
 80113ea:	460c      	mov	r4, r1
 80113ec:	b10a      	cbz	r2, 80113f2 <_printf_common+0x26>
 80113ee:	3301      	adds	r3, #1
 80113f0:	6033      	str	r3, [r6, #0]
 80113f2:	6823      	ldr	r3, [r4, #0]
 80113f4:	0699      	lsls	r1, r3, #26
 80113f6:	bf42      	ittt	mi
 80113f8:	6833      	ldrmi	r3, [r6, #0]
 80113fa:	3302      	addmi	r3, #2
 80113fc:	6033      	strmi	r3, [r6, #0]
 80113fe:	6825      	ldr	r5, [r4, #0]
 8011400:	f015 0506 	ands.w	r5, r5, #6
 8011404:	d106      	bne.n	8011414 <_printf_common+0x48>
 8011406:	f104 0a19 	add.w	sl, r4, #25
 801140a:	68e3      	ldr	r3, [r4, #12]
 801140c:	6832      	ldr	r2, [r6, #0]
 801140e:	1a9b      	subs	r3, r3, r2
 8011410:	42ab      	cmp	r3, r5
 8011412:	dc26      	bgt.n	8011462 <_printf_common+0x96>
 8011414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011418:	1e13      	subs	r3, r2, #0
 801141a:	6822      	ldr	r2, [r4, #0]
 801141c:	bf18      	it	ne
 801141e:	2301      	movne	r3, #1
 8011420:	0692      	lsls	r2, r2, #26
 8011422:	d42b      	bmi.n	801147c <_printf_common+0xb0>
 8011424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011428:	4649      	mov	r1, r9
 801142a:	4638      	mov	r0, r7
 801142c:	47c0      	blx	r8
 801142e:	3001      	adds	r0, #1
 8011430:	d01e      	beq.n	8011470 <_printf_common+0xa4>
 8011432:	6823      	ldr	r3, [r4, #0]
 8011434:	6922      	ldr	r2, [r4, #16]
 8011436:	f003 0306 	and.w	r3, r3, #6
 801143a:	2b04      	cmp	r3, #4
 801143c:	bf02      	ittt	eq
 801143e:	68e5      	ldreq	r5, [r4, #12]
 8011440:	6833      	ldreq	r3, [r6, #0]
 8011442:	1aed      	subeq	r5, r5, r3
 8011444:	68a3      	ldr	r3, [r4, #8]
 8011446:	bf0c      	ite	eq
 8011448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801144c:	2500      	movne	r5, #0
 801144e:	4293      	cmp	r3, r2
 8011450:	bfc4      	itt	gt
 8011452:	1a9b      	subgt	r3, r3, r2
 8011454:	18ed      	addgt	r5, r5, r3
 8011456:	2600      	movs	r6, #0
 8011458:	341a      	adds	r4, #26
 801145a:	42b5      	cmp	r5, r6
 801145c:	d11a      	bne.n	8011494 <_printf_common+0xc8>
 801145e:	2000      	movs	r0, #0
 8011460:	e008      	b.n	8011474 <_printf_common+0xa8>
 8011462:	2301      	movs	r3, #1
 8011464:	4652      	mov	r2, sl
 8011466:	4649      	mov	r1, r9
 8011468:	4638      	mov	r0, r7
 801146a:	47c0      	blx	r8
 801146c:	3001      	adds	r0, #1
 801146e:	d103      	bne.n	8011478 <_printf_common+0xac>
 8011470:	f04f 30ff 	mov.w	r0, #4294967295
 8011474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011478:	3501      	adds	r5, #1
 801147a:	e7c6      	b.n	801140a <_printf_common+0x3e>
 801147c:	18e1      	adds	r1, r4, r3
 801147e:	1c5a      	adds	r2, r3, #1
 8011480:	2030      	movs	r0, #48	; 0x30
 8011482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011486:	4422      	add	r2, r4
 8011488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801148c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011490:	3302      	adds	r3, #2
 8011492:	e7c7      	b.n	8011424 <_printf_common+0x58>
 8011494:	2301      	movs	r3, #1
 8011496:	4622      	mov	r2, r4
 8011498:	4649      	mov	r1, r9
 801149a:	4638      	mov	r0, r7
 801149c:	47c0      	blx	r8
 801149e:	3001      	adds	r0, #1
 80114a0:	d0e6      	beq.n	8011470 <_printf_common+0xa4>
 80114a2:	3601      	adds	r6, #1
 80114a4:	e7d9      	b.n	801145a <_printf_common+0x8e>
	...

080114a8 <_printf_i>:
 80114a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114ac:	7e0f      	ldrb	r7, [r1, #24]
 80114ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80114b0:	2f78      	cmp	r7, #120	; 0x78
 80114b2:	4691      	mov	r9, r2
 80114b4:	4680      	mov	r8, r0
 80114b6:	460c      	mov	r4, r1
 80114b8:	469a      	mov	sl, r3
 80114ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80114be:	d807      	bhi.n	80114d0 <_printf_i+0x28>
 80114c0:	2f62      	cmp	r7, #98	; 0x62
 80114c2:	d80a      	bhi.n	80114da <_printf_i+0x32>
 80114c4:	2f00      	cmp	r7, #0
 80114c6:	f000 80d4 	beq.w	8011672 <_printf_i+0x1ca>
 80114ca:	2f58      	cmp	r7, #88	; 0x58
 80114cc:	f000 80c0 	beq.w	8011650 <_printf_i+0x1a8>
 80114d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80114d8:	e03a      	b.n	8011550 <_printf_i+0xa8>
 80114da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114de:	2b15      	cmp	r3, #21
 80114e0:	d8f6      	bhi.n	80114d0 <_printf_i+0x28>
 80114e2:	a101      	add	r1, pc, #4	; (adr r1, 80114e8 <_printf_i+0x40>)
 80114e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114e8:	08011541 	.word	0x08011541
 80114ec:	08011555 	.word	0x08011555
 80114f0:	080114d1 	.word	0x080114d1
 80114f4:	080114d1 	.word	0x080114d1
 80114f8:	080114d1 	.word	0x080114d1
 80114fc:	080114d1 	.word	0x080114d1
 8011500:	08011555 	.word	0x08011555
 8011504:	080114d1 	.word	0x080114d1
 8011508:	080114d1 	.word	0x080114d1
 801150c:	080114d1 	.word	0x080114d1
 8011510:	080114d1 	.word	0x080114d1
 8011514:	08011659 	.word	0x08011659
 8011518:	08011581 	.word	0x08011581
 801151c:	08011613 	.word	0x08011613
 8011520:	080114d1 	.word	0x080114d1
 8011524:	080114d1 	.word	0x080114d1
 8011528:	0801167b 	.word	0x0801167b
 801152c:	080114d1 	.word	0x080114d1
 8011530:	08011581 	.word	0x08011581
 8011534:	080114d1 	.word	0x080114d1
 8011538:	080114d1 	.word	0x080114d1
 801153c:	0801161b 	.word	0x0801161b
 8011540:	682b      	ldr	r3, [r5, #0]
 8011542:	1d1a      	adds	r2, r3, #4
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	602a      	str	r2, [r5, #0]
 8011548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801154c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011550:	2301      	movs	r3, #1
 8011552:	e09f      	b.n	8011694 <_printf_i+0x1ec>
 8011554:	6820      	ldr	r0, [r4, #0]
 8011556:	682b      	ldr	r3, [r5, #0]
 8011558:	0607      	lsls	r7, r0, #24
 801155a:	f103 0104 	add.w	r1, r3, #4
 801155e:	6029      	str	r1, [r5, #0]
 8011560:	d501      	bpl.n	8011566 <_printf_i+0xbe>
 8011562:	681e      	ldr	r6, [r3, #0]
 8011564:	e003      	b.n	801156e <_printf_i+0xc6>
 8011566:	0646      	lsls	r6, r0, #25
 8011568:	d5fb      	bpl.n	8011562 <_printf_i+0xba>
 801156a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801156e:	2e00      	cmp	r6, #0
 8011570:	da03      	bge.n	801157a <_printf_i+0xd2>
 8011572:	232d      	movs	r3, #45	; 0x2d
 8011574:	4276      	negs	r6, r6
 8011576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801157a:	485a      	ldr	r0, [pc, #360]	; (80116e4 <_printf_i+0x23c>)
 801157c:	230a      	movs	r3, #10
 801157e:	e012      	b.n	80115a6 <_printf_i+0xfe>
 8011580:	682b      	ldr	r3, [r5, #0]
 8011582:	6820      	ldr	r0, [r4, #0]
 8011584:	1d19      	adds	r1, r3, #4
 8011586:	6029      	str	r1, [r5, #0]
 8011588:	0605      	lsls	r5, r0, #24
 801158a:	d501      	bpl.n	8011590 <_printf_i+0xe8>
 801158c:	681e      	ldr	r6, [r3, #0]
 801158e:	e002      	b.n	8011596 <_printf_i+0xee>
 8011590:	0641      	lsls	r1, r0, #25
 8011592:	d5fb      	bpl.n	801158c <_printf_i+0xe4>
 8011594:	881e      	ldrh	r6, [r3, #0]
 8011596:	4853      	ldr	r0, [pc, #332]	; (80116e4 <_printf_i+0x23c>)
 8011598:	2f6f      	cmp	r7, #111	; 0x6f
 801159a:	bf0c      	ite	eq
 801159c:	2308      	moveq	r3, #8
 801159e:	230a      	movne	r3, #10
 80115a0:	2100      	movs	r1, #0
 80115a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80115a6:	6865      	ldr	r5, [r4, #4]
 80115a8:	60a5      	str	r5, [r4, #8]
 80115aa:	2d00      	cmp	r5, #0
 80115ac:	bfa2      	ittt	ge
 80115ae:	6821      	ldrge	r1, [r4, #0]
 80115b0:	f021 0104 	bicge.w	r1, r1, #4
 80115b4:	6021      	strge	r1, [r4, #0]
 80115b6:	b90e      	cbnz	r6, 80115bc <_printf_i+0x114>
 80115b8:	2d00      	cmp	r5, #0
 80115ba:	d04b      	beq.n	8011654 <_printf_i+0x1ac>
 80115bc:	4615      	mov	r5, r2
 80115be:	fbb6 f1f3 	udiv	r1, r6, r3
 80115c2:	fb03 6711 	mls	r7, r3, r1, r6
 80115c6:	5dc7      	ldrb	r7, [r0, r7]
 80115c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80115cc:	4637      	mov	r7, r6
 80115ce:	42bb      	cmp	r3, r7
 80115d0:	460e      	mov	r6, r1
 80115d2:	d9f4      	bls.n	80115be <_printf_i+0x116>
 80115d4:	2b08      	cmp	r3, #8
 80115d6:	d10b      	bne.n	80115f0 <_printf_i+0x148>
 80115d8:	6823      	ldr	r3, [r4, #0]
 80115da:	07de      	lsls	r6, r3, #31
 80115dc:	d508      	bpl.n	80115f0 <_printf_i+0x148>
 80115de:	6923      	ldr	r3, [r4, #16]
 80115e0:	6861      	ldr	r1, [r4, #4]
 80115e2:	4299      	cmp	r1, r3
 80115e4:	bfde      	ittt	le
 80115e6:	2330      	movle	r3, #48	; 0x30
 80115e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80115ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80115f0:	1b52      	subs	r2, r2, r5
 80115f2:	6122      	str	r2, [r4, #16]
 80115f4:	f8cd a000 	str.w	sl, [sp]
 80115f8:	464b      	mov	r3, r9
 80115fa:	aa03      	add	r2, sp, #12
 80115fc:	4621      	mov	r1, r4
 80115fe:	4640      	mov	r0, r8
 8011600:	f7ff fee4 	bl	80113cc <_printf_common>
 8011604:	3001      	adds	r0, #1
 8011606:	d14a      	bne.n	801169e <_printf_i+0x1f6>
 8011608:	f04f 30ff 	mov.w	r0, #4294967295
 801160c:	b004      	add	sp, #16
 801160e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	f043 0320 	orr.w	r3, r3, #32
 8011618:	6023      	str	r3, [r4, #0]
 801161a:	4833      	ldr	r0, [pc, #204]	; (80116e8 <_printf_i+0x240>)
 801161c:	2778      	movs	r7, #120	; 0x78
 801161e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	6829      	ldr	r1, [r5, #0]
 8011626:	061f      	lsls	r7, r3, #24
 8011628:	f851 6b04 	ldr.w	r6, [r1], #4
 801162c:	d402      	bmi.n	8011634 <_printf_i+0x18c>
 801162e:	065f      	lsls	r7, r3, #25
 8011630:	bf48      	it	mi
 8011632:	b2b6      	uxthmi	r6, r6
 8011634:	07df      	lsls	r7, r3, #31
 8011636:	bf48      	it	mi
 8011638:	f043 0320 	orrmi.w	r3, r3, #32
 801163c:	6029      	str	r1, [r5, #0]
 801163e:	bf48      	it	mi
 8011640:	6023      	strmi	r3, [r4, #0]
 8011642:	b91e      	cbnz	r6, 801164c <_printf_i+0x1a4>
 8011644:	6823      	ldr	r3, [r4, #0]
 8011646:	f023 0320 	bic.w	r3, r3, #32
 801164a:	6023      	str	r3, [r4, #0]
 801164c:	2310      	movs	r3, #16
 801164e:	e7a7      	b.n	80115a0 <_printf_i+0xf8>
 8011650:	4824      	ldr	r0, [pc, #144]	; (80116e4 <_printf_i+0x23c>)
 8011652:	e7e4      	b.n	801161e <_printf_i+0x176>
 8011654:	4615      	mov	r5, r2
 8011656:	e7bd      	b.n	80115d4 <_printf_i+0x12c>
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	6826      	ldr	r6, [r4, #0]
 801165c:	6961      	ldr	r1, [r4, #20]
 801165e:	1d18      	adds	r0, r3, #4
 8011660:	6028      	str	r0, [r5, #0]
 8011662:	0635      	lsls	r5, r6, #24
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	d501      	bpl.n	801166c <_printf_i+0x1c4>
 8011668:	6019      	str	r1, [r3, #0]
 801166a:	e002      	b.n	8011672 <_printf_i+0x1ca>
 801166c:	0670      	lsls	r0, r6, #25
 801166e:	d5fb      	bpl.n	8011668 <_printf_i+0x1c0>
 8011670:	8019      	strh	r1, [r3, #0]
 8011672:	2300      	movs	r3, #0
 8011674:	6123      	str	r3, [r4, #16]
 8011676:	4615      	mov	r5, r2
 8011678:	e7bc      	b.n	80115f4 <_printf_i+0x14c>
 801167a:	682b      	ldr	r3, [r5, #0]
 801167c:	1d1a      	adds	r2, r3, #4
 801167e:	602a      	str	r2, [r5, #0]
 8011680:	681d      	ldr	r5, [r3, #0]
 8011682:	6862      	ldr	r2, [r4, #4]
 8011684:	2100      	movs	r1, #0
 8011686:	4628      	mov	r0, r5
 8011688:	f7ee fdd2 	bl	8000230 <memchr>
 801168c:	b108      	cbz	r0, 8011692 <_printf_i+0x1ea>
 801168e:	1b40      	subs	r0, r0, r5
 8011690:	6060      	str	r0, [r4, #4]
 8011692:	6863      	ldr	r3, [r4, #4]
 8011694:	6123      	str	r3, [r4, #16]
 8011696:	2300      	movs	r3, #0
 8011698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801169c:	e7aa      	b.n	80115f4 <_printf_i+0x14c>
 801169e:	6923      	ldr	r3, [r4, #16]
 80116a0:	462a      	mov	r2, r5
 80116a2:	4649      	mov	r1, r9
 80116a4:	4640      	mov	r0, r8
 80116a6:	47d0      	blx	sl
 80116a8:	3001      	adds	r0, #1
 80116aa:	d0ad      	beq.n	8011608 <_printf_i+0x160>
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	079b      	lsls	r3, r3, #30
 80116b0:	d413      	bmi.n	80116da <_printf_i+0x232>
 80116b2:	68e0      	ldr	r0, [r4, #12]
 80116b4:	9b03      	ldr	r3, [sp, #12]
 80116b6:	4298      	cmp	r0, r3
 80116b8:	bfb8      	it	lt
 80116ba:	4618      	movlt	r0, r3
 80116bc:	e7a6      	b.n	801160c <_printf_i+0x164>
 80116be:	2301      	movs	r3, #1
 80116c0:	4632      	mov	r2, r6
 80116c2:	4649      	mov	r1, r9
 80116c4:	4640      	mov	r0, r8
 80116c6:	47d0      	blx	sl
 80116c8:	3001      	adds	r0, #1
 80116ca:	d09d      	beq.n	8011608 <_printf_i+0x160>
 80116cc:	3501      	adds	r5, #1
 80116ce:	68e3      	ldr	r3, [r4, #12]
 80116d0:	9903      	ldr	r1, [sp, #12]
 80116d2:	1a5b      	subs	r3, r3, r1
 80116d4:	42ab      	cmp	r3, r5
 80116d6:	dcf2      	bgt.n	80116be <_printf_i+0x216>
 80116d8:	e7eb      	b.n	80116b2 <_printf_i+0x20a>
 80116da:	2500      	movs	r5, #0
 80116dc:	f104 0619 	add.w	r6, r4, #25
 80116e0:	e7f5      	b.n	80116ce <_printf_i+0x226>
 80116e2:	bf00      	nop
 80116e4:	080183ac 	.word	0x080183ac
 80116e8:	080183bd 	.word	0x080183bd

080116ec <_scanf_float>:
 80116ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f0:	b087      	sub	sp, #28
 80116f2:	4617      	mov	r7, r2
 80116f4:	9303      	str	r3, [sp, #12]
 80116f6:	688b      	ldr	r3, [r1, #8]
 80116f8:	1e5a      	subs	r2, r3, #1
 80116fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80116fe:	bf83      	ittte	hi
 8011700:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011704:	195b      	addhi	r3, r3, r5
 8011706:	9302      	strhi	r3, [sp, #8]
 8011708:	2300      	movls	r3, #0
 801170a:	bf86      	itte	hi
 801170c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011710:	608b      	strhi	r3, [r1, #8]
 8011712:	9302      	strls	r3, [sp, #8]
 8011714:	680b      	ldr	r3, [r1, #0]
 8011716:	468b      	mov	fp, r1
 8011718:	2500      	movs	r5, #0
 801171a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801171e:	f84b 3b1c 	str.w	r3, [fp], #28
 8011722:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011726:	4680      	mov	r8, r0
 8011728:	460c      	mov	r4, r1
 801172a:	465e      	mov	r6, fp
 801172c:	46aa      	mov	sl, r5
 801172e:	46a9      	mov	r9, r5
 8011730:	9501      	str	r5, [sp, #4]
 8011732:	68a2      	ldr	r2, [r4, #8]
 8011734:	b152      	cbz	r2, 801174c <_scanf_float+0x60>
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	2b4e      	cmp	r3, #78	; 0x4e
 801173c:	d864      	bhi.n	8011808 <_scanf_float+0x11c>
 801173e:	2b40      	cmp	r3, #64	; 0x40
 8011740:	d83c      	bhi.n	80117bc <_scanf_float+0xd0>
 8011742:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011746:	b2c8      	uxtb	r0, r1
 8011748:	280e      	cmp	r0, #14
 801174a:	d93a      	bls.n	80117c2 <_scanf_float+0xd6>
 801174c:	f1b9 0f00 	cmp.w	r9, #0
 8011750:	d003      	beq.n	801175a <_scanf_float+0x6e>
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011758:	6023      	str	r3, [r4, #0]
 801175a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801175e:	f1ba 0f01 	cmp.w	sl, #1
 8011762:	f200 8113 	bhi.w	801198c <_scanf_float+0x2a0>
 8011766:	455e      	cmp	r6, fp
 8011768:	f200 8105 	bhi.w	8011976 <_scanf_float+0x28a>
 801176c:	2501      	movs	r5, #1
 801176e:	4628      	mov	r0, r5
 8011770:	b007      	add	sp, #28
 8011772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011776:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801177a:	2a0d      	cmp	r2, #13
 801177c:	d8e6      	bhi.n	801174c <_scanf_float+0x60>
 801177e:	a101      	add	r1, pc, #4	; (adr r1, 8011784 <_scanf_float+0x98>)
 8011780:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011784:	080118c3 	.word	0x080118c3
 8011788:	0801174d 	.word	0x0801174d
 801178c:	0801174d 	.word	0x0801174d
 8011790:	0801174d 	.word	0x0801174d
 8011794:	08011923 	.word	0x08011923
 8011798:	080118fb 	.word	0x080118fb
 801179c:	0801174d 	.word	0x0801174d
 80117a0:	0801174d 	.word	0x0801174d
 80117a4:	080118d1 	.word	0x080118d1
 80117a8:	0801174d 	.word	0x0801174d
 80117ac:	0801174d 	.word	0x0801174d
 80117b0:	0801174d 	.word	0x0801174d
 80117b4:	0801174d 	.word	0x0801174d
 80117b8:	08011889 	.word	0x08011889
 80117bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80117c0:	e7db      	b.n	801177a <_scanf_float+0x8e>
 80117c2:	290e      	cmp	r1, #14
 80117c4:	d8c2      	bhi.n	801174c <_scanf_float+0x60>
 80117c6:	a001      	add	r0, pc, #4	; (adr r0, 80117cc <_scanf_float+0xe0>)
 80117c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80117cc:	0801187b 	.word	0x0801187b
 80117d0:	0801174d 	.word	0x0801174d
 80117d4:	0801187b 	.word	0x0801187b
 80117d8:	0801190f 	.word	0x0801190f
 80117dc:	0801174d 	.word	0x0801174d
 80117e0:	08011829 	.word	0x08011829
 80117e4:	08011865 	.word	0x08011865
 80117e8:	08011865 	.word	0x08011865
 80117ec:	08011865 	.word	0x08011865
 80117f0:	08011865 	.word	0x08011865
 80117f4:	08011865 	.word	0x08011865
 80117f8:	08011865 	.word	0x08011865
 80117fc:	08011865 	.word	0x08011865
 8011800:	08011865 	.word	0x08011865
 8011804:	08011865 	.word	0x08011865
 8011808:	2b6e      	cmp	r3, #110	; 0x6e
 801180a:	d809      	bhi.n	8011820 <_scanf_float+0x134>
 801180c:	2b60      	cmp	r3, #96	; 0x60
 801180e:	d8b2      	bhi.n	8011776 <_scanf_float+0x8a>
 8011810:	2b54      	cmp	r3, #84	; 0x54
 8011812:	d077      	beq.n	8011904 <_scanf_float+0x218>
 8011814:	2b59      	cmp	r3, #89	; 0x59
 8011816:	d199      	bne.n	801174c <_scanf_float+0x60>
 8011818:	2d07      	cmp	r5, #7
 801181a:	d197      	bne.n	801174c <_scanf_float+0x60>
 801181c:	2508      	movs	r5, #8
 801181e:	e029      	b.n	8011874 <_scanf_float+0x188>
 8011820:	2b74      	cmp	r3, #116	; 0x74
 8011822:	d06f      	beq.n	8011904 <_scanf_float+0x218>
 8011824:	2b79      	cmp	r3, #121	; 0x79
 8011826:	e7f6      	b.n	8011816 <_scanf_float+0x12a>
 8011828:	6821      	ldr	r1, [r4, #0]
 801182a:	05c8      	lsls	r0, r1, #23
 801182c:	d51a      	bpl.n	8011864 <_scanf_float+0x178>
 801182e:	9b02      	ldr	r3, [sp, #8]
 8011830:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011834:	6021      	str	r1, [r4, #0]
 8011836:	f109 0901 	add.w	r9, r9, #1
 801183a:	b11b      	cbz	r3, 8011844 <_scanf_float+0x158>
 801183c:	3b01      	subs	r3, #1
 801183e:	3201      	adds	r2, #1
 8011840:	9302      	str	r3, [sp, #8]
 8011842:	60a2      	str	r2, [r4, #8]
 8011844:	68a3      	ldr	r3, [r4, #8]
 8011846:	3b01      	subs	r3, #1
 8011848:	60a3      	str	r3, [r4, #8]
 801184a:	6923      	ldr	r3, [r4, #16]
 801184c:	3301      	adds	r3, #1
 801184e:	6123      	str	r3, [r4, #16]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	3b01      	subs	r3, #1
 8011854:	2b00      	cmp	r3, #0
 8011856:	607b      	str	r3, [r7, #4]
 8011858:	f340 8084 	ble.w	8011964 <_scanf_float+0x278>
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	3301      	adds	r3, #1
 8011860:	603b      	str	r3, [r7, #0]
 8011862:	e766      	b.n	8011732 <_scanf_float+0x46>
 8011864:	eb1a 0f05 	cmn.w	sl, r5
 8011868:	f47f af70 	bne.w	801174c <_scanf_float+0x60>
 801186c:	6822      	ldr	r2, [r4, #0]
 801186e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011872:	6022      	str	r2, [r4, #0]
 8011874:	f806 3b01 	strb.w	r3, [r6], #1
 8011878:	e7e4      	b.n	8011844 <_scanf_float+0x158>
 801187a:	6822      	ldr	r2, [r4, #0]
 801187c:	0610      	lsls	r0, r2, #24
 801187e:	f57f af65 	bpl.w	801174c <_scanf_float+0x60>
 8011882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011886:	e7f4      	b.n	8011872 <_scanf_float+0x186>
 8011888:	f1ba 0f00 	cmp.w	sl, #0
 801188c:	d10e      	bne.n	80118ac <_scanf_float+0x1c0>
 801188e:	f1b9 0f00 	cmp.w	r9, #0
 8011892:	d10e      	bne.n	80118b2 <_scanf_float+0x1c6>
 8011894:	6822      	ldr	r2, [r4, #0]
 8011896:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801189a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801189e:	d108      	bne.n	80118b2 <_scanf_float+0x1c6>
 80118a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80118a4:	6022      	str	r2, [r4, #0]
 80118a6:	f04f 0a01 	mov.w	sl, #1
 80118aa:	e7e3      	b.n	8011874 <_scanf_float+0x188>
 80118ac:	f1ba 0f02 	cmp.w	sl, #2
 80118b0:	d055      	beq.n	801195e <_scanf_float+0x272>
 80118b2:	2d01      	cmp	r5, #1
 80118b4:	d002      	beq.n	80118bc <_scanf_float+0x1d0>
 80118b6:	2d04      	cmp	r5, #4
 80118b8:	f47f af48 	bne.w	801174c <_scanf_float+0x60>
 80118bc:	3501      	adds	r5, #1
 80118be:	b2ed      	uxtb	r5, r5
 80118c0:	e7d8      	b.n	8011874 <_scanf_float+0x188>
 80118c2:	f1ba 0f01 	cmp.w	sl, #1
 80118c6:	f47f af41 	bne.w	801174c <_scanf_float+0x60>
 80118ca:	f04f 0a02 	mov.w	sl, #2
 80118ce:	e7d1      	b.n	8011874 <_scanf_float+0x188>
 80118d0:	b97d      	cbnz	r5, 80118f2 <_scanf_float+0x206>
 80118d2:	f1b9 0f00 	cmp.w	r9, #0
 80118d6:	f47f af3c 	bne.w	8011752 <_scanf_float+0x66>
 80118da:	6822      	ldr	r2, [r4, #0]
 80118dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80118e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80118e4:	f47f af39 	bne.w	801175a <_scanf_float+0x6e>
 80118e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80118ec:	6022      	str	r2, [r4, #0]
 80118ee:	2501      	movs	r5, #1
 80118f0:	e7c0      	b.n	8011874 <_scanf_float+0x188>
 80118f2:	2d03      	cmp	r5, #3
 80118f4:	d0e2      	beq.n	80118bc <_scanf_float+0x1d0>
 80118f6:	2d05      	cmp	r5, #5
 80118f8:	e7de      	b.n	80118b8 <_scanf_float+0x1cc>
 80118fa:	2d02      	cmp	r5, #2
 80118fc:	f47f af26 	bne.w	801174c <_scanf_float+0x60>
 8011900:	2503      	movs	r5, #3
 8011902:	e7b7      	b.n	8011874 <_scanf_float+0x188>
 8011904:	2d06      	cmp	r5, #6
 8011906:	f47f af21 	bne.w	801174c <_scanf_float+0x60>
 801190a:	2507      	movs	r5, #7
 801190c:	e7b2      	b.n	8011874 <_scanf_float+0x188>
 801190e:	6822      	ldr	r2, [r4, #0]
 8011910:	0591      	lsls	r1, r2, #22
 8011912:	f57f af1b 	bpl.w	801174c <_scanf_float+0x60>
 8011916:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801191a:	6022      	str	r2, [r4, #0]
 801191c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011920:	e7a8      	b.n	8011874 <_scanf_float+0x188>
 8011922:	6822      	ldr	r2, [r4, #0]
 8011924:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011928:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801192c:	d006      	beq.n	801193c <_scanf_float+0x250>
 801192e:	0550      	lsls	r0, r2, #21
 8011930:	f57f af0c 	bpl.w	801174c <_scanf_float+0x60>
 8011934:	f1b9 0f00 	cmp.w	r9, #0
 8011938:	f43f af0f 	beq.w	801175a <_scanf_float+0x6e>
 801193c:	0591      	lsls	r1, r2, #22
 801193e:	bf58      	it	pl
 8011940:	9901      	ldrpl	r1, [sp, #4]
 8011942:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011946:	bf58      	it	pl
 8011948:	eba9 0101 	subpl.w	r1, r9, r1
 801194c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011950:	bf58      	it	pl
 8011952:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011956:	6022      	str	r2, [r4, #0]
 8011958:	f04f 0900 	mov.w	r9, #0
 801195c:	e78a      	b.n	8011874 <_scanf_float+0x188>
 801195e:	f04f 0a03 	mov.w	sl, #3
 8011962:	e787      	b.n	8011874 <_scanf_float+0x188>
 8011964:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011968:	4639      	mov	r1, r7
 801196a:	4640      	mov	r0, r8
 801196c:	4798      	blx	r3
 801196e:	2800      	cmp	r0, #0
 8011970:	f43f aedf 	beq.w	8011732 <_scanf_float+0x46>
 8011974:	e6ea      	b.n	801174c <_scanf_float+0x60>
 8011976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801197a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801197e:	463a      	mov	r2, r7
 8011980:	4640      	mov	r0, r8
 8011982:	4798      	blx	r3
 8011984:	6923      	ldr	r3, [r4, #16]
 8011986:	3b01      	subs	r3, #1
 8011988:	6123      	str	r3, [r4, #16]
 801198a:	e6ec      	b.n	8011766 <_scanf_float+0x7a>
 801198c:	1e6b      	subs	r3, r5, #1
 801198e:	2b06      	cmp	r3, #6
 8011990:	d825      	bhi.n	80119de <_scanf_float+0x2f2>
 8011992:	2d02      	cmp	r5, #2
 8011994:	d836      	bhi.n	8011a04 <_scanf_float+0x318>
 8011996:	455e      	cmp	r6, fp
 8011998:	f67f aee8 	bls.w	801176c <_scanf_float+0x80>
 801199c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80119a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119a4:	463a      	mov	r2, r7
 80119a6:	4640      	mov	r0, r8
 80119a8:	4798      	blx	r3
 80119aa:	6923      	ldr	r3, [r4, #16]
 80119ac:	3b01      	subs	r3, #1
 80119ae:	6123      	str	r3, [r4, #16]
 80119b0:	e7f1      	b.n	8011996 <_scanf_float+0x2aa>
 80119b2:	9802      	ldr	r0, [sp, #8]
 80119b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80119b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80119bc:	9002      	str	r0, [sp, #8]
 80119be:	463a      	mov	r2, r7
 80119c0:	4640      	mov	r0, r8
 80119c2:	4798      	blx	r3
 80119c4:	6923      	ldr	r3, [r4, #16]
 80119c6:	3b01      	subs	r3, #1
 80119c8:	6123      	str	r3, [r4, #16]
 80119ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119ce:	fa5f fa8a 	uxtb.w	sl, sl
 80119d2:	f1ba 0f02 	cmp.w	sl, #2
 80119d6:	d1ec      	bne.n	80119b2 <_scanf_float+0x2c6>
 80119d8:	3d03      	subs	r5, #3
 80119da:	b2ed      	uxtb	r5, r5
 80119dc:	1b76      	subs	r6, r6, r5
 80119de:	6823      	ldr	r3, [r4, #0]
 80119e0:	05da      	lsls	r2, r3, #23
 80119e2:	d52f      	bpl.n	8011a44 <_scanf_float+0x358>
 80119e4:	055b      	lsls	r3, r3, #21
 80119e6:	d510      	bpl.n	8011a0a <_scanf_float+0x31e>
 80119e8:	455e      	cmp	r6, fp
 80119ea:	f67f aebf 	bls.w	801176c <_scanf_float+0x80>
 80119ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80119f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119f6:	463a      	mov	r2, r7
 80119f8:	4640      	mov	r0, r8
 80119fa:	4798      	blx	r3
 80119fc:	6923      	ldr	r3, [r4, #16]
 80119fe:	3b01      	subs	r3, #1
 8011a00:	6123      	str	r3, [r4, #16]
 8011a02:	e7f1      	b.n	80119e8 <_scanf_float+0x2fc>
 8011a04:	46aa      	mov	sl, r5
 8011a06:	9602      	str	r6, [sp, #8]
 8011a08:	e7df      	b.n	80119ca <_scanf_float+0x2de>
 8011a0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011a0e:	6923      	ldr	r3, [r4, #16]
 8011a10:	2965      	cmp	r1, #101	; 0x65
 8011a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a16:	f106 35ff 	add.w	r5, r6, #4294967295
 8011a1a:	6123      	str	r3, [r4, #16]
 8011a1c:	d00c      	beq.n	8011a38 <_scanf_float+0x34c>
 8011a1e:	2945      	cmp	r1, #69	; 0x45
 8011a20:	d00a      	beq.n	8011a38 <_scanf_float+0x34c>
 8011a22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a26:	463a      	mov	r2, r7
 8011a28:	4640      	mov	r0, r8
 8011a2a:	4798      	blx	r3
 8011a2c:	6923      	ldr	r3, [r4, #16]
 8011a2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011a32:	3b01      	subs	r3, #1
 8011a34:	1eb5      	subs	r5, r6, #2
 8011a36:	6123      	str	r3, [r4, #16]
 8011a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a3c:	463a      	mov	r2, r7
 8011a3e:	4640      	mov	r0, r8
 8011a40:	4798      	blx	r3
 8011a42:	462e      	mov	r6, r5
 8011a44:	6825      	ldr	r5, [r4, #0]
 8011a46:	f015 0510 	ands.w	r5, r5, #16
 8011a4a:	d158      	bne.n	8011afe <_scanf_float+0x412>
 8011a4c:	7035      	strb	r5, [r6, #0]
 8011a4e:	6823      	ldr	r3, [r4, #0]
 8011a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a58:	d11c      	bne.n	8011a94 <_scanf_float+0x3a8>
 8011a5a:	9b01      	ldr	r3, [sp, #4]
 8011a5c:	454b      	cmp	r3, r9
 8011a5e:	eba3 0209 	sub.w	r2, r3, r9
 8011a62:	d124      	bne.n	8011aae <_scanf_float+0x3c2>
 8011a64:	2200      	movs	r2, #0
 8011a66:	4659      	mov	r1, fp
 8011a68:	4640      	mov	r0, r8
 8011a6a:	f002 fba1 	bl	80141b0 <_strtod_r>
 8011a6e:	9b03      	ldr	r3, [sp, #12]
 8011a70:	6821      	ldr	r1, [r4, #0]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f011 0f02 	tst.w	r1, #2
 8011a78:	ec57 6b10 	vmov	r6, r7, d0
 8011a7c:	f103 0204 	add.w	r2, r3, #4
 8011a80:	d020      	beq.n	8011ac4 <_scanf_float+0x3d8>
 8011a82:	9903      	ldr	r1, [sp, #12]
 8011a84:	600a      	str	r2, [r1, #0]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	e9c3 6700 	strd	r6, r7, [r3]
 8011a8c:	68e3      	ldr	r3, [r4, #12]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	60e3      	str	r3, [r4, #12]
 8011a92:	e66c      	b.n	801176e <_scanf_float+0x82>
 8011a94:	9b04      	ldr	r3, [sp, #16]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d0e4      	beq.n	8011a64 <_scanf_float+0x378>
 8011a9a:	9905      	ldr	r1, [sp, #20]
 8011a9c:	230a      	movs	r3, #10
 8011a9e:	462a      	mov	r2, r5
 8011aa0:	3101      	adds	r1, #1
 8011aa2:	4640      	mov	r0, r8
 8011aa4:	f002 fc0c 	bl	80142c0 <_strtol_r>
 8011aa8:	9b04      	ldr	r3, [sp, #16]
 8011aaa:	9e05      	ldr	r6, [sp, #20]
 8011aac:	1ac2      	subs	r2, r0, r3
 8011aae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011ab2:	429e      	cmp	r6, r3
 8011ab4:	bf28      	it	cs
 8011ab6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011aba:	4912      	ldr	r1, [pc, #72]	; (8011b04 <_scanf_float+0x418>)
 8011abc:	4630      	mov	r0, r6
 8011abe:	f000 f8e7 	bl	8011c90 <siprintf>
 8011ac2:	e7cf      	b.n	8011a64 <_scanf_float+0x378>
 8011ac4:	f011 0f04 	tst.w	r1, #4
 8011ac8:	9903      	ldr	r1, [sp, #12]
 8011aca:	600a      	str	r2, [r1, #0]
 8011acc:	d1db      	bne.n	8011a86 <_scanf_float+0x39a>
 8011ace:	f8d3 8000 	ldr.w	r8, [r3]
 8011ad2:	ee10 2a10 	vmov	r2, s0
 8011ad6:	ee10 0a10 	vmov	r0, s0
 8011ada:	463b      	mov	r3, r7
 8011adc:	4639      	mov	r1, r7
 8011ade:	f7ef f855 	bl	8000b8c <__aeabi_dcmpun>
 8011ae2:	b128      	cbz	r0, 8011af0 <_scanf_float+0x404>
 8011ae4:	4808      	ldr	r0, [pc, #32]	; (8011b08 <_scanf_float+0x41c>)
 8011ae6:	f000 f9dd 	bl	8011ea4 <nanf>
 8011aea:	ed88 0a00 	vstr	s0, [r8]
 8011aee:	e7cd      	b.n	8011a8c <_scanf_float+0x3a0>
 8011af0:	4630      	mov	r0, r6
 8011af2:	4639      	mov	r1, r7
 8011af4:	f7ef f8a8 	bl	8000c48 <__aeabi_d2f>
 8011af8:	f8c8 0000 	str.w	r0, [r8]
 8011afc:	e7c6      	b.n	8011a8c <_scanf_float+0x3a0>
 8011afe:	2500      	movs	r5, #0
 8011b00:	e635      	b.n	801176e <_scanf_float+0x82>
 8011b02:	bf00      	nop
 8011b04:	080183ce 	.word	0x080183ce
 8011b08:	08018765 	.word	0x08018765

08011b0c <std>:
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	b510      	push	{r4, lr}
 8011b10:	4604      	mov	r4, r0
 8011b12:	e9c0 3300 	strd	r3, r3, [r0]
 8011b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b1a:	6083      	str	r3, [r0, #8]
 8011b1c:	8181      	strh	r1, [r0, #12]
 8011b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8011b20:	81c2      	strh	r2, [r0, #14]
 8011b22:	6183      	str	r3, [r0, #24]
 8011b24:	4619      	mov	r1, r3
 8011b26:	2208      	movs	r2, #8
 8011b28:	305c      	adds	r0, #92	; 0x5c
 8011b2a:	f000 f914 	bl	8011d56 <memset>
 8011b2e:	4b0d      	ldr	r3, [pc, #52]	; (8011b64 <std+0x58>)
 8011b30:	6263      	str	r3, [r4, #36]	; 0x24
 8011b32:	4b0d      	ldr	r3, [pc, #52]	; (8011b68 <std+0x5c>)
 8011b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b36:	4b0d      	ldr	r3, [pc, #52]	; (8011b6c <std+0x60>)
 8011b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b3a:	4b0d      	ldr	r3, [pc, #52]	; (8011b70 <std+0x64>)
 8011b3c:	6323      	str	r3, [r4, #48]	; 0x30
 8011b3e:	4b0d      	ldr	r3, [pc, #52]	; (8011b74 <std+0x68>)
 8011b40:	6224      	str	r4, [r4, #32]
 8011b42:	429c      	cmp	r4, r3
 8011b44:	d006      	beq.n	8011b54 <std+0x48>
 8011b46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011b4a:	4294      	cmp	r4, r2
 8011b4c:	d002      	beq.n	8011b54 <std+0x48>
 8011b4e:	33d0      	adds	r3, #208	; 0xd0
 8011b50:	429c      	cmp	r4, r3
 8011b52:	d105      	bne.n	8011b60 <std+0x54>
 8011b54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b5c:	f000 b988 	b.w	8011e70 <__retarget_lock_init_recursive>
 8011b60:	bd10      	pop	{r4, pc}
 8011b62:	bf00      	nop
 8011b64:	08011cd1 	.word	0x08011cd1
 8011b68:	08011cf3 	.word	0x08011cf3
 8011b6c:	08011d2b 	.word	0x08011d2b
 8011b70:	08011d4f 	.word	0x08011d4f
 8011b74:	20000e2c 	.word	0x20000e2c

08011b78 <stdio_exit_handler>:
 8011b78:	4a02      	ldr	r2, [pc, #8]	; (8011b84 <stdio_exit_handler+0xc>)
 8011b7a:	4903      	ldr	r1, [pc, #12]	; (8011b88 <stdio_exit_handler+0x10>)
 8011b7c:	4803      	ldr	r0, [pc, #12]	; (8011b8c <stdio_exit_handler+0x14>)
 8011b7e:	f000 b869 	b.w	8011c54 <_fwalk_sglue>
 8011b82:	bf00      	nop
 8011b84:	20000024 	.word	0x20000024
 8011b88:	08014909 	.word	0x08014909
 8011b8c:	20000030 	.word	0x20000030

08011b90 <cleanup_stdio>:
 8011b90:	6841      	ldr	r1, [r0, #4]
 8011b92:	4b0c      	ldr	r3, [pc, #48]	; (8011bc4 <cleanup_stdio+0x34>)
 8011b94:	4299      	cmp	r1, r3
 8011b96:	b510      	push	{r4, lr}
 8011b98:	4604      	mov	r4, r0
 8011b9a:	d001      	beq.n	8011ba0 <cleanup_stdio+0x10>
 8011b9c:	f002 feb4 	bl	8014908 <_fflush_r>
 8011ba0:	68a1      	ldr	r1, [r4, #8]
 8011ba2:	4b09      	ldr	r3, [pc, #36]	; (8011bc8 <cleanup_stdio+0x38>)
 8011ba4:	4299      	cmp	r1, r3
 8011ba6:	d002      	beq.n	8011bae <cleanup_stdio+0x1e>
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f002 fead 	bl	8014908 <_fflush_r>
 8011bae:	68e1      	ldr	r1, [r4, #12]
 8011bb0:	4b06      	ldr	r3, [pc, #24]	; (8011bcc <cleanup_stdio+0x3c>)
 8011bb2:	4299      	cmp	r1, r3
 8011bb4:	d004      	beq.n	8011bc0 <cleanup_stdio+0x30>
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bbc:	f002 bea4 	b.w	8014908 <_fflush_r>
 8011bc0:	bd10      	pop	{r4, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20000e2c 	.word	0x20000e2c
 8011bc8:	20000e94 	.word	0x20000e94
 8011bcc:	20000efc 	.word	0x20000efc

08011bd0 <global_stdio_init.part.0>:
 8011bd0:	b510      	push	{r4, lr}
 8011bd2:	4b0b      	ldr	r3, [pc, #44]	; (8011c00 <global_stdio_init.part.0+0x30>)
 8011bd4:	4c0b      	ldr	r4, [pc, #44]	; (8011c04 <global_stdio_init.part.0+0x34>)
 8011bd6:	4a0c      	ldr	r2, [pc, #48]	; (8011c08 <global_stdio_init.part.0+0x38>)
 8011bd8:	601a      	str	r2, [r3, #0]
 8011bda:	4620      	mov	r0, r4
 8011bdc:	2200      	movs	r2, #0
 8011bde:	2104      	movs	r1, #4
 8011be0:	f7ff ff94 	bl	8011b0c <std>
 8011be4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011be8:	2201      	movs	r2, #1
 8011bea:	2109      	movs	r1, #9
 8011bec:	f7ff ff8e 	bl	8011b0c <std>
 8011bf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011bf4:	2202      	movs	r2, #2
 8011bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bfa:	2112      	movs	r1, #18
 8011bfc:	f7ff bf86 	b.w	8011b0c <std>
 8011c00:	20000f64 	.word	0x20000f64
 8011c04:	20000e2c 	.word	0x20000e2c
 8011c08:	08011b79 	.word	0x08011b79

08011c0c <__sfp_lock_acquire>:
 8011c0c:	4801      	ldr	r0, [pc, #4]	; (8011c14 <__sfp_lock_acquire+0x8>)
 8011c0e:	f000 b930 	b.w	8011e72 <__retarget_lock_acquire_recursive>
 8011c12:	bf00      	nop
 8011c14:	20000f6d 	.word	0x20000f6d

08011c18 <__sfp_lock_release>:
 8011c18:	4801      	ldr	r0, [pc, #4]	; (8011c20 <__sfp_lock_release+0x8>)
 8011c1a:	f000 b92b 	b.w	8011e74 <__retarget_lock_release_recursive>
 8011c1e:	bf00      	nop
 8011c20:	20000f6d 	.word	0x20000f6d

08011c24 <__sinit>:
 8011c24:	b510      	push	{r4, lr}
 8011c26:	4604      	mov	r4, r0
 8011c28:	f7ff fff0 	bl	8011c0c <__sfp_lock_acquire>
 8011c2c:	6a23      	ldr	r3, [r4, #32]
 8011c2e:	b11b      	cbz	r3, 8011c38 <__sinit+0x14>
 8011c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c34:	f7ff bff0 	b.w	8011c18 <__sfp_lock_release>
 8011c38:	4b04      	ldr	r3, [pc, #16]	; (8011c4c <__sinit+0x28>)
 8011c3a:	6223      	str	r3, [r4, #32]
 8011c3c:	4b04      	ldr	r3, [pc, #16]	; (8011c50 <__sinit+0x2c>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d1f5      	bne.n	8011c30 <__sinit+0xc>
 8011c44:	f7ff ffc4 	bl	8011bd0 <global_stdio_init.part.0>
 8011c48:	e7f2      	b.n	8011c30 <__sinit+0xc>
 8011c4a:	bf00      	nop
 8011c4c:	08011b91 	.word	0x08011b91
 8011c50:	20000f64 	.word	0x20000f64

08011c54 <_fwalk_sglue>:
 8011c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c58:	4607      	mov	r7, r0
 8011c5a:	4688      	mov	r8, r1
 8011c5c:	4614      	mov	r4, r2
 8011c5e:	2600      	movs	r6, #0
 8011c60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c64:	f1b9 0901 	subs.w	r9, r9, #1
 8011c68:	d505      	bpl.n	8011c76 <_fwalk_sglue+0x22>
 8011c6a:	6824      	ldr	r4, [r4, #0]
 8011c6c:	2c00      	cmp	r4, #0
 8011c6e:	d1f7      	bne.n	8011c60 <_fwalk_sglue+0xc>
 8011c70:	4630      	mov	r0, r6
 8011c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c76:	89ab      	ldrh	r3, [r5, #12]
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d907      	bls.n	8011c8c <_fwalk_sglue+0x38>
 8011c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c80:	3301      	adds	r3, #1
 8011c82:	d003      	beq.n	8011c8c <_fwalk_sglue+0x38>
 8011c84:	4629      	mov	r1, r5
 8011c86:	4638      	mov	r0, r7
 8011c88:	47c0      	blx	r8
 8011c8a:	4306      	orrs	r6, r0
 8011c8c:	3568      	adds	r5, #104	; 0x68
 8011c8e:	e7e9      	b.n	8011c64 <_fwalk_sglue+0x10>

08011c90 <siprintf>:
 8011c90:	b40e      	push	{r1, r2, r3}
 8011c92:	b500      	push	{lr}
 8011c94:	b09c      	sub	sp, #112	; 0x70
 8011c96:	ab1d      	add	r3, sp, #116	; 0x74
 8011c98:	9002      	str	r0, [sp, #8]
 8011c9a:	9006      	str	r0, [sp, #24]
 8011c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ca0:	4809      	ldr	r0, [pc, #36]	; (8011cc8 <siprintf+0x38>)
 8011ca2:	9107      	str	r1, [sp, #28]
 8011ca4:	9104      	str	r1, [sp, #16]
 8011ca6:	4909      	ldr	r1, [pc, #36]	; (8011ccc <siprintf+0x3c>)
 8011ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cac:	9105      	str	r1, [sp, #20]
 8011cae:	6800      	ldr	r0, [r0, #0]
 8011cb0:	9301      	str	r3, [sp, #4]
 8011cb2:	a902      	add	r1, sp, #8
 8011cb4:	f002 fb60 	bl	8014378 <_svfiprintf_r>
 8011cb8:	9b02      	ldr	r3, [sp, #8]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	701a      	strb	r2, [r3, #0]
 8011cbe:	b01c      	add	sp, #112	; 0x70
 8011cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cc4:	b003      	add	sp, #12
 8011cc6:	4770      	bx	lr
 8011cc8:	2000007c 	.word	0x2000007c
 8011ccc:	ffff0208 	.word	0xffff0208

08011cd0 <__sread>:
 8011cd0:	b510      	push	{r4, lr}
 8011cd2:	460c      	mov	r4, r1
 8011cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cd8:	f000 f86c 	bl	8011db4 <_read_r>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	bfab      	itete	ge
 8011ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8011ce4:	181b      	addge	r3, r3, r0
 8011ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011cea:	bfac      	ite	ge
 8011cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8011cee:	81a3      	strhlt	r3, [r4, #12]
 8011cf0:	bd10      	pop	{r4, pc}

08011cf2 <__swrite>:
 8011cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf6:	461f      	mov	r7, r3
 8011cf8:	898b      	ldrh	r3, [r1, #12]
 8011cfa:	05db      	lsls	r3, r3, #23
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	460c      	mov	r4, r1
 8011d00:	4616      	mov	r6, r2
 8011d02:	d505      	bpl.n	8011d10 <__swrite+0x1e>
 8011d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d08:	2302      	movs	r3, #2
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	f000 f840 	bl	8011d90 <_lseek_r>
 8011d10:	89a3      	ldrh	r3, [r4, #12]
 8011d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d1a:	81a3      	strh	r3, [r4, #12]
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	463b      	mov	r3, r7
 8011d20:	4628      	mov	r0, r5
 8011d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d26:	f000 b867 	b.w	8011df8 <_write_r>

08011d2a <__sseek>:
 8011d2a:	b510      	push	{r4, lr}
 8011d2c:	460c      	mov	r4, r1
 8011d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d32:	f000 f82d 	bl	8011d90 <_lseek_r>
 8011d36:	1c43      	adds	r3, r0, #1
 8011d38:	89a3      	ldrh	r3, [r4, #12]
 8011d3a:	bf15      	itete	ne
 8011d3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d46:	81a3      	strheq	r3, [r4, #12]
 8011d48:	bf18      	it	ne
 8011d4a:	81a3      	strhne	r3, [r4, #12]
 8011d4c:	bd10      	pop	{r4, pc}

08011d4e <__sclose>:
 8011d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d52:	f000 b80d 	b.w	8011d70 <_close_r>

08011d56 <memset>:
 8011d56:	4402      	add	r2, r0
 8011d58:	4603      	mov	r3, r0
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d100      	bne.n	8011d60 <memset+0xa>
 8011d5e:	4770      	bx	lr
 8011d60:	f803 1b01 	strb.w	r1, [r3], #1
 8011d64:	e7f9      	b.n	8011d5a <memset+0x4>
	...

08011d68 <_localeconv_r>:
 8011d68:	4800      	ldr	r0, [pc, #0]	; (8011d6c <_localeconv_r+0x4>)
 8011d6a:	4770      	bx	lr
 8011d6c:	20000170 	.word	0x20000170

08011d70 <_close_r>:
 8011d70:	b538      	push	{r3, r4, r5, lr}
 8011d72:	4d06      	ldr	r5, [pc, #24]	; (8011d8c <_close_r+0x1c>)
 8011d74:	2300      	movs	r3, #0
 8011d76:	4604      	mov	r4, r0
 8011d78:	4608      	mov	r0, r1
 8011d7a:	602b      	str	r3, [r5, #0]
 8011d7c:	f7f2 fb01 	bl	8004382 <_close>
 8011d80:	1c43      	adds	r3, r0, #1
 8011d82:	d102      	bne.n	8011d8a <_close_r+0x1a>
 8011d84:	682b      	ldr	r3, [r5, #0]
 8011d86:	b103      	cbz	r3, 8011d8a <_close_r+0x1a>
 8011d88:	6023      	str	r3, [r4, #0]
 8011d8a:	bd38      	pop	{r3, r4, r5, pc}
 8011d8c:	20000f68 	.word	0x20000f68

08011d90 <_lseek_r>:
 8011d90:	b538      	push	{r3, r4, r5, lr}
 8011d92:	4d07      	ldr	r5, [pc, #28]	; (8011db0 <_lseek_r+0x20>)
 8011d94:	4604      	mov	r4, r0
 8011d96:	4608      	mov	r0, r1
 8011d98:	4611      	mov	r1, r2
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	602a      	str	r2, [r5, #0]
 8011d9e:	461a      	mov	r2, r3
 8011da0:	f7f2 fb16 	bl	80043d0 <_lseek>
 8011da4:	1c43      	adds	r3, r0, #1
 8011da6:	d102      	bne.n	8011dae <_lseek_r+0x1e>
 8011da8:	682b      	ldr	r3, [r5, #0]
 8011daa:	b103      	cbz	r3, 8011dae <_lseek_r+0x1e>
 8011dac:	6023      	str	r3, [r4, #0]
 8011dae:	bd38      	pop	{r3, r4, r5, pc}
 8011db0:	20000f68 	.word	0x20000f68

08011db4 <_read_r>:
 8011db4:	b538      	push	{r3, r4, r5, lr}
 8011db6:	4d07      	ldr	r5, [pc, #28]	; (8011dd4 <_read_r+0x20>)
 8011db8:	4604      	mov	r4, r0
 8011dba:	4608      	mov	r0, r1
 8011dbc:	4611      	mov	r1, r2
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	602a      	str	r2, [r5, #0]
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	f7f2 faa4 	bl	8004310 <_read>
 8011dc8:	1c43      	adds	r3, r0, #1
 8011dca:	d102      	bne.n	8011dd2 <_read_r+0x1e>
 8011dcc:	682b      	ldr	r3, [r5, #0]
 8011dce:	b103      	cbz	r3, 8011dd2 <_read_r+0x1e>
 8011dd0:	6023      	str	r3, [r4, #0]
 8011dd2:	bd38      	pop	{r3, r4, r5, pc}
 8011dd4:	20000f68 	.word	0x20000f68

08011dd8 <_sbrk_r>:
 8011dd8:	b538      	push	{r3, r4, r5, lr}
 8011dda:	4d06      	ldr	r5, [pc, #24]	; (8011df4 <_sbrk_r+0x1c>)
 8011ddc:	2300      	movs	r3, #0
 8011dde:	4604      	mov	r4, r0
 8011de0:	4608      	mov	r0, r1
 8011de2:	602b      	str	r3, [r5, #0]
 8011de4:	f7f2 fb02 	bl	80043ec <_sbrk>
 8011de8:	1c43      	adds	r3, r0, #1
 8011dea:	d102      	bne.n	8011df2 <_sbrk_r+0x1a>
 8011dec:	682b      	ldr	r3, [r5, #0]
 8011dee:	b103      	cbz	r3, 8011df2 <_sbrk_r+0x1a>
 8011df0:	6023      	str	r3, [r4, #0]
 8011df2:	bd38      	pop	{r3, r4, r5, pc}
 8011df4:	20000f68 	.word	0x20000f68

08011df8 <_write_r>:
 8011df8:	b538      	push	{r3, r4, r5, lr}
 8011dfa:	4d07      	ldr	r5, [pc, #28]	; (8011e18 <_write_r+0x20>)
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	4608      	mov	r0, r1
 8011e00:	4611      	mov	r1, r2
 8011e02:	2200      	movs	r2, #0
 8011e04:	602a      	str	r2, [r5, #0]
 8011e06:	461a      	mov	r2, r3
 8011e08:	f7f2 fa9f 	bl	800434a <_write>
 8011e0c:	1c43      	adds	r3, r0, #1
 8011e0e:	d102      	bne.n	8011e16 <_write_r+0x1e>
 8011e10:	682b      	ldr	r3, [r5, #0]
 8011e12:	b103      	cbz	r3, 8011e16 <_write_r+0x1e>
 8011e14:	6023      	str	r3, [r4, #0]
 8011e16:	bd38      	pop	{r3, r4, r5, pc}
 8011e18:	20000f68 	.word	0x20000f68

08011e1c <__errno>:
 8011e1c:	4b01      	ldr	r3, [pc, #4]	; (8011e24 <__errno+0x8>)
 8011e1e:	6818      	ldr	r0, [r3, #0]
 8011e20:	4770      	bx	lr
 8011e22:	bf00      	nop
 8011e24:	2000007c 	.word	0x2000007c

08011e28 <__libc_init_array>:
 8011e28:	b570      	push	{r4, r5, r6, lr}
 8011e2a:	4d0d      	ldr	r5, [pc, #52]	; (8011e60 <__libc_init_array+0x38>)
 8011e2c:	4c0d      	ldr	r4, [pc, #52]	; (8011e64 <__libc_init_array+0x3c>)
 8011e2e:	1b64      	subs	r4, r4, r5
 8011e30:	10a4      	asrs	r4, r4, #2
 8011e32:	2600      	movs	r6, #0
 8011e34:	42a6      	cmp	r6, r4
 8011e36:	d109      	bne.n	8011e4c <__libc_init_array+0x24>
 8011e38:	4d0b      	ldr	r5, [pc, #44]	; (8011e68 <__libc_init_array+0x40>)
 8011e3a:	4c0c      	ldr	r4, [pc, #48]	; (8011e6c <__libc_init_array+0x44>)
 8011e3c:	f003 fd16 	bl	801586c <_init>
 8011e40:	1b64      	subs	r4, r4, r5
 8011e42:	10a4      	asrs	r4, r4, #2
 8011e44:	2600      	movs	r6, #0
 8011e46:	42a6      	cmp	r6, r4
 8011e48:	d105      	bne.n	8011e56 <__libc_init_array+0x2e>
 8011e4a:	bd70      	pop	{r4, r5, r6, pc}
 8011e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e50:	4798      	blx	r3
 8011e52:	3601      	adds	r6, #1
 8011e54:	e7ee      	b.n	8011e34 <__libc_init_array+0xc>
 8011e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e5a:	4798      	blx	r3
 8011e5c:	3601      	adds	r6, #1
 8011e5e:	e7f2      	b.n	8011e46 <__libc_init_array+0x1e>
 8011e60:	080187d0 	.word	0x080187d0
 8011e64:	080187d0 	.word	0x080187d0
 8011e68:	080187d0 	.word	0x080187d0
 8011e6c:	080187d4 	.word	0x080187d4

08011e70 <__retarget_lock_init_recursive>:
 8011e70:	4770      	bx	lr

08011e72 <__retarget_lock_acquire_recursive>:
 8011e72:	4770      	bx	lr

08011e74 <__retarget_lock_release_recursive>:
 8011e74:	4770      	bx	lr

08011e76 <strcpy>:
 8011e76:	4603      	mov	r3, r0
 8011e78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e7c:	f803 2b01 	strb.w	r2, [r3], #1
 8011e80:	2a00      	cmp	r2, #0
 8011e82:	d1f9      	bne.n	8011e78 <strcpy+0x2>
 8011e84:	4770      	bx	lr

08011e86 <memcpy>:
 8011e86:	440a      	add	r2, r1
 8011e88:	4291      	cmp	r1, r2
 8011e8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e8e:	d100      	bne.n	8011e92 <memcpy+0xc>
 8011e90:	4770      	bx	lr
 8011e92:	b510      	push	{r4, lr}
 8011e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e9c:	4291      	cmp	r1, r2
 8011e9e:	d1f9      	bne.n	8011e94 <memcpy+0xe>
 8011ea0:	bd10      	pop	{r4, pc}
	...

08011ea4 <nanf>:
 8011ea4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011eac <nanf+0x8>
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	7fc00000 	.word	0x7fc00000

08011eb0 <quorem>:
 8011eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb4:	6903      	ldr	r3, [r0, #16]
 8011eb6:	690c      	ldr	r4, [r1, #16]
 8011eb8:	42a3      	cmp	r3, r4
 8011eba:	4607      	mov	r7, r0
 8011ebc:	db7e      	blt.n	8011fbc <quorem+0x10c>
 8011ebe:	3c01      	subs	r4, #1
 8011ec0:	f101 0814 	add.w	r8, r1, #20
 8011ec4:	f100 0514 	add.w	r5, r0, #20
 8011ec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ecc:	9301      	str	r3, [sp, #4]
 8011ece:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011ede:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ee2:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ee6:	d331      	bcc.n	8011f4c <quorem+0x9c>
 8011ee8:	f04f 0e00 	mov.w	lr, #0
 8011eec:	4640      	mov	r0, r8
 8011eee:	46ac      	mov	ip, r5
 8011ef0:	46f2      	mov	sl, lr
 8011ef2:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ef6:	b293      	uxth	r3, r2
 8011ef8:	fb06 e303 	mla	r3, r6, r3, lr
 8011efc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f00:	0c1a      	lsrs	r2, r3, #16
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	ebaa 0303 	sub.w	r3, sl, r3
 8011f08:	f8dc a000 	ldr.w	sl, [ip]
 8011f0c:	fa13 f38a 	uxtah	r3, r3, sl
 8011f10:	fb06 220e 	mla	r2, r6, lr, r2
 8011f14:	9300      	str	r3, [sp, #0]
 8011f16:	9b00      	ldr	r3, [sp, #0]
 8011f18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f1c:	b292      	uxth	r2, r2
 8011f1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f26:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f2a:	4581      	cmp	r9, r0
 8011f2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f30:	f84c 3b04 	str.w	r3, [ip], #4
 8011f34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011f38:	d2db      	bcs.n	8011ef2 <quorem+0x42>
 8011f3a:	f855 300b 	ldr.w	r3, [r5, fp]
 8011f3e:	b92b      	cbnz	r3, 8011f4c <quorem+0x9c>
 8011f40:	9b01      	ldr	r3, [sp, #4]
 8011f42:	3b04      	subs	r3, #4
 8011f44:	429d      	cmp	r5, r3
 8011f46:	461a      	mov	r2, r3
 8011f48:	d32c      	bcc.n	8011fa4 <quorem+0xf4>
 8011f4a:	613c      	str	r4, [r7, #16]
 8011f4c:	4638      	mov	r0, r7
 8011f4e:	f001 f93b 	bl	80131c8 <__mcmp>
 8011f52:	2800      	cmp	r0, #0
 8011f54:	db22      	blt.n	8011f9c <quorem+0xec>
 8011f56:	3601      	adds	r6, #1
 8011f58:	4629      	mov	r1, r5
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f60:	f8d1 c000 	ldr.w	ip, [r1]
 8011f64:	b293      	uxth	r3, r2
 8011f66:	1ac3      	subs	r3, r0, r3
 8011f68:	0c12      	lsrs	r2, r2, #16
 8011f6a:	fa13 f38c 	uxtah	r3, r3, ip
 8011f6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f7c:	45c1      	cmp	r9, r8
 8011f7e:	f841 3b04 	str.w	r3, [r1], #4
 8011f82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f86:	d2e9      	bcs.n	8011f5c <quorem+0xac>
 8011f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f90:	b922      	cbnz	r2, 8011f9c <quorem+0xec>
 8011f92:	3b04      	subs	r3, #4
 8011f94:	429d      	cmp	r5, r3
 8011f96:	461a      	mov	r2, r3
 8011f98:	d30a      	bcc.n	8011fb0 <quorem+0x100>
 8011f9a:	613c      	str	r4, [r7, #16]
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	b003      	add	sp, #12
 8011fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa4:	6812      	ldr	r2, [r2, #0]
 8011fa6:	3b04      	subs	r3, #4
 8011fa8:	2a00      	cmp	r2, #0
 8011faa:	d1ce      	bne.n	8011f4a <quorem+0x9a>
 8011fac:	3c01      	subs	r4, #1
 8011fae:	e7c9      	b.n	8011f44 <quorem+0x94>
 8011fb0:	6812      	ldr	r2, [r2, #0]
 8011fb2:	3b04      	subs	r3, #4
 8011fb4:	2a00      	cmp	r2, #0
 8011fb6:	d1f0      	bne.n	8011f9a <quorem+0xea>
 8011fb8:	3c01      	subs	r4, #1
 8011fba:	e7eb      	b.n	8011f94 <quorem+0xe4>
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	e7ee      	b.n	8011f9e <quorem+0xee>

08011fc0 <_dtoa_r>:
 8011fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc4:	ed2d 8b04 	vpush	{d8-d9}
 8011fc8:	69c5      	ldr	r5, [r0, #28]
 8011fca:	b093      	sub	sp, #76	; 0x4c
 8011fcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011fd0:	ec57 6b10 	vmov	r6, r7, d0
 8011fd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011fd8:	9107      	str	r1, [sp, #28]
 8011fda:	4604      	mov	r4, r0
 8011fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8011fde:	930d      	str	r3, [sp, #52]	; 0x34
 8011fe0:	b975      	cbnz	r5, 8012000 <_dtoa_r+0x40>
 8011fe2:	2010      	movs	r0, #16
 8011fe4:	f7fe fe68 	bl	8010cb8 <malloc>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	61e0      	str	r0, [r4, #28]
 8011fec:	b920      	cbnz	r0, 8011ff8 <_dtoa_r+0x38>
 8011fee:	4bae      	ldr	r3, [pc, #696]	; (80122a8 <_dtoa_r+0x2e8>)
 8011ff0:	21ef      	movs	r1, #239	; 0xef
 8011ff2:	48ae      	ldr	r0, [pc, #696]	; (80122ac <_dtoa_r+0x2ec>)
 8011ff4:	f002 fd7c 	bl	8014af0 <__assert_func>
 8011ff8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011ffc:	6005      	str	r5, [r0, #0]
 8011ffe:	60c5      	str	r5, [r0, #12]
 8012000:	69e3      	ldr	r3, [r4, #28]
 8012002:	6819      	ldr	r1, [r3, #0]
 8012004:	b151      	cbz	r1, 801201c <_dtoa_r+0x5c>
 8012006:	685a      	ldr	r2, [r3, #4]
 8012008:	604a      	str	r2, [r1, #4]
 801200a:	2301      	movs	r3, #1
 801200c:	4093      	lsls	r3, r2
 801200e:	608b      	str	r3, [r1, #8]
 8012010:	4620      	mov	r0, r4
 8012012:	f000 fe53 	bl	8012cbc <_Bfree>
 8012016:	69e3      	ldr	r3, [r4, #28]
 8012018:	2200      	movs	r2, #0
 801201a:	601a      	str	r2, [r3, #0]
 801201c:	1e3b      	subs	r3, r7, #0
 801201e:	bfbb      	ittet	lt
 8012020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012024:	9303      	strlt	r3, [sp, #12]
 8012026:	2300      	movge	r3, #0
 8012028:	2201      	movlt	r2, #1
 801202a:	bfac      	ite	ge
 801202c:	f8c8 3000 	strge.w	r3, [r8]
 8012030:	f8c8 2000 	strlt.w	r2, [r8]
 8012034:	4b9e      	ldr	r3, [pc, #632]	; (80122b0 <_dtoa_r+0x2f0>)
 8012036:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801203a:	ea33 0308 	bics.w	r3, r3, r8
 801203e:	d11b      	bne.n	8012078 <_dtoa_r+0xb8>
 8012040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012042:	f242 730f 	movw	r3, #9999	; 0x270f
 8012046:	6013      	str	r3, [r2, #0]
 8012048:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801204c:	4333      	orrs	r3, r6
 801204e:	f000 8593 	beq.w	8012b78 <_dtoa_r+0xbb8>
 8012052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012054:	b963      	cbnz	r3, 8012070 <_dtoa_r+0xb0>
 8012056:	4b97      	ldr	r3, [pc, #604]	; (80122b4 <_dtoa_r+0x2f4>)
 8012058:	e027      	b.n	80120aa <_dtoa_r+0xea>
 801205a:	4b97      	ldr	r3, [pc, #604]	; (80122b8 <_dtoa_r+0x2f8>)
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	3308      	adds	r3, #8
 8012060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012062:	6013      	str	r3, [r2, #0]
 8012064:	9800      	ldr	r0, [sp, #0]
 8012066:	b013      	add	sp, #76	; 0x4c
 8012068:	ecbd 8b04 	vpop	{d8-d9}
 801206c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012070:	4b90      	ldr	r3, [pc, #576]	; (80122b4 <_dtoa_r+0x2f4>)
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	3303      	adds	r3, #3
 8012076:	e7f3      	b.n	8012060 <_dtoa_r+0xa0>
 8012078:	ed9d 7b02 	vldr	d7, [sp, #8]
 801207c:	2200      	movs	r2, #0
 801207e:	ec51 0b17 	vmov	r0, r1, d7
 8012082:	eeb0 8a47 	vmov.f32	s16, s14
 8012086:	eef0 8a67 	vmov.f32	s17, s15
 801208a:	2300      	movs	r3, #0
 801208c:	f7ee fd4c 	bl	8000b28 <__aeabi_dcmpeq>
 8012090:	4681      	mov	r9, r0
 8012092:	b160      	cbz	r0, 80120ae <_dtoa_r+0xee>
 8012094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012096:	2301      	movs	r3, #1
 8012098:	6013      	str	r3, [r2, #0]
 801209a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801209c:	2b00      	cmp	r3, #0
 801209e:	f000 8568 	beq.w	8012b72 <_dtoa_r+0xbb2>
 80120a2:	4b86      	ldr	r3, [pc, #536]	; (80122bc <_dtoa_r+0x2fc>)
 80120a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120a6:	6013      	str	r3, [r2, #0]
 80120a8:	3b01      	subs	r3, #1
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	e7da      	b.n	8012064 <_dtoa_r+0xa4>
 80120ae:	aa10      	add	r2, sp, #64	; 0x40
 80120b0:	a911      	add	r1, sp, #68	; 0x44
 80120b2:	4620      	mov	r0, r4
 80120b4:	eeb0 0a48 	vmov.f32	s0, s16
 80120b8:	eef0 0a68 	vmov.f32	s1, s17
 80120bc:	f001 f99a 	bl	80133f4 <__d2b>
 80120c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80120c4:	4682      	mov	sl, r0
 80120c6:	2d00      	cmp	r5, #0
 80120c8:	d07f      	beq.n	80121ca <_dtoa_r+0x20a>
 80120ca:	ee18 3a90 	vmov	r3, s17
 80120ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80120d6:	ec51 0b18 	vmov	r0, r1, d8
 80120da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80120de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80120e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80120e6:	4619      	mov	r1, r3
 80120e8:	2200      	movs	r2, #0
 80120ea:	4b75      	ldr	r3, [pc, #468]	; (80122c0 <_dtoa_r+0x300>)
 80120ec:	f7ee f8fc 	bl	80002e8 <__aeabi_dsub>
 80120f0:	a367      	add	r3, pc, #412	; (adr r3, 8012290 <_dtoa_r+0x2d0>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	f7ee faaf 	bl	8000658 <__aeabi_dmul>
 80120fa:	a367      	add	r3, pc, #412	; (adr r3, 8012298 <_dtoa_r+0x2d8>)
 80120fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012100:	f7ee f8f4 	bl	80002ec <__adddf3>
 8012104:	4606      	mov	r6, r0
 8012106:	4628      	mov	r0, r5
 8012108:	460f      	mov	r7, r1
 801210a:	f7ee fa3b 	bl	8000584 <__aeabi_i2d>
 801210e:	a364      	add	r3, pc, #400	; (adr r3, 80122a0 <_dtoa_r+0x2e0>)
 8012110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012114:	f7ee faa0 	bl	8000658 <__aeabi_dmul>
 8012118:	4602      	mov	r2, r0
 801211a:	460b      	mov	r3, r1
 801211c:	4630      	mov	r0, r6
 801211e:	4639      	mov	r1, r7
 8012120:	f7ee f8e4 	bl	80002ec <__adddf3>
 8012124:	4606      	mov	r6, r0
 8012126:	460f      	mov	r7, r1
 8012128:	f7ee fd46 	bl	8000bb8 <__aeabi_d2iz>
 801212c:	2200      	movs	r2, #0
 801212e:	4683      	mov	fp, r0
 8012130:	2300      	movs	r3, #0
 8012132:	4630      	mov	r0, r6
 8012134:	4639      	mov	r1, r7
 8012136:	f7ee fd01 	bl	8000b3c <__aeabi_dcmplt>
 801213a:	b148      	cbz	r0, 8012150 <_dtoa_r+0x190>
 801213c:	4658      	mov	r0, fp
 801213e:	f7ee fa21 	bl	8000584 <__aeabi_i2d>
 8012142:	4632      	mov	r2, r6
 8012144:	463b      	mov	r3, r7
 8012146:	f7ee fcef 	bl	8000b28 <__aeabi_dcmpeq>
 801214a:	b908      	cbnz	r0, 8012150 <_dtoa_r+0x190>
 801214c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012150:	f1bb 0f16 	cmp.w	fp, #22
 8012154:	d857      	bhi.n	8012206 <_dtoa_r+0x246>
 8012156:	4b5b      	ldr	r3, [pc, #364]	; (80122c4 <_dtoa_r+0x304>)
 8012158:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012160:	ec51 0b18 	vmov	r0, r1, d8
 8012164:	f7ee fcea 	bl	8000b3c <__aeabi_dcmplt>
 8012168:	2800      	cmp	r0, #0
 801216a:	d04e      	beq.n	801220a <_dtoa_r+0x24a>
 801216c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012170:	2300      	movs	r3, #0
 8012172:	930c      	str	r3, [sp, #48]	; 0x30
 8012174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012176:	1b5b      	subs	r3, r3, r5
 8012178:	1e5a      	subs	r2, r3, #1
 801217a:	bf45      	ittet	mi
 801217c:	f1c3 0301 	rsbmi	r3, r3, #1
 8012180:	9305      	strmi	r3, [sp, #20]
 8012182:	2300      	movpl	r3, #0
 8012184:	2300      	movmi	r3, #0
 8012186:	9206      	str	r2, [sp, #24]
 8012188:	bf54      	ite	pl
 801218a:	9305      	strpl	r3, [sp, #20]
 801218c:	9306      	strmi	r3, [sp, #24]
 801218e:	f1bb 0f00 	cmp.w	fp, #0
 8012192:	db3c      	blt.n	801220e <_dtoa_r+0x24e>
 8012194:	9b06      	ldr	r3, [sp, #24]
 8012196:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801219a:	445b      	add	r3, fp
 801219c:	9306      	str	r3, [sp, #24]
 801219e:	2300      	movs	r3, #0
 80121a0:	9308      	str	r3, [sp, #32]
 80121a2:	9b07      	ldr	r3, [sp, #28]
 80121a4:	2b09      	cmp	r3, #9
 80121a6:	d868      	bhi.n	801227a <_dtoa_r+0x2ba>
 80121a8:	2b05      	cmp	r3, #5
 80121aa:	bfc4      	itt	gt
 80121ac:	3b04      	subgt	r3, #4
 80121ae:	9307      	strgt	r3, [sp, #28]
 80121b0:	9b07      	ldr	r3, [sp, #28]
 80121b2:	f1a3 0302 	sub.w	r3, r3, #2
 80121b6:	bfcc      	ite	gt
 80121b8:	2500      	movgt	r5, #0
 80121ba:	2501      	movle	r5, #1
 80121bc:	2b03      	cmp	r3, #3
 80121be:	f200 8085 	bhi.w	80122cc <_dtoa_r+0x30c>
 80121c2:	e8df f003 	tbb	[pc, r3]
 80121c6:	3b2e      	.short	0x3b2e
 80121c8:	5839      	.short	0x5839
 80121ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80121ce:	441d      	add	r5, r3
 80121d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80121d4:	2b20      	cmp	r3, #32
 80121d6:	bfc1      	itttt	gt
 80121d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80121dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80121e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80121e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80121e8:	bfd6      	itet	le
 80121ea:	f1c3 0320 	rsble	r3, r3, #32
 80121ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80121f2:	fa06 f003 	lslle.w	r0, r6, r3
 80121f6:	f7ee f9b5 	bl	8000564 <__aeabi_ui2d>
 80121fa:	2201      	movs	r2, #1
 80121fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012200:	3d01      	subs	r5, #1
 8012202:	920e      	str	r2, [sp, #56]	; 0x38
 8012204:	e76f      	b.n	80120e6 <_dtoa_r+0x126>
 8012206:	2301      	movs	r3, #1
 8012208:	e7b3      	b.n	8012172 <_dtoa_r+0x1b2>
 801220a:	900c      	str	r0, [sp, #48]	; 0x30
 801220c:	e7b2      	b.n	8012174 <_dtoa_r+0x1b4>
 801220e:	9b05      	ldr	r3, [sp, #20]
 8012210:	eba3 030b 	sub.w	r3, r3, fp
 8012214:	9305      	str	r3, [sp, #20]
 8012216:	f1cb 0300 	rsb	r3, fp, #0
 801221a:	9308      	str	r3, [sp, #32]
 801221c:	2300      	movs	r3, #0
 801221e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012220:	e7bf      	b.n	80121a2 <_dtoa_r+0x1e2>
 8012222:	2300      	movs	r3, #0
 8012224:	9309      	str	r3, [sp, #36]	; 0x24
 8012226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012228:	2b00      	cmp	r3, #0
 801222a:	dc52      	bgt.n	80122d2 <_dtoa_r+0x312>
 801222c:	2301      	movs	r3, #1
 801222e:	9301      	str	r3, [sp, #4]
 8012230:	9304      	str	r3, [sp, #16]
 8012232:	461a      	mov	r2, r3
 8012234:	920a      	str	r2, [sp, #40]	; 0x28
 8012236:	e00b      	b.n	8012250 <_dtoa_r+0x290>
 8012238:	2301      	movs	r3, #1
 801223a:	e7f3      	b.n	8012224 <_dtoa_r+0x264>
 801223c:	2300      	movs	r3, #0
 801223e:	9309      	str	r3, [sp, #36]	; 0x24
 8012240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012242:	445b      	add	r3, fp
 8012244:	9301      	str	r3, [sp, #4]
 8012246:	3301      	adds	r3, #1
 8012248:	2b01      	cmp	r3, #1
 801224a:	9304      	str	r3, [sp, #16]
 801224c:	bfb8      	it	lt
 801224e:	2301      	movlt	r3, #1
 8012250:	69e0      	ldr	r0, [r4, #28]
 8012252:	2100      	movs	r1, #0
 8012254:	2204      	movs	r2, #4
 8012256:	f102 0614 	add.w	r6, r2, #20
 801225a:	429e      	cmp	r6, r3
 801225c:	d93d      	bls.n	80122da <_dtoa_r+0x31a>
 801225e:	6041      	str	r1, [r0, #4]
 8012260:	4620      	mov	r0, r4
 8012262:	f000 fceb 	bl	8012c3c <_Balloc>
 8012266:	9000      	str	r0, [sp, #0]
 8012268:	2800      	cmp	r0, #0
 801226a:	d139      	bne.n	80122e0 <_dtoa_r+0x320>
 801226c:	4b16      	ldr	r3, [pc, #88]	; (80122c8 <_dtoa_r+0x308>)
 801226e:	4602      	mov	r2, r0
 8012270:	f240 11af 	movw	r1, #431	; 0x1af
 8012274:	e6bd      	b.n	8011ff2 <_dtoa_r+0x32>
 8012276:	2301      	movs	r3, #1
 8012278:	e7e1      	b.n	801223e <_dtoa_r+0x27e>
 801227a:	2501      	movs	r5, #1
 801227c:	2300      	movs	r3, #0
 801227e:	9307      	str	r3, [sp, #28]
 8012280:	9509      	str	r5, [sp, #36]	; 0x24
 8012282:	f04f 33ff 	mov.w	r3, #4294967295
 8012286:	9301      	str	r3, [sp, #4]
 8012288:	9304      	str	r3, [sp, #16]
 801228a:	2200      	movs	r2, #0
 801228c:	2312      	movs	r3, #18
 801228e:	e7d1      	b.n	8012234 <_dtoa_r+0x274>
 8012290:	636f4361 	.word	0x636f4361
 8012294:	3fd287a7 	.word	0x3fd287a7
 8012298:	8b60c8b3 	.word	0x8b60c8b3
 801229c:	3fc68a28 	.word	0x3fc68a28
 80122a0:	509f79fb 	.word	0x509f79fb
 80122a4:	3fd34413 	.word	0x3fd34413
 80122a8:	080183e0 	.word	0x080183e0
 80122ac:	080183f7 	.word	0x080183f7
 80122b0:	7ff00000 	.word	0x7ff00000
 80122b4:	080183dc 	.word	0x080183dc
 80122b8:	080183d3 	.word	0x080183d3
 80122bc:	080183ab 	.word	0x080183ab
 80122c0:	3ff80000 	.word	0x3ff80000
 80122c4:	080184e8 	.word	0x080184e8
 80122c8:	0801844f 	.word	0x0801844f
 80122cc:	2301      	movs	r3, #1
 80122ce:	9309      	str	r3, [sp, #36]	; 0x24
 80122d0:	e7d7      	b.n	8012282 <_dtoa_r+0x2c2>
 80122d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	9304      	str	r3, [sp, #16]
 80122d8:	e7ba      	b.n	8012250 <_dtoa_r+0x290>
 80122da:	3101      	adds	r1, #1
 80122dc:	0052      	lsls	r2, r2, #1
 80122de:	e7ba      	b.n	8012256 <_dtoa_r+0x296>
 80122e0:	69e3      	ldr	r3, [r4, #28]
 80122e2:	9a00      	ldr	r2, [sp, #0]
 80122e4:	601a      	str	r2, [r3, #0]
 80122e6:	9b04      	ldr	r3, [sp, #16]
 80122e8:	2b0e      	cmp	r3, #14
 80122ea:	f200 80a8 	bhi.w	801243e <_dtoa_r+0x47e>
 80122ee:	2d00      	cmp	r5, #0
 80122f0:	f000 80a5 	beq.w	801243e <_dtoa_r+0x47e>
 80122f4:	f1bb 0f00 	cmp.w	fp, #0
 80122f8:	dd38      	ble.n	801236c <_dtoa_r+0x3ac>
 80122fa:	4bc0      	ldr	r3, [pc, #768]	; (80125fc <_dtoa_r+0x63c>)
 80122fc:	f00b 020f 	and.w	r2, fp, #15
 8012300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012304:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012308:	e9d3 6700 	ldrd	r6, r7, [r3]
 801230c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012310:	d019      	beq.n	8012346 <_dtoa_r+0x386>
 8012312:	4bbb      	ldr	r3, [pc, #748]	; (8012600 <_dtoa_r+0x640>)
 8012314:	ec51 0b18 	vmov	r0, r1, d8
 8012318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801231c:	f7ee fac6 	bl	80008ac <__aeabi_ddiv>
 8012320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012324:	f008 080f 	and.w	r8, r8, #15
 8012328:	2503      	movs	r5, #3
 801232a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012600 <_dtoa_r+0x640>
 801232e:	f1b8 0f00 	cmp.w	r8, #0
 8012332:	d10a      	bne.n	801234a <_dtoa_r+0x38a>
 8012334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012338:	4632      	mov	r2, r6
 801233a:	463b      	mov	r3, r7
 801233c:	f7ee fab6 	bl	80008ac <__aeabi_ddiv>
 8012340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012344:	e02b      	b.n	801239e <_dtoa_r+0x3de>
 8012346:	2502      	movs	r5, #2
 8012348:	e7ef      	b.n	801232a <_dtoa_r+0x36a>
 801234a:	f018 0f01 	tst.w	r8, #1
 801234e:	d008      	beq.n	8012362 <_dtoa_r+0x3a2>
 8012350:	4630      	mov	r0, r6
 8012352:	4639      	mov	r1, r7
 8012354:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012358:	f7ee f97e 	bl	8000658 <__aeabi_dmul>
 801235c:	3501      	adds	r5, #1
 801235e:	4606      	mov	r6, r0
 8012360:	460f      	mov	r7, r1
 8012362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012366:	f109 0908 	add.w	r9, r9, #8
 801236a:	e7e0      	b.n	801232e <_dtoa_r+0x36e>
 801236c:	f000 809f 	beq.w	80124ae <_dtoa_r+0x4ee>
 8012370:	f1cb 0600 	rsb	r6, fp, #0
 8012374:	4ba1      	ldr	r3, [pc, #644]	; (80125fc <_dtoa_r+0x63c>)
 8012376:	4fa2      	ldr	r7, [pc, #648]	; (8012600 <_dtoa_r+0x640>)
 8012378:	f006 020f 	and.w	r2, r6, #15
 801237c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012384:	ec51 0b18 	vmov	r0, r1, d8
 8012388:	f7ee f966 	bl	8000658 <__aeabi_dmul>
 801238c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012390:	1136      	asrs	r6, r6, #4
 8012392:	2300      	movs	r3, #0
 8012394:	2502      	movs	r5, #2
 8012396:	2e00      	cmp	r6, #0
 8012398:	d17e      	bne.n	8012498 <_dtoa_r+0x4d8>
 801239a:	2b00      	cmp	r3, #0
 801239c:	d1d0      	bne.n	8012340 <_dtoa_r+0x380>
 801239e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	f000 8084 	beq.w	80124b2 <_dtoa_r+0x4f2>
 80123aa:	4b96      	ldr	r3, [pc, #600]	; (8012604 <_dtoa_r+0x644>)
 80123ac:	2200      	movs	r2, #0
 80123ae:	4640      	mov	r0, r8
 80123b0:	4649      	mov	r1, r9
 80123b2:	f7ee fbc3 	bl	8000b3c <__aeabi_dcmplt>
 80123b6:	2800      	cmp	r0, #0
 80123b8:	d07b      	beq.n	80124b2 <_dtoa_r+0x4f2>
 80123ba:	9b04      	ldr	r3, [sp, #16]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d078      	beq.n	80124b2 <_dtoa_r+0x4f2>
 80123c0:	9b01      	ldr	r3, [sp, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	dd39      	ble.n	801243a <_dtoa_r+0x47a>
 80123c6:	4b90      	ldr	r3, [pc, #576]	; (8012608 <_dtoa_r+0x648>)
 80123c8:	2200      	movs	r2, #0
 80123ca:	4640      	mov	r0, r8
 80123cc:	4649      	mov	r1, r9
 80123ce:	f7ee f943 	bl	8000658 <__aeabi_dmul>
 80123d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123d6:	9e01      	ldr	r6, [sp, #4]
 80123d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80123dc:	3501      	adds	r5, #1
 80123de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80123e2:	4628      	mov	r0, r5
 80123e4:	f7ee f8ce 	bl	8000584 <__aeabi_i2d>
 80123e8:	4642      	mov	r2, r8
 80123ea:	464b      	mov	r3, r9
 80123ec:	f7ee f934 	bl	8000658 <__aeabi_dmul>
 80123f0:	4b86      	ldr	r3, [pc, #536]	; (801260c <_dtoa_r+0x64c>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	f7ed ff7a 	bl	80002ec <__adddf3>
 80123f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80123fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012400:	9303      	str	r3, [sp, #12]
 8012402:	2e00      	cmp	r6, #0
 8012404:	d158      	bne.n	80124b8 <_dtoa_r+0x4f8>
 8012406:	4b82      	ldr	r3, [pc, #520]	; (8012610 <_dtoa_r+0x650>)
 8012408:	2200      	movs	r2, #0
 801240a:	4640      	mov	r0, r8
 801240c:	4649      	mov	r1, r9
 801240e:	f7ed ff6b 	bl	80002e8 <__aeabi_dsub>
 8012412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012416:	4680      	mov	r8, r0
 8012418:	4689      	mov	r9, r1
 801241a:	f7ee fbad 	bl	8000b78 <__aeabi_dcmpgt>
 801241e:	2800      	cmp	r0, #0
 8012420:	f040 8296 	bne.w	8012950 <_dtoa_r+0x990>
 8012424:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012428:	4640      	mov	r0, r8
 801242a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801242e:	4649      	mov	r1, r9
 8012430:	f7ee fb84 	bl	8000b3c <__aeabi_dcmplt>
 8012434:	2800      	cmp	r0, #0
 8012436:	f040 8289 	bne.w	801294c <_dtoa_r+0x98c>
 801243a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801243e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012440:	2b00      	cmp	r3, #0
 8012442:	f2c0 814e 	blt.w	80126e2 <_dtoa_r+0x722>
 8012446:	f1bb 0f0e 	cmp.w	fp, #14
 801244a:	f300 814a 	bgt.w	80126e2 <_dtoa_r+0x722>
 801244e:	4b6b      	ldr	r3, [pc, #428]	; (80125fc <_dtoa_r+0x63c>)
 8012450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801245a:	2b00      	cmp	r3, #0
 801245c:	f280 80dc 	bge.w	8012618 <_dtoa_r+0x658>
 8012460:	9b04      	ldr	r3, [sp, #16]
 8012462:	2b00      	cmp	r3, #0
 8012464:	f300 80d8 	bgt.w	8012618 <_dtoa_r+0x658>
 8012468:	f040 826f 	bne.w	801294a <_dtoa_r+0x98a>
 801246c:	4b68      	ldr	r3, [pc, #416]	; (8012610 <_dtoa_r+0x650>)
 801246e:	2200      	movs	r2, #0
 8012470:	4640      	mov	r0, r8
 8012472:	4649      	mov	r1, r9
 8012474:	f7ee f8f0 	bl	8000658 <__aeabi_dmul>
 8012478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801247c:	f7ee fb72 	bl	8000b64 <__aeabi_dcmpge>
 8012480:	9e04      	ldr	r6, [sp, #16]
 8012482:	4637      	mov	r7, r6
 8012484:	2800      	cmp	r0, #0
 8012486:	f040 8245 	bne.w	8012914 <_dtoa_r+0x954>
 801248a:	9d00      	ldr	r5, [sp, #0]
 801248c:	2331      	movs	r3, #49	; 0x31
 801248e:	f805 3b01 	strb.w	r3, [r5], #1
 8012492:	f10b 0b01 	add.w	fp, fp, #1
 8012496:	e241      	b.n	801291c <_dtoa_r+0x95c>
 8012498:	07f2      	lsls	r2, r6, #31
 801249a:	d505      	bpl.n	80124a8 <_dtoa_r+0x4e8>
 801249c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80124a0:	f7ee f8da 	bl	8000658 <__aeabi_dmul>
 80124a4:	3501      	adds	r5, #1
 80124a6:	2301      	movs	r3, #1
 80124a8:	1076      	asrs	r6, r6, #1
 80124aa:	3708      	adds	r7, #8
 80124ac:	e773      	b.n	8012396 <_dtoa_r+0x3d6>
 80124ae:	2502      	movs	r5, #2
 80124b0:	e775      	b.n	801239e <_dtoa_r+0x3de>
 80124b2:	9e04      	ldr	r6, [sp, #16]
 80124b4:	465f      	mov	r7, fp
 80124b6:	e792      	b.n	80123de <_dtoa_r+0x41e>
 80124b8:	9900      	ldr	r1, [sp, #0]
 80124ba:	4b50      	ldr	r3, [pc, #320]	; (80125fc <_dtoa_r+0x63c>)
 80124bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124c0:	4431      	add	r1, r6
 80124c2:	9102      	str	r1, [sp, #8]
 80124c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124c6:	eeb0 9a47 	vmov.f32	s18, s14
 80124ca:	eef0 9a67 	vmov.f32	s19, s15
 80124ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80124d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80124d6:	2900      	cmp	r1, #0
 80124d8:	d044      	beq.n	8012564 <_dtoa_r+0x5a4>
 80124da:	494e      	ldr	r1, [pc, #312]	; (8012614 <_dtoa_r+0x654>)
 80124dc:	2000      	movs	r0, #0
 80124de:	f7ee f9e5 	bl	80008ac <__aeabi_ddiv>
 80124e2:	ec53 2b19 	vmov	r2, r3, d9
 80124e6:	f7ed feff 	bl	80002e8 <__aeabi_dsub>
 80124ea:	9d00      	ldr	r5, [sp, #0]
 80124ec:	ec41 0b19 	vmov	d9, r0, r1
 80124f0:	4649      	mov	r1, r9
 80124f2:	4640      	mov	r0, r8
 80124f4:	f7ee fb60 	bl	8000bb8 <__aeabi_d2iz>
 80124f8:	4606      	mov	r6, r0
 80124fa:	f7ee f843 	bl	8000584 <__aeabi_i2d>
 80124fe:	4602      	mov	r2, r0
 8012500:	460b      	mov	r3, r1
 8012502:	4640      	mov	r0, r8
 8012504:	4649      	mov	r1, r9
 8012506:	f7ed feef 	bl	80002e8 <__aeabi_dsub>
 801250a:	3630      	adds	r6, #48	; 0x30
 801250c:	f805 6b01 	strb.w	r6, [r5], #1
 8012510:	ec53 2b19 	vmov	r2, r3, d9
 8012514:	4680      	mov	r8, r0
 8012516:	4689      	mov	r9, r1
 8012518:	f7ee fb10 	bl	8000b3c <__aeabi_dcmplt>
 801251c:	2800      	cmp	r0, #0
 801251e:	d164      	bne.n	80125ea <_dtoa_r+0x62a>
 8012520:	4642      	mov	r2, r8
 8012522:	464b      	mov	r3, r9
 8012524:	4937      	ldr	r1, [pc, #220]	; (8012604 <_dtoa_r+0x644>)
 8012526:	2000      	movs	r0, #0
 8012528:	f7ed fede 	bl	80002e8 <__aeabi_dsub>
 801252c:	ec53 2b19 	vmov	r2, r3, d9
 8012530:	f7ee fb04 	bl	8000b3c <__aeabi_dcmplt>
 8012534:	2800      	cmp	r0, #0
 8012536:	f040 80b6 	bne.w	80126a6 <_dtoa_r+0x6e6>
 801253a:	9b02      	ldr	r3, [sp, #8]
 801253c:	429d      	cmp	r5, r3
 801253e:	f43f af7c 	beq.w	801243a <_dtoa_r+0x47a>
 8012542:	4b31      	ldr	r3, [pc, #196]	; (8012608 <_dtoa_r+0x648>)
 8012544:	ec51 0b19 	vmov	r0, r1, d9
 8012548:	2200      	movs	r2, #0
 801254a:	f7ee f885 	bl	8000658 <__aeabi_dmul>
 801254e:	4b2e      	ldr	r3, [pc, #184]	; (8012608 <_dtoa_r+0x648>)
 8012550:	ec41 0b19 	vmov	d9, r0, r1
 8012554:	2200      	movs	r2, #0
 8012556:	4640      	mov	r0, r8
 8012558:	4649      	mov	r1, r9
 801255a:	f7ee f87d 	bl	8000658 <__aeabi_dmul>
 801255e:	4680      	mov	r8, r0
 8012560:	4689      	mov	r9, r1
 8012562:	e7c5      	b.n	80124f0 <_dtoa_r+0x530>
 8012564:	ec51 0b17 	vmov	r0, r1, d7
 8012568:	f7ee f876 	bl	8000658 <__aeabi_dmul>
 801256c:	9b02      	ldr	r3, [sp, #8]
 801256e:	9d00      	ldr	r5, [sp, #0]
 8012570:	930f      	str	r3, [sp, #60]	; 0x3c
 8012572:	ec41 0b19 	vmov	d9, r0, r1
 8012576:	4649      	mov	r1, r9
 8012578:	4640      	mov	r0, r8
 801257a:	f7ee fb1d 	bl	8000bb8 <__aeabi_d2iz>
 801257e:	4606      	mov	r6, r0
 8012580:	f7ee f800 	bl	8000584 <__aeabi_i2d>
 8012584:	3630      	adds	r6, #48	; 0x30
 8012586:	4602      	mov	r2, r0
 8012588:	460b      	mov	r3, r1
 801258a:	4640      	mov	r0, r8
 801258c:	4649      	mov	r1, r9
 801258e:	f7ed feab 	bl	80002e8 <__aeabi_dsub>
 8012592:	f805 6b01 	strb.w	r6, [r5], #1
 8012596:	9b02      	ldr	r3, [sp, #8]
 8012598:	429d      	cmp	r5, r3
 801259a:	4680      	mov	r8, r0
 801259c:	4689      	mov	r9, r1
 801259e:	f04f 0200 	mov.w	r2, #0
 80125a2:	d124      	bne.n	80125ee <_dtoa_r+0x62e>
 80125a4:	4b1b      	ldr	r3, [pc, #108]	; (8012614 <_dtoa_r+0x654>)
 80125a6:	ec51 0b19 	vmov	r0, r1, d9
 80125aa:	f7ed fe9f 	bl	80002ec <__adddf3>
 80125ae:	4602      	mov	r2, r0
 80125b0:	460b      	mov	r3, r1
 80125b2:	4640      	mov	r0, r8
 80125b4:	4649      	mov	r1, r9
 80125b6:	f7ee fadf 	bl	8000b78 <__aeabi_dcmpgt>
 80125ba:	2800      	cmp	r0, #0
 80125bc:	d173      	bne.n	80126a6 <_dtoa_r+0x6e6>
 80125be:	ec53 2b19 	vmov	r2, r3, d9
 80125c2:	4914      	ldr	r1, [pc, #80]	; (8012614 <_dtoa_r+0x654>)
 80125c4:	2000      	movs	r0, #0
 80125c6:	f7ed fe8f 	bl	80002e8 <__aeabi_dsub>
 80125ca:	4602      	mov	r2, r0
 80125cc:	460b      	mov	r3, r1
 80125ce:	4640      	mov	r0, r8
 80125d0:	4649      	mov	r1, r9
 80125d2:	f7ee fab3 	bl	8000b3c <__aeabi_dcmplt>
 80125d6:	2800      	cmp	r0, #0
 80125d8:	f43f af2f 	beq.w	801243a <_dtoa_r+0x47a>
 80125dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80125de:	1e6b      	subs	r3, r5, #1
 80125e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80125e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80125e6:	2b30      	cmp	r3, #48	; 0x30
 80125e8:	d0f8      	beq.n	80125dc <_dtoa_r+0x61c>
 80125ea:	46bb      	mov	fp, r7
 80125ec:	e04a      	b.n	8012684 <_dtoa_r+0x6c4>
 80125ee:	4b06      	ldr	r3, [pc, #24]	; (8012608 <_dtoa_r+0x648>)
 80125f0:	f7ee f832 	bl	8000658 <__aeabi_dmul>
 80125f4:	4680      	mov	r8, r0
 80125f6:	4689      	mov	r9, r1
 80125f8:	e7bd      	b.n	8012576 <_dtoa_r+0x5b6>
 80125fa:	bf00      	nop
 80125fc:	080184e8 	.word	0x080184e8
 8012600:	080184c0 	.word	0x080184c0
 8012604:	3ff00000 	.word	0x3ff00000
 8012608:	40240000 	.word	0x40240000
 801260c:	401c0000 	.word	0x401c0000
 8012610:	40140000 	.word	0x40140000
 8012614:	3fe00000 	.word	0x3fe00000
 8012618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801261c:	9d00      	ldr	r5, [sp, #0]
 801261e:	4642      	mov	r2, r8
 8012620:	464b      	mov	r3, r9
 8012622:	4630      	mov	r0, r6
 8012624:	4639      	mov	r1, r7
 8012626:	f7ee f941 	bl	80008ac <__aeabi_ddiv>
 801262a:	f7ee fac5 	bl	8000bb8 <__aeabi_d2iz>
 801262e:	9001      	str	r0, [sp, #4]
 8012630:	f7ed ffa8 	bl	8000584 <__aeabi_i2d>
 8012634:	4642      	mov	r2, r8
 8012636:	464b      	mov	r3, r9
 8012638:	f7ee f80e 	bl	8000658 <__aeabi_dmul>
 801263c:	4602      	mov	r2, r0
 801263e:	460b      	mov	r3, r1
 8012640:	4630      	mov	r0, r6
 8012642:	4639      	mov	r1, r7
 8012644:	f7ed fe50 	bl	80002e8 <__aeabi_dsub>
 8012648:	9e01      	ldr	r6, [sp, #4]
 801264a:	9f04      	ldr	r7, [sp, #16]
 801264c:	3630      	adds	r6, #48	; 0x30
 801264e:	f805 6b01 	strb.w	r6, [r5], #1
 8012652:	9e00      	ldr	r6, [sp, #0]
 8012654:	1bae      	subs	r6, r5, r6
 8012656:	42b7      	cmp	r7, r6
 8012658:	4602      	mov	r2, r0
 801265a:	460b      	mov	r3, r1
 801265c:	d134      	bne.n	80126c8 <_dtoa_r+0x708>
 801265e:	f7ed fe45 	bl	80002ec <__adddf3>
 8012662:	4642      	mov	r2, r8
 8012664:	464b      	mov	r3, r9
 8012666:	4606      	mov	r6, r0
 8012668:	460f      	mov	r7, r1
 801266a:	f7ee fa85 	bl	8000b78 <__aeabi_dcmpgt>
 801266e:	b9c8      	cbnz	r0, 80126a4 <_dtoa_r+0x6e4>
 8012670:	4642      	mov	r2, r8
 8012672:	464b      	mov	r3, r9
 8012674:	4630      	mov	r0, r6
 8012676:	4639      	mov	r1, r7
 8012678:	f7ee fa56 	bl	8000b28 <__aeabi_dcmpeq>
 801267c:	b110      	cbz	r0, 8012684 <_dtoa_r+0x6c4>
 801267e:	9b01      	ldr	r3, [sp, #4]
 8012680:	07db      	lsls	r3, r3, #31
 8012682:	d40f      	bmi.n	80126a4 <_dtoa_r+0x6e4>
 8012684:	4651      	mov	r1, sl
 8012686:	4620      	mov	r0, r4
 8012688:	f000 fb18 	bl	8012cbc <_Bfree>
 801268c:	2300      	movs	r3, #0
 801268e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012690:	702b      	strb	r3, [r5, #0]
 8012692:	f10b 0301 	add.w	r3, fp, #1
 8012696:	6013      	str	r3, [r2, #0]
 8012698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801269a:	2b00      	cmp	r3, #0
 801269c:	f43f ace2 	beq.w	8012064 <_dtoa_r+0xa4>
 80126a0:	601d      	str	r5, [r3, #0]
 80126a2:	e4df      	b.n	8012064 <_dtoa_r+0xa4>
 80126a4:	465f      	mov	r7, fp
 80126a6:	462b      	mov	r3, r5
 80126a8:	461d      	mov	r5, r3
 80126aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126ae:	2a39      	cmp	r2, #57	; 0x39
 80126b0:	d106      	bne.n	80126c0 <_dtoa_r+0x700>
 80126b2:	9a00      	ldr	r2, [sp, #0]
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d1f7      	bne.n	80126a8 <_dtoa_r+0x6e8>
 80126b8:	9900      	ldr	r1, [sp, #0]
 80126ba:	2230      	movs	r2, #48	; 0x30
 80126bc:	3701      	adds	r7, #1
 80126be:	700a      	strb	r2, [r1, #0]
 80126c0:	781a      	ldrb	r2, [r3, #0]
 80126c2:	3201      	adds	r2, #1
 80126c4:	701a      	strb	r2, [r3, #0]
 80126c6:	e790      	b.n	80125ea <_dtoa_r+0x62a>
 80126c8:	4ba3      	ldr	r3, [pc, #652]	; (8012958 <_dtoa_r+0x998>)
 80126ca:	2200      	movs	r2, #0
 80126cc:	f7ed ffc4 	bl	8000658 <__aeabi_dmul>
 80126d0:	2200      	movs	r2, #0
 80126d2:	2300      	movs	r3, #0
 80126d4:	4606      	mov	r6, r0
 80126d6:	460f      	mov	r7, r1
 80126d8:	f7ee fa26 	bl	8000b28 <__aeabi_dcmpeq>
 80126dc:	2800      	cmp	r0, #0
 80126de:	d09e      	beq.n	801261e <_dtoa_r+0x65e>
 80126e0:	e7d0      	b.n	8012684 <_dtoa_r+0x6c4>
 80126e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126e4:	2a00      	cmp	r2, #0
 80126e6:	f000 80ca 	beq.w	801287e <_dtoa_r+0x8be>
 80126ea:	9a07      	ldr	r2, [sp, #28]
 80126ec:	2a01      	cmp	r2, #1
 80126ee:	f300 80ad 	bgt.w	801284c <_dtoa_r+0x88c>
 80126f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80126f4:	2a00      	cmp	r2, #0
 80126f6:	f000 80a5 	beq.w	8012844 <_dtoa_r+0x884>
 80126fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80126fe:	9e08      	ldr	r6, [sp, #32]
 8012700:	9d05      	ldr	r5, [sp, #20]
 8012702:	9a05      	ldr	r2, [sp, #20]
 8012704:	441a      	add	r2, r3
 8012706:	9205      	str	r2, [sp, #20]
 8012708:	9a06      	ldr	r2, [sp, #24]
 801270a:	2101      	movs	r1, #1
 801270c:	441a      	add	r2, r3
 801270e:	4620      	mov	r0, r4
 8012710:	9206      	str	r2, [sp, #24]
 8012712:	f000 fbd3 	bl	8012ebc <__i2b>
 8012716:	4607      	mov	r7, r0
 8012718:	b165      	cbz	r5, 8012734 <_dtoa_r+0x774>
 801271a:	9b06      	ldr	r3, [sp, #24]
 801271c:	2b00      	cmp	r3, #0
 801271e:	dd09      	ble.n	8012734 <_dtoa_r+0x774>
 8012720:	42ab      	cmp	r3, r5
 8012722:	9a05      	ldr	r2, [sp, #20]
 8012724:	bfa8      	it	ge
 8012726:	462b      	movge	r3, r5
 8012728:	1ad2      	subs	r2, r2, r3
 801272a:	9205      	str	r2, [sp, #20]
 801272c:	9a06      	ldr	r2, [sp, #24]
 801272e:	1aed      	subs	r5, r5, r3
 8012730:	1ad3      	subs	r3, r2, r3
 8012732:	9306      	str	r3, [sp, #24]
 8012734:	9b08      	ldr	r3, [sp, #32]
 8012736:	b1f3      	cbz	r3, 8012776 <_dtoa_r+0x7b6>
 8012738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801273a:	2b00      	cmp	r3, #0
 801273c:	f000 80a3 	beq.w	8012886 <_dtoa_r+0x8c6>
 8012740:	2e00      	cmp	r6, #0
 8012742:	dd10      	ble.n	8012766 <_dtoa_r+0x7a6>
 8012744:	4639      	mov	r1, r7
 8012746:	4632      	mov	r2, r6
 8012748:	4620      	mov	r0, r4
 801274a:	f000 fc77 	bl	801303c <__pow5mult>
 801274e:	4652      	mov	r2, sl
 8012750:	4601      	mov	r1, r0
 8012752:	4607      	mov	r7, r0
 8012754:	4620      	mov	r0, r4
 8012756:	f000 fbc7 	bl	8012ee8 <__multiply>
 801275a:	4651      	mov	r1, sl
 801275c:	4680      	mov	r8, r0
 801275e:	4620      	mov	r0, r4
 8012760:	f000 faac 	bl	8012cbc <_Bfree>
 8012764:	46c2      	mov	sl, r8
 8012766:	9b08      	ldr	r3, [sp, #32]
 8012768:	1b9a      	subs	r2, r3, r6
 801276a:	d004      	beq.n	8012776 <_dtoa_r+0x7b6>
 801276c:	4651      	mov	r1, sl
 801276e:	4620      	mov	r0, r4
 8012770:	f000 fc64 	bl	801303c <__pow5mult>
 8012774:	4682      	mov	sl, r0
 8012776:	2101      	movs	r1, #1
 8012778:	4620      	mov	r0, r4
 801277a:	f000 fb9f 	bl	8012ebc <__i2b>
 801277e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012780:	2b00      	cmp	r3, #0
 8012782:	4606      	mov	r6, r0
 8012784:	f340 8081 	ble.w	801288a <_dtoa_r+0x8ca>
 8012788:	461a      	mov	r2, r3
 801278a:	4601      	mov	r1, r0
 801278c:	4620      	mov	r0, r4
 801278e:	f000 fc55 	bl	801303c <__pow5mult>
 8012792:	9b07      	ldr	r3, [sp, #28]
 8012794:	2b01      	cmp	r3, #1
 8012796:	4606      	mov	r6, r0
 8012798:	dd7a      	ble.n	8012890 <_dtoa_r+0x8d0>
 801279a:	f04f 0800 	mov.w	r8, #0
 801279e:	6933      	ldr	r3, [r6, #16]
 80127a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80127a4:	6918      	ldr	r0, [r3, #16]
 80127a6:	f000 fb3b 	bl	8012e20 <__hi0bits>
 80127aa:	f1c0 0020 	rsb	r0, r0, #32
 80127ae:	9b06      	ldr	r3, [sp, #24]
 80127b0:	4418      	add	r0, r3
 80127b2:	f010 001f 	ands.w	r0, r0, #31
 80127b6:	f000 8094 	beq.w	80128e2 <_dtoa_r+0x922>
 80127ba:	f1c0 0320 	rsb	r3, r0, #32
 80127be:	2b04      	cmp	r3, #4
 80127c0:	f340 8085 	ble.w	80128ce <_dtoa_r+0x90e>
 80127c4:	9b05      	ldr	r3, [sp, #20]
 80127c6:	f1c0 001c 	rsb	r0, r0, #28
 80127ca:	4403      	add	r3, r0
 80127cc:	9305      	str	r3, [sp, #20]
 80127ce:	9b06      	ldr	r3, [sp, #24]
 80127d0:	4403      	add	r3, r0
 80127d2:	4405      	add	r5, r0
 80127d4:	9306      	str	r3, [sp, #24]
 80127d6:	9b05      	ldr	r3, [sp, #20]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	dd05      	ble.n	80127e8 <_dtoa_r+0x828>
 80127dc:	4651      	mov	r1, sl
 80127de:	461a      	mov	r2, r3
 80127e0:	4620      	mov	r0, r4
 80127e2:	f000 fc85 	bl	80130f0 <__lshift>
 80127e6:	4682      	mov	sl, r0
 80127e8:	9b06      	ldr	r3, [sp, #24]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	dd05      	ble.n	80127fa <_dtoa_r+0x83a>
 80127ee:	4631      	mov	r1, r6
 80127f0:	461a      	mov	r2, r3
 80127f2:	4620      	mov	r0, r4
 80127f4:	f000 fc7c 	bl	80130f0 <__lshift>
 80127f8:	4606      	mov	r6, r0
 80127fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d072      	beq.n	80128e6 <_dtoa_r+0x926>
 8012800:	4631      	mov	r1, r6
 8012802:	4650      	mov	r0, sl
 8012804:	f000 fce0 	bl	80131c8 <__mcmp>
 8012808:	2800      	cmp	r0, #0
 801280a:	da6c      	bge.n	80128e6 <_dtoa_r+0x926>
 801280c:	2300      	movs	r3, #0
 801280e:	4651      	mov	r1, sl
 8012810:	220a      	movs	r2, #10
 8012812:	4620      	mov	r0, r4
 8012814:	f000 fa74 	bl	8012d00 <__multadd>
 8012818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801281a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801281e:	4682      	mov	sl, r0
 8012820:	2b00      	cmp	r3, #0
 8012822:	f000 81b0 	beq.w	8012b86 <_dtoa_r+0xbc6>
 8012826:	2300      	movs	r3, #0
 8012828:	4639      	mov	r1, r7
 801282a:	220a      	movs	r2, #10
 801282c:	4620      	mov	r0, r4
 801282e:	f000 fa67 	bl	8012d00 <__multadd>
 8012832:	9b01      	ldr	r3, [sp, #4]
 8012834:	2b00      	cmp	r3, #0
 8012836:	4607      	mov	r7, r0
 8012838:	f300 8096 	bgt.w	8012968 <_dtoa_r+0x9a8>
 801283c:	9b07      	ldr	r3, [sp, #28]
 801283e:	2b02      	cmp	r3, #2
 8012840:	dc59      	bgt.n	80128f6 <_dtoa_r+0x936>
 8012842:	e091      	b.n	8012968 <_dtoa_r+0x9a8>
 8012844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801284a:	e758      	b.n	80126fe <_dtoa_r+0x73e>
 801284c:	9b04      	ldr	r3, [sp, #16]
 801284e:	1e5e      	subs	r6, r3, #1
 8012850:	9b08      	ldr	r3, [sp, #32]
 8012852:	42b3      	cmp	r3, r6
 8012854:	bfbf      	itttt	lt
 8012856:	9b08      	ldrlt	r3, [sp, #32]
 8012858:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801285a:	9608      	strlt	r6, [sp, #32]
 801285c:	1af3      	sublt	r3, r6, r3
 801285e:	bfb4      	ite	lt
 8012860:	18d2      	addlt	r2, r2, r3
 8012862:	1b9e      	subge	r6, r3, r6
 8012864:	9b04      	ldr	r3, [sp, #16]
 8012866:	bfbc      	itt	lt
 8012868:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801286a:	2600      	movlt	r6, #0
 801286c:	2b00      	cmp	r3, #0
 801286e:	bfb7      	itett	lt
 8012870:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012874:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012878:	1a9d      	sublt	r5, r3, r2
 801287a:	2300      	movlt	r3, #0
 801287c:	e741      	b.n	8012702 <_dtoa_r+0x742>
 801287e:	9e08      	ldr	r6, [sp, #32]
 8012880:	9d05      	ldr	r5, [sp, #20]
 8012882:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012884:	e748      	b.n	8012718 <_dtoa_r+0x758>
 8012886:	9a08      	ldr	r2, [sp, #32]
 8012888:	e770      	b.n	801276c <_dtoa_r+0x7ac>
 801288a:	9b07      	ldr	r3, [sp, #28]
 801288c:	2b01      	cmp	r3, #1
 801288e:	dc19      	bgt.n	80128c4 <_dtoa_r+0x904>
 8012890:	9b02      	ldr	r3, [sp, #8]
 8012892:	b9bb      	cbnz	r3, 80128c4 <_dtoa_r+0x904>
 8012894:	9b03      	ldr	r3, [sp, #12]
 8012896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801289a:	b99b      	cbnz	r3, 80128c4 <_dtoa_r+0x904>
 801289c:	9b03      	ldr	r3, [sp, #12]
 801289e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128a2:	0d1b      	lsrs	r3, r3, #20
 80128a4:	051b      	lsls	r3, r3, #20
 80128a6:	b183      	cbz	r3, 80128ca <_dtoa_r+0x90a>
 80128a8:	9b05      	ldr	r3, [sp, #20]
 80128aa:	3301      	adds	r3, #1
 80128ac:	9305      	str	r3, [sp, #20]
 80128ae:	9b06      	ldr	r3, [sp, #24]
 80128b0:	3301      	adds	r3, #1
 80128b2:	9306      	str	r3, [sp, #24]
 80128b4:	f04f 0801 	mov.w	r8, #1
 80128b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f47f af6f 	bne.w	801279e <_dtoa_r+0x7de>
 80128c0:	2001      	movs	r0, #1
 80128c2:	e774      	b.n	80127ae <_dtoa_r+0x7ee>
 80128c4:	f04f 0800 	mov.w	r8, #0
 80128c8:	e7f6      	b.n	80128b8 <_dtoa_r+0x8f8>
 80128ca:	4698      	mov	r8, r3
 80128cc:	e7f4      	b.n	80128b8 <_dtoa_r+0x8f8>
 80128ce:	d082      	beq.n	80127d6 <_dtoa_r+0x816>
 80128d0:	9a05      	ldr	r2, [sp, #20]
 80128d2:	331c      	adds	r3, #28
 80128d4:	441a      	add	r2, r3
 80128d6:	9205      	str	r2, [sp, #20]
 80128d8:	9a06      	ldr	r2, [sp, #24]
 80128da:	441a      	add	r2, r3
 80128dc:	441d      	add	r5, r3
 80128de:	9206      	str	r2, [sp, #24]
 80128e0:	e779      	b.n	80127d6 <_dtoa_r+0x816>
 80128e2:	4603      	mov	r3, r0
 80128e4:	e7f4      	b.n	80128d0 <_dtoa_r+0x910>
 80128e6:	9b04      	ldr	r3, [sp, #16]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	dc37      	bgt.n	801295c <_dtoa_r+0x99c>
 80128ec:	9b07      	ldr	r3, [sp, #28]
 80128ee:	2b02      	cmp	r3, #2
 80128f0:	dd34      	ble.n	801295c <_dtoa_r+0x99c>
 80128f2:	9b04      	ldr	r3, [sp, #16]
 80128f4:	9301      	str	r3, [sp, #4]
 80128f6:	9b01      	ldr	r3, [sp, #4]
 80128f8:	b963      	cbnz	r3, 8012914 <_dtoa_r+0x954>
 80128fa:	4631      	mov	r1, r6
 80128fc:	2205      	movs	r2, #5
 80128fe:	4620      	mov	r0, r4
 8012900:	f000 f9fe 	bl	8012d00 <__multadd>
 8012904:	4601      	mov	r1, r0
 8012906:	4606      	mov	r6, r0
 8012908:	4650      	mov	r0, sl
 801290a:	f000 fc5d 	bl	80131c8 <__mcmp>
 801290e:	2800      	cmp	r0, #0
 8012910:	f73f adbb 	bgt.w	801248a <_dtoa_r+0x4ca>
 8012914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012916:	9d00      	ldr	r5, [sp, #0]
 8012918:	ea6f 0b03 	mvn.w	fp, r3
 801291c:	f04f 0800 	mov.w	r8, #0
 8012920:	4631      	mov	r1, r6
 8012922:	4620      	mov	r0, r4
 8012924:	f000 f9ca 	bl	8012cbc <_Bfree>
 8012928:	2f00      	cmp	r7, #0
 801292a:	f43f aeab 	beq.w	8012684 <_dtoa_r+0x6c4>
 801292e:	f1b8 0f00 	cmp.w	r8, #0
 8012932:	d005      	beq.n	8012940 <_dtoa_r+0x980>
 8012934:	45b8      	cmp	r8, r7
 8012936:	d003      	beq.n	8012940 <_dtoa_r+0x980>
 8012938:	4641      	mov	r1, r8
 801293a:	4620      	mov	r0, r4
 801293c:	f000 f9be 	bl	8012cbc <_Bfree>
 8012940:	4639      	mov	r1, r7
 8012942:	4620      	mov	r0, r4
 8012944:	f000 f9ba 	bl	8012cbc <_Bfree>
 8012948:	e69c      	b.n	8012684 <_dtoa_r+0x6c4>
 801294a:	2600      	movs	r6, #0
 801294c:	4637      	mov	r7, r6
 801294e:	e7e1      	b.n	8012914 <_dtoa_r+0x954>
 8012950:	46bb      	mov	fp, r7
 8012952:	4637      	mov	r7, r6
 8012954:	e599      	b.n	801248a <_dtoa_r+0x4ca>
 8012956:	bf00      	nop
 8012958:	40240000 	.word	0x40240000
 801295c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801295e:	2b00      	cmp	r3, #0
 8012960:	f000 80c8 	beq.w	8012af4 <_dtoa_r+0xb34>
 8012964:	9b04      	ldr	r3, [sp, #16]
 8012966:	9301      	str	r3, [sp, #4]
 8012968:	2d00      	cmp	r5, #0
 801296a:	dd05      	ble.n	8012978 <_dtoa_r+0x9b8>
 801296c:	4639      	mov	r1, r7
 801296e:	462a      	mov	r2, r5
 8012970:	4620      	mov	r0, r4
 8012972:	f000 fbbd 	bl	80130f0 <__lshift>
 8012976:	4607      	mov	r7, r0
 8012978:	f1b8 0f00 	cmp.w	r8, #0
 801297c:	d05b      	beq.n	8012a36 <_dtoa_r+0xa76>
 801297e:	6879      	ldr	r1, [r7, #4]
 8012980:	4620      	mov	r0, r4
 8012982:	f000 f95b 	bl	8012c3c <_Balloc>
 8012986:	4605      	mov	r5, r0
 8012988:	b928      	cbnz	r0, 8012996 <_dtoa_r+0x9d6>
 801298a:	4b83      	ldr	r3, [pc, #524]	; (8012b98 <_dtoa_r+0xbd8>)
 801298c:	4602      	mov	r2, r0
 801298e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012992:	f7ff bb2e 	b.w	8011ff2 <_dtoa_r+0x32>
 8012996:	693a      	ldr	r2, [r7, #16]
 8012998:	3202      	adds	r2, #2
 801299a:	0092      	lsls	r2, r2, #2
 801299c:	f107 010c 	add.w	r1, r7, #12
 80129a0:	300c      	adds	r0, #12
 80129a2:	f7ff fa70 	bl	8011e86 <memcpy>
 80129a6:	2201      	movs	r2, #1
 80129a8:	4629      	mov	r1, r5
 80129aa:	4620      	mov	r0, r4
 80129ac:	f000 fba0 	bl	80130f0 <__lshift>
 80129b0:	9b00      	ldr	r3, [sp, #0]
 80129b2:	3301      	adds	r3, #1
 80129b4:	9304      	str	r3, [sp, #16]
 80129b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129ba:	4413      	add	r3, r2
 80129bc:	9308      	str	r3, [sp, #32]
 80129be:	9b02      	ldr	r3, [sp, #8]
 80129c0:	f003 0301 	and.w	r3, r3, #1
 80129c4:	46b8      	mov	r8, r7
 80129c6:	9306      	str	r3, [sp, #24]
 80129c8:	4607      	mov	r7, r0
 80129ca:	9b04      	ldr	r3, [sp, #16]
 80129cc:	4631      	mov	r1, r6
 80129ce:	3b01      	subs	r3, #1
 80129d0:	4650      	mov	r0, sl
 80129d2:	9301      	str	r3, [sp, #4]
 80129d4:	f7ff fa6c 	bl	8011eb0 <quorem>
 80129d8:	4641      	mov	r1, r8
 80129da:	9002      	str	r0, [sp, #8]
 80129dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80129e0:	4650      	mov	r0, sl
 80129e2:	f000 fbf1 	bl	80131c8 <__mcmp>
 80129e6:	463a      	mov	r2, r7
 80129e8:	9005      	str	r0, [sp, #20]
 80129ea:	4631      	mov	r1, r6
 80129ec:	4620      	mov	r0, r4
 80129ee:	f000 fc07 	bl	8013200 <__mdiff>
 80129f2:	68c2      	ldr	r2, [r0, #12]
 80129f4:	4605      	mov	r5, r0
 80129f6:	bb02      	cbnz	r2, 8012a3a <_dtoa_r+0xa7a>
 80129f8:	4601      	mov	r1, r0
 80129fa:	4650      	mov	r0, sl
 80129fc:	f000 fbe4 	bl	80131c8 <__mcmp>
 8012a00:	4602      	mov	r2, r0
 8012a02:	4629      	mov	r1, r5
 8012a04:	4620      	mov	r0, r4
 8012a06:	9209      	str	r2, [sp, #36]	; 0x24
 8012a08:	f000 f958 	bl	8012cbc <_Bfree>
 8012a0c:	9b07      	ldr	r3, [sp, #28]
 8012a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a10:	9d04      	ldr	r5, [sp, #16]
 8012a12:	ea43 0102 	orr.w	r1, r3, r2
 8012a16:	9b06      	ldr	r3, [sp, #24]
 8012a18:	4319      	orrs	r1, r3
 8012a1a:	d110      	bne.n	8012a3e <_dtoa_r+0xa7e>
 8012a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012a20:	d029      	beq.n	8012a76 <_dtoa_r+0xab6>
 8012a22:	9b05      	ldr	r3, [sp, #20]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	dd02      	ble.n	8012a2e <_dtoa_r+0xa6e>
 8012a28:	9b02      	ldr	r3, [sp, #8]
 8012a2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012a2e:	9b01      	ldr	r3, [sp, #4]
 8012a30:	f883 9000 	strb.w	r9, [r3]
 8012a34:	e774      	b.n	8012920 <_dtoa_r+0x960>
 8012a36:	4638      	mov	r0, r7
 8012a38:	e7ba      	b.n	80129b0 <_dtoa_r+0x9f0>
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	e7e1      	b.n	8012a02 <_dtoa_r+0xa42>
 8012a3e:	9b05      	ldr	r3, [sp, #20]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	db04      	blt.n	8012a4e <_dtoa_r+0xa8e>
 8012a44:	9907      	ldr	r1, [sp, #28]
 8012a46:	430b      	orrs	r3, r1
 8012a48:	9906      	ldr	r1, [sp, #24]
 8012a4a:	430b      	orrs	r3, r1
 8012a4c:	d120      	bne.n	8012a90 <_dtoa_r+0xad0>
 8012a4e:	2a00      	cmp	r2, #0
 8012a50:	dded      	ble.n	8012a2e <_dtoa_r+0xa6e>
 8012a52:	4651      	mov	r1, sl
 8012a54:	2201      	movs	r2, #1
 8012a56:	4620      	mov	r0, r4
 8012a58:	f000 fb4a 	bl	80130f0 <__lshift>
 8012a5c:	4631      	mov	r1, r6
 8012a5e:	4682      	mov	sl, r0
 8012a60:	f000 fbb2 	bl	80131c8 <__mcmp>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	dc03      	bgt.n	8012a70 <_dtoa_r+0xab0>
 8012a68:	d1e1      	bne.n	8012a2e <_dtoa_r+0xa6e>
 8012a6a:	f019 0f01 	tst.w	r9, #1
 8012a6e:	d0de      	beq.n	8012a2e <_dtoa_r+0xa6e>
 8012a70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012a74:	d1d8      	bne.n	8012a28 <_dtoa_r+0xa68>
 8012a76:	9a01      	ldr	r2, [sp, #4]
 8012a78:	2339      	movs	r3, #57	; 0x39
 8012a7a:	7013      	strb	r3, [r2, #0]
 8012a7c:	462b      	mov	r3, r5
 8012a7e:	461d      	mov	r5, r3
 8012a80:	3b01      	subs	r3, #1
 8012a82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a86:	2a39      	cmp	r2, #57	; 0x39
 8012a88:	d06c      	beq.n	8012b64 <_dtoa_r+0xba4>
 8012a8a:	3201      	adds	r2, #1
 8012a8c:	701a      	strb	r2, [r3, #0]
 8012a8e:	e747      	b.n	8012920 <_dtoa_r+0x960>
 8012a90:	2a00      	cmp	r2, #0
 8012a92:	dd07      	ble.n	8012aa4 <_dtoa_r+0xae4>
 8012a94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012a98:	d0ed      	beq.n	8012a76 <_dtoa_r+0xab6>
 8012a9a:	9a01      	ldr	r2, [sp, #4]
 8012a9c:	f109 0301 	add.w	r3, r9, #1
 8012aa0:	7013      	strb	r3, [r2, #0]
 8012aa2:	e73d      	b.n	8012920 <_dtoa_r+0x960>
 8012aa4:	9b04      	ldr	r3, [sp, #16]
 8012aa6:	9a08      	ldr	r2, [sp, #32]
 8012aa8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d043      	beq.n	8012b38 <_dtoa_r+0xb78>
 8012ab0:	4651      	mov	r1, sl
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	220a      	movs	r2, #10
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f000 f922 	bl	8012d00 <__multadd>
 8012abc:	45b8      	cmp	r8, r7
 8012abe:	4682      	mov	sl, r0
 8012ac0:	f04f 0300 	mov.w	r3, #0
 8012ac4:	f04f 020a 	mov.w	r2, #10
 8012ac8:	4641      	mov	r1, r8
 8012aca:	4620      	mov	r0, r4
 8012acc:	d107      	bne.n	8012ade <_dtoa_r+0xb1e>
 8012ace:	f000 f917 	bl	8012d00 <__multadd>
 8012ad2:	4680      	mov	r8, r0
 8012ad4:	4607      	mov	r7, r0
 8012ad6:	9b04      	ldr	r3, [sp, #16]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	9304      	str	r3, [sp, #16]
 8012adc:	e775      	b.n	80129ca <_dtoa_r+0xa0a>
 8012ade:	f000 f90f 	bl	8012d00 <__multadd>
 8012ae2:	4639      	mov	r1, r7
 8012ae4:	4680      	mov	r8, r0
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	220a      	movs	r2, #10
 8012aea:	4620      	mov	r0, r4
 8012aec:	f000 f908 	bl	8012d00 <__multadd>
 8012af0:	4607      	mov	r7, r0
 8012af2:	e7f0      	b.n	8012ad6 <_dtoa_r+0xb16>
 8012af4:	9b04      	ldr	r3, [sp, #16]
 8012af6:	9301      	str	r3, [sp, #4]
 8012af8:	9d00      	ldr	r5, [sp, #0]
 8012afa:	4631      	mov	r1, r6
 8012afc:	4650      	mov	r0, sl
 8012afe:	f7ff f9d7 	bl	8011eb0 <quorem>
 8012b02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012b06:	9b00      	ldr	r3, [sp, #0]
 8012b08:	f805 9b01 	strb.w	r9, [r5], #1
 8012b0c:	1aea      	subs	r2, r5, r3
 8012b0e:	9b01      	ldr	r3, [sp, #4]
 8012b10:	4293      	cmp	r3, r2
 8012b12:	dd07      	ble.n	8012b24 <_dtoa_r+0xb64>
 8012b14:	4651      	mov	r1, sl
 8012b16:	2300      	movs	r3, #0
 8012b18:	220a      	movs	r2, #10
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f000 f8f0 	bl	8012d00 <__multadd>
 8012b20:	4682      	mov	sl, r0
 8012b22:	e7ea      	b.n	8012afa <_dtoa_r+0xb3a>
 8012b24:	9b01      	ldr	r3, [sp, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	bfc8      	it	gt
 8012b2a:	461d      	movgt	r5, r3
 8012b2c:	9b00      	ldr	r3, [sp, #0]
 8012b2e:	bfd8      	it	le
 8012b30:	2501      	movle	r5, #1
 8012b32:	441d      	add	r5, r3
 8012b34:	f04f 0800 	mov.w	r8, #0
 8012b38:	4651      	mov	r1, sl
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f000 fad7 	bl	80130f0 <__lshift>
 8012b42:	4631      	mov	r1, r6
 8012b44:	4682      	mov	sl, r0
 8012b46:	f000 fb3f 	bl	80131c8 <__mcmp>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	dc96      	bgt.n	8012a7c <_dtoa_r+0xabc>
 8012b4e:	d102      	bne.n	8012b56 <_dtoa_r+0xb96>
 8012b50:	f019 0f01 	tst.w	r9, #1
 8012b54:	d192      	bne.n	8012a7c <_dtoa_r+0xabc>
 8012b56:	462b      	mov	r3, r5
 8012b58:	461d      	mov	r5, r3
 8012b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b5e:	2a30      	cmp	r2, #48	; 0x30
 8012b60:	d0fa      	beq.n	8012b58 <_dtoa_r+0xb98>
 8012b62:	e6dd      	b.n	8012920 <_dtoa_r+0x960>
 8012b64:	9a00      	ldr	r2, [sp, #0]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d189      	bne.n	8012a7e <_dtoa_r+0xabe>
 8012b6a:	f10b 0b01 	add.w	fp, fp, #1
 8012b6e:	2331      	movs	r3, #49	; 0x31
 8012b70:	e796      	b.n	8012aa0 <_dtoa_r+0xae0>
 8012b72:	4b0a      	ldr	r3, [pc, #40]	; (8012b9c <_dtoa_r+0xbdc>)
 8012b74:	f7ff ba99 	b.w	80120aa <_dtoa_r+0xea>
 8012b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	f47f aa6d 	bne.w	801205a <_dtoa_r+0x9a>
 8012b80:	4b07      	ldr	r3, [pc, #28]	; (8012ba0 <_dtoa_r+0xbe0>)
 8012b82:	f7ff ba92 	b.w	80120aa <_dtoa_r+0xea>
 8012b86:	9b01      	ldr	r3, [sp, #4]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	dcb5      	bgt.n	8012af8 <_dtoa_r+0xb38>
 8012b8c:	9b07      	ldr	r3, [sp, #28]
 8012b8e:	2b02      	cmp	r3, #2
 8012b90:	f73f aeb1 	bgt.w	80128f6 <_dtoa_r+0x936>
 8012b94:	e7b0      	b.n	8012af8 <_dtoa_r+0xb38>
 8012b96:	bf00      	nop
 8012b98:	0801844f 	.word	0x0801844f
 8012b9c:	080183aa 	.word	0x080183aa
 8012ba0:	080183d3 	.word	0x080183d3

08012ba4 <_free_r>:
 8012ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ba6:	2900      	cmp	r1, #0
 8012ba8:	d044      	beq.n	8012c34 <_free_r+0x90>
 8012baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bae:	9001      	str	r0, [sp, #4]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8012bb6:	bfb8      	it	lt
 8012bb8:	18e4      	addlt	r4, r4, r3
 8012bba:	f7fe f925 	bl	8010e08 <__malloc_lock>
 8012bbe:	4a1e      	ldr	r2, [pc, #120]	; (8012c38 <_free_r+0x94>)
 8012bc0:	9801      	ldr	r0, [sp, #4]
 8012bc2:	6813      	ldr	r3, [r2, #0]
 8012bc4:	b933      	cbnz	r3, 8012bd4 <_free_r+0x30>
 8012bc6:	6063      	str	r3, [r4, #4]
 8012bc8:	6014      	str	r4, [r2, #0]
 8012bca:	b003      	add	sp, #12
 8012bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012bd0:	f7fe b920 	b.w	8010e14 <__malloc_unlock>
 8012bd4:	42a3      	cmp	r3, r4
 8012bd6:	d908      	bls.n	8012bea <_free_r+0x46>
 8012bd8:	6825      	ldr	r5, [r4, #0]
 8012bda:	1961      	adds	r1, r4, r5
 8012bdc:	428b      	cmp	r3, r1
 8012bde:	bf01      	itttt	eq
 8012be0:	6819      	ldreq	r1, [r3, #0]
 8012be2:	685b      	ldreq	r3, [r3, #4]
 8012be4:	1949      	addeq	r1, r1, r5
 8012be6:	6021      	streq	r1, [r4, #0]
 8012be8:	e7ed      	b.n	8012bc6 <_free_r+0x22>
 8012bea:	461a      	mov	r2, r3
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	b10b      	cbz	r3, 8012bf4 <_free_r+0x50>
 8012bf0:	42a3      	cmp	r3, r4
 8012bf2:	d9fa      	bls.n	8012bea <_free_r+0x46>
 8012bf4:	6811      	ldr	r1, [r2, #0]
 8012bf6:	1855      	adds	r5, r2, r1
 8012bf8:	42a5      	cmp	r5, r4
 8012bfa:	d10b      	bne.n	8012c14 <_free_r+0x70>
 8012bfc:	6824      	ldr	r4, [r4, #0]
 8012bfe:	4421      	add	r1, r4
 8012c00:	1854      	adds	r4, r2, r1
 8012c02:	42a3      	cmp	r3, r4
 8012c04:	6011      	str	r1, [r2, #0]
 8012c06:	d1e0      	bne.n	8012bca <_free_r+0x26>
 8012c08:	681c      	ldr	r4, [r3, #0]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	6053      	str	r3, [r2, #4]
 8012c0e:	440c      	add	r4, r1
 8012c10:	6014      	str	r4, [r2, #0]
 8012c12:	e7da      	b.n	8012bca <_free_r+0x26>
 8012c14:	d902      	bls.n	8012c1c <_free_r+0x78>
 8012c16:	230c      	movs	r3, #12
 8012c18:	6003      	str	r3, [r0, #0]
 8012c1a:	e7d6      	b.n	8012bca <_free_r+0x26>
 8012c1c:	6825      	ldr	r5, [r4, #0]
 8012c1e:	1961      	adds	r1, r4, r5
 8012c20:	428b      	cmp	r3, r1
 8012c22:	bf04      	itt	eq
 8012c24:	6819      	ldreq	r1, [r3, #0]
 8012c26:	685b      	ldreq	r3, [r3, #4]
 8012c28:	6063      	str	r3, [r4, #4]
 8012c2a:	bf04      	itt	eq
 8012c2c:	1949      	addeq	r1, r1, r5
 8012c2e:	6021      	streq	r1, [r4, #0]
 8012c30:	6054      	str	r4, [r2, #4]
 8012c32:	e7ca      	b.n	8012bca <_free_r+0x26>
 8012c34:	b003      	add	sp, #12
 8012c36:	bd30      	pop	{r4, r5, pc}
 8012c38:	20000e24 	.word	0x20000e24

08012c3c <_Balloc>:
 8012c3c:	b570      	push	{r4, r5, r6, lr}
 8012c3e:	69c6      	ldr	r6, [r0, #28]
 8012c40:	4604      	mov	r4, r0
 8012c42:	460d      	mov	r5, r1
 8012c44:	b976      	cbnz	r6, 8012c64 <_Balloc+0x28>
 8012c46:	2010      	movs	r0, #16
 8012c48:	f7fe f836 	bl	8010cb8 <malloc>
 8012c4c:	4602      	mov	r2, r0
 8012c4e:	61e0      	str	r0, [r4, #28]
 8012c50:	b920      	cbnz	r0, 8012c5c <_Balloc+0x20>
 8012c52:	4b18      	ldr	r3, [pc, #96]	; (8012cb4 <_Balloc+0x78>)
 8012c54:	4818      	ldr	r0, [pc, #96]	; (8012cb8 <_Balloc+0x7c>)
 8012c56:	216b      	movs	r1, #107	; 0x6b
 8012c58:	f001 ff4a 	bl	8014af0 <__assert_func>
 8012c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c60:	6006      	str	r6, [r0, #0]
 8012c62:	60c6      	str	r6, [r0, #12]
 8012c64:	69e6      	ldr	r6, [r4, #28]
 8012c66:	68f3      	ldr	r3, [r6, #12]
 8012c68:	b183      	cbz	r3, 8012c8c <_Balloc+0x50>
 8012c6a:	69e3      	ldr	r3, [r4, #28]
 8012c6c:	68db      	ldr	r3, [r3, #12]
 8012c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c72:	b9b8      	cbnz	r0, 8012ca4 <_Balloc+0x68>
 8012c74:	2101      	movs	r1, #1
 8012c76:	fa01 f605 	lsl.w	r6, r1, r5
 8012c7a:	1d72      	adds	r2, r6, #5
 8012c7c:	0092      	lsls	r2, r2, #2
 8012c7e:	4620      	mov	r0, r4
 8012c80:	f001 ff54 	bl	8014b2c <_calloc_r>
 8012c84:	b160      	cbz	r0, 8012ca0 <_Balloc+0x64>
 8012c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c8a:	e00e      	b.n	8012caa <_Balloc+0x6e>
 8012c8c:	2221      	movs	r2, #33	; 0x21
 8012c8e:	2104      	movs	r1, #4
 8012c90:	4620      	mov	r0, r4
 8012c92:	f001 ff4b 	bl	8014b2c <_calloc_r>
 8012c96:	69e3      	ldr	r3, [r4, #28]
 8012c98:	60f0      	str	r0, [r6, #12]
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1e4      	bne.n	8012c6a <_Balloc+0x2e>
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	bd70      	pop	{r4, r5, r6, pc}
 8012ca4:	6802      	ldr	r2, [r0, #0]
 8012ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012caa:	2300      	movs	r3, #0
 8012cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012cb0:	e7f7      	b.n	8012ca2 <_Balloc+0x66>
 8012cb2:	bf00      	nop
 8012cb4:	080183e0 	.word	0x080183e0
 8012cb8:	08018460 	.word	0x08018460

08012cbc <_Bfree>:
 8012cbc:	b570      	push	{r4, r5, r6, lr}
 8012cbe:	69c6      	ldr	r6, [r0, #28]
 8012cc0:	4605      	mov	r5, r0
 8012cc2:	460c      	mov	r4, r1
 8012cc4:	b976      	cbnz	r6, 8012ce4 <_Bfree+0x28>
 8012cc6:	2010      	movs	r0, #16
 8012cc8:	f7fd fff6 	bl	8010cb8 <malloc>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	61e8      	str	r0, [r5, #28]
 8012cd0:	b920      	cbnz	r0, 8012cdc <_Bfree+0x20>
 8012cd2:	4b09      	ldr	r3, [pc, #36]	; (8012cf8 <_Bfree+0x3c>)
 8012cd4:	4809      	ldr	r0, [pc, #36]	; (8012cfc <_Bfree+0x40>)
 8012cd6:	218f      	movs	r1, #143	; 0x8f
 8012cd8:	f001 ff0a 	bl	8014af0 <__assert_func>
 8012cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ce0:	6006      	str	r6, [r0, #0]
 8012ce2:	60c6      	str	r6, [r0, #12]
 8012ce4:	b13c      	cbz	r4, 8012cf6 <_Bfree+0x3a>
 8012ce6:	69eb      	ldr	r3, [r5, #28]
 8012ce8:	6862      	ldr	r2, [r4, #4]
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012cf0:	6021      	str	r1, [r4, #0]
 8012cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012cf6:	bd70      	pop	{r4, r5, r6, pc}
 8012cf8:	080183e0 	.word	0x080183e0
 8012cfc:	08018460 	.word	0x08018460

08012d00 <__multadd>:
 8012d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d04:	690d      	ldr	r5, [r1, #16]
 8012d06:	4607      	mov	r7, r0
 8012d08:	460c      	mov	r4, r1
 8012d0a:	461e      	mov	r6, r3
 8012d0c:	f101 0c14 	add.w	ip, r1, #20
 8012d10:	2000      	movs	r0, #0
 8012d12:	f8dc 3000 	ldr.w	r3, [ip]
 8012d16:	b299      	uxth	r1, r3
 8012d18:	fb02 6101 	mla	r1, r2, r1, r6
 8012d1c:	0c1e      	lsrs	r6, r3, #16
 8012d1e:	0c0b      	lsrs	r3, r1, #16
 8012d20:	fb02 3306 	mla	r3, r2, r6, r3
 8012d24:	b289      	uxth	r1, r1
 8012d26:	3001      	adds	r0, #1
 8012d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d2c:	4285      	cmp	r5, r0
 8012d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8012d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d36:	dcec      	bgt.n	8012d12 <__multadd+0x12>
 8012d38:	b30e      	cbz	r6, 8012d7e <__multadd+0x7e>
 8012d3a:	68a3      	ldr	r3, [r4, #8]
 8012d3c:	42ab      	cmp	r3, r5
 8012d3e:	dc19      	bgt.n	8012d74 <__multadd+0x74>
 8012d40:	6861      	ldr	r1, [r4, #4]
 8012d42:	4638      	mov	r0, r7
 8012d44:	3101      	adds	r1, #1
 8012d46:	f7ff ff79 	bl	8012c3c <_Balloc>
 8012d4a:	4680      	mov	r8, r0
 8012d4c:	b928      	cbnz	r0, 8012d5a <__multadd+0x5a>
 8012d4e:	4602      	mov	r2, r0
 8012d50:	4b0c      	ldr	r3, [pc, #48]	; (8012d84 <__multadd+0x84>)
 8012d52:	480d      	ldr	r0, [pc, #52]	; (8012d88 <__multadd+0x88>)
 8012d54:	21ba      	movs	r1, #186	; 0xba
 8012d56:	f001 fecb 	bl	8014af0 <__assert_func>
 8012d5a:	6922      	ldr	r2, [r4, #16]
 8012d5c:	3202      	adds	r2, #2
 8012d5e:	f104 010c 	add.w	r1, r4, #12
 8012d62:	0092      	lsls	r2, r2, #2
 8012d64:	300c      	adds	r0, #12
 8012d66:	f7ff f88e 	bl	8011e86 <memcpy>
 8012d6a:	4621      	mov	r1, r4
 8012d6c:	4638      	mov	r0, r7
 8012d6e:	f7ff ffa5 	bl	8012cbc <_Bfree>
 8012d72:	4644      	mov	r4, r8
 8012d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d78:	3501      	adds	r5, #1
 8012d7a:	615e      	str	r6, [r3, #20]
 8012d7c:	6125      	str	r5, [r4, #16]
 8012d7e:	4620      	mov	r0, r4
 8012d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d84:	0801844f 	.word	0x0801844f
 8012d88:	08018460 	.word	0x08018460

08012d8c <__s2b>:
 8012d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d90:	460c      	mov	r4, r1
 8012d92:	4615      	mov	r5, r2
 8012d94:	461f      	mov	r7, r3
 8012d96:	2209      	movs	r2, #9
 8012d98:	3308      	adds	r3, #8
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012da0:	2100      	movs	r1, #0
 8012da2:	2201      	movs	r2, #1
 8012da4:	429a      	cmp	r2, r3
 8012da6:	db09      	blt.n	8012dbc <__s2b+0x30>
 8012da8:	4630      	mov	r0, r6
 8012daa:	f7ff ff47 	bl	8012c3c <_Balloc>
 8012dae:	b940      	cbnz	r0, 8012dc2 <__s2b+0x36>
 8012db0:	4602      	mov	r2, r0
 8012db2:	4b19      	ldr	r3, [pc, #100]	; (8012e18 <__s2b+0x8c>)
 8012db4:	4819      	ldr	r0, [pc, #100]	; (8012e1c <__s2b+0x90>)
 8012db6:	21d3      	movs	r1, #211	; 0xd3
 8012db8:	f001 fe9a 	bl	8014af0 <__assert_func>
 8012dbc:	0052      	lsls	r2, r2, #1
 8012dbe:	3101      	adds	r1, #1
 8012dc0:	e7f0      	b.n	8012da4 <__s2b+0x18>
 8012dc2:	9b08      	ldr	r3, [sp, #32]
 8012dc4:	6143      	str	r3, [r0, #20]
 8012dc6:	2d09      	cmp	r5, #9
 8012dc8:	f04f 0301 	mov.w	r3, #1
 8012dcc:	6103      	str	r3, [r0, #16]
 8012dce:	dd16      	ble.n	8012dfe <__s2b+0x72>
 8012dd0:	f104 0909 	add.w	r9, r4, #9
 8012dd4:	46c8      	mov	r8, r9
 8012dd6:	442c      	add	r4, r5
 8012dd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012ddc:	4601      	mov	r1, r0
 8012dde:	3b30      	subs	r3, #48	; 0x30
 8012de0:	220a      	movs	r2, #10
 8012de2:	4630      	mov	r0, r6
 8012de4:	f7ff ff8c 	bl	8012d00 <__multadd>
 8012de8:	45a0      	cmp	r8, r4
 8012dea:	d1f5      	bne.n	8012dd8 <__s2b+0x4c>
 8012dec:	f1a5 0408 	sub.w	r4, r5, #8
 8012df0:	444c      	add	r4, r9
 8012df2:	1b2d      	subs	r5, r5, r4
 8012df4:	1963      	adds	r3, r4, r5
 8012df6:	42bb      	cmp	r3, r7
 8012df8:	db04      	blt.n	8012e04 <__s2b+0x78>
 8012dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dfe:	340a      	adds	r4, #10
 8012e00:	2509      	movs	r5, #9
 8012e02:	e7f6      	b.n	8012df2 <__s2b+0x66>
 8012e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e08:	4601      	mov	r1, r0
 8012e0a:	3b30      	subs	r3, #48	; 0x30
 8012e0c:	220a      	movs	r2, #10
 8012e0e:	4630      	mov	r0, r6
 8012e10:	f7ff ff76 	bl	8012d00 <__multadd>
 8012e14:	e7ee      	b.n	8012df4 <__s2b+0x68>
 8012e16:	bf00      	nop
 8012e18:	0801844f 	.word	0x0801844f
 8012e1c:	08018460 	.word	0x08018460

08012e20 <__hi0bits>:
 8012e20:	0c03      	lsrs	r3, r0, #16
 8012e22:	041b      	lsls	r3, r3, #16
 8012e24:	b9d3      	cbnz	r3, 8012e5c <__hi0bits+0x3c>
 8012e26:	0400      	lsls	r0, r0, #16
 8012e28:	2310      	movs	r3, #16
 8012e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e2e:	bf04      	itt	eq
 8012e30:	0200      	lsleq	r0, r0, #8
 8012e32:	3308      	addeq	r3, #8
 8012e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e38:	bf04      	itt	eq
 8012e3a:	0100      	lsleq	r0, r0, #4
 8012e3c:	3304      	addeq	r3, #4
 8012e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e42:	bf04      	itt	eq
 8012e44:	0080      	lsleq	r0, r0, #2
 8012e46:	3302      	addeq	r3, #2
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	db05      	blt.n	8012e58 <__hi0bits+0x38>
 8012e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e50:	f103 0301 	add.w	r3, r3, #1
 8012e54:	bf08      	it	eq
 8012e56:	2320      	moveq	r3, #32
 8012e58:	4618      	mov	r0, r3
 8012e5a:	4770      	bx	lr
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e7e4      	b.n	8012e2a <__hi0bits+0xa>

08012e60 <__lo0bits>:
 8012e60:	6803      	ldr	r3, [r0, #0]
 8012e62:	f013 0207 	ands.w	r2, r3, #7
 8012e66:	d00c      	beq.n	8012e82 <__lo0bits+0x22>
 8012e68:	07d9      	lsls	r1, r3, #31
 8012e6a:	d422      	bmi.n	8012eb2 <__lo0bits+0x52>
 8012e6c:	079a      	lsls	r2, r3, #30
 8012e6e:	bf49      	itett	mi
 8012e70:	085b      	lsrmi	r3, r3, #1
 8012e72:	089b      	lsrpl	r3, r3, #2
 8012e74:	6003      	strmi	r3, [r0, #0]
 8012e76:	2201      	movmi	r2, #1
 8012e78:	bf5c      	itt	pl
 8012e7a:	6003      	strpl	r3, [r0, #0]
 8012e7c:	2202      	movpl	r2, #2
 8012e7e:	4610      	mov	r0, r2
 8012e80:	4770      	bx	lr
 8012e82:	b299      	uxth	r1, r3
 8012e84:	b909      	cbnz	r1, 8012e8a <__lo0bits+0x2a>
 8012e86:	0c1b      	lsrs	r3, r3, #16
 8012e88:	2210      	movs	r2, #16
 8012e8a:	b2d9      	uxtb	r1, r3
 8012e8c:	b909      	cbnz	r1, 8012e92 <__lo0bits+0x32>
 8012e8e:	3208      	adds	r2, #8
 8012e90:	0a1b      	lsrs	r3, r3, #8
 8012e92:	0719      	lsls	r1, r3, #28
 8012e94:	bf04      	itt	eq
 8012e96:	091b      	lsreq	r3, r3, #4
 8012e98:	3204      	addeq	r2, #4
 8012e9a:	0799      	lsls	r1, r3, #30
 8012e9c:	bf04      	itt	eq
 8012e9e:	089b      	lsreq	r3, r3, #2
 8012ea0:	3202      	addeq	r2, #2
 8012ea2:	07d9      	lsls	r1, r3, #31
 8012ea4:	d403      	bmi.n	8012eae <__lo0bits+0x4e>
 8012ea6:	085b      	lsrs	r3, r3, #1
 8012ea8:	f102 0201 	add.w	r2, r2, #1
 8012eac:	d003      	beq.n	8012eb6 <__lo0bits+0x56>
 8012eae:	6003      	str	r3, [r0, #0]
 8012eb0:	e7e5      	b.n	8012e7e <__lo0bits+0x1e>
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	e7e3      	b.n	8012e7e <__lo0bits+0x1e>
 8012eb6:	2220      	movs	r2, #32
 8012eb8:	e7e1      	b.n	8012e7e <__lo0bits+0x1e>
	...

08012ebc <__i2b>:
 8012ebc:	b510      	push	{r4, lr}
 8012ebe:	460c      	mov	r4, r1
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	f7ff febb 	bl	8012c3c <_Balloc>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	b928      	cbnz	r0, 8012ed6 <__i2b+0x1a>
 8012eca:	4b05      	ldr	r3, [pc, #20]	; (8012ee0 <__i2b+0x24>)
 8012ecc:	4805      	ldr	r0, [pc, #20]	; (8012ee4 <__i2b+0x28>)
 8012ece:	f240 1145 	movw	r1, #325	; 0x145
 8012ed2:	f001 fe0d 	bl	8014af0 <__assert_func>
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	6144      	str	r4, [r0, #20]
 8012eda:	6103      	str	r3, [r0, #16]
 8012edc:	bd10      	pop	{r4, pc}
 8012ede:	bf00      	nop
 8012ee0:	0801844f 	.word	0x0801844f
 8012ee4:	08018460 	.word	0x08018460

08012ee8 <__multiply>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	4691      	mov	r9, r2
 8012eee:	690a      	ldr	r2, [r1, #16]
 8012ef0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	bfb8      	it	lt
 8012ef8:	460b      	movlt	r3, r1
 8012efa:	460c      	mov	r4, r1
 8012efc:	bfbc      	itt	lt
 8012efe:	464c      	movlt	r4, r9
 8012f00:	4699      	movlt	r9, r3
 8012f02:	6927      	ldr	r7, [r4, #16]
 8012f04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f08:	68a3      	ldr	r3, [r4, #8]
 8012f0a:	6861      	ldr	r1, [r4, #4]
 8012f0c:	eb07 060a 	add.w	r6, r7, sl
 8012f10:	42b3      	cmp	r3, r6
 8012f12:	b085      	sub	sp, #20
 8012f14:	bfb8      	it	lt
 8012f16:	3101      	addlt	r1, #1
 8012f18:	f7ff fe90 	bl	8012c3c <_Balloc>
 8012f1c:	b930      	cbnz	r0, 8012f2c <__multiply+0x44>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	4b44      	ldr	r3, [pc, #272]	; (8013034 <__multiply+0x14c>)
 8012f22:	4845      	ldr	r0, [pc, #276]	; (8013038 <__multiply+0x150>)
 8012f24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012f28:	f001 fde2 	bl	8014af0 <__assert_func>
 8012f2c:	f100 0514 	add.w	r5, r0, #20
 8012f30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f34:	462b      	mov	r3, r5
 8012f36:	2200      	movs	r2, #0
 8012f38:	4543      	cmp	r3, r8
 8012f3a:	d321      	bcc.n	8012f80 <__multiply+0x98>
 8012f3c:	f104 0314 	add.w	r3, r4, #20
 8012f40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012f44:	f109 0314 	add.w	r3, r9, #20
 8012f48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012f4c:	9202      	str	r2, [sp, #8]
 8012f4e:	1b3a      	subs	r2, r7, r4
 8012f50:	3a15      	subs	r2, #21
 8012f52:	f022 0203 	bic.w	r2, r2, #3
 8012f56:	3204      	adds	r2, #4
 8012f58:	f104 0115 	add.w	r1, r4, #21
 8012f5c:	428f      	cmp	r7, r1
 8012f5e:	bf38      	it	cc
 8012f60:	2204      	movcc	r2, #4
 8012f62:	9201      	str	r2, [sp, #4]
 8012f64:	9a02      	ldr	r2, [sp, #8]
 8012f66:	9303      	str	r3, [sp, #12]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d80c      	bhi.n	8012f86 <__multiply+0x9e>
 8012f6c:	2e00      	cmp	r6, #0
 8012f6e:	dd03      	ble.n	8012f78 <__multiply+0x90>
 8012f70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d05b      	beq.n	8013030 <__multiply+0x148>
 8012f78:	6106      	str	r6, [r0, #16]
 8012f7a:	b005      	add	sp, #20
 8012f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f80:	f843 2b04 	str.w	r2, [r3], #4
 8012f84:	e7d8      	b.n	8012f38 <__multiply+0x50>
 8012f86:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f8a:	f1ba 0f00 	cmp.w	sl, #0
 8012f8e:	d024      	beq.n	8012fda <__multiply+0xf2>
 8012f90:	f104 0e14 	add.w	lr, r4, #20
 8012f94:	46a9      	mov	r9, r5
 8012f96:	f04f 0c00 	mov.w	ip, #0
 8012f9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012f9e:	f8d9 1000 	ldr.w	r1, [r9]
 8012fa2:	fa1f fb82 	uxth.w	fp, r2
 8012fa6:	b289      	uxth	r1, r1
 8012fa8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012fac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8012fb4:	4461      	add	r1, ip
 8012fb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012fba:	fb0a c20b 	mla	r2, sl, fp, ip
 8012fbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012fc2:	b289      	uxth	r1, r1
 8012fc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012fc8:	4577      	cmp	r7, lr
 8012fca:	f849 1b04 	str.w	r1, [r9], #4
 8012fce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012fd2:	d8e2      	bhi.n	8012f9a <__multiply+0xb2>
 8012fd4:	9a01      	ldr	r2, [sp, #4]
 8012fd6:	f845 c002 	str.w	ip, [r5, r2]
 8012fda:	9a03      	ldr	r2, [sp, #12]
 8012fdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012fe0:	3304      	adds	r3, #4
 8012fe2:	f1b9 0f00 	cmp.w	r9, #0
 8012fe6:	d021      	beq.n	801302c <__multiply+0x144>
 8012fe8:	6829      	ldr	r1, [r5, #0]
 8012fea:	f104 0c14 	add.w	ip, r4, #20
 8012fee:	46ae      	mov	lr, r5
 8012ff0:	f04f 0a00 	mov.w	sl, #0
 8012ff4:	f8bc b000 	ldrh.w	fp, [ip]
 8012ff8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012ffc:	fb09 220b 	mla	r2, r9, fp, r2
 8013000:	4452      	add	r2, sl
 8013002:	b289      	uxth	r1, r1
 8013004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013008:	f84e 1b04 	str.w	r1, [lr], #4
 801300c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013010:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013014:	f8be 1000 	ldrh.w	r1, [lr]
 8013018:	fb09 110a 	mla	r1, r9, sl, r1
 801301c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013020:	4567      	cmp	r7, ip
 8013022:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013026:	d8e5      	bhi.n	8012ff4 <__multiply+0x10c>
 8013028:	9a01      	ldr	r2, [sp, #4]
 801302a:	50a9      	str	r1, [r5, r2]
 801302c:	3504      	adds	r5, #4
 801302e:	e799      	b.n	8012f64 <__multiply+0x7c>
 8013030:	3e01      	subs	r6, #1
 8013032:	e79b      	b.n	8012f6c <__multiply+0x84>
 8013034:	0801844f 	.word	0x0801844f
 8013038:	08018460 	.word	0x08018460

0801303c <__pow5mult>:
 801303c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013040:	4615      	mov	r5, r2
 8013042:	f012 0203 	ands.w	r2, r2, #3
 8013046:	4606      	mov	r6, r0
 8013048:	460f      	mov	r7, r1
 801304a:	d007      	beq.n	801305c <__pow5mult+0x20>
 801304c:	4c25      	ldr	r4, [pc, #148]	; (80130e4 <__pow5mult+0xa8>)
 801304e:	3a01      	subs	r2, #1
 8013050:	2300      	movs	r3, #0
 8013052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013056:	f7ff fe53 	bl	8012d00 <__multadd>
 801305a:	4607      	mov	r7, r0
 801305c:	10ad      	asrs	r5, r5, #2
 801305e:	d03d      	beq.n	80130dc <__pow5mult+0xa0>
 8013060:	69f4      	ldr	r4, [r6, #28]
 8013062:	b97c      	cbnz	r4, 8013084 <__pow5mult+0x48>
 8013064:	2010      	movs	r0, #16
 8013066:	f7fd fe27 	bl	8010cb8 <malloc>
 801306a:	4602      	mov	r2, r0
 801306c:	61f0      	str	r0, [r6, #28]
 801306e:	b928      	cbnz	r0, 801307c <__pow5mult+0x40>
 8013070:	4b1d      	ldr	r3, [pc, #116]	; (80130e8 <__pow5mult+0xac>)
 8013072:	481e      	ldr	r0, [pc, #120]	; (80130ec <__pow5mult+0xb0>)
 8013074:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013078:	f001 fd3a 	bl	8014af0 <__assert_func>
 801307c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013080:	6004      	str	r4, [r0, #0]
 8013082:	60c4      	str	r4, [r0, #12]
 8013084:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801308c:	b94c      	cbnz	r4, 80130a2 <__pow5mult+0x66>
 801308e:	f240 2171 	movw	r1, #625	; 0x271
 8013092:	4630      	mov	r0, r6
 8013094:	f7ff ff12 	bl	8012ebc <__i2b>
 8013098:	2300      	movs	r3, #0
 801309a:	f8c8 0008 	str.w	r0, [r8, #8]
 801309e:	4604      	mov	r4, r0
 80130a0:	6003      	str	r3, [r0, #0]
 80130a2:	f04f 0900 	mov.w	r9, #0
 80130a6:	07eb      	lsls	r3, r5, #31
 80130a8:	d50a      	bpl.n	80130c0 <__pow5mult+0x84>
 80130aa:	4639      	mov	r1, r7
 80130ac:	4622      	mov	r2, r4
 80130ae:	4630      	mov	r0, r6
 80130b0:	f7ff ff1a 	bl	8012ee8 <__multiply>
 80130b4:	4639      	mov	r1, r7
 80130b6:	4680      	mov	r8, r0
 80130b8:	4630      	mov	r0, r6
 80130ba:	f7ff fdff 	bl	8012cbc <_Bfree>
 80130be:	4647      	mov	r7, r8
 80130c0:	106d      	asrs	r5, r5, #1
 80130c2:	d00b      	beq.n	80130dc <__pow5mult+0xa0>
 80130c4:	6820      	ldr	r0, [r4, #0]
 80130c6:	b938      	cbnz	r0, 80130d8 <__pow5mult+0x9c>
 80130c8:	4622      	mov	r2, r4
 80130ca:	4621      	mov	r1, r4
 80130cc:	4630      	mov	r0, r6
 80130ce:	f7ff ff0b 	bl	8012ee8 <__multiply>
 80130d2:	6020      	str	r0, [r4, #0]
 80130d4:	f8c0 9000 	str.w	r9, [r0]
 80130d8:	4604      	mov	r4, r0
 80130da:	e7e4      	b.n	80130a6 <__pow5mult+0x6a>
 80130dc:	4638      	mov	r0, r7
 80130de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130e2:	bf00      	nop
 80130e4:	080185b0 	.word	0x080185b0
 80130e8:	080183e0 	.word	0x080183e0
 80130ec:	08018460 	.word	0x08018460

080130f0 <__lshift>:
 80130f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130f4:	460c      	mov	r4, r1
 80130f6:	6849      	ldr	r1, [r1, #4]
 80130f8:	6923      	ldr	r3, [r4, #16]
 80130fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130fe:	68a3      	ldr	r3, [r4, #8]
 8013100:	4607      	mov	r7, r0
 8013102:	4691      	mov	r9, r2
 8013104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013108:	f108 0601 	add.w	r6, r8, #1
 801310c:	42b3      	cmp	r3, r6
 801310e:	db0b      	blt.n	8013128 <__lshift+0x38>
 8013110:	4638      	mov	r0, r7
 8013112:	f7ff fd93 	bl	8012c3c <_Balloc>
 8013116:	4605      	mov	r5, r0
 8013118:	b948      	cbnz	r0, 801312e <__lshift+0x3e>
 801311a:	4602      	mov	r2, r0
 801311c:	4b28      	ldr	r3, [pc, #160]	; (80131c0 <__lshift+0xd0>)
 801311e:	4829      	ldr	r0, [pc, #164]	; (80131c4 <__lshift+0xd4>)
 8013120:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013124:	f001 fce4 	bl	8014af0 <__assert_func>
 8013128:	3101      	adds	r1, #1
 801312a:	005b      	lsls	r3, r3, #1
 801312c:	e7ee      	b.n	801310c <__lshift+0x1c>
 801312e:	2300      	movs	r3, #0
 8013130:	f100 0114 	add.w	r1, r0, #20
 8013134:	f100 0210 	add.w	r2, r0, #16
 8013138:	4618      	mov	r0, r3
 801313a:	4553      	cmp	r3, sl
 801313c:	db33      	blt.n	80131a6 <__lshift+0xb6>
 801313e:	6920      	ldr	r0, [r4, #16]
 8013140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013144:	f104 0314 	add.w	r3, r4, #20
 8013148:	f019 091f 	ands.w	r9, r9, #31
 801314c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013154:	d02b      	beq.n	80131ae <__lshift+0xbe>
 8013156:	f1c9 0e20 	rsb	lr, r9, #32
 801315a:	468a      	mov	sl, r1
 801315c:	2200      	movs	r2, #0
 801315e:	6818      	ldr	r0, [r3, #0]
 8013160:	fa00 f009 	lsl.w	r0, r0, r9
 8013164:	4310      	orrs	r0, r2
 8013166:	f84a 0b04 	str.w	r0, [sl], #4
 801316a:	f853 2b04 	ldr.w	r2, [r3], #4
 801316e:	459c      	cmp	ip, r3
 8013170:	fa22 f20e 	lsr.w	r2, r2, lr
 8013174:	d8f3      	bhi.n	801315e <__lshift+0x6e>
 8013176:	ebac 0304 	sub.w	r3, ip, r4
 801317a:	3b15      	subs	r3, #21
 801317c:	f023 0303 	bic.w	r3, r3, #3
 8013180:	3304      	adds	r3, #4
 8013182:	f104 0015 	add.w	r0, r4, #21
 8013186:	4584      	cmp	ip, r0
 8013188:	bf38      	it	cc
 801318a:	2304      	movcc	r3, #4
 801318c:	50ca      	str	r2, [r1, r3]
 801318e:	b10a      	cbz	r2, 8013194 <__lshift+0xa4>
 8013190:	f108 0602 	add.w	r6, r8, #2
 8013194:	3e01      	subs	r6, #1
 8013196:	4638      	mov	r0, r7
 8013198:	612e      	str	r6, [r5, #16]
 801319a:	4621      	mov	r1, r4
 801319c:	f7ff fd8e 	bl	8012cbc <_Bfree>
 80131a0:	4628      	mov	r0, r5
 80131a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80131aa:	3301      	adds	r3, #1
 80131ac:	e7c5      	b.n	801313a <__lshift+0x4a>
 80131ae:	3904      	subs	r1, #4
 80131b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80131b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80131b8:	459c      	cmp	ip, r3
 80131ba:	d8f9      	bhi.n	80131b0 <__lshift+0xc0>
 80131bc:	e7ea      	b.n	8013194 <__lshift+0xa4>
 80131be:	bf00      	nop
 80131c0:	0801844f 	.word	0x0801844f
 80131c4:	08018460 	.word	0x08018460

080131c8 <__mcmp>:
 80131c8:	b530      	push	{r4, r5, lr}
 80131ca:	6902      	ldr	r2, [r0, #16]
 80131cc:	690c      	ldr	r4, [r1, #16]
 80131ce:	1b12      	subs	r2, r2, r4
 80131d0:	d10e      	bne.n	80131f0 <__mcmp+0x28>
 80131d2:	f100 0314 	add.w	r3, r0, #20
 80131d6:	3114      	adds	r1, #20
 80131d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80131dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80131e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80131e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80131e8:	42a5      	cmp	r5, r4
 80131ea:	d003      	beq.n	80131f4 <__mcmp+0x2c>
 80131ec:	d305      	bcc.n	80131fa <__mcmp+0x32>
 80131ee:	2201      	movs	r2, #1
 80131f0:	4610      	mov	r0, r2
 80131f2:	bd30      	pop	{r4, r5, pc}
 80131f4:	4283      	cmp	r3, r0
 80131f6:	d3f3      	bcc.n	80131e0 <__mcmp+0x18>
 80131f8:	e7fa      	b.n	80131f0 <__mcmp+0x28>
 80131fa:	f04f 32ff 	mov.w	r2, #4294967295
 80131fe:	e7f7      	b.n	80131f0 <__mcmp+0x28>

08013200 <__mdiff>:
 8013200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013204:	460c      	mov	r4, r1
 8013206:	4606      	mov	r6, r0
 8013208:	4611      	mov	r1, r2
 801320a:	4620      	mov	r0, r4
 801320c:	4690      	mov	r8, r2
 801320e:	f7ff ffdb 	bl	80131c8 <__mcmp>
 8013212:	1e05      	subs	r5, r0, #0
 8013214:	d110      	bne.n	8013238 <__mdiff+0x38>
 8013216:	4629      	mov	r1, r5
 8013218:	4630      	mov	r0, r6
 801321a:	f7ff fd0f 	bl	8012c3c <_Balloc>
 801321e:	b930      	cbnz	r0, 801322e <__mdiff+0x2e>
 8013220:	4b3a      	ldr	r3, [pc, #232]	; (801330c <__mdiff+0x10c>)
 8013222:	4602      	mov	r2, r0
 8013224:	f240 2137 	movw	r1, #567	; 0x237
 8013228:	4839      	ldr	r0, [pc, #228]	; (8013310 <__mdiff+0x110>)
 801322a:	f001 fc61 	bl	8014af0 <__assert_func>
 801322e:	2301      	movs	r3, #1
 8013230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013238:	bfa4      	itt	ge
 801323a:	4643      	movge	r3, r8
 801323c:	46a0      	movge	r8, r4
 801323e:	4630      	mov	r0, r6
 8013240:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013244:	bfa6      	itte	ge
 8013246:	461c      	movge	r4, r3
 8013248:	2500      	movge	r5, #0
 801324a:	2501      	movlt	r5, #1
 801324c:	f7ff fcf6 	bl	8012c3c <_Balloc>
 8013250:	b920      	cbnz	r0, 801325c <__mdiff+0x5c>
 8013252:	4b2e      	ldr	r3, [pc, #184]	; (801330c <__mdiff+0x10c>)
 8013254:	4602      	mov	r2, r0
 8013256:	f240 2145 	movw	r1, #581	; 0x245
 801325a:	e7e5      	b.n	8013228 <__mdiff+0x28>
 801325c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013260:	6926      	ldr	r6, [r4, #16]
 8013262:	60c5      	str	r5, [r0, #12]
 8013264:	f104 0914 	add.w	r9, r4, #20
 8013268:	f108 0514 	add.w	r5, r8, #20
 801326c:	f100 0e14 	add.w	lr, r0, #20
 8013270:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013274:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013278:	f108 0210 	add.w	r2, r8, #16
 801327c:	46f2      	mov	sl, lr
 801327e:	2100      	movs	r1, #0
 8013280:	f859 3b04 	ldr.w	r3, [r9], #4
 8013284:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013288:	fa11 f88b 	uxtah	r8, r1, fp
 801328c:	b299      	uxth	r1, r3
 801328e:	0c1b      	lsrs	r3, r3, #16
 8013290:	eba8 0801 	sub.w	r8, r8, r1
 8013294:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013298:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801329c:	fa1f f888 	uxth.w	r8, r8
 80132a0:	1419      	asrs	r1, r3, #16
 80132a2:	454e      	cmp	r6, r9
 80132a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80132a8:	f84a 3b04 	str.w	r3, [sl], #4
 80132ac:	d8e8      	bhi.n	8013280 <__mdiff+0x80>
 80132ae:	1b33      	subs	r3, r6, r4
 80132b0:	3b15      	subs	r3, #21
 80132b2:	f023 0303 	bic.w	r3, r3, #3
 80132b6:	3304      	adds	r3, #4
 80132b8:	3415      	adds	r4, #21
 80132ba:	42a6      	cmp	r6, r4
 80132bc:	bf38      	it	cc
 80132be:	2304      	movcc	r3, #4
 80132c0:	441d      	add	r5, r3
 80132c2:	4473      	add	r3, lr
 80132c4:	469e      	mov	lr, r3
 80132c6:	462e      	mov	r6, r5
 80132c8:	4566      	cmp	r6, ip
 80132ca:	d30e      	bcc.n	80132ea <__mdiff+0xea>
 80132cc:	f10c 0203 	add.w	r2, ip, #3
 80132d0:	1b52      	subs	r2, r2, r5
 80132d2:	f022 0203 	bic.w	r2, r2, #3
 80132d6:	3d03      	subs	r5, #3
 80132d8:	45ac      	cmp	ip, r5
 80132da:	bf38      	it	cc
 80132dc:	2200      	movcc	r2, #0
 80132de:	4413      	add	r3, r2
 80132e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80132e4:	b17a      	cbz	r2, 8013306 <__mdiff+0x106>
 80132e6:	6107      	str	r7, [r0, #16]
 80132e8:	e7a4      	b.n	8013234 <__mdiff+0x34>
 80132ea:	f856 8b04 	ldr.w	r8, [r6], #4
 80132ee:	fa11 f288 	uxtah	r2, r1, r8
 80132f2:	1414      	asrs	r4, r2, #16
 80132f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80132f8:	b292      	uxth	r2, r2
 80132fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80132fe:	f84e 2b04 	str.w	r2, [lr], #4
 8013302:	1421      	asrs	r1, r4, #16
 8013304:	e7e0      	b.n	80132c8 <__mdiff+0xc8>
 8013306:	3f01      	subs	r7, #1
 8013308:	e7ea      	b.n	80132e0 <__mdiff+0xe0>
 801330a:	bf00      	nop
 801330c:	0801844f 	.word	0x0801844f
 8013310:	08018460 	.word	0x08018460

08013314 <__ulp>:
 8013314:	b082      	sub	sp, #8
 8013316:	ed8d 0b00 	vstr	d0, [sp]
 801331a:	9a01      	ldr	r2, [sp, #4]
 801331c:	4b0f      	ldr	r3, [pc, #60]	; (801335c <__ulp+0x48>)
 801331e:	4013      	ands	r3, r2
 8013320:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013324:	2b00      	cmp	r3, #0
 8013326:	dc08      	bgt.n	801333a <__ulp+0x26>
 8013328:	425b      	negs	r3, r3
 801332a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801332e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013332:	da04      	bge.n	801333e <__ulp+0x2a>
 8013334:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013338:	4113      	asrs	r3, r2
 801333a:	2200      	movs	r2, #0
 801333c:	e008      	b.n	8013350 <__ulp+0x3c>
 801333e:	f1a2 0314 	sub.w	r3, r2, #20
 8013342:	2b1e      	cmp	r3, #30
 8013344:	bfda      	itte	le
 8013346:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801334a:	40da      	lsrle	r2, r3
 801334c:	2201      	movgt	r2, #1
 801334e:	2300      	movs	r3, #0
 8013350:	4619      	mov	r1, r3
 8013352:	4610      	mov	r0, r2
 8013354:	ec41 0b10 	vmov	d0, r0, r1
 8013358:	b002      	add	sp, #8
 801335a:	4770      	bx	lr
 801335c:	7ff00000 	.word	0x7ff00000

08013360 <__b2d>:
 8013360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013364:	6906      	ldr	r6, [r0, #16]
 8013366:	f100 0814 	add.w	r8, r0, #20
 801336a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801336e:	1f37      	subs	r7, r6, #4
 8013370:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013374:	4610      	mov	r0, r2
 8013376:	f7ff fd53 	bl	8012e20 <__hi0bits>
 801337a:	f1c0 0320 	rsb	r3, r0, #32
 801337e:	280a      	cmp	r0, #10
 8013380:	600b      	str	r3, [r1, #0]
 8013382:	491b      	ldr	r1, [pc, #108]	; (80133f0 <__b2d+0x90>)
 8013384:	dc15      	bgt.n	80133b2 <__b2d+0x52>
 8013386:	f1c0 0c0b 	rsb	ip, r0, #11
 801338a:	fa22 f30c 	lsr.w	r3, r2, ip
 801338e:	45b8      	cmp	r8, r7
 8013390:	ea43 0501 	orr.w	r5, r3, r1
 8013394:	bf34      	ite	cc
 8013396:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801339a:	2300      	movcs	r3, #0
 801339c:	3015      	adds	r0, #21
 801339e:	fa02 f000 	lsl.w	r0, r2, r0
 80133a2:	fa23 f30c 	lsr.w	r3, r3, ip
 80133a6:	4303      	orrs	r3, r0
 80133a8:	461c      	mov	r4, r3
 80133aa:	ec45 4b10 	vmov	d0, r4, r5
 80133ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b2:	45b8      	cmp	r8, r7
 80133b4:	bf3a      	itte	cc
 80133b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133ba:	f1a6 0708 	subcc.w	r7, r6, #8
 80133be:	2300      	movcs	r3, #0
 80133c0:	380b      	subs	r0, #11
 80133c2:	d012      	beq.n	80133ea <__b2d+0x8a>
 80133c4:	f1c0 0120 	rsb	r1, r0, #32
 80133c8:	fa23 f401 	lsr.w	r4, r3, r1
 80133cc:	4082      	lsls	r2, r0
 80133ce:	4322      	orrs	r2, r4
 80133d0:	4547      	cmp	r7, r8
 80133d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80133d6:	bf8c      	ite	hi
 80133d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80133dc:	2200      	movls	r2, #0
 80133de:	4083      	lsls	r3, r0
 80133e0:	40ca      	lsrs	r2, r1
 80133e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80133e6:	4313      	orrs	r3, r2
 80133e8:	e7de      	b.n	80133a8 <__b2d+0x48>
 80133ea:	ea42 0501 	orr.w	r5, r2, r1
 80133ee:	e7db      	b.n	80133a8 <__b2d+0x48>
 80133f0:	3ff00000 	.word	0x3ff00000

080133f4 <__d2b>:
 80133f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133f8:	460f      	mov	r7, r1
 80133fa:	2101      	movs	r1, #1
 80133fc:	ec59 8b10 	vmov	r8, r9, d0
 8013400:	4616      	mov	r6, r2
 8013402:	f7ff fc1b 	bl	8012c3c <_Balloc>
 8013406:	4604      	mov	r4, r0
 8013408:	b930      	cbnz	r0, 8013418 <__d2b+0x24>
 801340a:	4602      	mov	r2, r0
 801340c:	4b24      	ldr	r3, [pc, #144]	; (80134a0 <__d2b+0xac>)
 801340e:	4825      	ldr	r0, [pc, #148]	; (80134a4 <__d2b+0xb0>)
 8013410:	f240 310f 	movw	r1, #783	; 0x30f
 8013414:	f001 fb6c 	bl	8014af0 <__assert_func>
 8013418:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801341c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013420:	bb2d      	cbnz	r5, 801346e <__d2b+0x7a>
 8013422:	9301      	str	r3, [sp, #4]
 8013424:	f1b8 0300 	subs.w	r3, r8, #0
 8013428:	d026      	beq.n	8013478 <__d2b+0x84>
 801342a:	4668      	mov	r0, sp
 801342c:	9300      	str	r3, [sp, #0]
 801342e:	f7ff fd17 	bl	8012e60 <__lo0bits>
 8013432:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013436:	b1e8      	cbz	r0, 8013474 <__d2b+0x80>
 8013438:	f1c0 0320 	rsb	r3, r0, #32
 801343c:	fa02 f303 	lsl.w	r3, r2, r3
 8013440:	430b      	orrs	r3, r1
 8013442:	40c2      	lsrs	r2, r0
 8013444:	6163      	str	r3, [r4, #20]
 8013446:	9201      	str	r2, [sp, #4]
 8013448:	9b01      	ldr	r3, [sp, #4]
 801344a:	61a3      	str	r3, [r4, #24]
 801344c:	2b00      	cmp	r3, #0
 801344e:	bf14      	ite	ne
 8013450:	2202      	movne	r2, #2
 8013452:	2201      	moveq	r2, #1
 8013454:	6122      	str	r2, [r4, #16]
 8013456:	b1bd      	cbz	r5, 8013488 <__d2b+0x94>
 8013458:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801345c:	4405      	add	r5, r0
 801345e:	603d      	str	r5, [r7, #0]
 8013460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013464:	6030      	str	r0, [r6, #0]
 8013466:	4620      	mov	r0, r4
 8013468:	b003      	add	sp, #12
 801346a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801346e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013472:	e7d6      	b.n	8013422 <__d2b+0x2e>
 8013474:	6161      	str	r1, [r4, #20]
 8013476:	e7e7      	b.n	8013448 <__d2b+0x54>
 8013478:	a801      	add	r0, sp, #4
 801347a:	f7ff fcf1 	bl	8012e60 <__lo0bits>
 801347e:	9b01      	ldr	r3, [sp, #4]
 8013480:	6163      	str	r3, [r4, #20]
 8013482:	3020      	adds	r0, #32
 8013484:	2201      	movs	r2, #1
 8013486:	e7e5      	b.n	8013454 <__d2b+0x60>
 8013488:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801348c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013490:	6038      	str	r0, [r7, #0]
 8013492:	6918      	ldr	r0, [r3, #16]
 8013494:	f7ff fcc4 	bl	8012e20 <__hi0bits>
 8013498:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801349c:	e7e2      	b.n	8013464 <__d2b+0x70>
 801349e:	bf00      	nop
 80134a0:	0801844f 	.word	0x0801844f
 80134a4:	08018460 	.word	0x08018460

080134a8 <__ratio>:
 80134a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ac:	4688      	mov	r8, r1
 80134ae:	4669      	mov	r1, sp
 80134b0:	4681      	mov	r9, r0
 80134b2:	f7ff ff55 	bl	8013360 <__b2d>
 80134b6:	a901      	add	r1, sp, #4
 80134b8:	4640      	mov	r0, r8
 80134ba:	ec55 4b10 	vmov	r4, r5, d0
 80134be:	f7ff ff4f 	bl	8013360 <__b2d>
 80134c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80134ca:	eba3 0c02 	sub.w	ip, r3, r2
 80134ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80134d2:	1a9b      	subs	r3, r3, r2
 80134d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80134d8:	ec51 0b10 	vmov	r0, r1, d0
 80134dc:	2b00      	cmp	r3, #0
 80134de:	bfd6      	itet	le
 80134e0:	460a      	movle	r2, r1
 80134e2:	462a      	movgt	r2, r5
 80134e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80134e8:	468b      	mov	fp, r1
 80134ea:	462f      	mov	r7, r5
 80134ec:	bfd4      	ite	le
 80134ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80134f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80134f6:	4620      	mov	r0, r4
 80134f8:	ee10 2a10 	vmov	r2, s0
 80134fc:	465b      	mov	r3, fp
 80134fe:	4639      	mov	r1, r7
 8013500:	f7ed f9d4 	bl	80008ac <__aeabi_ddiv>
 8013504:	ec41 0b10 	vmov	d0, r0, r1
 8013508:	b003      	add	sp, #12
 801350a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801350e <__copybits>:
 801350e:	3901      	subs	r1, #1
 8013510:	b570      	push	{r4, r5, r6, lr}
 8013512:	1149      	asrs	r1, r1, #5
 8013514:	6914      	ldr	r4, [r2, #16]
 8013516:	3101      	adds	r1, #1
 8013518:	f102 0314 	add.w	r3, r2, #20
 801351c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013520:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013524:	1f05      	subs	r5, r0, #4
 8013526:	42a3      	cmp	r3, r4
 8013528:	d30c      	bcc.n	8013544 <__copybits+0x36>
 801352a:	1aa3      	subs	r3, r4, r2
 801352c:	3b11      	subs	r3, #17
 801352e:	f023 0303 	bic.w	r3, r3, #3
 8013532:	3211      	adds	r2, #17
 8013534:	42a2      	cmp	r2, r4
 8013536:	bf88      	it	hi
 8013538:	2300      	movhi	r3, #0
 801353a:	4418      	add	r0, r3
 801353c:	2300      	movs	r3, #0
 801353e:	4288      	cmp	r0, r1
 8013540:	d305      	bcc.n	801354e <__copybits+0x40>
 8013542:	bd70      	pop	{r4, r5, r6, pc}
 8013544:	f853 6b04 	ldr.w	r6, [r3], #4
 8013548:	f845 6f04 	str.w	r6, [r5, #4]!
 801354c:	e7eb      	b.n	8013526 <__copybits+0x18>
 801354e:	f840 3b04 	str.w	r3, [r0], #4
 8013552:	e7f4      	b.n	801353e <__copybits+0x30>

08013554 <__any_on>:
 8013554:	f100 0214 	add.w	r2, r0, #20
 8013558:	6900      	ldr	r0, [r0, #16]
 801355a:	114b      	asrs	r3, r1, #5
 801355c:	4298      	cmp	r0, r3
 801355e:	b510      	push	{r4, lr}
 8013560:	db11      	blt.n	8013586 <__any_on+0x32>
 8013562:	dd0a      	ble.n	801357a <__any_on+0x26>
 8013564:	f011 011f 	ands.w	r1, r1, #31
 8013568:	d007      	beq.n	801357a <__any_on+0x26>
 801356a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801356e:	fa24 f001 	lsr.w	r0, r4, r1
 8013572:	fa00 f101 	lsl.w	r1, r0, r1
 8013576:	428c      	cmp	r4, r1
 8013578:	d10b      	bne.n	8013592 <__any_on+0x3e>
 801357a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801357e:	4293      	cmp	r3, r2
 8013580:	d803      	bhi.n	801358a <__any_on+0x36>
 8013582:	2000      	movs	r0, #0
 8013584:	bd10      	pop	{r4, pc}
 8013586:	4603      	mov	r3, r0
 8013588:	e7f7      	b.n	801357a <__any_on+0x26>
 801358a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801358e:	2900      	cmp	r1, #0
 8013590:	d0f5      	beq.n	801357e <__any_on+0x2a>
 8013592:	2001      	movs	r0, #1
 8013594:	e7f6      	b.n	8013584 <__any_on+0x30>

08013596 <sulp>:
 8013596:	b570      	push	{r4, r5, r6, lr}
 8013598:	4604      	mov	r4, r0
 801359a:	460d      	mov	r5, r1
 801359c:	ec45 4b10 	vmov	d0, r4, r5
 80135a0:	4616      	mov	r6, r2
 80135a2:	f7ff feb7 	bl	8013314 <__ulp>
 80135a6:	ec51 0b10 	vmov	r0, r1, d0
 80135aa:	b17e      	cbz	r6, 80135cc <sulp+0x36>
 80135ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80135b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	dd09      	ble.n	80135cc <sulp+0x36>
 80135b8:	051b      	lsls	r3, r3, #20
 80135ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80135be:	2400      	movs	r4, #0
 80135c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80135c4:	4622      	mov	r2, r4
 80135c6:	462b      	mov	r3, r5
 80135c8:	f7ed f846 	bl	8000658 <__aeabi_dmul>
 80135cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080135d0 <_strtod_l>:
 80135d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d4:	ed2d 8b02 	vpush	{d8}
 80135d8:	b09b      	sub	sp, #108	; 0x6c
 80135da:	4604      	mov	r4, r0
 80135dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80135de:	2200      	movs	r2, #0
 80135e0:	9216      	str	r2, [sp, #88]	; 0x58
 80135e2:	460d      	mov	r5, r1
 80135e4:	f04f 0800 	mov.w	r8, #0
 80135e8:	f04f 0900 	mov.w	r9, #0
 80135ec:	460a      	mov	r2, r1
 80135ee:	9215      	str	r2, [sp, #84]	; 0x54
 80135f0:	7811      	ldrb	r1, [r2, #0]
 80135f2:	292b      	cmp	r1, #43	; 0x2b
 80135f4:	d04c      	beq.n	8013690 <_strtod_l+0xc0>
 80135f6:	d83a      	bhi.n	801366e <_strtod_l+0x9e>
 80135f8:	290d      	cmp	r1, #13
 80135fa:	d834      	bhi.n	8013666 <_strtod_l+0x96>
 80135fc:	2908      	cmp	r1, #8
 80135fe:	d834      	bhi.n	801366a <_strtod_l+0x9a>
 8013600:	2900      	cmp	r1, #0
 8013602:	d03d      	beq.n	8013680 <_strtod_l+0xb0>
 8013604:	2200      	movs	r2, #0
 8013606:	920a      	str	r2, [sp, #40]	; 0x28
 8013608:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801360a:	7832      	ldrb	r2, [r6, #0]
 801360c:	2a30      	cmp	r2, #48	; 0x30
 801360e:	f040 80b4 	bne.w	801377a <_strtod_l+0x1aa>
 8013612:	7872      	ldrb	r2, [r6, #1]
 8013614:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013618:	2a58      	cmp	r2, #88	; 0x58
 801361a:	d170      	bne.n	80136fe <_strtod_l+0x12e>
 801361c:	9302      	str	r3, [sp, #8]
 801361e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013620:	9301      	str	r3, [sp, #4]
 8013622:	ab16      	add	r3, sp, #88	; 0x58
 8013624:	9300      	str	r3, [sp, #0]
 8013626:	4a8e      	ldr	r2, [pc, #568]	; (8013860 <_strtod_l+0x290>)
 8013628:	ab17      	add	r3, sp, #92	; 0x5c
 801362a:	a915      	add	r1, sp, #84	; 0x54
 801362c:	4620      	mov	r0, r4
 801362e:	f001 fafb 	bl	8014c28 <__gethex>
 8013632:	f010 070f 	ands.w	r7, r0, #15
 8013636:	4605      	mov	r5, r0
 8013638:	d005      	beq.n	8013646 <_strtod_l+0x76>
 801363a:	2f06      	cmp	r7, #6
 801363c:	d12a      	bne.n	8013694 <_strtod_l+0xc4>
 801363e:	3601      	adds	r6, #1
 8013640:	2300      	movs	r3, #0
 8013642:	9615      	str	r6, [sp, #84]	; 0x54
 8013644:	930a      	str	r3, [sp, #40]	; 0x28
 8013646:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013648:	2b00      	cmp	r3, #0
 801364a:	f040 857f 	bne.w	801414c <_strtod_l+0xb7c>
 801364e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013650:	b1db      	cbz	r3, 801368a <_strtod_l+0xba>
 8013652:	4642      	mov	r2, r8
 8013654:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013658:	ec43 2b10 	vmov	d0, r2, r3
 801365c:	b01b      	add	sp, #108	; 0x6c
 801365e:	ecbd 8b02 	vpop	{d8}
 8013662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013666:	2920      	cmp	r1, #32
 8013668:	d1cc      	bne.n	8013604 <_strtod_l+0x34>
 801366a:	3201      	adds	r2, #1
 801366c:	e7bf      	b.n	80135ee <_strtod_l+0x1e>
 801366e:	292d      	cmp	r1, #45	; 0x2d
 8013670:	d1c8      	bne.n	8013604 <_strtod_l+0x34>
 8013672:	2101      	movs	r1, #1
 8013674:	910a      	str	r1, [sp, #40]	; 0x28
 8013676:	1c51      	adds	r1, r2, #1
 8013678:	9115      	str	r1, [sp, #84]	; 0x54
 801367a:	7852      	ldrb	r2, [r2, #1]
 801367c:	2a00      	cmp	r2, #0
 801367e:	d1c3      	bne.n	8013608 <_strtod_l+0x38>
 8013680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013682:	9515      	str	r5, [sp, #84]	; 0x54
 8013684:	2b00      	cmp	r3, #0
 8013686:	f040 855f 	bne.w	8014148 <_strtod_l+0xb78>
 801368a:	4642      	mov	r2, r8
 801368c:	464b      	mov	r3, r9
 801368e:	e7e3      	b.n	8013658 <_strtod_l+0x88>
 8013690:	2100      	movs	r1, #0
 8013692:	e7ef      	b.n	8013674 <_strtod_l+0xa4>
 8013694:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013696:	b13a      	cbz	r2, 80136a8 <_strtod_l+0xd8>
 8013698:	2135      	movs	r1, #53	; 0x35
 801369a:	a818      	add	r0, sp, #96	; 0x60
 801369c:	f7ff ff37 	bl	801350e <__copybits>
 80136a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80136a2:	4620      	mov	r0, r4
 80136a4:	f7ff fb0a 	bl	8012cbc <_Bfree>
 80136a8:	3f01      	subs	r7, #1
 80136aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80136ac:	2f04      	cmp	r7, #4
 80136ae:	d806      	bhi.n	80136be <_strtod_l+0xee>
 80136b0:	e8df f007 	tbb	[pc, r7]
 80136b4:	201d0314 	.word	0x201d0314
 80136b8:	14          	.byte	0x14
 80136b9:	00          	.byte	0x00
 80136ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80136be:	05e9      	lsls	r1, r5, #23
 80136c0:	bf48      	it	mi
 80136c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80136c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80136ca:	0d1b      	lsrs	r3, r3, #20
 80136cc:	051b      	lsls	r3, r3, #20
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d1b9      	bne.n	8013646 <_strtod_l+0x76>
 80136d2:	f7fe fba3 	bl	8011e1c <__errno>
 80136d6:	2322      	movs	r3, #34	; 0x22
 80136d8:	6003      	str	r3, [r0, #0]
 80136da:	e7b4      	b.n	8013646 <_strtod_l+0x76>
 80136dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80136e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80136e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80136e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80136ec:	e7e7      	b.n	80136be <_strtod_l+0xee>
 80136ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013868 <_strtod_l+0x298>
 80136f2:	e7e4      	b.n	80136be <_strtod_l+0xee>
 80136f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80136f8:	f04f 38ff 	mov.w	r8, #4294967295
 80136fc:	e7df      	b.n	80136be <_strtod_l+0xee>
 80136fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013700:	1c5a      	adds	r2, r3, #1
 8013702:	9215      	str	r2, [sp, #84]	; 0x54
 8013704:	785b      	ldrb	r3, [r3, #1]
 8013706:	2b30      	cmp	r3, #48	; 0x30
 8013708:	d0f9      	beq.n	80136fe <_strtod_l+0x12e>
 801370a:	2b00      	cmp	r3, #0
 801370c:	d09b      	beq.n	8013646 <_strtod_l+0x76>
 801370e:	2301      	movs	r3, #1
 8013710:	f04f 0a00 	mov.w	sl, #0
 8013714:	9304      	str	r3, [sp, #16]
 8013716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013718:	930b      	str	r3, [sp, #44]	; 0x2c
 801371a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801371e:	46d3      	mov	fp, sl
 8013720:	220a      	movs	r2, #10
 8013722:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013724:	7806      	ldrb	r6, [r0, #0]
 8013726:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801372a:	b2d9      	uxtb	r1, r3
 801372c:	2909      	cmp	r1, #9
 801372e:	d926      	bls.n	801377e <_strtod_l+0x1ae>
 8013730:	494c      	ldr	r1, [pc, #304]	; (8013864 <_strtod_l+0x294>)
 8013732:	2201      	movs	r2, #1
 8013734:	f001 f9c0 	bl	8014ab8 <strncmp>
 8013738:	2800      	cmp	r0, #0
 801373a:	d030      	beq.n	801379e <_strtod_l+0x1ce>
 801373c:	2000      	movs	r0, #0
 801373e:	4632      	mov	r2, r6
 8013740:	9005      	str	r0, [sp, #20]
 8013742:	465e      	mov	r6, fp
 8013744:	4603      	mov	r3, r0
 8013746:	2a65      	cmp	r2, #101	; 0x65
 8013748:	d001      	beq.n	801374e <_strtod_l+0x17e>
 801374a:	2a45      	cmp	r2, #69	; 0x45
 801374c:	d113      	bne.n	8013776 <_strtod_l+0x1a6>
 801374e:	b91e      	cbnz	r6, 8013758 <_strtod_l+0x188>
 8013750:	9a04      	ldr	r2, [sp, #16]
 8013752:	4302      	orrs	r2, r0
 8013754:	d094      	beq.n	8013680 <_strtod_l+0xb0>
 8013756:	2600      	movs	r6, #0
 8013758:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801375a:	1c6a      	adds	r2, r5, #1
 801375c:	9215      	str	r2, [sp, #84]	; 0x54
 801375e:	786a      	ldrb	r2, [r5, #1]
 8013760:	2a2b      	cmp	r2, #43	; 0x2b
 8013762:	d074      	beq.n	801384e <_strtod_l+0x27e>
 8013764:	2a2d      	cmp	r2, #45	; 0x2d
 8013766:	d078      	beq.n	801385a <_strtod_l+0x28a>
 8013768:	f04f 0c00 	mov.w	ip, #0
 801376c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013770:	2909      	cmp	r1, #9
 8013772:	d97f      	bls.n	8013874 <_strtod_l+0x2a4>
 8013774:	9515      	str	r5, [sp, #84]	; 0x54
 8013776:	2700      	movs	r7, #0
 8013778:	e09e      	b.n	80138b8 <_strtod_l+0x2e8>
 801377a:	2300      	movs	r3, #0
 801377c:	e7c8      	b.n	8013710 <_strtod_l+0x140>
 801377e:	f1bb 0f08 	cmp.w	fp, #8
 8013782:	bfd8      	it	le
 8013784:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013786:	f100 0001 	add.w	r0, r0, #1
 801378a:	bfda      	itte	le
 801378c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013790:	9309      	strle	r3, [sp, #36]	; 0x24
 8013792:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013796:	f10b 0b01 	add.w	fp, fp, #1
 801379a:	9015      	str	r0, [sp, #84]	; 0x54
 801379c:	e7c1      	b.n	8013722 <_strtod_l+0x152>
 801379e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137a0:	1c5a      	adds	r2, r3, #1
 80137a2:	9215      	str	r2, [sp, #84]	; 0x54
 80137a4:	785a      	ldrb	r2, [r3, #1]
 80137a6:	f1bb 0f00 	cmp.w	fp, #0
 80137aa:	d037      	beq.n	801381c <_strtod_l+0x24c>
 80137ac:	9005      	str	r0, [sp, #20]
 80137ae:	465e      	mov	r6, fp
 80137b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80137b4:	2b09      	cmp	r3, #9
 80137b6:	d912      	bls.n	80137de <_strtod_l+0x20e>
 80137b8:	2301      	movs	r3, #1
 80137ba:	e7c4      	b.n	8013746 <_strtod_l+0x176>
 80137bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137be:	1c5a      	adds	r2, r3, #1
 80137c0:	9215      	str	r2, [sp, #84]	; 0x54
 80137c2:	785a      	ldrb	r2, [r3, #1]
 80137c4:	3001      	adds	r0, #1
 80137c6:	2a30      	cmp	r2, #48	; 0x30
 80137c8:	d0f8      	beq.n	80137bc <_strtod_l+0x1ec>
 80137ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80137ce:	2b08      	cmp	r3, #8
 80137d0:	f200 84c1 	bhi.w	8014156 <_strtod_l+0xb86>
 80137d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137d6:	9005      	str	r0, [sp, #20]
 80137d8:	2000      	movs	r0, #0
 80137da:	930b      	str	r3, [sp, #44]	; 0x2c
 80137dc:	4606      	mov	r6, r0
 80137de:	3a30      	subs	r2, #48	; 0x30
 80137e0:	f100 0301 	add.w	r3, r0, #1
 80137e4:	d014      	beq.n	8013810 <_strtod_l+0x240>
 80137e6:	9905      	ldr	r1, [sp, #20]
 80137e8:	4419      	add	r1, r3
 80137ea:	9105      	str	r1, [sp, #20]
 80137ec:	4633      	mov	r3, r6
 80137ee:	eb00 0c06 	add.w	ip, r0, r6
 80137f2:	210a      	movs	r1, #10
 80137f4:	4563      	cmp	r3, ip
 80137f6:	d113      	bne.n	8013820 <_strtod_l+0x250>
 80137f8:	1833      	adds	r3, r6, r0
 80137fa:	2b08      	cmp	r3, #8
 80137fc:	f106 0601 	add.w	r6, r6, #1
 8013800:	4406      	add	r6, r0
 8013802:	dc1a      	bgt.n	801383a <_strtod_l+0x26a>
 8013804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013806:	230a      	movs	r3, #10
 8013808:	fb03 2301 	mla	r3, r3, r1, r2
 801380c:	9309      	str	r3, [sp, #36]	; 0x24
 801380e:	2300      	movs	r3, #0
 8013810:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013812:	1c51      	adds	r1, r2, #1
 8013814:	9115      	str	r1, [sp, #84]	; 0x54
 8013816:	7852      	ldrb	r2, [r2, #1]
 8013818:	4618      	mov	r0, r3
 801381a:	e7c9      	b.n	80137b0 <_strtod_l+0x1e0>
 801381c:	4658      	mov	r0, fp
 801381e:	e7d2      	b.n	80137c6 <_strtod_l+0x1f6>
 8013820:	2b08      	cmp	r3, #8
 8013822:	f103 0301 	add.w	r3, r3, #1
 8013826:	dc03      	bgt.n	8013830 <_strtod_l+0x260>
 8013828:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801382a:	434f      	muls	r7, r1
 801382c:	9709      	str	r7, [sp, #36]	; 0x24
 801382e:	e7e1      	b.n	80137f4 <_strtod_l+0x224>
 8013830:	2b10      	cmp	r3, #16
 8013832:	bfd8      	it	le
 8013834:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013838:	e7dc      	b.n	80137f4 <_strtod_l+0x224>
 801383a:	2e10      	cmp	r6, #16
 801383c:	bfdc      	itt	le
 801383e:	230a      	movle	r3, #10
 8013840:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013844:	e7e3      	b.n	801380e <_strtod_l+0x23e>
 8013846:	2300      	movs	r3, #0
 8013848:	9305      	str	r3, [sp, #20]
 801384a:	2301      	movs	r3, #1
 801384c:	e780      	b.n	8013750 <_strtod_l+0x180>
 801384e:	f04f 0c00 	mov.w	ip, #0
 8013852:	1caa      	adds	r2, r5, #2
 8013854:	9215      	str	r2, [sp, #84]	; 0x54
 8013856:	78aa      	ldrb	r2, [r5, #2]
 8013858:	e788      	b.n	801376c <_strtod_l+0x19c>
 801385a:	f04f 0c01 	mov.w	ip, #1
 801385e:	e7f8      	b.n	8013852 <_strtod_l+0x282>
 8013860:	080185c0 	.word	0x080185c0
 8013864:	080185bc 	.word	0x080185bc
 8013868:	7ff00000 	.word	0x7ff00000
 801386c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801386e:	1c51      	adds	r1, r2, #1
 8013870:	9115      	str	r1, [sp, #84]	; 0x54
 8013872:	7852      	ldrb	r2, [r2, #1]
 8013874:	2a30      	cmp	r2, #48	; 0x30
 8013876:	d0f9      	beq.n	801386c <_strtod_l+0x29c>
 8013878:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801387c:	2908      	cmp	r1, #8
 801387e:	f63f af7a 	bhi.w	8013776 <_strtod_l+0x1a6>
 8013882:	3a30      	subs	r2, #48	; 0x30
 8013884:	9208      	str	r2, [sp, #32]
 8013886:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013888:	920c      	str	r2, [sp, #48]	; 0x30
 801388a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801388c:	1c57      	adds	r7, r2, #1
 801388e:	9715      	str	r7, [sp, #84]	; 0x54
 8013890:	7852      	ldrb	r2, [r2, #1]
 8013892:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013896:	f1be 0f09 	cmp.w	lr, #9
 801389a:	d938      	bls.n	801390e <_strtod_l+0x33e>
 801389c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801389e:	1a7f      	subs	r7, r7, r1
 80138a0:	2f08      	cmp	r7, #8
 80138a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80138a6:	dc03      	bgt.n	80138b0 <_strtod_l+0x2e0>
 80138a8:	9908      	ldr	r1, [sp, #32]
 80138aa:	428f      	cmp	r7, r1
 80138ac:	bfa8      	it	ge
 80138ae:	460f      	movge	r7, r1
 80138b0:	f1bc 0f00 	cmp.w	ip, #0
 80138b4:	d000      	beq.n	80138b8 <_strtod_l+0x2e8>
 80138b6:	427f      	negs	r7, r7
 80138b8:	2e00      	cmp	r6, #0
 80138ba:	d14f      	bne.n	801395c <_strtod_l+0x38c>
 80138bc:	9904      	ldr	r1, [sp, #16]
 80138be:	4301      	orrs	r1, r0
 80138c0:	f47f aec1 	bne.w	8013646 <_strtod_l+0x76>
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	f47f aedb 	bne.w	8013680 <_strtod_l+0xb0>
 80138ca:	2a69      	cmp	r2, #105	; 0x69
 80138cc:	d029      	beq.n	8013922 <_strtod_l+0x352>
 80138ce:	dc26      	bgt.n	801391e <_strtod_l+0x34e>
 80138d0:	2a49      	cmp	r2, #73	; 0x49
 80138d2:	d026      	beq.n	8013922 <_strtod_l+0x352>
 80138d4:	2a4e      	cmp	r2, #78	; 0x4e
 80138d6:	f47f aed3 	bne.w	8013680 <_strtod_l+0xb0>
 80138da:	499b      	ldr	r1, [pc, #620]	; (8013b48 <_strtod_l+0x578>)
 80138dc:	a815      	add	r0, sp, #84	; 0x54
 80138de:	f001 fbe3 	bl	80150a8 <__match>
 80138e2:	2800      	cmp	r0, #0
 80138e4:	f43f aecc 	beq.w	8013680 <_strtod_l+0xb0>
 80138e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	2b28      	cmp	r3, #40	; 0x28
 80138ee:	d12f      	bne.n	8013950 <_strtod_l+0x380>
 80138f0:	4996      	ldr	r1, [pc, #600]	; (8013b4c <_strtod_l+0x57c>)
 80138f2:	aa18      	add	r2, sp, #96	; 0x60
 80138f4:	a815      	add	r0, sp, #84	; 0x54
 80138f6:	f001 fbeb 	bl	80150d0 <__hexnan>
 80138fa:	2805      	cmp	r0, #5
 80138fc:	d128      	bne.n	8013950 <_strtod_l+0x380>
 80138fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013900:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013904:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013908:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801390c:	e69b      	b.n	8013646 <_strtod_l+0x76>
 801390e:	9f08      	ldr	r7, [sp, #32]
 8013910:	210a      	movs	r1, #10
 8013912:	fb01 2107 	mla	r1, r1, r7, r2
 8013916:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801391a:	9208      	str	r2, [sp, #32]
 801391c:	e7b5      	b.n	801388a <_strtod_l+0x2ba>
 801391e:	2a6e      	cmp	r2, #110	; 0x6e
 8013920:	e7d9      	b.n	80138d6 <_strtod_l+0x306>
 8013922:	498b      	ldr	r1, [pc, #556]	; (8013b50 <_strtod_l+0x580>)
 8013924:	a815      	add	r0, sp, #84	; 0x54
 8013926:	f001 fbbf 	bl	80150a8 <__match>
 801392a:	2800      	cmp	r0, #0
 801392c:	f43f aea8 	beq.w	8013680 <_strtod_l+0xb0>
 8013930:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013932:	4988      	ldr	r1, [pc, #544]	; (8013b54 <_strtod_l+0x584>)
 8013934:	3b01      	subs	r3, #1
 8013936:	a815      	add	r0, sp, #84	; 0x54
 8013938:	9315      	str	r3, [sp, #84]	; 0x54
 801393a:	f001 fbb5 	bl	80150a8 <__match>
 801393e:	b910      	cbnz	r0, 8013946 <_strtod_l+0x376>
 8013940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013942:	3301      	adds	r3, #1
 8013944:	9315      	str	r3, [sp, #84]	; 0x54
 8013946:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013b64 <_strtod_l+0x594>
 801394a:	f04f 0800 	mov.w	r8, #0
 801394e:	e67a      	b.n	8013646 <_strtod_l+0x76>
 8013950:	4881      	ldr	r0, [pc, #516]	; (8013b58 <_strtod_l+0x588>)
 8013952:	f001 f8c5 	bl	8014ae0 <nan>
 8013956:	ec59 8b10 	vmov	r8, r9, d0
 801395a:	e674      	b.n	8013646 <_strtod_l+0x76>
 801395c:	9b05      	ldr	r3, [sp, #20]
 801395e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013960:	1afb      	subs	r3, r7, r3
 8013962:	f1bb 0f00 	cmp.w	fp, #0
 8013966:	bf08      	it	eq
 8013968:	46b3      	moveq	fp, r6
 801396a:	2e10      	cmp	r6, #16
 801396c:	9308      	str	r3, [sp, #32]
 801396e:	4635      	mov	r5, r6
 8013970:	bfa8      	it	ge
 8013972:	2510      	movge	r5, #16
 8013974:	f7ec fdf6 	bl	8000564 <__aeabi_ui2d>
 8013978:	2e09      	cmp	r6, #9
 801397a:	4680      	mov	r8, r0
 801397c:	4689      	mov	r9, r1
 801397e:	dd13      	ble.n	80139a8 <_strtod_l+0x3d8>
 8013980:	4b76      	ldr	r3, [pc, #472]	; (8013b5c <_strtod_l+0x58c>)
 8013982:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013986:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801398a:	f7ec fe65 	bl	8000658 <__aeabi_dmul>
 801398e:	4680      	mov	r8, r0
 8013990:	4650      	mov	r0, sl
 8013992:	4689      	mov	r9, r1
 8013994:	f7ec fde6 	bl	8000564 <__aeabi_ui2d>
 8013998:	4602      	mov	r2, r0
 801399a:	460b      	mov	r3, r1
 801399c:	4640      	mov	r0, r8
 801399e:	4649      	mov	r1, r9
 80139a0:	f7ec fca4 	bl	80002ec <__adddf3>
 80139a4:	4680      	mov	r8, r0
 80139a6:	4689      	mov	r9, r1
 80139a8:	2e0f      	cmp	r6, #15
 80139aa:	dc38      	bgt.n	8013a1e <_strtod_l+0x44e>
 80139ac:	9b08      	ldr	r3, [sp, #32]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	f43f ae49 	beq.w	8013646 <_strtod_l+0x76>
 80139b4:	dd24      	ble.n	8013a00 <_strtod_l+0x430>
 80139b6:	2b16      	cmp	r3, #22
 80139b8:	dc0b      	bgt.n	80139d2 <_strtod_l+0x402>
 80139ba:	4968      	ldr	r1, [pc, #416]	; (8013b5c <_strtod_l+0x58c>)
 80139bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80139c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139c4:	4642      	mov	r2, r8
 80139c6:	464b      	mov	r3, r9
 80139c8:	f7ec fe46 	bl	8000658 <__aeabi_dmul>
 80139cc:	4680      	mov	r8, r0
 80139ce:	4689      	mov	r9, r1
 80139d0:	e639      	b.n	8013646 <_strtod_l+0x76>
 80139d2:	9a08      	ldr	r2, [sp, #32]
 80139d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80139d8:	4293      	cmp	r3, r2
 80139da:	db20      	blt.n	8013a1e <_strtod_l+0x44e>
 80139dc:	4c5f      	ldr	r4, [pc, #380]	; (8013b5c <_strtod_l+0x58c>)
 80139de:	f1c6 060f 	rsb	r6, r6, #15
 80139e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80139e6:	4642      	mov	r2, r8
 80139e8:	464b      	mov	r3, r9
 80139ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139ee:	f7ec fe33 	bl	8000658 <__aeabi_dmul>
 80139f2:	9b08      	ldr	r3, [sp, #32]
 80139f4:	1b9e      	subs	r6, r3, r6
 80139f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80139fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80139fe:	e7e3      	b.n	80139c8 <_strtod_l+0x3f8>
 8013a00:	9b08      	ldr	r3, [sp, #32]
 8013a02:	3316      	adds	r3, #22
 8013a04:	db0b      	blt.n	8013a1e <_strtod_l+0x44e>
 8013a06:	9b05      	ldr	r3, [sp, #20]
 8013a08:	1bdf      	subs	r7, r3, r7
 8013a0a:	4b54      	ldr	r3, [pc, #336]	; (8013b5c <_strtod_l+0x58c>)
 8013a0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a14:	4640      	mov	r0, r8
 8013a16:	4649      	mov	r1, r9
 8013a18:	f7ec ff48 	bl	80008ac <__aeabi_ddiv>
 8013a1c:	e7d6      	b.n	80139cc <_strtod_l+0x3fc>
 8013a1e:	9b08      	ldr	r3, [sp, #32]
 8013a20:	1b75      	subs	r5, r6, r5
 8013a22:	441d      	add	r5, r3
 8013a24:	2d00      	cmp	r5, #0
 8013a26:	dd70      	ble.n	8013b0a <_strtod_l+0x53a>
 8013a28:	f015 030f 	ands.w	r3, r5, #15
 8013a2c:	d00a      	beq.n	8013a44 <_strtod_l+0x474>
 8013a2e:	494b      	ldr	r1, [pc, #300]	; (8013b5c <_strtod_l+0x58c>)
 8013a30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a34:	4642      	mov	r2, r8
 8013a36:	464b      	mov	r3, r9
 8013a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a3c:	f7ec fe0c 	bl	8000658 <__aeabi_dmul>
 8013a40:	4680      	mov	r8, r0
 8013a42:	4689      	mov	r9, r1
 8013a44:	f035 050f 	bics.w	r5, r5, #15
 8013a48:	d04d      	beq.n	8013ae6 <_strtod_l+0x516>
 8013a4a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013a4e:	dd22      	ble.n	8013a96 <_strtod_l+0x4c6>
 8013a50:	2500      	movs	r5, #0
 8013a52:	46ab      	mov	fp, r5
 8013a54:	9509      	str	r5, [sp, #36]	; 0x24
 8013a56:	9505      	str	r5, [sp, #20]
 8013a58:	2322      	movs	r3, #34	; 0x22
 8013a5a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013b64 <_strtod_l+0x594>
 8013a5e:	6023      	str	r3, [r4, #0]
 8013a60:	f04f 0800 	mov.w	r8, #0
 8013a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	f43f aded 	beq.w	8013646 <_strtod_l+0x76>
 8013a6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f7ff f924 	bl	8012cbc <_Bfree>
 8013a74:	9905      	ldr	r1, [sp, #20]
 8013a76:	4620      	mov	r0, r4
 8013a78:	f7ff f920 	bl	8012cbc <_Bfree>
 8013a7c:	4659      	mov	r1, fp
 8013a7e:	4620      	mov	r0, r4
 8013a80:	f7ff f91c 	bl	8012cbc <_Bfree>
 8013a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a86:	4620      	mov	r0, r4
 8013a88:	f7ff f918 	bl	8012cbc <_Bfree>
 8013a8c:	4629      	mov	r1, r5
 8013a8e:	4620      	mov	r0, r4
 8013a90:	f7ff f914 	bl	8012cbc <_Bfree>
 8013a94:	e5d7      	b.n	8013646 <_strtod_l+0x76>
 8013a96:	4b32      	ldr	r3, [pc, #200]	; (8013b60 <_strtod_l+0x590>)
 8013a98:	9304      	str	r3, [sp, #16]
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	112d      	asrs	r5, r5, #4
 8013a9e:	4640      	mov	r0, r8
 8013aa0:	4649      	mov	r1, r9
 8013aa2:	469a      	mov	sl, r3
 8013aa4:	2d01      	cmp	r5, #1
 8013aa6:	dc21      	bgt.n	8013aec <_strtod_l+0x51c>
 8013aa8:	b10b      	cbz	r3, 8013aae <_strtod_l+0x4de>
 8013aaa:	4680      	mov	r8, r0
 8013aac:	4689      	mov	r9, r1
 8013aae:	492c      	ldr	r1, [pc, #176]	; (8013b60 <_strtod_l+0x590>)
 8013ab0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013ab4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013ab8:	4642      	mov	r2, r8
 8013aba:	464b      	mov	r3, r9
 8013abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ac0:	f7ec fdca 	bl	8000658 <__aeabi_dmul>
 8013ac4:	4b27      	ldr	r3, [pc, #156]	; (8013b64 <_strtod_l+0x594>)
 8013ac6:	460a      	mov	r2, r1
 8013ac8:	400b      	ands	r3, r1
 8013aca:	4927      	ldr	r1, [pc, #156]	; (8013b68 <_strtod_l+0x598>)
 8013acc:	428b      	cmp	r3, r1
 8013ace:	4680      	mov	r8, r0
 8013ad0:	d8be      	bhi.n	8013a50 <_strtod_l+0x480>
 8013ad2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013ad6:	428b      	cmp	r3, r1
 8013ad8:	bf86      	itte	hi
 8013ada:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013b6c <_strtod_l+0x59c>
 8013ade:	f04f 38ff 	movhi.w	r8, #4294967295
 8013ae2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	9304      	str	r3, [sp, #16]
 8013aea:	e07b      	b.n	8013be4 <_strtod_l+0x614>
 8013aec:	07ea      	lsls	r2, r5, #31
 8013aee:	d505      	bpl.n	8013afc <_strtod_l+0x52c>
 8013af0:	9b04      	ldr	r3, [sp, #16]
 8013af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af6:	f7ec fdaf 	bl	8000658 <__aeabi_dmul>
 8013afa:	2301      	movs	r3, #1
 8013afc:	9a04      	ldr	r2, [sp, #16]
 8013afe:	3208      	adds	r2, #8
 8013b00:	f10a 0a01 	add.w	sl, sl, #1
 8013b04:	106d      	asrs	r5, r5, #1
 8013b06:	9204      	str	r2, [sp, #16]
 8013b08:	e7cc      	b.n	8013aa4 <_strtod_l+0x4d4>
 8013b0a:	d0ec      	beq.n	8013ae6 <_strtod_l+0x516>
 8013b0c:	426d      	negs	r5, r5
 8013b0e:	f015 020f 	ands.w	r2, r5, #15
 8013b12:	d00a      	beq.n	8013b2a <_strtod_l+0x55a>
 8013b14:	4b11      	ldr	r3, [pc, #68]	; (8013b5c <_strtod_l+0x58c>)
 8013b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b1a:	4640      	mov	r0, r8
 8013b1c:	4649      	mov	r1, r9
 8013b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b22:	f7ec fec3 	bl	80008ac <__aeabi_ddiv>
 8013b26:	4680      	mov	r8, r0
 8013b28:	4689      	mov	r9, r1
 8013b2a:	112d      	asrs	r5, r5, #4
 8013b2c:	d0db      	beq.n	8013ae6 <_strtod_l+0x516>
 8013b2e:	2d1f      	cmp	r5, #31
 8013b30:	dd1e      	ble.n	8013b70 <_strtod_l+0x5a0>
 8013b32:	2500      	movs	r5, #0
 8013b34:	46ab      	mov	fp, r5
 8013b36:	9509      	str	r5, [sp, #36]	; 0x24
 8013b38:	9505      	str	r5, [sp, #20]
 8013b3a:	2322      	movs	r3, #34	; 0x22
 8013b3c:	f04f 0800 	mov.w	r8, #0
 8013b40:	f04f 0900 	mov.w	r9, #0
 8013b44:	6023      	str	r3, [r4, #0]
 8013b46:	e78d      	b.n	8013a64 <_strtod_l+0x494>
 8013b48:	080183a7 	.word	0x080183a7
 8013b4c:	080185d4 	.word	0x080185d4
 8013b50:	0801839f 	.word	0x0801839f
 8013b54:	080183d6 	.word	0x080183d6
 8013b58:	08018765 	.word	0x08018765
 8013b5c:	080184e8 	.word	0x080184e8
 8013b60:	080184c0 	.word	0x080184c0
 8013b64:	7ff00000 	.word	0x7ff00000
 8013b68:	7ca00000 	.word	0x7ca00000
 8013b6c:	7fefffff 	.word	0x7fefffff
 8013b70:	f015 0310 	ands.w	r3, r5, #16
 8013b74:	bf18      	it	ne
 8013b76:	236a      	movne	r3, #106	; 0x6a
 8013b78:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013f1c <_strtod_l+0x94c>
 8013b7c:	9304      	str	r3, [sp, #16]
 8013b7e:	4640      	mov	r0, r8
 8013b80:	4649      	mov	r1, r9
 8013b82:	2300      	movs	r3, #0
 8013b84:	07ea      	lsls	r2, r5, #31
 8013b86:	d504      	bpl.n	8013b92 <_strtod_l+0x5c2>
 8013b88:	e9da 2300 	ldrd	r2, r3, [sl]
 8013b8c:	f7ec fd64 	bl	8000658 <__aeabi_dmul>
 8013b90:	2301      	movs	r3, #1
 8013b92:	106d      	asrs	r5, r5, #1
 8013b94:	f10a 0a08 	add.w	sl, sl, #8
 8013b98:	d1f4      	bne.n	8013b84 <_strtod_l+0x5b4>
 8013b9a:	b10b      	cbz	r3, 8013ba0 <_strtod_l+0x5d0>
 8013b9c:	4680      	mov	r8, r0
 8013b9e:	4689      	mov	r9, r1
 8013ba0:	9b04      	ldr	r3, [sp, #16]
 8013ba2:	b1bb      	cbz	r3, 8013bd4 <_strtod_l+0x604>
 8013ba4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013ba8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	4649      	mov	r1, r9
 8013bb0:	dd10      	ble.n	8013bd4 <_strtod_l+0x604>
 8013bb2:	2b1f      	cmp	r3, #31
 8013bb4:	f340 811e 	ble.w	8013df4 <_strtod_l+0x824>
 8013bb8:	2b34      	cmp	r3, #52	; 0x34
 8013bba:	bfde      	ittt	le
 8013bbc:	f04f 33ff 	movle.w	r3, #4294967295
 8013bc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013bc4:	4093      	lslle	r3, r2
 8013bc6:	f04f 0800 	mov.w	r8, #0
 8013bca:	bfcc      	ite	gt
 8013bcc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013bd0:	ea03 0901 	andle.w	r9, r3, r1
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	4640      	mov	r0, r8
 8013bda:	4649      	mov	r1, r9
 8013bdc:	f7ec ffa4 	bl	8000b28 <__aeabi_dcmpeq>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d1a6      	bne.n	8013b32 <_strtod_l+0x562>
 8013be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013be6:	9300      	str	r3, [sp, #0]
 8013be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013bea:	4633      	mov	r3, r6
 8013bec:	465a      	mov	r2, fp
 8013bee:	4620      	mov	r0, r4
 8013bf0:	f7ff f8cc 	bl	8012d8c <__s2b>
 8013bf4:	9009      	str	r0, [sp, #36]	; 0x24
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	f43f af2a 	beq.w	8013a50 <_strtod_l+0x480>
 8013bfc:	9a08      	ldr	r2, [sp, #32]
 8013bfe:	9b05      	ldr	r3, [sp, #20]
 8013c00:	2a00      	cmp	r2, #0
 8013c02:	eba3 0307 	sub.w	r3, r3, r7
 8013c06:	bfa8      	it	ge
 8013c08:	2300      	movge	r3, #0
 8013c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8013c0c:	2500      	movs	r5, #0
 8013c0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013c12:	9312      	str	r3, [sp, #72]	; 0x48
 8013c14:	46ab      	mov	fp, r5
 8013c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c18:	4620      	mov	r0, r4
 8013c1a:	6859      	ldr	r1, [r3, #4]
 8013c1c:	f7ff f80e 	bl	8012c3c <_Balloc>
 8013c20:	9005      	str	r0, [sp, #20]
 8013c22:	2800      	cmp	r0, #0
 8013c24:	f43f af18 	beq.w	8013a58 <_strtod_l+0x488>
 8013c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c2a:	691a      	ldr	r2, [r3, #16]
 8013c2c:	3202      	adds	r2, #2
 8013c2e:	f103 010c 	add.w	r1, r3, #12
 8013c32:	0092      	lsls	r2, r2, #2
 8013c34:	300c      	adds	r0, #12
 8013c36:	f7fe f926 	bl	8011e86 <memcpy>
 8013c3a:	ec49 8b10 	vmov	d0, r8, r9
 8013c3e:	aa18      	add	r2, sp, #96	; 0x60
 8013c40:	a917      	add	r1, sp, #92	; 0x5c
 8013c42:	4620      	mov	r0, r4
 8013c44:	f7ff fbd6 	bl	80133f4 <__d2b>
 8013c48:	ec49 8b18 	vmov	d8, r8, r9
 8013c4c:	9016      	str	r0, [sp, #88]	; 0x58
 8013c4e:	2800      	cmp	r0, #0
 8013c50:	f43f af02 	beq.w	8013a58 <_strtod_l+0x488>
 8013c54:	2101      	movs	r1, #1
 8013c56:	4620      	mov	r0, r4
 8013c58:	f7ff f930 	bl	8012ebc <__i2b>
 8013c5c:	4683      	mov	fp, r0
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	f43f aefa 	beq.w	8013a58 <_strtod_l+0x488>
 8013c64:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013c66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013c68:	2e00      	cmp	r6, #0
 8013c6a:	bfab      	itete	ge
 8013c6c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013c6e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013c70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013c72:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013c76:	bfac      	ite	ge
 8013c78:	eb06 0a03 	addge.w	sl, r6, r3
 8013c7c:	1b9f      	sublt	r7, r3, r6
 8013c7e:	9b04      	ldr	r3, [sp, #16]
 8013c80:	1af6      	subs	r6, r6, r3
 8013c82:	4416      	add	r6, r2
 8013c84:	4ba0      	ldr	r3, [pc, #640]	; (8013f08 <_strtod_l+0x938>)
 8013c86:	3e01      	subs	r6, #1
 8013c88:	429e      	cmp	r6, r3
 8013c8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013c8e:	f280 80c4 	bge.w	8013e1a <_strtod_l+0x84a>
 8013c92:	1b9b      	subs	r3, r3, r6
 8013c94:	2b1f      	cmp	r3, #31
 8013c96:	eba2 0203 	sub.w	r2, r2, r3
 8013c9a:	f04f 0101 	mov.w	r1, #1
 8013c9e:	f300 80b0 	bgt.w	8013e02 <_strtod_l+0x832>
 8013ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8013ca6:	930e      	str	r3, [sp, #56]	; 0x38
 8013ca8:	2300      	movs	r3, #0
 8013caa:	930d      	str	r3, [sp, #52]	; 0x34
 8013cac:	eb0a 0602 	add.w	r6, sl, r2
 8013cb0:	9b04      	ldr	r3, [sp, #16]
 8013cb2:	45b2      	cmp	sl, r6
 8013cb4:	4417      	add	r7, r2
 8013cb6:	441f      	add	r7, r3
 8013cb8:	4653      	mov	r3, sl
 8013cba:	bfa8      	it	ge
 8013cbc:	4633      	movge	r3, r6
 8013cbe:	42bb      	cmp	r3, r7
 8013cc0:	bfa8      	it	ge
 8013cc2:	463b      	movge	r3, r7
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	bfc2      	ittt	gt
 8013cc8:	1af6      	subgt	r6, r6, r3
 8013cca:	1aff      	subgt	r7, r7, r3
 8013ccc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	dd17      	ble.n	8013d06 <_strtod_l+0x736>
 8013cd6:	4659      	mov	r1, fp
 8013cd8:	461a      	mov	r2, r3
 8013cda:	4620      	mov	r0, r4
 8013cdc:	f7ff f9ae 	bl	801303c <__pow5mult>
 8013ce0:	4683      	mov	fp, r0
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	f43f aeb8 	beq.w	8013a58 <_strtod_l+0x488>
 8013ce8:	4601      	mov	r1, r0
 8013cea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013cec:	4620      	mov	r0, r4
 8013cee:	f7ff f8fb 	bl	8012ee8 <__multiply>
 8013cf2:	900b      	str	r0, [sp, #44]	; 0x2c
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	f43f aeaf 	beq.w	8013a58 <_strtod_l+0x488>
 8013cfa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	f7fe ffdd 	bl	8012cbc <_Bfree>
 8013d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d04:	9316      	str	r3, [sp, #88]	; 0x58
 8013d06:	2e00      	cmp	r6, #0
 8013d08:	f300 808c 	bgt.w	8013e24 <_strtod_l+0x854>
 8013d0c:	9b08      	ldr	r3, [sp, #32]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	dd08      	ble.n	8013d24 <_strtod_l+0x754>
 8013d12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d14:	9905      	ldr	r1, [sp, #20]
 8013d16:	4620      	mov	r0, r4
 8013d18:	f7ff f990 	bl	801303c <__pow5mult>
 8013d1c:	9005      	str	r0, [sp, #20]
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	f43f ae9a 	beq.w	8013a58 <_strtod_l+0x488>
 8013d24:	2f00      	cmp	r7, #0
 8013d26:	dd08      	ble.n	8013d3a <_strtod_l+0x76a>
 8013d28:	9905      	ldr	r1, [sp, #20]
 8013d2a:	463a      	mov	r2, r7
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f7ff f9df 	bl	80130f0 <__lshift>
 8013d32:	9005      	str	r0, [sp, #20]
 8013d34:	2800      	cmp	r0, #0
 8013d36:	f43f ae8f 	beq.w	8013a58 <_strtod_l+0x488>
 8013d3a:	f1ba 0f00 	cmp.w	sl, #0
 8013d3e:	dd08      	ble.n	8013d52 <_strtod_l+0x782>
 8013d40:	4659      	mov	r1, fp
 8013d42:	4652      	mov	r2, sl
 8013d44:	4620      	mov	r0, r4
 8013d46:	f7ff f9d3 	bl	80130f0 <__lshift>
 8013d4a:	4683      	mov	fp, r0
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	f43f ae83 	beq.w	8013a58 <_strtod_l+0x488>
 8013d52:	9a05      	ldr	r2, [sp, #20]
 8013d54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d56:	4620      	mov	r0, r4
 8013d58:	f7ff fa52 	bl	8013200 <__mdiff>
 8013d5c:	4605      	mov	r5, r0
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	f43f ae7a 	beq.w	8013a58 <_strtod_l+0x488>
 8013d64:	68c3      	ldr	r3, [r0, #12]
 8013d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d68:	2300      	movs	r3, #0
 8013d6a:	60c3      	str	r3, [r0, #12]
 8013d6c:	4659      	mov	r1, fp
 8013d6e:	f7ff fa2b 	bl	80131c8 <__mcmp>
 8013d72:	2800      	cmp	r0, #0
 8013d74:	da60      	bge.n	8013e38 <_strtod_l+0x868>
 8013d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d78:	ea53 0308 	orrs.w	r3, r3, r8
 8013d7c:	f040 8084 	bne.w	8013e88 <_strtod_l+0x8b8>
 8013d80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d17f      	bne.n	8013e88 <_strtod_l+0x8b8>
 8013d88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013d8c:	0d1b      	lsrs	r3, r3, #20
 8013d8e:	051b      	lsls	r3, r3, #20
 8013d90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013d94:	d978      	bls.n	8013e88 <_strtod_l+0x8b8>
 8013d96:	696b      	ldr	r3, [r5, #20]
 8013d98:	b913      	cbnz	r3, 8013da0 <_strtod_l+0x7d0>
 8013d9a:	692b      	ldr	r3, [r5, #16]
 8013d9c:	2b01      	cmp	r3, #1
 8013d9e:	dd73      	ble.n	8013e88 <_strtod_l+0x8b8>
 8013da0:	4629      	mov	r1, r5
 8013da2:	2201      	movs	r2, #1
 8013da4:	4620      	mov	r0, r4
 8013da6:	f7ff f9a3 	bl	80130f0 <__lshift>
 8013daa:	4659      	mov	r1, fp
 8013dac:	4605      	mov	r5, r0
 8013dae:	f7ff fa0b 	bl	80131c8 <__mcmp>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	dd68      	ble.n	8013e88 <_strtod_l+0x8b8>
 8013db6:	9904      	ldr	r1, [sp, #16]
 8013db8:	4a54      	ldr	r2, [pc, #336]	; (8013f0c <_strtod_l+0x93c>)
 8013dba:	464b      	mov	r3, r9
 8013dbc:	2900      	cmp	r1, #0
 8013dbe:	f000 8084 	beq.w	8013eca <_strtod_l+0x8fa>
 8013dc2:	ea02 0109 	and.w	r1, r2, r9
 8013dc6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013dca:	dc7e      	bgt.n	8013eca <_strtod_l+0x8fa>
 8013dcc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013dd0:	f77f aeb3 	ble.w	8013b3a <_strtod_l+0x56a>
 8013dd4:	4b4e      	ldr	r3, [pc, #312]	; (8013f10 <_strtod_l+0x940>)
 8013dd6:	4640      	mov	r0, r8
 8013dd8:	4649      	mov	r1, r9
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f7ec fc3c 	bl	8000658 <__aeabi_dmul>
 8013de0:	4b4a      	ldr	r3, [pc, #296]	; (8013f0c <_strtod_l+0x93c>)
 8013de2:	400b      	ands	r3, r1
 8013de4:	4680      	mov	r8, r0
 8013de6:	4689      	mov	r9, r1
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f47f ae3f 	bne.w	8013a6c <_strtod_l+0x49c>
 8013dee:	2322      	movs	r3, #34	; 0x22
 8013df0:	6023      	str	r3, [r4, #0]
 8013df2:	e63b      	b.n	8013a6c <_strtod_l+0x49c>
 8013df4:	f04f 32ff 	mov.w	r2, #4294967295
 8013df8:	fa02 f303 	lsl.w	r3, r2, r3
 8013dfc:	ea03 0808 	and.w	r8, r3, r8
 8013e00:	e6e8      	b.n	8013bd4 <_strtod_l+0x604>
 8013e02:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013e06:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013e0a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013e0e:	36e2      	adds	r6, #226	; 0xe2
 8013e10:	fa01 f306 	lsl.w	r3, r1, r6
 8013e14:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013e18:	e748      	b.n	8013cac <_strtod_l+0x6dc>
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013e22:	e743      	b.n	8013cac <_strtod_l+0x6dc>
 8013e24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013e26:	4632      	mov	r2, r6
 8013e28:	4620      	mov	r0, r4
 8013e2a:	f7ff f961 	bl	80130f0 <__lshift>
 8013e2e:	9016      	str	r0, [sp, #88]	; 0x58
 8013e30:	2800      	cmp	r0, #0
 8013e32:	f47f af6b 	bne.w	8013d0c <_strtod_l+0x73c>
 8013e36:	e60f      	b.n	8013a58 <_strtod_l+0x488>
 8013e38:	46ca      	mov	sl, r9
 8013e3a:	d171      	bne.n	8013f20 <_strtod_l+0x950>
 8013e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e42:	b352      	cbz	r2, 8013e9a <_strtod_l+0x8ca>
 8013e44:	4a33      	ldr	r2, [pc, #204]	; (8013f14 <_strtod_l+0x944>)
 8013e46:	4293      	cmp	r3, r2
 8013e48:	d12a      	bne.n	8013ea0 <_strtod_l+0x8d0>
 8013e4a:	9b04      	ldr	r3, [sp, #16]
 8013e4c:	4641      	mov	r1, r8
 8013e4e:	b1fb      	cbz	r3, 8013e90 <_strtod_l+0x8c0>
 8013e50:	4b2e      	ldr	r3, [pc, #184]	; (8013f0c <_strtod_l+0x93c>)
 8013e52:	ea09 0303 	and.w	r3, r9, r3
 8013e56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e5e:	d81a      	bhi.n	8013e96 <_strtod_l+0x8c6>
 8013e60:	0d1b      	lsrs	r3, r3, #20
 8013e62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013e66:	fa02 f303 	lsl.w	r3, r2, r3
 8013e6a:	4299      	cmp	r1, r3
 8013e6c:	d118      	bne.n	8013ea0 <_strtod_l+0x8d0>
 8013e6e:	4b2a      	ldr	r3, [pc, #168]	; (8013f18 <_strtod_l+0x948>)
 8013e70:	459a      	cmp	sl, r3
 8013e72:	d102      	bne.n	8013e7a <_strtod_l+0x8aa>
 8013e74:	3101      	adds	r1, #1
 8013e76:	f43f adef 	beq.w	8013a58 <_strtod_l+0x488>
 8013e7a:	4b24      	ldr	r3, [pc, #144]	; (8013f0c <_strtod_l+0x93c>)
 8013e7c:	ea0a 0303 	and.w	r3, sl, r3
 8013e80:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013e84:	f04f 0800 	mov.w	r8, #0
 8013e88:	9b04      	ldr	r3, [sp, #16]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d1a2      	bne.n	8013dd4 <_strtod_l+0x804>
 8013e8e:	e5ed      	b.n	8013a6c <_strtod_l+0x49c>
 8013e90:	f04f 33ff 	mov.w	r3, #4294967295
 8013e94:	e7e9      	b.n	8013e6a <_strtod_l+0x89a>
 8013e96:	4613      	mov	r3, r2
 8013e98:	e7e7      	b.n	8013e6a <_strtod_l+0x89a>
 8013e9a:	ea53 0308 	orrs.w	r3, r3, r8
 8013e9e:	d08a      	beq.n	8013db6 <_strtod_l+0x7e6>
 8013ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ea2:	b1e3      	cbz	r3, 8013ede <_strtod_l+0x90e>
 8013ea4:	ea13 0f0a 	tst.w	r3, sl
 8013ea8:	d0ee      	beq.n	8013e88 <_strtod_l+0x8b8>
 8013eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013eac:	9a04      	ldr	r2, [sp, #16]
 8013eae:	4640      	mov	r0, r8
 8013eb0:	4649      	mov	r1, r9
 8013eb2:	b1c3      	cbz	r3, 8013ee6 <_strtod_l+0x916>
 8013eb4:	f7ff fb6f 	bl	8013596 <sulp>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	460b      	mov	r3, r1
 8013ebc:	ec51 0b18 	vmov	r0, r1, d8
 8013ec0:	f7ec fa14 	bl	80002ec <__adddf3>
 8013ec4:	4680      	mov	r8, r0
 8013ec6:	4689      	mov	r9, r1
 8013ec8:	e7de      	b.n	8013e88 <_strtod_l+0x8b8>
 8013eca:	4013      	ands	r3, r2
 8013ecc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013ed0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013ed4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013ed8:	f04f 38ff 	mov.w	r8, #4294967295
 8013edc:	e7d4      	b.n	8013e88 <_strtod_l+0x8b8>
 8013ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ee0:	ea13 0f08 	tst.w	r3, r8
 8013ee4:	e7e0      	b.n	8013ea8 <_strtod_l+0x8d8>
 8013ee6:	f7ff fb56 	bl	8013596 <sulp>
 8013eea:	4602      	mov	r2, r0
 8013eec:	460b      	mov	r3, r1
 8013eee:	ec51 0b18 	vmov	r0, r1, d8
 8013ef2:	f7ec f9f9 	bl	80002e8 <__aeabi_dsub>
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	2300      	movs	r3, #0
 8013efa:	4680      	mov	r8, r0
 8013efc:	4689      	mov	r9, r1
 8013efe:	f7ec fe13 	bl	8000b28 <__aeabi_dcmpeq>
 8013f02:	2800      	cmp	r0, #0
 8013f04:	d0c0      	beq.n	8013e88 <_strtod_l+0x8b8>
 8013f06:	e618      	b.n	8013b3a <_strtod_l+0x56a>
 8013f08:	fffffc02 	.word	0xfffffc02
 8013f0c:	7ff00000 	.word	0x7ff00000
 8013f10:	39500000 	.word	0x39500000
 8013f14:	000fffff 	.word	0x000fffff
 8013f18:	7fefffff 	.word	0x7fefffff
 8013f1c:	080185e8 	.word	0x080185e8
 8013f20:	4659      	mov	r1, fp
 8013f22:	4628      	mov	r0, r5
 8013f24:	f7ff fac0 	bl	80134a8 <__ratio>
 8013f28:	ec57 6b10 	vmov	r6, r7, d0
 8013f2c:	ee10 0a10 	vmov	r0, s0
 8013f30:	2200      	movs	r2, #0
 8013f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f36:	4639      	mov	r1, r7
 8013f38:	f7ec fe0a 	bl	8000b50 <__aeabi_dcmple>
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	d071      	beq.n	8014024 <_strtod_l+0xa54>
 8013f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d17c      	bne.n	8014040 <_strtod_l+0xa70>
 8013f46:	f1b8 0f00 	cmp.w	r8, #0
 8013f4a:	d15a      	bne.n	8014002 <_strtod_l+0xa32>
 8013f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d15d      	bne.n	8014010 <_strtod_l+0xa40>
 8013f54:	4b90      	ldr	r3, [pc, #576]	; (8014198 <_strtod_l+0xbc8>)
 8013f56:	2200      	movs	r2, #0
 8013f58:	4630      	mov	r0, r6
 8013f5a:	4639      	mov	r1, r7
 8013f5c:	f7ec fdee 	bl	8000b3c <__aeabi_dcmplt>
 8013f60:	2800      	cmp	r0, #0
 8013f62:	d15c      	bne.n	801401e <_strtod_l+0xa4e>
 8013f64:	4630      	mov	r0, r6
 8013f66:	4639      	mov	r1, r7
 8013f68:	4b8c      	ldr	r3, [pc, #560]	; (801419c <_strtod_l+0xbcc>)
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	f7ec fb74 	bl	8000658 <__aeabi_dmul>
 8013f70:	4606      	mov	r6, r0
 8013f72:	460f      	mov	r7, r1
 8013f74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013f78:	9606      	str	r6, [sp, #24]
 8013f7a:	9307      	str	r3, [sp, #28]
 8013f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013f84:	4b86      	ldr	r3, [pc, #536]	; (80141a0 <_strtod_l+0xbd0>)
 8013f86:	ea0a 0303 	and.w	r3, sl, r3
 8013f8a:	930d      	str	r3, [sp, #52]	; 0x34
 8013f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f8e:	4b85      	ldr	r3, [pc, #532]	; (80141a4 <_strtod_l+0xbd4>)
 8013f90:	429a      	cmp	r2, r3
 8013f92:	f040 8090 	bne.w	80140b6 <_strtod_l+0xae6>
 8013f96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013f9a:	ec49 8b10 	vmov	d0, r8, r9
 8013f9e:	f7ff f9b9 	bl	8013314 <__ulp>
 8013fa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fa6:	ec51 0b10 	vmov	r0, r1, d0
 8013faa:	f7ec fb55 	bl	8000658 <__aeabi_dmul>
 8013fae:	4642      	mov	r2, r8
 8013fb0:	464b      	mov	r3, r9
 8013fb2:	f7ec f99b 	bl	80002ec <__adddf3>
 8013fb6:	460b      	mov	r3, r1
 8013fb8:	4979      	ldr	r1, [pc, #484]	; (80141a0 <_strtod_l+0xbd0>)
 8013fba:	4a7b      	ldr	r2, [pc, #492]	; (80141a8 <_strtod_l+0xbd8>)
 8013fbc:	4019      	ands	r1, r3
 8013fbe:	4291      	cmp	r1, r2
 8013fc0:	4680      	mov	r8, r0
 8013fc2:	d944      	bls.n	801404e <_strtod_l+0xa7e>
 8013fc4:	ee18 2a90 	vmov	r2, s17
 8013fc8:	4b78      	ldr	r3, [pc, #480]	; (80141ac <_strtod_l+0xbdc>)
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d104      	bne.n	8013fd8 <_strtod_l+0xa08>
 8013fce:	ee18 3a10 	vmov	r3, s16
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	f43f ad40 	beq.w	8013a58 <_strtod_l+0x488>
 8013fd8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80141ac <_strtod_l+0xbdc>
 8013fdc:	f04f 38ff 	mov.w	r8, #4294967295
 8013fe0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013fe2:	4620      	mov	r0, r4
 8013fe4:	f7fe fe6a 	bl	8012cbc <_Bfree>
 8013fe8:	9905      	ldr	r1, [sp, #20]
 8013fea:	4620      	mov	r0, r4
 8013fec:	f7fe fe66 	bl	8012cbc <_Bfree>
 8013ff0:	4659      	mov	r1, fp
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	f7fe fe62 	bl	8012cbc <_Bfree>
 8013ff8:	4629      	mov	r1, r5
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f7fe fe5e 	bl	8012cbc <_Bfree>
 8014000:	e609      	b.n	8013c16 <_strtod_l+0x646>
 8014002:	f1b8 0f01 	cmp.w	r8, #1
 8014006:	d103      	bne.n	8014010 <_strtod_l+0xa40>
 8014008:	f1b9 0f00 	cmp.w	r9, #0
 801400c:	f43f ad95 	beq.w	8013b3a <_strtod_l+0x56a>
 8014010:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014168 <_strtod_l+0xb98>
 8014014:	4f60      	ldr	r7, [pc, #384]	; (8014198 <_strtod_l+0xbc8>)
 8014016:	ed8d 7b06 	vstr	d7, [sp, #24]
 801401a:	2600      	movs	r6, #0
 801401c:	e7ae      	b.n	8013f7c <_strtod_l+0x9ac>
 801401e:	4f5f      	ldr	r7, [pc, #380]	; (801419c <_strtod_l+0xbcc>)
 8014020:	2600      	movs	r6, #0
 8014022:	e7a7      	b.n	8013f74 <_strtod_l+0x9a4>
 8014024:	4b5d      	ldr	r3, [pc, #372]	; (801419c <_strtod_l+0xbcc>)
 8014026:	4630      	mov	r0, r6
 8014028:	4639      	mov	r1, r7
 801402a:	2200      	movs	r2, #0
 801402c:	f7ec fb14 	bl	8000658 <__aeabi_dmul>
 8014030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014032:	4606      	mov	r6, r0
 8014034:	460f      	mov	r7, r1
 8014036:	2b00      	cmp	r3, #0
 8014038:	d09c      	beq.n	8013f74 <_strtod_l+0x9a4>
 801403a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801403e:	e79d      	b.n	8013f7c <_strtod_l+0x9ac>
 8014040:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014170 <_strtod_l+0xba0>
 8014044:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014048:	ec57 6b17 	vmov	r6, r7, d7
 801404c:	e796      	b.n	8013f7c <_strtod_l+0x9ac>
 801404e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014052:	9b04      	ldr	r3, [sp, #16]
 8014054:	46ca      	mov	sl, r9
 8014056:	2b00      	cmp	r3, #0
 8014058:	d1c2      	bne.n	8013fe0 <_strtod_l+0xa10>
 801405a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801405e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014060:	0d1b      	lsrs	r3, r3, #20
 8014062:	051b      	lsls	r3, r3, #20
 8014064:	429a      	cmp	r2, r3
 8014066:	d1bb      	bne.n	8013fe0 <_strtod_l+0xa10>
 8014068:	4630      	mov	r0, r6
 801406a:	4639      	mov	r1, r7
 801406c:	f7ec fe54 	bl	8000d18 <__aeabi_d2lz>
 8014070:	f7ec fac4 	bl	80005fc <__aeabi_l2d>
 8014074:	4602      	mov	r2, r0
 8014076:	460b      	mov	r3, r1
 8014078:	4630      	mov	r0, r6
 801407a:	4639      	mov	r1, r7
 801407c:	f7ec f934 	bl	80002e8 <__aeabi_dsub>
 8014080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014082:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014086:	ea43 0308 	orr.w	r3, r3, r8
 801408a:	4313      	orrs	r3, r2
 801408c:	4606      	mov	r6, r0
 801408e:	460f      	mov	r7, r1
 8014090:	d054      	beq.n	801413c <_strtod_l+0xb6c>
 8014092:	a339      	add	r3, pc, #228	; (adr r3, 8014178 <_strtod_l+0xba8>)
 8014094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014098:	f7ec fd50 	bl	8000b3c <__aeabi_dcmplt>
 801409c:	2800      	cmp	r0, #0
 801409e:	f47f ace5 	bne.w	8013a6c <_strtod_l+0x49c>
 80140a2:	a337      	add	r3, pc, #220	; (adr r3, 8014180 <_strtod_l+0xbb0>)
 80140a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a8:	4630      	mov	r0, r6
 80140aa:	4639      	mov	r1, r7
 80140ac:	f7ec fd64 	bl	8000b78 <__aeabi_dcmpgt>
 80140b0:	2800      	cmp	r0, #0
 80140b2:	d095      	beq.n	8013fe0 <_strtod_l+0xa10>
 80140b4:	e4da      	b.n	8013a6c <_strtod_l+0x49c>
 80140b6:	9b04      	ldr	r3, [sp, #16]
 80140b8:	b333      	cbz	r3, 8014108 <_strtod_l+0xb38>
 80140ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80140c0:	d822      	bhi.n	8014108 <_strtod_l+0xb38>
 80140c2:	a331      	add	r3, pc, #196	; (adr r3, 8014188 <_strtod_l+0xbb8>)
 80140c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c8:	4630      	mov	r0, r6
 80140ca:	4639      	mov	r1, r7
 80140cc:	f7ec fd40 	bl	8000b50 <__aeabi_dcmple>
 80140d0:	b1a0      	cbz	r0, 80140fc <_strtod_l+0xb2c>
 80140d2:	4639      	mov	r1, r7
 80140d4:	4630      	mov	r0, r6
 80140d6:	f7ec fd97 	bl	8000c08 <__aeabi_d2uiz>
 80140da:	2801      	cmp	r0, #1
 80140dc:	bf38      	it	cc
 80140de:	2001      	movcc	r0, #1
 80140e0:	f7ec fa40 	bl	8000564 <__aeabi_ui2d>
 80140e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140e6:	4606      	mov	r6, r0
 80140e8:	460f      	mov	r7, r1
 80140ea:	bb23      	cbnz	r3, 8014136 <_strtod_l+0xb66>
 80140ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80140f0:	9010      	str	r0, [sp, #64]	; 0x40
 80140f2:	9311      	str	r3, [sp, #68]	; 0x44
 80140f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80140f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80140fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014100:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014104:	1a9b      	subs	r3, r3, r2
 8014106:	930f      	str	r3, [sp, #60]	; 0x3c
 8014108:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801410c:	eeb0 0a48 	vmov.f32	s0, s16
 8014110:	eef0 0a68 	vmov.f32	s1, s17
 8014114:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014118:	f7ff f8fc 	bl	8013314 <__ulp>
 801411c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014120:	ec53 2b10 	vmov	r2, r3, d0
 8014124:	f7ec fa98 	bl	8000658 <__aeabi_dmul>
 8014128:	ec53 2b18 	vmov	r2, r3, d8
 801412c:	f7ec f8de 	bl	80002ec <__adddf3>
 8014130:	4680      	mov	r8, r0
 8014132:	4689      	mov	r9, r1
 8014134:	e78d      	b.n	8014052 <_strtod_l+0xa82>
 8014136:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801413a:	e7db      	b.n	80140f4 <_strtod_l+0xb24>
 801413c:	a314      	add	r3, pc, #80	; (adr r3, 8014190 <_strtod_l+0xbc0>)
 801413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014142:	f7ec fcfb 	bl	8000b3c <__aeabi_dcmplt>
 8014146:	e7b3      	b.n	80140b0 <_strtod_l+0xae0>
 8014148:	2300      	movs	r3, #0
 801414a:	930a      	str	r3, [sp, #40]	; 0x28
 801414c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801414e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014150:	6013      	str	r3, [r2, #0]
 8014152:	f7ff ba7c 	b.w	801364e <_strtod_l+0x7e>
 8014156:	2a65      	cmp	r2, #101	; 0x65
 8014158:	f43f ab75 	beq.w	8013846 <_strtod_l+0x276>
 801415c:	2a45      	cmp	r2, #69	; 0x45
 801415e:	f43f ab72 	beq.w	8013846 <_strtod_l+0x276>
 8014162:	2301      	movs	r3, #1
 8014164:	f7ff bbaa 	b.w	80138bc <_strtod_l+0x2ec>
 8014168:	00000000 	.word	0x00000000
 801416c:	bff00000 	.word	0xbff00000
 8014170:	00000000 	.word	0x00000000
 8014174:	3ff00000 	.word	0x3ff00000
 8014178:	94a03595 	.word	0x94a03595
 801417c:	3fdfffff 	.word	0x3fdfffff
 8014180:	35afe535 	.word	0x35afe535
 8014184:	3fe00000 	.word	0x3fe00000
 8014188:	ffc00000 	.word	0xffc00000
 801418c:	41dfffff 	.word	0x41dfffff
 8014190:	94a03595 	.word	0x94a03595
 8014194:	3fcfffff 	.word	0x3fcfffff
 8014198:	3ff00000 	.word	0x3ff00000
 801419c:	3fe00000 	.word	0x3fe00000
 80141a0:	7ff00000 	.word	0x7ff00000
 80141a4:	7fe00000 	.word	0x7fe00000
 80141a8:	7c9fffff 	.word	0x7c9fffff
 80141ac:	7fefffff 	.word	0x7fefffff

080141b0 <_strtod_r>:
 80141b0:	4b01      	ldr	r3, [pc, #4]	; (80141b8 <_strtod_r+0x8>)
 80141b2:	f7ff ba0d 	b.w	80135d0 <_strtod_l>
 80141b6:	bf00      	nop
 80141b8:	20000080 	.word	0x20000080

080141bc <_strtol_l.constprop.0>:
 80141bc:	2b01      	cmp	r3, #1
 80141be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141c2:	d001      	beq.n	80141c8 <_strtol_l.constprop.0+0xc>
 80141c4:	2b24      	cmp	r3, #36	; 0x24
 80141c6:	d906      	bls.n	80141d6 <_strtol_l.constprop.0+0x1a>
 80141c8:	f7fd fe28 	bl	8011e1c <__errno>
 80141cc:	2316      	movs	r3, #22
 80141ce:	6003      	str	r3, [r0, #0]
 80141d0:	2000      	movs	r0, #0
 80141d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80142bc <_strtol_l.constprop.0+0x100>
 80141da:	460d      	mov	r5, r1
 80141dc:	462e      	mov	r6, r5
 80141de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80141e6:	f017 0708 	ands.w	r7, r7, #8
 80141ea:	d1f7      	bne.n	80141dc <_strtol_l.constprop.0+0x20>
 80141ec:	2c2d      	cmp	r4, #45	; 0x2d
 80141ee:	d132      	bne.n	8014256 <_strtol_l.constprop.0+0x9a>
 80141f0:	782c      	ldrb	r4, [r5, #0]
 80141f2:	2701      	movs	r7, #1
 80141f4:	1cb5      	adds	r5, r6, #2
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d05b      	beq.n	80142b2 <_strtol_l.constprop.0+0xf6>
 80141fa:	2b10      	cmp	r3, #16
 80141fc:	d109      	bne.n	8014212 <_strtol_l.constprop.0+0x56>
 80141fe:	2c30      	cmp	r4, #48	; 0x30
 8014200:	d107      	bne.n	8014212 <_strtol_l.constprop.0+0x56>
 8014202:	782c      	ldrb	r4, [r5, #0]
 8014204:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014208:	2c58      	cmp	r4, #88	; 0x58
 801420a:	d14d      	bne.n	80142a8 <_strtol_l.constprop.0+0xec>
 801420c:	786c      	ldrb	r4, [r5, #1]
 801420e:	2310      	movs	r3, #16
 8014210:	3502      	adds	r5, #2
 8014212:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014216:	f108 38ff 	add.w	r8, r8, #4294967295
 801421a:	f04f 0e00 	mov.w	lr, #0
 801421e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014222:	4676      	mov	r6, lr
 8014224:	fb03 8a19 	mls	sl, r3, r9, r8
 8014228:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801422c:	f1bc 0f09 	cmp.w	ip, #9
 8014230:	d816      	bhi.n	8014260 <_strtol_l.constprop.0+0xa4>
 8014232:	4664      	mov	r4, ip
 8014234:	42a3      	cmp	r3, r4
 8014236:	dd24      	ble.n	8014282 <_strtol_l.constprop.0+0xc6>
 8014238:	f1be 3fff 	cmp.w	lr, #4294967295
 801423c:	d008      	beq.n	8014250 <_strtol_l.constprop.0+0x94>
 801423e:	45b1      	cmp	r9, r6
 8014240:	d31c      	bcc.n	801427c <_strtol_l.constprop.0+0xc0>
 8014242:	d101      	bne.n	8014248 <_strtol_l.constprop.0+0x8c>
 8014244:	45a2      	cmp	sl, r4
 8014246:	db19      	blt.n	801427c <_strtol_l.constprop.0+0xc0>
 8014248:	fb06 4603 	mla	r6, r6, r3, r4
 801424c:	f04f 0e01 	mov.w	lr, #1
 8014250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014254:	e7e8      	b.n	8014228 <_strtol_l.constprop.0+0x6c>
 8014256:	2c2b      	cmp	r4, #43	; 0x2b
 8014258:	bf04      	itt	eq
 801425a:	782c      	ldrbeq	r4, [r5, #0]
 801425c:	1cb5      	addeq	r5, r6, #2
 801425e:	e7ca      	b.n	80141f6 <_strtol_l.constprop.0+0x3a>
 8014260:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014264:	f1bc 0f19 	cmp.w	ip, #25
 8014268:	d801      	bhi.n	801426e <_strtol_l.constprop.0+0xb2>
 801426a:	3c37      	subs	r4, #55	; 0x37
 801426c:	e7e2      	b.n	8014234 <_strtol_l.constprop.0+0x78>
 801426e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014272:	f1bc 0f19 	cmp.w	ip, #25
 8014276:	d804      	bhi.n	8014282 <_strtol_l.constprop.0+0xc6>
 8014278:	3c57      	subs	r4, #87	; 0x57
 801427a:	e7db      	b.n	8014234 <_strtol_l.constprop.0+0x78>
 801427c:	f04f 3eff 	mov.w	lr, #4294967295
 8014280:	e7e6      	b.n	8014250 <_strtol_l.constprop.0+0x94>
 8014282:	f1be 3fff 	cmp.w	lr, #4294967295
 8014286:	d105      	bne.n	8014294 <_strtol_l.constprop.0+0xd8>
 8014288:	2322      	movs	r3, #34	; 0x22
 801428a:	6003      	str	r3, [r0, #0]
 801428c:	4646      	mov	r6, r8
 801428e:	b942      	cbnz	r2, 80142a2 <_strtol_l.constprop.0+0xe6>
 8014290:	4630      	mov	r0, r6
 8014292:	e79e      	b.n	80141d2 <_strtol_l.constprop.0+0x16>
 8014294:	b107      	cbz	r7, 8014298 <_strtol_l.constprop.0+0xdc>
 8014296:	4276      	negs	r6, r6
 8014298:	2a00      	cmp	r2, #0
 801429a:	d0f9      	beq.n	8014290 <_strtol_l.constprop.0+0xd4>
 801429c:	f1be 0f00 	cmp.w	lr, #0
 80142a0:	d000      	beq.n	80142a4 <_strtol_l.constprop.0+0xe8>
 80142a2:	1e69      	subs	r1, r5, #1
 80142a4:	6011      	str	r1, [r2, #0]
 80142a6:	e7f3      	b.n	8014290 <_strtol_l.constprop.0+0xd4>
 80142a8:	2430      	movs	r4, #48	; 0x30
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d1b1      	bne.n	8014212 <_strtol_l.constprop.0+0x56>
 80142ae:	2308      	movs	r3, #8
 80142b0:	e7af      	b.n	8014212 <_strtol_l.constprop.0+0x56>
 80142b2:	2c30      	cmp	r4, #48	; 0x30
 80142b4:	d0a5      	beq.n	8014202 <_strtol_l.constprop.0+0x46>
 80142b6:	230a      	movs	r3, #10
 80142b8:	e7ab      	b.n	8014212 <_strtol_l.constprop.0+0x56>
 80142ba:	bf00      	nop
 80142bc:	08018611 	.word	0x08018611

080142c0 <_strtol_r>:
 80142c0:	f7ff bf7c 	b.w	80141bc <_strtol_l.constprop.0>

080142c4 <__ssputs_r>:
 80142c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142c8:	688e      	ldr	r6, [r1, #8]
 80142ca:	461f      	mov	r7, r3
 80142cc:	42be      	cmp	r6, r7
 80142ce:	680b      	ldr	r3, [r1, #0]
 80142d0:	4682      	mov	sl, r0
 80142d2:	460c      	mov	r4, r1
 80142d4:	4690      	mov	r8, r2
 80142d6:	d82c      	bhi.n	8014332 <__ssputs_r+0x6e>
 80142d8:	898a      	ldrh	r2, [r1, #12]
 80142da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80142de:	d026      	beq.n	801432e <__ssputs_r+0x6a>
 80142e0:	6965      	ldr	r5, [r4, #20]
 80142e2:	6909      	ldr	r1, [r1, #16]
 80142e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142e8:	eba3 0901 	sub.w	r9, r3, r1
 80142ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80142f0:	1c7b      	adds	r3, r7, #1
 80142f2:	444b      	add	r3, r9
 80142f4:	106d      	asrs	r5, r5, #1
 80142f6:	429d      	cmp	r5, r3
 80142f8:	bf38      	it	cc
 80142fa:	461d      	movcc	r5, r3
 80142fc:	0553      	lsls	r3, r2, #21
 80142fe:	d527      	bpl.n	8014350 <__ssputs_r+0x8c>
 8014300:	4629      	mov	r1, r5
 8014302:	f7fc fd01 	bl	8010d08 <_malloc_r>
 8014306:	4606      	mov	r6, r0
 8014308:	b360      	cbz	r0, 8014364 <__ssputs_r+0xa0>
 801430a:	6921      	ldr	r1, [r4, #16]
 801430c:	464a      	mov	r2, r9
 801430e:	f7fd fdba 	bl	8011e86 <memcpy>
 8014312:	89a3      	ldrh	r3, [r4, #12]
 8014314:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801431c:	81a3      	strh	r3, [r4, #12]
 801431e:	6126      	str	r6, [r4, #16]
 8014320:	6165      	str	r5, [r4, #20]
 8014322:	444e      	add	r6, r9
 8014324:	eba5 0509 	sub.w	r5, r5, r9
 8014328:	6026      	str	r6, [r4, #0]
 801432a:	60a5      	str	r5, [r4, #8]
 801432c:	463e      	mov	r6, r7
 801432e:	42be      	cmp	r6, r7
 8014330:	d900      	bls.n	8014334 <__ssputs_r+0x70>
 8014332:	463e      	mov	r6, r7
 8014334:	6820      	ldr	r0, [r4, #0]
 8014336:	4632      	mov	r2, r6
 8014338:	4641      	mov	r1, r8
 801433a:	f000 fba3 	bl	8014a84 <memmove>
 801433e:	68a3      	ldr	r3, [r4, #8]
 8014340:	1b9b      	subs	r3, r3, r6
 8014342:	60a3      	str	r3, [r4, #8]
 8014344:	6823      	ldr	r3, [r4, #0]
 8014346:	4433      	add	r3, r6
 8014348:	6023      	str	r3, [r4, #0]
 801434a:	2000      	movs	r0, #0
 801434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014350:	462a      	mov	r2, r5
 8014352:	f000 ff6a 	bl	801522a <_realloc_r>
 8014356:	4606      	mov	r6, r0
 8014358:	2800      	cmp	r0, #0
 801435a:	d1e0      	bne.n	801431e <__ssputs_r+0x5a>
 801435c:	6921      	ldr	r1, [r4, #16]
 801435e:	4650      	mov	r0, sl
 8014360:	f7fe fc20 	bl	8012ba4 <_free_r>
 8014364:	230c      	movs	r3, #12
 8014366:	f8ca 3000 	str.w	r3, [sl]
 801436a:	89a3      	ldrh	r3, [r4, #12]
 801436c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014370:	81a3      	strh	r3, [r4, #12]
 8014372:	f04f 30ff 	mov.w	r0, #4294967295
 8014376:	e7e9      	b.n	801434c <__ssputs_r+0x88>

08014378 <_svfiprintf_r>:
 8014378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801437c:	4698      	mov	r8, r3
 801437e:	898b      	ldrh	r3, [r1, #12]
 8014380:	061b      	lsls	r3, r3, #24
 8014382:	b09d      	sub	sp, #116	; 0x74
 8014384:	4607      	mov	r7, r0
 8014386:	460d      	mov	r5, r1
 8014388:	4614      	mov	r4, r2
 801438a:	d50e      	bpl.n	80143aa <_svfiprintf_r+0x32>
 801438c:	690b      	ldr	r3, [r1, #16]
 801438e:	b963      	cbnz	r3, 80143aa <_svfiprintf_r+0x32>
 8014390:	2140      	movs	r1, #64	; 0x40
 8014392:	f7fc fcb9 	bl	8010d08 <_malloc_r>
 8014396:	6028      	str	r0, [r5, #0]
 8014398:	6128      	str	r0, [r5, #16]
 801439a:	b920      	cbnz	r0, 80143a6 <_svfiprintf_r+0x2e>
 801439c:	230c      	movs	r3, #12
 801439e:	603b      	str	r3, [r7, #0]
 80143a0:	f04f 30ff 	mov.w	r0, #4294967295
 80143a4:	e0d0      	b.n	8014548 <_svfiprintf_r+0x1d0>
 80143a6:	2340      	movs	r3, #64	; 0x40
 80143a8:	616b      	str	r3, [r5, #20]
 80143aa:	2300      	movs	r3, #0
 80143ac:	9309      	str	r3, [sp, #36]	; 0x24
 80143ae:	2320      	movs	r3, #32
 80143b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80143b8:	2330      	movs	r3, #48	; 0x30
 80143ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014560 <_svfiprintf_r+0x1e8>
 80143be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143c2:	f04f 0901 	mov.w	r9, #1
 80143c6:	4623      	mov	r3, r4
 80143c8:	469a      	mov	sl, r3
 80143ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143ce:	b10a      	cbz	r2, 80143d4 <_svfiprintf_r+0x5c>
 80143d0:	2a25      	cmp	r2, #37	; 0x25
 80143d2:	d1f9      	bne.n	80143c8 <_svfiprintf_r+0x50>
 80143d4:	ebba 0b04 	subs.w	fp, sl, r4
 80143d8:	d00b      	beq.n	80143f2 <_svfiprintf_r+0x7a>
 80143da:	465b      	mov	r3, fp
 80143dc:	4622      	mov	r2, r4
 80143de:	4629      	mov	r1, r5
 80143e0:	4638      	mov	r0, r7
 80143e2:	f7ff ff6f 	bl	80142c4 <__ssputs_r>
 80143e6:	3001      	adds	r0, #1
 80143e8:	f000 80a9 	beq.w	801453e <_svfiprintf_r+0x1c6>
 80143ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143ee:	445a      	add	r2, fp
 80143f0:	9209      	str	r2, [sp, #36]	; 0x24
 80143f2:	f89a 3000 	ldrb.w	r3, [sl]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	f000 80a1 	beq.w	801453e <_svfiprintf_r+0x1c6>
 80143fc:	2300      	movs	r3, #0
 80143fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014406:	f10a 0a01 	add.w	sl, sl, #1
 801440a:	9304      	str	r3, [sp, #16]
 801440c:	9307      	str	r3, [sp, #28]
 801440e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014412:	931a      	str	r3, [sp, #104]	; 0x68
 8014414:	4654      	mov	r4, sl
 8014416:	2205      	movs	r2, #5
 8014418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801441c:	4850      	ldr	r0, [pc, #320]	; (8014560 <_svfiprintf_r+0x1e8>)
 801441e:	f7eb ff07 	bl	8000230 <memchr>
 8014422:	9a04      	ldr	r2, [sp, #16]
 8014424:	b9d8      	cbnz	r0, 801445e <_svfiprintf_r+0xe6>
 8014426:	06d0      	lsls	r0, r2, #27
 8014428:	bf44      	itt	mi
 801442a:	2320      	movmi	r3, #32
 801442c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014430:	0711      	lsls	r1, r2, #28
 8014432:	bf44      	itt	mi
 8014434:	232b      	movmi	r3, #43	; 0x2b
 8014436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801443a:	f89a 3000 	ldrb.w	r3, [sl]
 801443e:	2b2a      	cmp	r3, #42	; 0x2a
 8014440:	d015      	beq.n	801446e <_svfiprintf_r+0xf6>
 8014442:	9a07      	ldr	r2, [sp, #28]
 8014444:	4654      	mov	r4, sl
 8014446:	2000      	movs	r0, #0
 8014448:	f04f 0c0a 	mov.w	ip, #10
 801444c:	4621      	mov	r1, r4
 801444e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014452:	3b30      	subs	r3, #48	; 0x30
 8014454:	2b09      	cmp	r3, #9
 8014456:	d94d      	bls.n	80144f4 <_svfiprintf_r+0x17c>
 8014458:	b1b0      	cbz	r0, 8014488 <_svfiprintf_r+0x110>
 801445a:	9207      	str	r2, [sp, #28]
 801445c:	e014      	b.n	8014488 <_svfiprintf_r+0x110>
 801445e:	eba0 0308 	sub.w	r3, r0, r8
 8014462:	fa09 f303 	lsl.w	r3, r9, r3
 8014466:	4313      	orrs	r3, r2
 8014468:	9304      	str	r3, [sp, #16]
 801446a:	46a2      	mov	sl, r4
 801446c:	e7d2      	b.n	8014414 <_svfiprintf_r+0x9c>
 801446e:	9b03      	ldr	r3, [sp, #12]
 8014470:	1d19      	adds	r1, r3, #4
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	9103      	str	r1, [sp, #12]
 8014476:	2b00      	cmp	r3, #0
 8014478:	bfbb      	ittet	lt
 801447a:	425b      	neglt	r3, r3
 801447c:	f042 0202 	orrlt.w	r2, r2, #2
 8014480:	9307      	strge	r3, [sp, #28]
 8014482:	9307      	strlt	r3, [sp, #28]
 8014484:	bfb8      	it	lt
 8014486:	9204      	strlt	r2, [sp, #16]
 8014488:	7823      	ldrb	r3, [r4, #0]
 801448a:	2b2e      	cmp	r3, #46	; 0x2e
 801448c:	d10c      	bne.n	80144a8 <_svfiprintf_r+0x130>
 801448e:	7863      	ldrb	r3, [r4, #1]
 8014490:	2b2a      	cmp	r3, #42	; 0x2a
 8014492:	d134      	bne.n	80144fe <_svfiprintf_r+0x186>
 8014494:	9b03      	ldr	r3, [sp, #12]
 8014496:	1d1a      	adds	r2, r3, #4
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	9203      	str	r2, [sp, #12]
 801449c:	2b00      	cmp	r3, #0
 801449e:	bfb8      	it	lt
 80144a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80144a4:	3402      	adds	r4, #2
 80144a6:	9305      	str	r3, [sp, #20]
 80144a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014570 <_svfiprintf_r+0x1f8>
 80144ac:	7821      	ldrb	r1, [r4, #0]
 80144ae:	2203      	movs	r2, #3
 80144b0:	4650      	mov	r0, sl
 80144b2:	f7eb febd 	bl	8000230 <memchr>
 80144b6:	b138      	cbz	r0, 80144c8 <_svfiprintf_r+0x150>
 80144b8:	9b04      	ldr	r3, [sp, #16]
 80144ba:	eba0 000a 	sub.w	r0, r0, sl
 80144be:	2240      	movs	r2, #64	; 0x40
 80144c0:	4082      	lsls	r2, r0
 80144c2:	4313      	orrs	r3, r2
 80144c4:	3401      	adds	r4, #1
 80144c6:	9304      	str	r3, [sp, #16]
 80144c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144cc:	4825      	ldr	r0, [pc, #148]	; (8014564 <_svfiprintf_r+0x1ec>)
 80144ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144d2:	2206      	movs	r2, #6
 80144d4:	f7eb feac 	bl	8000230 <memchr>
 80144d8:	2800      	cmp	r0, #0
 80144da:	d038      	beq.n	801454e <_svfiprintf_r+0x1d6>
 80144dc:	4b22      	ldr	r3, [pc, #136]	; (8014568 <_svfiprintf_r+0x1f0>)
 80144de:	bb1b      	cbnz	r3, 8014528 <_svfiprintf_r+0x1b0>
 80144e0:	9b03      	ldr	r3, [sp, #12]
 80144e2:	3307      	adds	r3, #7
 80144e4:	f023 0307 	bic.w	r3, r3, #7
 80144e8:	3308      	adds	r3, #8
 80144ea:	9303      	str	r3, [sp, #12]
 80144ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144ee:	4433      	add	r3, r6
 80144f0:	9309      	str	r3, [sp, #36]	; 0x24
 80144f2:	e768      	b.n	80143c6 <_svfiprintf_r+0x4e>
 80144f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80144f8:	460c      	mov	r4, r1
 80144fa:	2001      	movs	r0, #1
 80144fc:	e7a6      	b.n	801444c <_svfiprintf_r+0xd4>
 80144fe:	2300      	movs	r3, #0
 8014500:	3401      	adds	r4, #1
 8014502:	9305      	str	r3, [sp, #20]
 8014504:	4619      	mov	r1, r3
 8014506:	f04f 0c0a 	mov.w	ip, #10
 801450a:	4620      	mov	r0, r4
 801450c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014510:	3a30      	subs	r2, #48	; 0x30
 8014512:	2a09      	cmp	r2, #9
 8014514:	d903      	bls.n	801451e <_svfiprintf_r+0x1a6>
 8014516:	2b00      	cmp	r3, #0
 8014518:	d0c6      	beq.n	80144a8 <_svfiprintf_r+0x130>
 801451a:	9105      	str	r1, [sp, #20]
 801451c:	e7c4      	b.n	80144a8 <_svfiprintf_r+0x130>
 801451e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014522:	4604      	mov	r4, r0
 8014524:	2301      	movs	r3, #1
 8014526:	e7f0      	b.n	801450a <_svfiprintf_r+0x192>
 8014528:	ab03      	add	r3, sp, #12
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	462a      	mov	r2, r5
 801452e:	4b0f      	ldr	r3, [pc, #60]	; (801456c <_svfiprintf_r+0x1f4>)
 8014530:	a904      	add	r1, sp, #16
 8014532:	4638      	mov	r0, r7
 8014534:	f7fc fd14 	bl	8010f60 <_printf_float>
 8014538:	1c42      	adds	r2, r0, #1
 801453a:	4606      	mov	r6, r0
 801453c:	d1d6      	bne.n	80144ec <_svfiprintf_r+0x174>
 801453e:	89ab      	ldrh	r3, [r5, #12]
 8014540:	065b      	lsls	r3, r3, #25
 8014542:	f53f af2d 	bmi.w	80143a0 <_svfiprintf_r+0x28>
 8014546:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014548:	b01d      	add	sp, #116	; 0x74
 801454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801454e:	ab03      	add	r3, sp, #12
 8014550:	9300      	str	r3, [sp, #0]
 8014552:	462a      	mov	r2, r5
 8014554:	4b05      	ldr	r3, [pc, #20]	; (801456c <_svfiprintf_r+0x1f4>)
 8014556:	a904      	add	r1, sp, #16
 8014558:	4638      	mov	r0, r7
 801455a:	f7fc ffa5 	bl	80114a8 <_printf_i>
 801455e:	e7eb      	b.n	8014538 <_svfiprintf_r+0x1c0>
 8014560:	08018711 	.word	0x08018711
 8014564:	0801871b 	.word	0x0801871b
 8014568:	08010f61 	.word	0x08010f61
 801456c:	080142c5 	.word	0x080142c5
 8014570:	08018717 	.word	0x08018717

08014574 <__sfputc_r>:
 8014574:	6893      	ldr	r3, [r2, #8]
 8014576:	3b01      	subs	r3, #1
 8014578:	2b00      	cmp	r3, #0
 801457a:	b410      	push	{r4}
 801457c:	6093      	str	r3, [r2, #8]
 801457e:	da08      	bge.n	8014592 <__sfputc_r+0x1e>
 8014580:	6994      	ldr	r4, [r2, #24]
 8014582:	42a3      	cmp	r3, r4
 8014584:	db01      	blt.n	801458a <__sfputc_r+0x16>
 8014586:	290a      	cmp	r1, #10
 8014588:	d103      	bne.n	8014592 <__sfputc_r+0x1e>
 801458a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801458e:	f000 b9e3 	b.w	8014958 <__swbuf_r>
 8014592:	6813      	ldr	r3, [r2, #0]
 8014594:	1c58      	adds	r0, r3, #1
 8014596:	6010      	str	r0, [r2, #0]
 8014598:	7019      	strb	r1, [r3, #0]
 801459a:	4608      	mov	r0, r1
 801459c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145a0:	4770      	bx	lr

080145a2 <__sfputs_r>:
 80145a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145a4:	4606      	mov	r6, r0
 80145a6:	460f      	mov	r7, r1
 80145a8:	4614      	mov	r4, r2
 80145aa:	18d5      	adds	r5, r2, r3
 80145ac:	42ac      	cmp	r4, r5
 80145ae:	d101      	bne.n	80145b4 <__sfputs_r+0x12>
 80145b0:	2000      	movs	r0, #0
 80145b2:	e007      	b.n	80145c4 <__sfputs_r+0x22>
 80145b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145b8:	463a      	mov	r2, r7
 80145ba:	4630      	mov	r0, r6
 80145bc:	f7ff ffda 	bl	8014574 <__sfputc_r>
 80145c0:	1c43      	adds	r3, r0, #1
 80145c2:	d1f3      	bne.n	80145ac <__sfputs_r+0xa>
 80145c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080145c8 <_vfiprintf_r>:
 80145c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145cc:	460d      	mov	r5, r1
 80145ce:	b09d      	sub	sp, #116	; 0x74
 80145d0:	4614      	mov	r4, r2
 80145d2:	4698      	mov	r8, r3
 80145d4:	4606      	mov	r6, r0
 80145d6:	b118      	cbz	r0, 80145e0 <_vfiprintf_r+0x18>
 80145d8:	6a03      	ldr	r3, [r0, #32]
 80145da:	b90b      	cbnz	r3, 80145e0 <_vfiprintf_r+0x18>
 80145dc:	f7fd fb22 	bl	8011c24 <__sinit>
 80145e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145e2:	07d9      	lsls	r1, r3, #31
 80145e4:	d405      	bmi.n	80145f2 <_vfiprintf_r+0x2a>
 80145e6:	89ab      	ldrh	r3, [r5, #12]
 80145e8:	059a      	lsls	r2, r3, #22
 80145ea:	d402      	bmi.n	80145f2 <_vfiprintf_r+0x2a>
 80145ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145ee:	f7fd fc40 	bl	8011e72 <__retarget_lock_acquire_recursive>
 80145f2:	89ab      	ldrh	r3, [r5, #12]
 80145f4:	071b      	lsls	r3, r3, #28
 80145f6:	d501      	bpl.n	80145fc <_vfiprintf_r+0x34>
 80145f8:	692b      	ldr	r3, [r5, #16]
 80145fa:	b99b      	cbnz	r3, 8014624 <_vfiprintf_r+0x5c>
 80145fc:	4629      	mov	r1, r5
 80145fe:	4630      	mov	r0, r6
 8014600:	f000 f9e8 	bl	80149d4 <__swsetup_r>
 8014604:	b170      	cbz	r0, 8014624 <_vfiprintf_r+0x5c>
 8014606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014608:	07dc      	lsls	r4, r3, #31
 801460a:	d504      	bpl.n	8014616 <_vfiprintf_r+0x4e>
 801460c:	f04f 30ff 	mov.w	r0, #4294967295
 8014610:	b01d      	add	sp, #116	; 0x74
 8014612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014616:	89ab      	ldrh	r3, [r5, #12]
 8014618:	0598      	lsls	r0, r3, #22
 801461a:	d4f7      	bmi.n	801460c <_vfiprintf_r+0x44>
 801461c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801461e:	f7fd fc29 	bl	8011e74 <__retarget_lock_release_recursive>
 8014622:	e7f3      	b.n	801460c <_vfiprintf_r+0x44>
 8014624:	2300      	movs	r3, #0
 8014626:	9309      	str	r3, [sp, #36]	; 0x24
 8014628:	2320      	movs	r3, #32
 801462a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801462e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014632:	2330      	movs	r3, #48	; 0x30
 8014634:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80147e8 <_vfiprintf_r+0x220>
 8014638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801463c:	f04f 0901 	mov.w	r9, #1
 8014640:	4623      	mov	r3, r4
 8014642:	469a      	mov	sl, r3
 8014644:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014648:	b10a      	cbz	r2, 801464e <_vfiprintf_r+0x86>
 801464a:	2a25      	cmp	r2, #37	; 0x25
 801464c:	d1f9      	bne.n	8014642 <_vfiprintf_r+0x7a>
 801464e:	ebba 0b04 	subs.w	fp, sl, r4
 8014652:	d00b      	beq.n	801466c <_vfiprintf_r+0xa4>
 8014654:	465b      	mov	r3, fp
 8014656:	4622      	mov	r2, r4
 8014658:	4629      	mov	r1, r5
 801465a:	4630      	mov	r0, r6
 801465c:	f7ff ffa1 	bl	80145a2 <__sfputs_r>
 8014660:	3001      	adds	r0, #1
 8014662:	f000 80a9 	beq.w	80147b8 <_vfiprintf_r+0x1f0>
 8014666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014668:	445a      	add	r2, fp
 801466a:	9209      	str	r2, [sp, #36]	; 0x24
 801466c:	f89a 3000 	ldrb.w	r3, [sl]
 8014670:	2b00      	cmp	r3, #0
 8014672:	f000 80a1 	beq.w	80147b8 <_vfiprintf_r+0x1f0>
 8014676:	2300      	movs	r3, #0
 8014678:	f04f 32ff 	mov.w	r2, #4294967295
 801467c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014680:	f10a 0a01 	add.w	sl, sl, #1
 8014684:	9304      	str	r3, [sp, #16]
 8014686:	9307      	str	r3, [sp, #28]
 8014688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801468c:	931a      	str	r3, [sp, #104]	; 0x68
 801468e:	4654      	mov	r4, sl
 8014690:	2205      	movs	r2, #5
 8014692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014696:	4854      	ldr	r0, [pc, #336]	; (80147e8 <_vfiprintf_r+0x220>)
 8014698:	f7eb fdca 	bl	8000230 <memchr>
 801469c:	9a04      	ldr	r2, [sp, #16]
 801469e:	b9d8      	cbnz	r0, 80146d8 <_vfiprintf_r+0x110>
 80146a0:	06d1      	lsls	r1, r2, #27
 80146a2:	bf44      	itt	mi
 80146a4:	2320      	movmi	r3, #32
 80146a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146aa:	0713      	lsls	r3, r2, #28
 80146ac:	bf44      	itt	mi
 80146ae:	232b      	movmi	r3, #43	; 0x2b
 80146b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146b4:	f89a 3000 	ldrb.w	r3, [sl]
 80146b8:	2b2a      	cmp	r3, #42	; 0x2a
 80146ba:	d015      	beq.n	80146e8 <_vfiprintf_r+0x120>
 80146bc:	9a07      	ldr	r2, [sp, #28]
 80146be:	4654      	mov	r4, sl
 80146c0:	2000      	movs	r0, #0
 80146c2:	f04f 0c0a 	mov.w	ip, #10
 80146c6:	4621      	mov	r1, r4
 80146c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146cc:	3b30      	subs	r3, #48	; 0x30
 80146ce:	2b09      	cmp	r3, #9
 80146d0:	d94d      	bls.n	801476e <_vfiprintf_r+0x1a6>
 80146d2:	b1b0      	cbz	r0, 8014702 <_vfiprintf_r+0x13a>
 80146d4:	9207      	str	r2, [sp, #28]
 80146d6:	e014      	b.n	8014702 <_vfiprintf_r+0x13a>
 80146d8:	eba0 0308 	sub.w	r3, r0, r8
 80146dc:	fa09 f303 	lsl.w	r3, r9, r3
 80146e0:	4313      	orrs	r3, r2
 80146e2:	9304      	str	r3, [sp, #16]
 80146e4:	46a2      	mov	sl, r4
 80146e6:	e7d2      	b.n	801468e <_vfiprintf_r+0xc6>
 80146e8:	9b03      	ldr	r3, [sp, #12]
 80146ea:	1d19      	adds	r1, r3, #4
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	9103      	str	r1, [sp, #12]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	bfbb      	ittet	lt
 80146f4:	425b      	neglt	r3, r3
 80146f6:	f042 0202 	orrlt.w	r2, r2, #2
 80146fa:	9307      	strge	r3, [sp, #28]
 80146fc:	9307      	strlt	r3, [sp, #28]
 80146fe:	bfb8      	it	lt
 8014700:	9204      	strlt	r2, [sp, #16]
 8014702:	7823      	ldrb	r3, [r4, #0]
 8014704:	2b2e      	cmp	r3, #46	; 0x2e
 8014706:	d10c      	bne.n	8014722 <_vfiprintf_r+0x15a>
 8014708:	7863      	ldrb	r3, [r4, #1]
 801470a:	2b2a      	cmp	r3, #42	; 0x2a
 801470c:	d134      	bne.n	8014778 <_vfiprintf_r+0x1b0>
 801470e:	9b03      	ldr	r3, [sp, #12]
 8014710:	1d1a      	adds	r2, r3, #4
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	9203      	str	r2, [sp, #12]
 8014716:	2b00      	cmp	r3, #0
 8014718:	bfb8      	it	lt
 801471a:	f04f 33ff 	movlt.w	r3, #4294967295
 801471e:	3402      	adds	r4, #2
 8014720:	9305      	str	r3, [sp, #20]
 8014722:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80147f8 <_vfiprintf_r+0x230>
 8014726:	7821      	ldrb	r1, [r4, #0]
 8014728:	2203      	movs	r2, #3
 801472a:	4650      	mov	r0, sl
 801472c:	f7eb fd80 	bl	8000230 <memchr>
 8014730:	b138      	cbz	r0, 8014742 <_vfiprintf_r+0x17a>
 8014732:	9b04      	ldr	r3, [sp, #16]
 8014734:	eba0 000a 	sub.w	r0, r0, sl
 8014738:	2240      	movs	r2, #64	; 0x40
 801473a:	4082      	lsls	r2, r0
 801473c:	4313      	orrs	r3, r2
 801473e:	3401      	adds	r4, #1
 8014740:	9304      	str	r3, [sp, #16]
 8014742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014746:	4829      	ldr	r0, [pc, #164]	; (80147ec <_vfiprintf_r+0x224>)
 8014748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801474c:	2206      	movs	r2, #6
 801474e:	f7eb fd6f 	bl	8000230 <memchr>
 8014752:	2800      	cmp	r0, #0
 8014754:	d03f      	beq.n	80147d6 <_vfiprintf_r+0x20e>
 8014756:	4b26      	ldr	r3, [pc, #152]	; (80147f0 <_vfiprintf_r+0x228>)
 8014758:	bb1b      	cbnz	r3, 80147a2 <_vfiprintf_r+0x1da>
 801475a:	9b03      	ldr	r3, [sp, #12]
 801475c:	3307      	adds	r3, #7
 801475e:	f023 0307 	bic.w	r3, r3, #7
 8014762:	3308      	adds	r3, #8
 8014764:	9303      	str	r3, [sp, #12]
 8014766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014768:	443b      	add	r3, r7
 801476a:	9309      	str	r3, [sp, #36]	; 0x24
 801476c:	e768      	b.n	8014640 <_vfiprintf_r+0x78>
 801476e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014772:	460c      	mov	r4, r1
 8014774:	2001      	movs	r0, #1
 8014776:	e7a6      	b.n	80146c6 <_vfiprintf_r+0xfe>
 8014778:	2300      	movs	r3, #0
 801477a:	3401      	adds	r4, #1
 801477c:	9305      	str	r3, [sp, #20]
 801477e:	4619      	mov	r1, r3
 8014780:	f04f 0c0a 	mov.w	ip, #10
 8014784:	4620      	mov	r0, r4
 8014786:	f810 2b01 	ldrb.w	r2, [r0], #1
 801478a:	3a30      	subs	r2, #48	; 0x30
 801478c:	2a09      	cmp	r2, #9
 801478e:	d903      	bls.n	8014798 <_vfiprintf_r+0x1d0>
 8014790:	2b00      	cmp	r3, #0
 8014792:	d0c6      	beq.n	8014722 <_vfiprintf_r+0x15a>
 8014794:	9105      	str	r1, [sp, #20]
 8014796:	e7c4      	b.n	8014722 <_vfiprintf_r+0x15a>
 8014798:	fb0c 2101 	mla	r1, ip, r1, r2
 801479c:	4604      	mov	r4, r0
 801479e:	2301      	movs	r3, #1
 80147a0:	e7f0      	b.n	8014784 <_vfiprintf_r+0x1bc>
 80147a2:	ab03      	add	r3, sp, #12
 80147a4:	9300      	str	r3, [sp, #0]
 80147a6:	462a      	mov	r2, r5
 80147a8:	4b12      	ldr	r3, [pc, #72]	; (80147f4 <_vfiprintf_r+0x22c>)
 80147aa:	a904      	add	r1, sp, #16
 80147ac:	4630      	mov	r0, r6
 80147ae:	f7fc fbd7 	bl	8010f60 <_printf_float>
 80147b2:	4607      	mov	r7, r0
 80147b4:	1c78      	adds	r0, r7, #1
 80147b6:	d1d6      	bne.n	8014766 <_vfiprintf_r+0x19e>
 80147b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147ba:	07d9      	lsls	r1, r3, #31
 80147bc:	d405      	bmi.n	80147ca <_vfiprintf_r+0x202>
 80147be:	89ab      	ldrh	r3, [r5, #12]
 80147c0:	059a      	lsls	r2, r3, #22
 80147c2:	d402      	bmi.n	80147ca <_vfiprintf_r+0x202>
 80147c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147c6:	f7fd fb55 	bl	8011e74 <__retarget_lock_release_recursive>
 80147ca:	89ab      	ldrh	r3, [r5, #12]
 80147cc:	065b      	lsls	r3, r3, #25
 80147ce:	f53f af1d 	bmi.w	801460c <_vfiprintf_r+0x44>
 80147d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147d4:	e71c      	b.n	8014610 <_vfiprintf_r+0x48>
 80147d6:	ab03      	add	r3, sp, #12
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	462a      	mov	r2, r5
 80147dc:	4b05      	ldr	r3, [pc, #20]	; (80147f4 <_vfiprintf_r+0x22c>)
 80147de:	a904      	add	r1, sp, #16
 80147e0:	4630      	mov	r0, r6
 80147e2:	f7fc fe61 	bl	80114a8 <_printf_i>
 80147e6:	e7e4      	b.n	80147b2 <_vfiprintf_r+0x1ea>
 80147e8:	08018711 	.word	0x08018711
 80147ec:	0801871b 	.word	0x0801871b
 80147f0:	08010f61 	.word	0x08010f61
 80147f4:	080145a3 	.word	0x080145a3
 80147f8:	08018717 	.word	0x08018717

080147fc <__sflush_r>:
 80147fc:	898a      	ldrh	r2, [r1, #12]
 80147fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014802:	4605      	mov	r5, r0
 8014804:	0710      	lsls	r0, r2, #28
 8014806:	460c      	mov	r4, r1
 8014808:	d458      	bmi.n	80148bc <__sflush_r+0xc0>
 801480a:	684b      	ldr	r3, [r1, #4]
 801480c:	2b00      	cmp	r3, #0
 801480e:	dc05      	bgt.n	801481c <__sflush_r+0x20>
 8014810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014812:	2b00      	cmp	r3, #0
 8014814:	dc02      	bgt.n	801481c <__sflush_r+0x20>
 8014816:	2000      	movs	r0, #0
 8014818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801481c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801481e:	2e00      	cmp	r6, #0
 8014820:	d0f9      	beq.n	8014816 <__sflush_r+0x1a>
 8014822:	2300      	movs	r3, #0
 8014824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014828:	682f      	ldr	r7, [r5, #0]
 801482a:	6a21      	ldr	r1, [r4, #32]
 801482c:	602b      	str	r3, [r5, #0]
 801482e:	d032      	beq.n	8014896 <__sflush_r+0x9a>
 8014830:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014832:	89a3      	ldrh	r3, [r4, #12]
 8014834:	075a      	lsls	r2, r3, #29
 8014836:	d505      	bpl.n	8014844 <__sflush_r+0x48>
 8014838:	6863      	ldr	r3, [r4, #4]
 801483a:	1ac0      	subs	r0, r0, r3
 801483c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801483e:	b10b      	cbz	r3, 8014844 <__sflush_r+0x48>
 8014840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014842:	1ac0      	subs	r0, r0, r3
 8014844:	2300      	movs	r3, #0
 8014846:	4602      	mov	r2, r0
 8014848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801484a:	6a21      	ldr	r1, [r4, #32]
 801484c:	4628      	mov	r0, r5
 801484e:	47b0      	blx	r6
 8014850:	1c43      	adds	r3, r0, #1
 8014852:	89a3      	ldrh	r3, [r4, #12]
 8014854:	d106      	bne.n	8014864 <__sflush_r+0x68>
 8014856:	6829      	ldr	r1, [r5, #0]
 8014858:	291d      	cmp	r1, #29
 801485a:	d82b      	bhi.n	80148b4 <__sflush_r+0xb8>
 801485c:	4a29      	ldr	r2, [pc, #164]	; (8014904 <__sflush_r+0x108>)
 801485e:	410a      	asrs	r2, r1
 8014860:	07d6      	lsls	r6, r2, #31
 8014862:	d427      	bmi.n	80148b4 <__sflush_r+0xb8>
 8014864:	2200      	movs	r2, #0
 8014866:	6062      	str	r2, [r4, #4]
 8014868:	04d9      	lsls	r1, r3, #19
 801486a:	6922      	ldr	r2, [r4, #16]
 801486c:	6022      	str	r2, [r4, #0]
 801486e:	d504      	bpl.n	801487a <__sflush_r+0x7e>
 8014870:	1c42      	adds	r2, r0, #1
 8014872:	d101      	bne.n	8014878 <__sflush_r+0x7c>
 8014874:	682b      	ldr	r3, [r5, #0]
 8014876:	b903      	cbnz	r3, 801487a <__sflush_r+0x7e>
 8014878:	6560      	str	r0, [r4, #84]	; 0x54
 801487a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801487c:	602f      	str	r7, [r5, #0]
 801487e:	2900      	cmp	r1, #0
 8014880:	d0c9      	beq.n	8014816 <__sflush_r+0x1a>
 8014882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014886:	4299      	cmp	r1, r3
 8014888:	d002      	beq.n	8014890 <__sflush_r+0x94>
 801488a:	4628      	mov	r0, r5
 801488c:	f7fe f98a 	bl	8012ba4 <_free_r>
 8014890:	2000      	movs	r0, #0
 8014892:	6360      	str	r0, [r4, #52]	; 0x34
 8014894:	e7c0      	b.n	8014818 <__sflush_r+0x1c>
 8014896:	2301      	movs	r3, #1
 8014898:	4628      	mov	r0, r5
 801489a:	47b0      	blx	r6
 801489c:	1c41      	adds	r1, r0, #1
 801489e:	d1c8      	bne.n	8014832 <__sflush_r+0x36>
 80148a0:	682b      	ldr	r3, [r5, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d0c5      	beq.n	8014832 <__sflush_r+0x36>
 80148a6:	2b1d      	cmp	r3, #29
 80148a8:	d001      	beq.n	80148ae <__sflush_r+0xb2>
 80148aa:	2b16      	cmp	r3, #22
 80148ac:	d101      	bne.n	80148b2 <__sflush_r+0xb6>
 80148ae:	602f      	str	r7, [r5, #0]
 80148b0:	e7b1      	b.n	8014816 <__sflush_r+0x1a>
 80148b2:	89a3      	ldrh	r3, [r4, #12]
 80148b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148b8:	81a3      	strh	r3, [r4, #12]
 80148ba:	e7ad      	b.n	8014818 <__sflush_r+0x1c>
 80148bc:	690f      	ldr	r7, [r1, #16]
 80148be:	2f00      	cmp	r7, #0
 80148c0:	d0a9      	beq.n	8014816 <__sflush_r+0x1a>
 80148c2:	0793      	lsls	r3, r2, #30
 80148c4:	680e      	ldr	r6, [r1, #0]
 80148c6:	bf08      	it	eq
 80148c8:	694b      	ldreq	r3, [r1, #20]
 80148ca:	600f      	str	r7, [r1, #0]
 80148cc:	bf18      	it	ne
 80148ce:	2300      	movne	r3, #0
 80148d0:	eba6 0807 	sub.w	r8, r6, r7
 80148d4:	608b      	str	r3, [r1, #8]
 80148d6:	f1b8 0f00 	cmp.w	r8, #0
 80148da:	dd9c      	ble.n	8014816 <__sflush_r+0x1a>
 80148dc:	6a21      	ldr	r1, [r4, #32]
 80148de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80148e0:	4643      	mov	r3, r8
 80148e2:	463a      	mov	r2, r7
 80148e4:	4628      	mov	r0, r5
 80148e6:	47b0      	blx	r6
 80148e8:	2800      	cmp	r0, #0
 80148ea:	dc06      	bgt.n	80148fa <__sflush_r+0xfe>
 80148ec:	89a3      	ldrh	r3, [r4, #12]
 80148ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148f2:	81a3      	strh	r3, [r4, #12]
 80148f4:	f04f 30ff 	mov.w	r0, #4294967295
 80148f8:	e78e      	b.n	8014818 <__sflush_r+0x1c>
 80148fa:	4407      	add	r7, r0
 80148fc:	eba8 0800 	sub.w	r8, r8, r0
 8014900:	e7e9      	b.n	80148d6 <__sflush_r+0xda>
 8014902:	bf00      	nop
 8014904:	dfbffffe 	.word	0xdfbffffe

08014908 <_fflush_r>:
 8014908:	b538      	push	{r3, r4, r5, lr}
 801490a:	690b      	ldr	r3, [r1, #16]
 801490c:	4605      	mov	r5, r0
 801490e:	460c      	mov	r4, r1
 8014910:	b913      	cbnz	r3, 8014918 <_fflush_r+0x10>
 8014912:	2500      	movs	r5, #0
 8014914:	4628      	mov	r0, r5
 8014916:	bd38      	pop	{r3, r4, r5, pc}
 8014918:	b118      	cbz	r0, 8014922 <_fflush_r+0x1a>
 801491a:	6a03      	ldr	r3, [r0, #32]
 801491c:	b90b      	cbnz	r3, 8014922 <_fflush_r+0x1a>
 801491e:	f7fd f981 	bl	8011c24 <__sinit>
 8014922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d0f3      	beq.n	8014912 <_fflush_r+0xa>
 801492a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801492c:	07d0      	lsls	r0, r2, #31
 801492e:	d404      	bmi.n	801493a <_fflush_r+0x32>
 8014930:	0599      	lsls	r1, r3, #22
 8014932:	d402      	bmi.n	801493a <_fflush_r+0x32>
 8014934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014936:	f7fd fa9c 	bl	8011e72 <__retarget_lock_acquire_recursive>
 801493a:	4628      	mov	r0, r5
 801493c:	4621      	mov	r1, r4
 801493e:	f7ff ff5d 	bl	80147fc <__sflush_r>
 8014942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014944:	07da      	lsls	r2, r3, #31
 8014946:	4605      	mov	r5, r0
 8014948:	d4e4      	bmi.n	8014914 <_fflush_r+0xc>
 801494a:	89a3      	ldrh	r3, [r4, #12]
 801494c:	059b      	lsls	r3, r3, #22
 801494e:	d4e1      	bmi.n	8014914 <_fflush_r+0xc>
 8014950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014952:	f7fd fa8f 	bl	8011e74 <__retarget_lock_release_recursive>
 8014956:	e7dd      	b.n	8014914 <_fflush_r+0xc>

08014958 <__swbuf_r>:
 8014958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801495a:	460e      	mov	r6, r1
 801495c:	4614      	mov	r4, r2
 801495e:	4605      	mov	r5, r0
 8014960:	b118      	cbz	r0, 801496a <__swbuf_r+0x12>
 8014962:	6a03      	ldr	r3, [r0, #32]
 8014964:	b90b      	cbnz	r3, 801496a <__swbuf_r+0x12>
 8014966:	f7fd f95d 	bl	8011c24 <__sinit>
 801496a:	69a3      	ldr	r3, [r4, #24]
 801496c:	60a3      	str	r3, [r4, #8]
 801496e:	89a3      	ldrh	r3, [r4, #12]
 8014970:	071a      	lsls	r2, r3, #28
 8014972:	d525      	bpl.n	80149c0 <__swbuf_r+0x68>
 8014974:	6923      	ldr	r3, [r4, #16]
 8014976:	b31b      	cbz	r3, 80149c0 <__swbuf_r+0x68>
 8014978:	6823      	ldr	r3, [r4, #0]
 801497a:	6922      	ldr	r2, [r4, #16]
 801497c:	1a98      	subs	r0, r3, r2
 801497e:	6963      	ldr	r3, [r4, #20]
 8014980:	b2f6      	uxtb	r6, r6
 8014982:	4283      	cmp	r3, r0
 8014984:	4637      	mov	r7, r6
 8014986:	dc04      	bgt.n	8014992 <__swbuf_r+0x3a>
 8014988:	4621      	mov	r1, r4
 801498a:	4628      	mov	r0, r5
 801498c:	f7ff ffbc 	bl	8014908 <_fflush_r>
 8014990:	b9e0      	cbnz	r0, 80149cc <__swbuf_r+0x74>
 8014992:	68a3      	ldr	r3, [r4, #8]
 8014994:	3b01      	subs	r3, #1
 8014996:	60a3      	str	r3, [r4, #8]
 8014998:	6823      	ldr	r3, [r4, #0]
 801499a:	1c5a      	adds	r2, r3, #1
 801499c:	6022      	str	r2, [r4, #0]
 801499e:	701e      	strb	r6, [r3, #0]
 80149a0:	6962      	ldr	r2, [r4, #20]
 80149a2:	1c43      	adds	r3, r0, #1
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d004      	beq.n	80149b2 <__swbuf_r+0x5a>
 80149a8:	89a3      	ldrh	r3, [r4, #12]
 80149aa:	07db      	lsls	r3, r3, #31
 80149ac:	d506      	bpl.n	80149bc <__swbuf_r+0x64>
 80149ae:	2e0a      	cmp	r6, #10
 80149b0:	d104      	bne.n	80149bc <__swbuf_r+0x64>
 80149b2:	4621      	mov	r1, r4
 80149b4:	4628      	mov	r0, r5
 80149b6:	f7ff ffa7 	bl	8014908 <_fflush_r>
 80149ba:	b938      	cbnz	r0, 80149cc <__swbuf_r+0x74>
 80149bc:	4638      	mov	r0, r7
 80149be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149c0:	4621      	mov	r1, r4
 80149c2:	4628      	mov	r0, r5
 80149c4:	f000 f806 	bl	80149d4 <__swsetup_r>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	d0d5      	beq.n	8014978 <__swbuf_r+0x20>
 80149cc:	f04f 37ff 	mov.w	r7, #4294967295
 80149d0:	e7f4      	b.n	80149bc <__swbuf_r+0x64>
	...

080149d4 <__swsetup_r>:
 80149d4:	b538      	push	{r3, r4, r5, lr}
 80149d6:	4b2a      	ldr	r3, [pc, #168]	; (8014a80 <__swsetup_r+0xac>)
 80149d8:	4605      	mov	r5, r0
 80149da:	6818      	ldr	r0, [r3, #0]
 80149dc:	460c      	mov	r4, r1
 80149de:	b118      	cbz	r0, 80149e8 <__swsetup_r+0x14>
 80149e0:	6a03      	ldr	r3, [r0, #32]
 80149e2:	b90b      	cbnz	r3, 80149e8 <__swsetup_r+0x14>
 80149e4:	f7fd f91e 	bl	8011c24 <__sinit>
 80149e8:	89a3      	ldrh	r3, [r4, #12]
 80149ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80149ee:	0718      	lsls	r0, r3, #28
 80149f0:	d422      	bmi.n	8014a38 <__swsetup_r+0x64>
 80149f2:	06d9      	lsls	r1, r3, #27
 80149f4:	d407      	bmi.n	8014a06 <__swsetup_r+0x32>
 80149f6:	2309      	movs	r3, #9
 80149f8:	602b      	str	r3, [r5, #0]
 80149fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80149fe:	81a3      	strh	r3, [r4, #12]
 8014a00:	f04f 30ff 	mov.w	r0, #4294967295
 8014a04:	e034      	b.n	8014a70 <__swsetup_r+0x9c>
 8014a06:	0758      	lsls	r0, r3, #29
 8014a08:	d512      	bpl.n	8014a30 <__swsetup_r+0x5c>
 8014a0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a0c:	b141      	cbz	r1, 8014a20 <__swsetup_r+0x4c>
 8014a0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a12:	4299      	cmp	r1, r3
 8014a14:	d002      	beq.n	8014a1c <__swsetup_r+0x48>
 8014a16:	4628      	mov	r0, r5
 8014a18:	f7fe f8c4 	bl	8012ba4 <_free_r>
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	6363      	str	r3, [r4, #52]	; 0x34
 8014a20:	89a3      	ldrh	r3, [r4, #12]
 8014a22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a26:	81a3      	strh	r3, [r4, #12]
 8014a28:	2300      	movs	r3, #0
 8014a2a:	6063      	str	r3, [r4, #4]
 8014a2c:	6923      	ldr	r3, [r4, #16]
 8014a2e:	6023      	str	r3, [r4, #0]
 8014a30:	89a3      	ldrh	r3, [r4, #12]
 8014a32:	f043 0308 	orr.w	r3, r3, #8
 8014a36:	81a3      	strh	r3, [r4, #12]
 8014a38:	6923      	ldr	r3, [r4, #16]
 8014a3a:	b94b      	cbnz	r3, 8014a50 <__swsetup_r+0x7c>
 8014a3c:	89a3      	ldrh	r3, [r4, #12]
 8014a3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a46:	d003      	beq.n	8014a50 <__swsetup_r+0x7c>
 8014a48:	4621      	mov	r1, r4
 8014a4a:	4628      	mov	r0, r5
 8014a4c:	f000 fc62 	bl	8015314 <__smakebuf_r>
 8014a50:	89a0      	ldrh	r0, [r4, #12]
 8014a52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a56:	f010 0301 	ands.w	r3, r0, #1
 8014a5a:	d00a      	beq.n	8014a72 <__swsetup_r+0x9e>
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	60a3      	str	r3, [r4, #8]
 8014a60:	6963      	ldr	r3, [r4, #20]
 8014a62:	425b      	negs	r3, r3
 8014a64:	61a3      	str	r3, [r4, #24]
 8014a66:	6923      	ldr	r3, [r4, #16]
 8014a68:	b943      	cbnz	r3, 8014a7c <__swsetup_r+0xa8>
 8014a6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014a6e:	d1c4      	bne.n	80149fa <__swsetup_r+0x26>
 8014a70:	bd38      	pop	{r3, r4, r5, pc}
 8014a72:	0781      	lsls	r1, r0, #30
 8014a74:	bf58      	it	pl
 8014a76:	6963      	ldrpl	r3, [r4, #20]
 8014a78:	60a3      	str	r3, [r4, #8]
 8014a7a:	e7f4      	b.n	8014a66 <__swsetup_r+0x92>
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	e7f7      	b.n	8014a70 <__swsetup_r+0x9c>
 8014a80:	2000007c 	.word	0x2000007c

08014a84 <memmove>:
 8014a84:	4288      	cmp	r0, r1
 8014a86:	b510      	push	{r4, lr}
 8014a88:	eb01 0402 	add.w	r4, r1, r2
 8014a8c:	d902      	bls.n	8014a94 <memmove+0x10>
 8014a8e:	4284      	cmp	r4, r0
 8014a90:	4623      	mov	r3, r4
 8014a92:	d807      	bhi.n	8014aa4 <memmove+0x20>
 8014a94:	1e43      	subs	r3, r0, #1
 8014a96:	42a1      	cmp	r1, r4
 8014a98:	d008      	beq.n	8014aac <memmove+0x28>
 8014a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014aa2:	e7f8      	b.n	8014a96 <memmove+0x12>
 8014aa4:	4402      	add	r2, r0
 8014aa6:	4601      	mov	r1, r0
 8014aa8:	428a      	cmp	r2, r1
 8014aaa:	d100      	bne.n	8014aae <memmove+0x2a>
 8014aac:	bd10      	pop	{r4, pc}
 8014aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ab6:	e7f7      	b.n	8014aa8 <memmove+0x24>

08014ab8 <strncmp>:
 8014ab8:	b510      	push	{r4, lr}
 8014aba:	b16a      	cbz	r2, 8014ad8 <strncmp+0x20>
 8014abc:	3901      	subs	r1, #1
 8014abe:	1884      	adds	r4, r0, r2
 8014ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ac4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d103      	bne.n	8014ad4 <strncmp+0x1c>
 8014acc:	42a0      	cmp	r0, r4
 8014ace:	d001      	beq.n	8014ad4 <strncmp+0x1c>
 8014ad0:	2a00      	cmp	r2, #0
 8014ad2:	d1f5      	bne.n	8014ac0 <strncmp+0x8>
 8014ad4:	1ad0      	subs	r0, r2, r3
 8014ad6:	bd10      	pop	{r4, pc}
 8014ad8:	4610      	mov	r0, r2
 8014ada:	e7fc      	b.n	8014ad6 <strncmp+0x1e>
 8014adc:	0000      	movs	r0, r0
	...

08014ae0 <nan>:
 8014ae0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014ae8 <nan+0x8>
 8014ae4:	4770      	bx	lr
 8014ae6:	bf00      	nop
 8014ae8:	00000000 	.word	0x00000000
 8014aec:	7ff80000 	.word	0x7ff80000

08014af0 <__assert_func>:
 8014af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014af2:	4614      	mov	r4, r2
 8014af4:	461a      	mov	r2, r3
 8014af6:	4b09      	ldr	r3, [pc, #36]	; (8014b1c <__assert_func+0x2c>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	4605      	mov	r5, r0
 8014afc:	68d8      	ldr	r0, [r3, #12]
 8014afe:	b14c      	cbz	r4, 8014b14 <__assert_func+0x24>
 8014b00:	4b07      	ldr	r3, [pc, #28]	; (8014b20 <__assert_func+0x30>)
 8014b02:	9100      	str	r1, [sp, #0]
 8014b04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b08:	4906      	ldr	r1, [pc, #24]	; (8014b24 <__assert_func+0x34>)
 8014b0a:	462b      	mov	r3, r5
 8014b0c:	f000 fbca 	bl	80152a4 <fiprintf>
 8014b10:	f000 fc5e 	bl	80153d0 <abort>
 8014b14:	4b04      	ldr	r3, [pc, #16]	; (8014b28 <__assert_func+0x38>)
 8014b16:	461c      	mov	r4, r3
 8014b18:	e7f3      	b.n	8014b02 <__assert_func+0x12>
 8014b1a:	bf00      	nop
 8014b1c:	2000007c 	.word	0x2000007c
 8014b20:	0801872a 	.word	0x0801872a
 8014b24:	08018737 	.word	0x08018737
 8014b28:	08018765 	.word	0x08018765

08014b2c <_calloc_r>:
 8014b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b2e:	fba1 2402 	umull	r2, r4, r1, r2
 8014b32:	b94c      	cbnz	r4, 8014b48 <_calloc_r+0x1c>
 8014b34:	4611      	mov	r1, r2
 8014b36:	9201      	str	r2, [sp, #4]
 8014b38:	f7fc f8e6 	bl	8010d08 <_malloc_r>
 8014b3c:	9a01      	ldr	r2, [sp, #4]
 8014b3e:	4605      	mov	r5, r0
 8014b40:	b930      	cbnz	r0, 8014b50 <_calloc_r+0x24>
 8014b42:	4628      	mov	r0, r5
 8014b44:	b003      	add	sp, #12
 8014b46:	bd30      	pop	{r4, r5, pc}
 8014b48:	220c      	movs	r2, #12
 8014b4a:	6002      	str	r2, [r0, #0]
 8014b4c:	2500      	movs	r5, #0
 8014b4e:	e7f8      	b.n	8014b42 <_calloc_r+0x16>
 8014b50:	4621      	mov	r1, r4
 8014b52:	f7fd f900 	bl	8011d56 <memset>
 8014b56:	e7f4      	b.n	8014b42 <_calloc_r+0x16>

08014b58 <rshift>:
 8014b58:	6903      	ldr	r3, [r0, #16]
 8014b5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014b5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014b66:	f100 0414 	add.w	r4, r0, #20
 8014b6a:	dd45      	ble.n	8014bf8 <rshift+0xa0>
 8014b6c:	f011 011f 	ands.w	r1, r1, #31
 8014b70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014b74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014b78:	d10c      	bne.n	8014b94 <rshift+0x3c>
 8014b7a:	f100 0710 	add.w	r7, r0, #16
 8014b7e:	4629      	mov	r1, r5
 8014b80:	42b1      	cmp	r1, r6
 8014b82:	d334      	bcc.n	8014bee <rshift+0x96>
 8014b84:	1a9b      	subs	r3, r3, r2
 8014b86:	009b      	lsls	r3, r3, #2
 8014b88:	1eea      	subs	r2, r5, #3
 8014b8a:	4296      	cmp	r6, r2
 8014b8c:	bf38      	it	cc
 8014b8e:	2300      	movcc	r3, #0
 8014b90:	4423      	add	r3, r4
 8014b92:	e015      	b.n	8014bc0 <rshift+0x68>
 8014b94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014b98:	f1c1 0820 	rsb	r8, r1, #32
 8014b9c:	40cf      	lsrs	r7, r1
 8014b9e:	f105 0e04 	add.w	lr, r5, #4
 8014ba2:	46a1      	mov	r9, r4
 8014ba4:	4576      	cmp	r6, lr
 8014ba6:	46f4      	mov	ip, lr
 8014ba8:	d815      	bhi.n	8014bd6 <rshift+0x7e>
 8014baa:	1a9a      	subs	r2, r3, r2
 8014bac:	0092      	lsls	r2, r2, #2
 8014bae:	3a04      	subs	r2, #4
 8014bb0:	3501      	adds	r5, #1
 8014bb2:	42ae      	cmp	r6, r5
 8014bb4:	bf38      	it	cc
 8014bb6:	2200      	movcc	r2, #0
 8014bb8:	18a3      	adds	r3, r4, r2
 8014bba:	50a7      	str	r7, [r4, r2]
 8014bbc:	b107      	cbz	r7, 8014bc0 <rshift+0x68>
 8014bbe:	3304      	adds	r3, #4
 8014bc0:	1b1a      	subs	r2, r3, r4
 8014bc2:	42a3      	cmp	r3, r4
 8014bc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014bc8:	bf08      	it	eq
 8014bca:	2300      	moveq	r3, #0
 8014bcc:	6102      	str	r2, [r0, #16]
 8014bce:	bf08      	it	eq
 8014bd0:	6143      	streq	r3, [r0, #20]
 8014bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bd6:	f8dc c000 	ldr.w	ip, [ip]
 8014bda:	fa0c fc08 	lsl.w	ip, ip, r8
 8014bde:	ea4c 0707 	orr.w	r7, ip, r7
 8014be2:	f849 7b04 	str.w	r7, [r9], #4
 8014be6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014bea:	40cf      	lsrs	r7, r1
 8014bec:	e7da      	b.n	8014ba4 <rshift+0x4c>
 8014bee:	f851 cb04 	ldr.w	ip, [r1], #4
 8014bf2:	f847 cf04 	str.w	ip, [r7, #4]!
 8014bf6:	e7c3      	b.n	8014b80 <rshift+0x28>
 8014bf8:	4623      	mov	r3, r4
 8014bfa:	e7e1      	b.n	8014bc0 <rshift+0x68>

08014bfc <__hexdig_fun>:
 8014bfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014c00:	2b09      	cmp	r3, #9
 8014c02:	d802      	bhi.n	8014c0a <__hexdig_fun+0xe>
 8014c04:	3820      	subs	r0, #32
 8014c06:	b2c0      	uxtb	r0, r0
 8014c08:	4770      	bx	lr
 8014c0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014c0e:	2b05      	cmp	r3, #5
 8014c10:	d801      	bhi.n	8014c16 <__hexdig_fun+0x1a>
 8014c12:	3847      	subs	r0, #71	; 0x47
 8014c14:	e7f7      	b.n	8014c06 <__hexdig_fun+0xa>
 8014c16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014c1a:	2b05      	cmp	r3, #5
 8014c1c:	d801      	bhi.n	8014c22 <__hexdig_fun+0x26>
 8014c1e:	3827      	subs	r0, #39	; 0x27
 8014c20:	e7f1      	b.n	8014c06 <__hexdig_fun+0xa>
 8014c22:	2000      	movs	r0, #0
 8014c24:	4770      	bx	lr
	...

08014c28 <__gethex>:
 8014c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c2c:	4617      	mov	r7, r2
 8014c2e:	680a      	ldr	r2, [r1, #0]
 8014c30:	b085      	sub	sp, #20
 8014c32:	f102 0b02 	add.w	fp, r2, #2
 8014c36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014c3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014c3e:	4681      	mov	r9, r0
 8014c40:	468a      	mov	sl, r1
 8014c42:	9302      	str	r3, [sp, #8]
 8014c44:	32fe      	adds	r2, #254	; 0xfe
 8014c46:	eb02 030b 	add.w	r3, r2, fp
 8014c4a:	46d8      	mov	r8, fp
 8014c4c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014c50:	9301      	str	r3, [sp, #4]
 8014c52:	2830      	cmp	r0, #48	; 0x30
 8014c54:	d0f7      	beq.n	8014c46 <__gethex+0x1e>
 8014c56:	f7ff ffd1 	bl	8014bfc <__hexdig_fun>
 8014c5a:	4604      	mov	r4, r0
 8014c5c:	2800      	cmp	r0, #0
 8014c5e:	d138      	bne.n	8014cd2 <__gethex+0xaa>
 8014c60:	49a7      	ldr	r1, [pc, #668]	; (8014f00 <__gethex+0x2d8>)
 8014c62:	2201      	movs	r2, #1
 8014c64:	4640      	mov	r0, r8
 8014c66:	f7ff ff27 	bl	8014ab8 <strncmp>
 8014c6a:	4606      	mov	r6, r0
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	d169      	bne.n	8014d44 <__gethex+0x11c>
 8014c70:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014c74:	465d      	mov	r5, fp
 8014c76:	f7ff ffc1 	bl	8014bfc <__hexdig_fun>
 8014c7a:	2800      	cmp	r0, #0
 8014c7c:	d064      	beq.n	8014d48 <__gethex+0x120>
 8014c7e:	465a      	mov	r2, fp
 8014c80:	7810      	ldrb	r0, [r2, #0]
 8014c82:	2830      	cmp	r0, #48	; 0x30
 8014c84:	4690      	mov	r8, r2
 8014c86:	f102 0201 	add.w	r2, r2, #1
 8014c8a:	d0f9      	beq.n	8014c80 <__gethex+0x58>
 8014c8c:	f7ff ffb6 	bl	8014bfc <__hexdig_fun>
 8014c90:	2301      	movs	r3, #1
 8014c92:	fab0 f480 	clz	r4, r0
 8014c96:	0964      	lsrs	r4, r4, #5
 8014c98:	465e      	mov	r6, fp
 8014c9a:	9301      	str	r3, [sp, #4]
 8014c9c:	4642      	mov	r2, r8
 8014c9e:	4615      	mov	r5, r2
 8014ca0:	3201      	adds	r2, #1
 8014ca2:	7828      	ldrb	r0, [r5, #0]
 8014ca4:	f7ff ffaa 	bl	8014bfc <__hexdig_fun>
 8014ca8:	2800      	cmp	r0, #0
 8014caa:	d1f8      	bne.n	8014c9e <__gethex+0x76>
 8014cac:	4994      	ldr	r1, [pc, #592]	; (8014f00 <__gethex+0x2d8>)
 8014cae:	2201      	movs	r2, #1
 8014cb0:	4628      	mov	r0, r5
 8014cb2:	f7ff ff01 	bl	8014ab8 <strncmp>
 8014cb6:	b978      	cbnz	r0, 8014cd8 <__gethex+0xb0>
 8014cb8:	b946      	cbnz	r6, 8014ccc <__gethex+0xa4>
 8014cba:	1c6e      	adds	r6, r5, #1
 8014cbc:	4632      	mov	r2, r6
 8014cbe:	4615      	mov	r5, r2
 8014cc0:	3201      	adds	r2, #1
 8014cc2:	7828      	ldrb	r0, [r5, #0]
 8014cc4:	f7ff ff9a 	bl	8014bfc <__hexdig_fun>
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	d1f8      	bne.n	8014cbe <__gethex+0x96>
 8014ccc:	1b73      	subs	r3, r6, r5
 8014cce:	009e      	lsls	r6, r3, #2
 8014cd0:	e004      	b.n	8014cdc <__gethex+0xb4>
 8014cd2:	2400      	movs	r4, #0
 8014cd4:	4626      	mov	r6, r4
 8014cd6:	e7e1      	b.n	8014c9c <__gethex+0x74>
 8014cd8:	2e00      	cmp	r6, #0
 8014cda:	d1f7      	bne.n	8014ccc <__gethex+0xa4>
 8014cdc:	782b      	ldrb	r3, [r5, #0]
 8014cde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014ce2:	2b50      	cmp	r3, #80	; 0x50
 8014ce4:	d13d      	bne.n	8014d62 <__gethex+0x13a>
 8014ce6:	786b      	ldrb	r3, [r5, #1]
 8014ce8:	2b2b      	cmp	r3, #43	; 0x2b
 8014cea:	d02f      	beq.n	8014d4c <__gethex+0x124>
 8014cec:	2b2d      	cmp	r3, #45	; 0x2d
 8014cee:	d031      	beq.n	8014d54 <__gethex+0x12c>
 8014cf0:	1c69      	adds	r1, r5, #1
 8014cf2:	f04f 0b00 	mov.w	fp, #0
 8014cf6:	7808      	ldrb	r0, [r1, #0]
 8014cf8:	f7ff ff80 	bl	8014bfc <__hexdig_fun>
 8014cfc:	1e42      	subs	r2, r0, #1
 8014cfe:	b2d2      	uxtb	r2, r2
 8014d00:	2a18      	cmp	r2, #24
 8014d02:	d82e      	bhi.n	8014d62 <__gethex+0x13a>
 8014d04:	f1a0 0210 	sub.w	r2, r0, #16
 8014d08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014d0c:	f7ff ff76 	bl	8014bfc <__hexdig_fun>
 8014d10:	f100 3cff 	add.w	ip, r0, #4294967295
 8014d14:	fa5f fc8c 	uxtb.w	ip, ip
 8014d18:	f1bc 0f18 	cmp.w	ip, #24
 8014d1c:	d91d      	bls.n	8014d5a <__gethex+0x132>
 8014d1e:	f1bb 0f00 	cmp.w	fp, #0
 8014d22:	d000      	beq.n	8014d26 <__gethex+0xfe>
 8014d24:	4252      	negs	r2, r2
 8014d26:	4416      	add	r6, r2
 8014d28:	f8ca 1000 	str.w	r1, [sl]
 8014d2c:	b1dc      	cbz	r4, 8014d66 <__gethex+0x13e>
 8014d2e:	9b01      	ldr	r3, [sp, #4]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	bf14      	ite	ne
 8014d34:	f04f 0800 	movne.w	r8, #0
 8014d38:	f04f 0806 	moveq.w	r8, #6
 8014d3c:	4640      	mov	r0, r8
 8014d3e:	b005      	add	sp, #20
 8014d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d44:	4645      	mov	r5, r8
 8014d46:	4626      	mov	r6, r4
 8014d48:	2401      	movs	r4, #1
 8014d4a:	e7c7      	b.n	8014cdc <__gethex+0xb4>
 8014d4c:	f04f 0b00 	mov.w	fp, #0
 8014d50:	1ca9      	adds	r1, r5, #2
 8014d52:	e7d0      	b.n	8014cf6 <__gethex+0xce>
 8014d54:	f04f 0b01 	mov.w	fp, #1
 8014d58:	e7fa      	b.n	8014d50 <__gethex+0x128>
 8014d5a:	230a      	movs	r3, #10
 8014d5c:	fb03 0002 	mla	r0, r3, r2, r0
 8014d60:	e7d0      	b.n	8014d04 <__gethex+0xdc>
 8014d62:	4629      	mov	r1, r5
 8014d64:	e7e0      	b.n	8014d28 <__gethex+0x100>
 8014d66:	eba5 0308 	sub.w	r3, r5, r8
 8014d6a:	3b01      	subs	r3, #1
 8014d6c:	4621      	mov	r1, r4
 8014d6e:	2b07      	cmp	r3, #7
 8014d70:	dc0a      	bgt.n	8014d88 <__gethex+0x160>
 8014d72:	4648      	mov	r0, r9
 8014d74:	f7fd ff62 	bl	8012c3c <_Balloc>
 8014d78:	4604      	mov	r4, r0
 8014d7a:	b940      	cbnz	r0, 8014d8e <__gethex+0x166>
 8014d7c:	4b61      	ldr	r3, [pc, #388]	; (8014f04 <__gethex+0x2dc>)
 8014d7e:	4602      	mov	r2, r0
 8014d80:	21e4      	movs	r1, #228	; 0xe4
 8014d82:	4861      	ldr	r0, [pc, #388]	; (8014f08 <__gethex+0x2e0>)
 8014d84:	f7ff feb4 	bl	8014af0 <__assert_func>
 8014d88:	3101      	adds	r1, #1
 8014d8a:	105b      	asrs	r3, r3, #1
 8014d8c:	e7ef      	b.n	8014d6e <__gethex+0x146>
 8014d8e:	f100 0a14 	add.w	sl, r0, #20
 8014d92:	2300      	movs	r3, #0
 8014d94:	495a      	ldr	r1, [pc, #360]	; (8014f00 <__gethex+0x2d8>)
 8014d96:	f8cd a004 	str.w	sl, [sp, #4]
 8014d9a:	469b      	mov	fp, r3
 8014d9c:	45a8      	cmp	r8, r5
 8014d9e:	d342      	bcc.n	8014e26 <__gethex+0x1fe>
 8014da0:	9801      	ldr	r0, [sp, #4]
 8014da2:	f840 bb04 	str.w	fp, [r0], #4
 8014da6:	eba0 000a 	sub.w	r0, r0, sl
 8014daa:	1080      	asrs	r0, r0, #2
 8014dac:	6120      	str	r0, [r4, #16]
 8014dae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014db2:	4658      	mov	r0, fp
 8014db4:	f7fe f834 	bl	8012e20 <__hi0bits>
 8014db8:	683d      	ldr	r5, [r7, #0]
 8014dba:	eba8 0000 	sub.w	r0, r8, r0
 8014dbe:	42a8      	cmp	r0, r5
 8014dc0:	dd59      	ble.n	8014e76 <__gethex+0x24e>
 8014dc2:	eba0 0805 	sub.w	r8, r0, r5
 8014dc6:	4641      	mov	r1, r8
 8014dc8:	4620      	mov	r0, r4
 8014dca:	f7fe fbc3 	bl	8013554 <__any_on>
 8014dce:	4683      	mov	fp, r0
 8014dd0:	b1b8      	cbz	r0, 8014e02 <__gethex+0x1da>
 8014dd2:	f108 33ff 	add.w	r3, r8, #4294967295
 8014dd6:	1159      	asrs	r1, r3, #5
 8014dd8:	f003 021f 	and.w	r2, r3, #31
 8014ddc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014de0:	f04f 0b01 	mov.w	fp, #1
 8014de4:	fa0b f202 	lsl.w	r2, fp, r2
 8014de8:	420a      	tst	r2, r1
 8014dea:	d00a      	beq.n	8014e02 <__gethex+0x1da>
 8014dec:	455b      	cmp	r3, fp
 8014dee:	dd06      	ble.n	8014dfe <__gethex+0x1d6>
 8014df0:	f1a8 0102 	sub.w	r1, r8, #2
 8014df4:	4620      	mov	r0, r4
 8014df6:	f7fe fbad 	bl	8013554 <__any_on>
 8014dfa:	2800      	cmp	r0, #0
 8014dfc:	d138      	bne.n	8014e70 <__gethex+0x248>
 8014dfe:	f04f 0b02 	mov.w	fp, #2
 8014e02:	4641      	mov	r1, r8
 8014e04:	4620      	mov	r0, r4
 8014e06:	f7ff fea7 	bl	8014b58 <rshift>
 8014e0a:	4446      	add	r6, r8
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	42b3      	cmp	r3, r6
 8014e10:	da41      	bge.n	8014e96 <__gethex+0x26e>
 8014e12:	4621      	mov	r1, r4
 8014e14:	4648      	mov	r0, r9
 8014e16:	f7fd ff51 	bl	8012cbc <_Bfree>
 8014e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	6013      	str	r3, [r2, #0]
 8014e20:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014e24:	e78a      	b.n	8014d3c <__gethex+0x114>
 8014e26:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014e2a:	2a2e      	cmp	r2, #46	; 0x2e
 8014e2c:	d014      	beq.n	8014e58 <__gethex+0x230>
 8014e2e:	2b20      	cmp	r3, #32
 8014e30:	d106      	bne.n	8014e40 <__gethex+0x218>
 8014e32:	9b01      	ldr	r3, [sp, #4]
 8014e34:	f843 bb04 	str.w	fp, [r3], #4
 8014e38:	f04f 0b00 	mov.w	fp, #0
 8014e3c:	9301      	str	r3, [sp, #4]
 8014e3e:	465b      	mov	r3, fp
 8014e40:	7828      	ldrb	r0, [r5, #0]
 8014e42:	9303      	str	r3, [sp, #12]
 8014e44:	f7ff feda 	bl	8014bfc <__hexdig_fun>
 8014e48:	9b03      	ldr	r3, [sp, #12]
 8014e4a:	f000 000f 	and.w	r0, r0, #15
 8014e4e:	4098      	lsls	r0, r3
 8014e50:	ea4b 0b00 	orr.w	fp, fp, r0
 8014e54:	3304      	adds	r3, #4
 8014e56:	e7a1      	b.n	8014d9c <__gethex+0x174>
 8014e58:	45a8      	cmp	r8, r5
 8014e5a:	d8e8      	bhi.n	8014e2e <__gethex+0x206>
 8014e5c:	2201      	movs	r2, #1
 8014e5e:	4628      	mov	r0, r5
 8014e60:	9303      	str	r3, [sp, #12]
 8014e62:	f7ff fe29 	bl	8014ab8 <strncmp>
 8014e66:	4926      	ldr	r1, [pc, #152]	; (8014f00 <__gethex+0x2d8>)
 8014e68:	9b03      	ldr	r3, [sp, #12]
 8014e6a:	2800      	cmp	r0, #0
 8014e6c:	d1df      	bne.n	8014e2e <__gethex+0x206>
 8014e6e:	e795      	b.n	8014d9c <__gethex+0x174>
 8014e70:	f04f 0b03 	mov.w	fp, #3
 8014e74:	e7c5      	b.n	8014e02 <__gethex+0x1da>
 8014e76:	da0b      	bge.n	8014e90 <__gethex+0x268>
 8014e78:	eba5 0800 	sub.w	r8, r5, r0
 8014e7c:	4621      	mov	r1, r4
 8014e7e:	4642      	mov	r2, r8
 8014e80:	4648      	mov	r0, r9
 8014e82:	f7fe f935 	bl	80130f0 <__lshift>
 8014e86:	eba6 0608 	sub.w	r6, r6, r8
 8014e8a:	4604      	mov	r4, r0
 8014e8c:	f100 0a14 	add.w	sl, r0, #20
 8014e90:	f04f 0b00 	mov.w	fp, #0
 8014e94:	e7ba      	b.n	8014e0c <__gethex+0x1e4>
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	42b3      	cmp	r3, r6
 8014e9a:	dd73      	ble.n	8014f84 <__gethex+0x35c>
 8014e9c:	1b9e      	subs	r6, r3, r6
 8014e9e:	42b5      	cmp	r5, r6
 8014ea0:	dc34      	bgt.n	8014f0c <__gethex+0x2e4>
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	2b02      	cmp	r3, #2
 8014ea6:	d023      	beq.n	8014ef0 <__gethex+0x2c8>
 8014ea8:	2b03      	cmp	r3, #3
 8014eaa:	d025      	beq.n	8014ef8 <__gethex+0x2d0>
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d115      	bne.n	8014edc <__gethex+0x2b4>
 8014eb0:	42b5      	cmp	r5, r6
 8014eb2:	d113      	bne.n	8014edc <__gethex+0x2b4>
 8014eb4:	2d01      	cmp	r5, #1
 8014eb6:	d10b      	bne.n	8014ed0 <__gethex+0x2a8>
 8014eb8:	9a02      	ldr	r2, [sp, #8]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6013      	str	r3, [r2, #0]
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	6123      	str	r3, [r4, #16]
 8014ec2:	f8ca 3000 	str.w	r3, [sl]
 8014ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ec8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014ecc:	601c      	str	r4, [r3, #0]
 8014ece:	e735      	b.n	8014d3c <__gethex+0x114>
 8014ed0:	1e69      	subs	r1, r5, #1
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f7fe fb3e 	bl	8013554 <__any_on>
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	d1ed      	bne.n	8014eb8 <__gethex+0x290>
 8014edc:	4621      	mov	r1, r4
 8014ede:	4648      	mov	r0, r9
 8014ee0:	f7fd feec 	bl	8012cbc <_Bfree>
 8014ee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	6013      	str	r3, [r2, #0]
 8014eea:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014eee:	e725      	b.n	8014d3c <__gethex+0x114>
 8014ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d1f2      	bne.n	8014edc <__gethex+0x2b4>
 8014ef6:	e7df      	b.n	8014eb8 <__gethex+0x290>
 8014ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d1dc      	bne.n	8014eb8 <__gethex+0x290>
 8014efe:	e7ed      	b.n	8014edc <__gethex+0x2b4>
 8014f00:	080185bc 	.word	0x080185bc
 8014f04:	0801844f 	.word	0x0801844f
 8014f08:	08018766 	.word	0x08018766
 8014f0c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014f10:	f1bb 0f00 	cmp.w	fp, #0
 8014f14:	d133      	bne.n	8014f7e <__gethex+0x356>
 8014f16:	f1b8 0f00 	cmp.w	r8, #0
 8014f1a:	d004      	beq.n	8014f26 <__gethex+0x2fe>
 8014f1c:	4641      	mov	r1, r8
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f7fe fb18 	bl	8013554 <__any_on>
 8014f24:	4683      	mov	fp, r0
 8014f26:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014f30:	f008 081f 	and.w	r8, r8, #31
 8014f34:	fa03 f308 	lsl.w	r3, r3, r8
 8014f38:	4213      	tst	r3, r2
 8014f3a:	4631      	mov	r1, r6
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	bf18      	it	ne
 8014f40:	f04b 0b02 	orrne.w	fp, fp, #2
 8014f44:	1bad      	subs	r5, r5, r6
 8014f46:	f7ff fe07 	bl	8014b58 <rshift>
 8014f4a:	687e      	ldr	r6, [r7, #4]
 8014f4c:	f04f 0802 	mov.w	r8, #2
 8014f50:	f1bb 0f00 	cmp.w	fp, #0
 8014f54:	d04a      	beq.n	8014fec <__gethex+0x3c4>
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2b02      	cmp	r3, #2
 8014f5a:	d016      	beq.n	8014f8a <__gethex+0x362>
 8014f5c:	2b03      	cmp	r3, #3
 8014f5e:	d018      	beq.n	8014f92 <__gethex+0x36a>
 8014f60:	2b01      	cmp	r3, #1
 8014f62:	d109      	bne.n	8014f78 <__gethex+0x350>
 8014f64:	f01b 0f02 	tst.w	fp, #2
 8014f68:	d006      	beq.n	8014f78 <__gethex+0x350>
 8014f6a:	f8da 3000 	ldr.w	r3, [sl]
 8014f6e:	ea4b 0b03 	orr.w	fp, fp, r3
 8014f72:	f01b 0f01 	tst.w	fp, #1
 8014f76:	d10f      	bne.n	8014f98 <__gethex+0x370>
 8014f78:	f048 0810 	orr.w	r8, r8, #16
 8014f7c:	e036      	b.n	8014fec <__gethex+0x3c4>
 8014f7e:	f04f 0b01 	mov.w	fp, #1
 8014f82:	e7d0      	b.n	8014f26 <__gethex+0x2fe>
 8014f84:	f04f 0801 	mov.w	r8, #1
 8014f88:	e7e2      	b.n	8014f50 <__gethex+0x328>
 8014f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f8c:	f1c3 0301 	rsb	r3, r3, #1
 8014f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d0ef      	beq.n	8014f78 <__gethex+0x350>
 8014f98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014f9c:	f104 0214 	add.w	r2, r4, #20
 8014fa0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014fa4:	9301      	str	r3, [sp, #4]
 8014fa6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014faa:	2300      	movs	r3, #0
 8014fac:	4694      	mov	ip, r2
 8014fae:	f852 1b04 	ldr.w	r1, [r2], #4
 8014fb2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014fb6:	d01e      	beq.n	8014ff6 <__gethex+0x3ce>
 8014fb8:	3101      	adds	r1, #1
 8014fba:	f8cc 1000 	str.w	r1, [ip]
 8014fbe:	f1b8 0f02 	cmp.w	r8, #2
 8014fc2:	f104 0214 	add.w	r2, r4, #20
 8014fc6:	d13d      	bne.n	8015044 <__gethex+0x41c>
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	3b01      	subs	r3, #1
 8014fcc:	42ab      	cmp	r3, r5
 8014fce:	d10b      	bne.n	8014fe8 <__gethex+0x3c0>
 8014fd0:	1169      	asrs	r1, r5, #5
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	f005 051f 	and.w	r5, r5, #31
 8014fd8:	fa03 f505 	lsl.w	r5, r3, r5
 8014fdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014fe0:	421d      	tst	r5, r3
 8014fe2:	bf18      	it	ne
 8014fe4:	f04f 0801 	movne.w	r8, #1
 8014fe8:	f048 0820 	orr.w	r8, r8, #32
 8014fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fee:	601c      	str	r4, [r3, #0]
 8014ff0:	9b02      	ldr	r3, [sp, #8]
 8014ff2:	601e      	str	r6, [r3, #0]
 8014ff4:	e6a2      	b.n	8014d3c <__gethex+0x114>
 8014ff6:	4290      	cmp	r0, r2
 8014ff8:	f842 3c04 	str.w	r3, [r2, #-4]
 8014ffc:	d8d6      	bhi.n	8014fac <__gethex+0x384>
 8014ffe:	68a2      	ldr	r2, [r4, #8]
 8015000:	4593      	cmp	fp, r2
 8015002:	db17      	blt.n	8015034 <__gethex+0x40c>
 8015004:	6861      	ldr	r1, [r4, #4]
 8015006:	4648      	mov	r0, r9
 8015008:	3101      	adds	r1, #1
 801500a:	f7fd fe17 	bl	8012c3c <_Balloc>
 801500e:	4682      	mov	sl, r0
 8015010:	b918      	cbnz	r0, 801501a <__gethex+0x3f2>
 8015012:	4b1b      	ldr	r3, [pc, #108]	; (8015080 <__gethex+0x458>)
 8015014:	4602      	mov	r2, r0
 8015016:	2184      	movs	r1, #132	; 0x84
 8015018:	e6b3      	b.n	8014d82 <__gethex+0x15a>
 801501a:	6922      	ldr	r2, [r4, #16]
 801501c:	3202      	adds	r2, #2
 801501e:	f104 010c 	add.w	r1, r4, #12
 8015022:	0092      	lsls	r2, r2, #2
 8015024:	300c      	adds	r0, #12
 8015026:	f7fc ff2e 	bl	8011e86 <memcpy>
 801502a:	4621      	mov	r1, r4
 801502c:	4648      	mov	r0, r9
 801502e:	f7fd fe45 	bl	8012cbc <_Bfree>
 8015032:	4654      	mov	r4, sl
 8015034:	6922      	ldr	r2, [r4, #16]
 8015036:	1c51      	adds	r1, r2, #1
 8015038:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801503c:	6121      	str	r1, [r4, #16]
 801503e:	2101      	movs	r1, #1
 8015040:	6151      	str	r1, [r2, #20]
 8015042:	e7bc      	b.n	8014fbe <__gethex+0x396>
 8015044:	6921      	ldr	r1, [r4, #16]
 8015046:	4559      	cmp	r1, fp
 8015048:	dd0b      	ble.n	8015062 <__gethex+0x43a>
 801504a:	2101      	movs	r1, #1
 801504c:	4620      	mov	r0, r4
 801504e:	f7ff fd83 	bl	8014b58 <rshift>
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	3601      	adds	r6, #1
 8015056:	42b3      	cmp	r3, r6
 8015058:	f6ff aedb 	blt.w	8014e12 <__gethex+0x1ea>
 801505c:	f04f 0801 	mov.w	r8, #1
 8015060:	e7c2      	b.n	8014fe8 <__gethex+0x3c0>
 8015062:	f015 051f 	ands.w	r5, r5, #31
 8015066:	d0f9      	beq.n	801505c <__gethex+0x434>
 8015068:	9b01      	ldr	r3, [sp, #4]
 801506a:	441a      	add	r2, r3
 801506c:	f1c5 0520 	rsb	r5, r5, #32
 8015070:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015074:	f7fd fed4 	bl	8012e20 <__hi0bits>
 8015078:	42a8      	cmp	r0, r5
 801507a:	dbe6      	blt.n	801504a <__gethex+0x422>
 801507c:	e7ee      	b.n	801505c <__gethex+0x434>
 801507e:	bf00      	nop
 8015080:	0801844f 	.word	0x0801844f

08015084 <L_shift>:
 8015084:	f1c2 0208 	rsb	r2, r2, #8
 8015088:	0092      	lsls	r2, r2, #2
 801508a:	b570      	push	{r4, r5, r6, lr}
 801508c:	f1c2 0620 	rsb	r6, r2, #32
 8015090:	6843      	ldr	r3, [r0, #4]
 8015092:	6804      	ldr	r4, [r0, #0]
 8015094:	fa03 f506 	lsl.w	r5, r3, r6
 8015098:	432c      	orrs	r4, r5
 801509a:	40d3      	lsrs	r3, r2
 801509c:	6004      	str	r4, [r0, #0]
 801509e:	f840 3f04 	str.w	r3, [r0, #4]!
 80150a2:	4288      	cmp	r0, r1
 80150a4:	d3f4      	bcc.n	8015090 <L_shift+0xc>
 80150a6:	bd70      	pop	{r4, r5, r6, pc}

080150a8 <__match>:
 80150a8:	b530      	push	{r4, r5, lr}
 80150aa:	6803      	ldr	r3, [r0, #0]
 80150ac:	3301      	adds	r3, #1
 80150ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150b2:	b914      	cbnz	r4, 80150ba <__match+0x12>
 80150b4:	6003      	str	r3, [r0, #0]
 80150b6:	2001      	movs	r0, #1
 80150b8:	bd30      	pop	{r4, r5, pc}
 80150ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80150c2:	2d19      	cmp	r5, #25
 80150c4:	bf98      	it	ls
 80150c6:	3220      	addls	r2, #32
 80150c8:	42a2      	cmp	r2, r4
 80150ca:	d0f0      	beq.n	80150ae <__match+0x6>
 80150cc:	2000      	movs	r0, #0
 80150ce:	e7f3      	b.n	80150b8 <__match+0x10>

080150d0 <__hexnan>:
 80150d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d4:	680b      	ldr	r3, [r1, #0]
 80150d6:	6801      	ldr	r1, [r0, #0]
 80150d8:	115e      	asrs	r6, r3, #5
 80150da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80150de:	f013 031f 	ands.w	r3, r3, #31
 80150e2:	b087      	sub	sp, #28
 80150e4:	bf18      	it	ne
 80150e6:	3604      	addne	r6, #4
 80150e8:	2500      	movs	r5, #0
 80150ea:	1f37      	subs	r7, r6, #4
 80150ec:	4682      	mov	sl, r0
 80150ee:	4690      	mov	r8, r2
 80150f0:	9301      	str	r3, [sp, #4]
 80150f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80150f6:	46b9      	mov	r9, r7
 80150f8:	463c      	mov	r4, r7
 80150fa:	9502      	str	r5, [sp, #8]
 80150fc:	46ab      	mov	fp, r5
 80150fe:	784a      	ldrb	r2, [r1, #1]
 8015100:	1c4b      	adds	r3, r1, #1
 8015102:	9303      	str	r3, [sp, #12]
 8015104:	b342      	cbz	r2, 8015158 <__hexnan+0x88>
 8015106:	4610      	mov	r0, r2
 8015108:	9105      	str	r1, [sp, #20]
 801510a:	9204      	str	r2, [sp, #16]
 801510c:	f7ff fd76 	bl	8014bfc <__hexdig_fun>
 8015110:	2800      	cmp	r0, #0
 8015112:	d14f      	bne.n	80151b4 <__hexnan+0xe4>
 8015114:	9a04      	ldr	r2, [sp, #16]
 8015116:	9905      	ldr	r1, [sp, #20]
 8015118:	2a20      	cmp	r2, #32
 801511a:	d818      	bhi.n	801514e <__hexnan+0x7e>
 801511c:	9b02      	ldr	r3, [sp, #8]
 801511e:	459b      	cmp	fp, r3
 8015120:	dd13      	ble.n	801514a <__hexnan+0x7a>
 8015122:	454c      	cmp	r4, r9
 8015124:	d206      	bcs.n	8015134 <__hexnan+0x64>
 8015126:	2d07      	cmp	r5, #7
 8015128:	dc04      	bgt.n	8015134 <__hexnan+0x64>
 801512a:	462a      	mov	r2, r5
 801512c:	4649      	mov	r1, r9
 801512e:	4620      	mov	r0, r4
 8015130:	f7ff ffa8 	bl	8015084 <L_shift>
 8015134:	4544      	cmp	r4, r8
 8015136:	d950      	bls.n	80151da <__hexnan+0x10a>
 8015138:	2300      	movs	r3, #0
 801513a:	f1a4 0904 	sub.w	r9, r4, #4
 801513e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015142:	f8cd b008 	str.w	fp, [sp, #8]
 8015146:	464c      	mov	r4, r9
 8015148:	461d      	mov	r5, r3
 801514a:	9903      	ldr	r1, [sp, #12]
 801514c:	e7d7      	b.n	80150fe <__hexnan+0x2e>
 801514e:	2a29      	cmp	r2, #41	; 0x29
 8015150:	d155      	bne.n	80151fe <__hexnan+0x12e>
 8015152:	3102      	adds	r1, #2
 8015154:	f8ca 1000 	str.w	r1, [sl]
 8015158:	f1bb 0f00 	cmp.w	fp, #0
 801515c:	d04f      	beq.n	80151fe <__hexnan+0x12e>
 801515e:	454c      	cmp	r4, r9
 8015160:	d206      	bcs.n	8015170 <__hexnan+0xa0>
 8015162:	2d07      	cmp	r5, #7
 8015164:	dc04      	bgt.n	8015170 <__hexnan+0xa0>
 8015166:	462a      	mov	r2, r5
 8015168:	4649      	mov	r1, r9
 801516a:	4620      	mov	r0, r4
 801516c:	f7ff ff8a 	bl	8015084 <L_shift>
 8015170:	4544      	cmp	r4, r8
 8015172:	d934      	bls.n	80151de <__hexnan+0x10e>
 8015174:	f1a8 0204 	sub.w	r2, r8, #4
 8015178:	4623      	mov	r3, r4
 801517a:	f853 1b04 	ldr.w	r1, [r3], #4
 801517e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015182:	429f      	cmp	r7, r3
 8015184:	d2f9      	bcs.n	801517a <__hexnan+0xaa>
 8015186:	1b3b      	subs	r3, r7, r4
 8015188:	f023 0303 	bic.w	r3, r3, #3
 801518c:	3304      	adds	r3, #4
 801518e:	3e03      	subs	r6, #3
 8015190:	3401      	adds	r4, #1
 8015192:	42a6      	cmp	r6, r4
 8015194:	bf38      	it	cc
 8015196:	2304      	movcc	r3, #4
 8015198:	4443      	add	r3, r8
 801519a:	2200      	movs	r2, #0
 801519c:	f843 2b04 	str.w	r2, [r3], #4
 80151a0:	429f      	cmp	r7, r3
 80151a2:	d2fb      	bcs.n	801519c <__hexnan+0xcc>
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	b91b      	cbnz	r3, 80151b0 <__hexnan+0xe0>
 80151a8:	4547      	cmp	r7, r8
 80151aa:	d126      	bne.n	80151fa <__hexnan+0x12a>
 80151ac:	2301      	movs	r3, #1
 80151ae:	603b      	str	r3, [r7, #0]
 80151b0:	2005      	movs	r0, #5
 80151b2:	e025      	b.n	8015200 <__hexnan+0x130>
 80151b4:	3501      	adds	r5, #1
 80151b6:	2d08      	cmp	r5, #8
 80151b8:	f10b 0b01 	add.w	fp, fp, #1
 80151bc:	dd06      	ble.n	80151cc <__hexnan+0xfc>
 80151be:	4544      	cmp	r4, r8
 80151c0:	d9c3      	bls.n	801514a <__hexnan+0x7a>
 80151c2:	2300      	movs	r3, #0
 80151c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80151c8:	2501      	movs	r5, #1
 80151ca:	3c04      	subs	r4, #4
 80151cc:	6822      	ldr	r2, [r4, #0]
 80151ce:	f000 000f 	and.w	r0, r0, #15
 80151d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80151d6:	6020      	str	r0, [r4, #0]
 80151d8:	e7b7      	b.n	801514a <__hexnan+0x7a>
 80151da:	2508      	movs	r5, #8
 80151dc:	e7b5      	b.n	801514a <__hexnan+0x7a>
 80151de:	9b01      	ldr	r3, [sp, #4]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d0df      	beq.n	80151a4 <__hexnan+0xd4>
 80151e4:	f1c3 0320 	rsb	r3, r3, #32
 80151e8:	f04f 32ff 	mov.w	r2, #4294967295
 80151ec:	40da      	lsrs	r2, r3
 80151ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80151f2:	4013      	ands	r3, r2
 80151f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80151f8:	e7d4      	b.n	80151a4 <__hexnan+0xd4>
 80151fa:	3f04      	subs	r7, #4
 80151fc:	e7d2      	b.n	80151a4 <__hexnan+0xd4>
 80151fe:	2004      	movs	r0, #4
 8015200:	b007      	add	sp, #28
 8015202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015206 <__ascii_mbtowc>:
 8015206:	b082      	sub	sp, #8
 8015208:	b901      	cbnz	r1, 801520c <__ascii_mbtowc+0x6>
 801520a:	a901      	add	r1, sp, #4
 801520c:	b142      	cbz	r2, 8015220 <__ascii_mbtowc+0x1a>
 801520e:	b14b      	cbz	r3, 8015224 <__ascii_mbtowc+0x1e>
 8015210:	7813      	ldrb	r3, [r2, #0]
 8015212:	600b      	str	r3, [r1, #0]
 8015214:	7812      	ldrb	r2, [r2, #0]
 8015216:	1e10      	subs	r0, r2, #0
 8015218:	bf18      	it	ne
 801521a:	2001      	movne	r0, #1
 801521c:	b002      	add	sp, #8
 801521e:	4770      	bx	lr
 8015220:	4610      	mov	r0, r2
 8015222:	e7fb      	b.n	801521c <__ascii_mbtowc+0x16>
 8015224:	f06f 0001 	mvn.w	r0, #1
 8015228:	e7f8      	b.n	801521c <__ascii_mbtowc+0x16>

0801522a <_realloc_r>:
 801522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801522e:	4680      	mov	r8, r0
 8015230:	4614      	mov	r4, r2
 8015232:	460e      	mov	r6, r1
 8015234:	b921      	cbnz	r1, 8015240 <_realloc_r+0x16>
 8015236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801523a:	4611      	mov	r1, r2
 801523c:	f7fb bd64 	b.w	8010d08 <_malloc_r>
 8015240:	b92a      	cbnz	r2, 801524e <_realloc_r+0x24>
 8015242:	f7fd fcaf 	bl	8012ba4 <_free_r>
 8015246:	4625      	mov	r5, r4
 8015248:	4628      	mov	r0, r5
 801524a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801524e:	f000 f8c6 	bl	80153de <_malloc_usable_size_r>
 8015252:	4284      	cmp	r4, r0
 8015254:	4607      	mov	r7, r0
 8015256:	d802      	bhi.n	801525e <_realloc_r+0x34>
 8015258:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801525c:	d812      	bhi.n	8015284 <_realloc_r+0x5a>
 801525e:	4621      	mov	r1, r4
 8015260:	4640      	mov	r0, r8
 8015262:	f7fb fd51 	bl	8010d08 <_malloc_r>
 8015266:	4605      	mov	r5, r0
 8015268:	2800      	cmp	r0, #0
 801526a:	d0ed      	beq.n	8015248 <_realloc_r+0x1e>
 801526c:	42bc      	cmp	r4, r7
 801526e:	4622      	mov	r2, r4
 8015270:	4631      	mov	r1, r6
 8015272:	bf28      	it	cs
 8015274:	463a      	movcs	r2, r7
 8015276:	f7fc fe06 	bl	8011e86 <memcpy>
 801527a:	4631      	mov	r1, r6
 801527c:	4640      	mov	r0, r8
 801527e:	f7fd fc91 	bl	8012ba4 <_free_r>
 8015282:	e7e1      	b.n	8015248 <_realloc_r+0x1e>
 8015284:	4635      	mov	r5, r6
 8015286:	e7df      	b.n	8015248 <_realloc_r+0x1e>

08015288 <__ascii_wctomb>:
 8015288:	b149      	cbz	r1, 801529e <__ascii_wctomb+0x16>
 801528a:	2aff      	cmp	r2, #255	; 0xff
 801528c:	bf85      	ittet	hi
 801528e:	238a      	movhi	r3, #138	; 0x8a
 8015290:	6003      	strhi	r3, [r0, #0]
 8015292:	700a      	strbls	r2, [r1, #0]
 8015294:	f04f 30ff 	movhi.w	r0, #4294967295
 8015298:	bf98      	it	ls
 801529a:	2001      	movls	r0, #1
 801529c:	4770      	bx	lr
 801529e:	4608      	mov	r0, r1
 80152a0:	4770      	bx	lr
	...

080152a4 <fiprintf>:
 80152a4:	b40e      	push	{r1, r2, r3}
 80152a6:	b503      	push	{r0, r1, lr}
 80152a8:	4601      	mov	r1, r0
 80152aa:	ab03      	add	r3, sp, #12
 80152ac:	4805      	ldr	r0, [pc, #20]	; (80152c4 <fiprintf+0x20>)
 80152ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80152b2:	6800      	ldr	r0, [r0, #0]
 80152b4:	9301      	str	r3, [sp, #4]
 80152b6:	f7ff f987 	bl	80145c8 <_vfiprintf_r>
 80152ba:	b002      	add	sp, #8
 80152bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80152c0:	b003      	add	sp, #12
 80152c2:	4770      	bx	lr
 80152c4:	2000007c 	.word	0x2000007c

080152c8 <__swhatbuf_r>:
 80152c8:	b570      	push	{r4, r5, r6, lr}
 80152ca:	460c      	mov	r4, r1
 80152cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152d0:	2900      	cmp	r1, #0
 80152d2:	b096      	sub	sp, #88	; 0x58
 80152d4:	4615      	mov	r5, r2
 80152d6:	461e      	mov	r6, r3
 80152d8:	da0d      	bge.n	80152f6 <__swhatbuf_r+0x2e>
 80152da:	89a3      	ldrh	r3, [r4, #12]
 80152dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80152e0:	f04f 0100 	mov.w	r1, #0
 80152e4:	bf0c      	ite	eq
 80152e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80152ea:	2340      	movne	r3, #64	; 0x40
 80152ec:	2000      	movs	r0, #0
 80152ee:	6031      	str	r1, [r6, #0]
 80152f0:	602b      	str	r3, [r5, #0]
 80152f2:	b016      	add	sp, #88	; 0x58
 80152f4:	bd70      	pop	{r4, r5, r6, pc}
 80152f6:	466a      	mov	r2, sp
 80152f8:	f000 f848 	bl	801538c <_fstat_r>
 80152fc:	2800      	cmp	r0, #0
 80152fe:	dbec      	blt.n	80152da <__swhatbuf_r+0x12>
 8015300:	9901      	ldr	r1, [sp, #4]
 8015302:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015306:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801530a:	4259      	negs	r1, r3
 801530c:	4159      	adcs	r1, r3
 801530e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015312:	e7eb      	b.n	80152ec <__swhatbuf_r+0x24>

08015314 <__smakebuf_r>:
 8015314:	898b      	ldrh	r3, [r1, #12]
 8015316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015318:	079d      	lsls	r5, r3, #30
 801531a:	4606      	mov	r6, r0
 801531c:	460c      	mov	r4, r1
 801531e:	d507      	bpl.n	8015330 <__smakebuf_r+0x1c>
 8015320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	6123      	str	r3, [r4, #16]
 8015328:	2301      	movs	r3, #1
 801532a:	6163      	str	r3, [r4, #20]
 801532c:	b002      	add	sp, #8
 801532e:	bd70      	pop	{r4, r5, r6, pc}
 8015330:	ab01      	add	r3, sp, #4
 8015332:	466a      	mov	r2, sp
 8015334:	f7ff ffc8 	bl	80152c8 <__swhatbuf_r>
 8015338:	9900      	ldr	r1, [sp, #0]
 801533a:	4605      	mov	r5, r0
 801533c:	4630      	mov	r0, r6
 801533e:	f7fb fce3 	bl	8010d08 <_malloc_r>
 8015342:	b948      	cbnz	r0, 8015358 <__smakebuf_r+0x44>
 8015344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015348:	059a      	lsls	r2, r3, #22
 801534a:	d4ef      	bmi.n	801532c <__smakebuf_r+0x18>
 801534c:	f023 0303 	bic.w	r3, r3, #3
 8015350:	f043 0302 	orr.w	r3, r3, #2
 8015354:	81a3      	strh	r3, [r4, #12]
 8015356:	e7e3      	b.n	8015320 <__smakebuf_r+0xc>
 8015358:	89a3      	ldrh	r3, [r4, #12]
 801535a:	6020      	str	r0, [r4, #0]
 801535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015360:	81a3      	strh	r3, [r4, #12]
 8015362:	9b00      	ldr	r3, [sp, #0]
 8015364:	6163      	str	r3, [r4, #20]
 8015366:	9b01      	ldr	r3, [sp, #4]
 8015368:	6120      	str	r0, [r4, #16]
 801536a:	b15b      	cbz	r3, 8015384 <__smakebuf_r+0x70>
 801536c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015370:	4630      	mov	r0, r6
 8015372:	f000 f81d 	bl	80153b0 <_isatty_r>
 8015376:	b128      	cbz	r0, 8015384 <__smakebuf_r+0x70>
 8015378:	89a3      	ldrh	r3, [r4, #12]
 801537a:	f023 0303 	bic.w	r3, r3, #3
 801537e:	f043 0301 	orr.w	r3, r3, #1
 8015382:	81a3      	strh	r3, [r4, #12]
 8015384:	89a3      	ldrh	r3, [r4, #12]
 8015386:	431d      	orrs	r5, r3
 8015388:	81a5      	strh	r5, [r4, #12]
 801538a:	e7cf      	b.n	801532c <__smakebuf_r+0x18>

0801538c <_fstat_r>:
 801538c:	b538      	push	{r3, r4, r5, lr}
 801538e:	4d07      	ldr	r5, [pc, #28]	; (80153ac <_fstat_r+0x20>)
 8015390:	2300      	movs	r3, #0
 8015392:	4604      	mov	r4, r0
 8015394:	4608      	mov	r0, r1
 8015396:	4611      	mov	r1, r2
 8015398:	602b      	str	r3, [r5, #0]
 801539a:	f7ee fffe 	bl	800439a <_fstat>
 801539e:	1c43      	adds	r3, r0, #1
 80153a0:	d102      	bne.n	80153a8 <_fstat_r+0x1c>
 80153a2:	682b      	ldr	r3, [r5, #0]
 80153a4:	b103      	cbz	r3, 80153a8 <_fstat_r+0x1c>
 80153a6:	6023      	str	r3, [r4, #0]
 80153a8:	bd38      	pop	{r3, r4, r5, pc}
 80153aa:	bf00      	nop
 80153ac:	20000f68 	.word	0x20000f68

080153b0 <_isatty_r>:
 80153b0:	b538      	push	{r3, r4, r5, lr}
 80153b2:	4d06      	ldr	r5, [pc, #24]	; (80153cc <_isatty_r+0x1c>)
 80153b4:	2300      	movs	r3, #0
 80153b6:	4604      	mov	r4, r0
 80153b8:	4608      	mov	r0, r1
 80153ba:	602b      	str	r3, [r5, #0]
 80153bc:	f7ee fffd 	bl	80043ba <_isatty>
 80153c0:	1c43      	adds	r3, r0, #1
 80153c2:	d102      	bne.n	80153ca <_isatty_r+0x1a>
 80153c4:	682b      	ldr	r3, [r5, #0]
 80153c6:	b103      	cbz	r3, 80153ca <_isatty_r+0x1a>
 80153c8:	6023      	str	r3, [r4, #0]
 80153ca:	bd38      	pop	{r3, r4, r5, pc}
 80153cc:	20000f68 	.word	0x20000f68

080153d0 <abort>:
 80153d0:	b508      	push	{r3, lr}
 80153d2:	2006      	movs	r0, #6
 80153d4:	f000 f834 	bl	8015440 <raise>
 80153d8:	2001      	movs	r0, #1
 80153da:	f7ee ff8f 	bl	80042fc <_exit>

080153de <_malloc_usable_size_r>:
 80153de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153e2:	1f18      	subs	r0, r3, #4
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	bfbc      	itt	lt
 80153e8:	580b      	ldrlt	r3, [r1, r0]
 80153ea:	18c0      	addlt	r0, r0, r3
 80153ec:	4770      	bx	lr

080153ee <_raise_r>:
 80153ee:	291f      	cmp	r1, #31
 80153f0:	b538      	push	{r3, r4, r5, lr}
 80153f2:	4604      	mov	r4, r0
 80153f4:	460d      	mov	r5, r1
 80153f6:	d904      	bls.n	8015402 <_raise_r+0x14>
 80153f8:	2316      	movs	r3, #22
 80153fa:	6003      	str	r3, [r0, #0]
 80153fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015400:	bd38      	pop	{r3, r4, r5, pc}
 8015402:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015404:	b112      	cbz	r2, 801540c <_raise_r+0x1e>
 8015406:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801540a:	b94b      	cbnz	r3, 8015420 <_raise_r+0x32>
 801540c:	4620      	mov	r0, r4
 801540e:	f000 f831 	bl	8015474 <_getpid_r>
 8015412:	462a      	mov	r2, r5
 8015414:	4601      	mov	r1, r0
 8015416:	4620      	mov	r0, r4
 8015418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801541c:	f000 b818 	b.w	8015450 <_kill_r>
 8015420:	2b01      	cmp	r3, #1
 8015422:	d00a      	beq.n	801543a <_raise_r+0x4c>
 8015424:	1c59      	adds	r1, r3, #1
 8015426:	d103      	bne.n	8015430 <_raise_r+0x42>
 8015428:	2316      	movs	r3, #22
 801542a:	6003      	str	r3, [r0, #0]
 801542c:	2001      	movs	r0, #1
 801542e:	e7e7      	b.n	8015400 <_raise_r+0x12>
 8015430:	2400      	movs	r4, #0
 8015432:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015436:	4628      	mov	r0, r5
 8015438:	4798      	blx	r3
 801543a:	2000      	movs	r0, #0
 801543c:	e7e0      	b.n	8015400 <_raise_r+0x12>
	...

08015440 <raise>:
 8015440:	4b02      	ldr	r3, [pc, #8]	; (801544c <raise+0xc>)
 8015442:	4601      	mov	r1, r0
 8015444:	6818      	ldr	r0, [r3, #0]
 8015446:	f7ff bfd2 	b.w	80153ee <_raise_r>
 801544a:	bf00      	nop
 801544c:	2000007c 	.word	0x2000007c

08015450 <_kill_r>:
 8015450:	b538      	push	{r3, r4, r5, lr}
 8015452:	4d07      	ldr	r5, [pc, #28]	; (8015470 <_kill_r+0x20>)
 8015454:	2300      	movs	r3, #0
 8015456:	4604      	mov	r4, r0
 8015458:	4608      	mov	r0, r1
 801545a:	4611      	mov	r1, r2
 801545c:	602b      	str	r3, [r5, #0]
 801545e:	f7ee ff3d 	bl	80042dc <_kill>
 8015462:	1c43      	adds	r3, r0, #1
 8015464:	d102      	bne.n	801546c <_kill_r+0x1c>
 8015466:	682b      	ldr	r3, [r5, #0]
 8015468:	b103      	cbz	r3, 801546c <_kill_r+0x1c>
 801546a:	6023      	str	r3, [r4, #0]
 801546c:	bd38      	pop	{r3, r4, r5, pc}
 801546e:	bf00      	nop
 8015470:	20000f68 	.word	0x20000f68

08015474 <_getpid_r>:
 8015474:	f7ee bf2a 	b.w	80042cc <_getpid>

08015478 <log>:
 8015478:	b538      	push	{r3, r4, r5, lr}
 801547a:	ed2d 8b02 	vpush	{d8}
 801547e:	ec55 4b10 	vmov	r4, r5, d0
 8015482:	f000 f839 	bl	80154f8 <__ieee754_log>
 8015486:	4622      	mov	r2, r4
 8015488:	462b      	mov	r3, r5
 801548a:	4620      	mov	r0, r4
 801548c:	4629      	mov	r1, r5
 801548e:	eeb0 8a40 	vmov.f32	s16, s0
 8015492:	eef0 8a60 	vmov.f32	s17, s1
 8015496:	f7eb fb79 	bl	8000b8c <__aeabi_dcmpun>
 801549a:	b998      	cbnz	r0, 80154c4 <log+0x4c>
 801549c:	2200      	movs	r2, #0
 801549e:	2300      	movs	r3, #0
 80154a0:	4620      	mov	r0, r4
 80154a2:	4629      	mov	r1, r5
 80154a4:	f7eb fb68 	bl	8000b78 <__aeabi_dcmpgt>
 80154a8:	b960      	cbnz	r0, 80154c4 <log+0x4c>
 80154aa:	2200      	movs	r2, #0
 80154ac:	2300      	movs	r3, #0
 80154ae:	4620      	mov	r0, r4
 80154b0:	4629      	mov	r1, r5
 80154b2:	f7eb fb39 	bl	8000b28 <__aeabi_dcmpeq>
 80154b6:	b160      	cbz	r0, 80154d2 <log+0x5a>
 80154b8:	f7fc fcb0 	bl	8011e1c <__errno>
 80154bc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80154e8 <log+0x70>
 80154c0:	2322      	movs	r3, #34	; 0x22
 80154c2:	6003      	str	r3, [r0, #0]
 80154c4:	eeb0 0a48 	vmov.f32	s0, s16
 80154c8:	eef0 0a68 	vmov.f32	s1, s17
 80154cc:	ecbd 8b02 	vpop	{d8}
 80154d0:	bd38      	pop	{r3, r4, r5, pc}
 80154d2:	f7fc fca3 	bl	8011e1c <__errno>
 80154d6:	ecbd 8b02 	vpop	{d8}
 80154da:	2321      	movs	r3, #33	; 0x21
 80154dc:	6003      	str	r3, [r0, #0]
 80154de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154e2:	4803      	ldr	r0, [pc, #12]	; (80154f0 <log+0x78>)
 80154e4:	f7ff bafc 	b.w	8014ae0 <nan>
 80154e8:	00000000 	.word	0x00000000
 80154ec:	fff00000 	.word	0xfff00000
 80154f0:	08018765 	.word	0x08018765
 80154f4:	00000000 	.word	0x00000000

080154f8 <__ieee754_log>:
 80154f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154fc:	ec51 0b10 	vmov	r0, r1, d0
 8015500:	ed2d 8b04 	vpush	{d8-d9}
 8015504:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8015508:	b083      	sub	sp, #12
 801550a:	460d      	mov	r5, r1
 801550c:	da29      	bge.n	8015562 <__ieee754_log+0x6a>
 801550e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015512:	4303      	orrs	r3, r0
 8015514:	ee10 2a10 	vmov	r2, s0
 8015518:	d10c      	bne.n	8015534 <__ieee754_log+0x3c>
 801551a:	49cf      	ldr	r1, [pc, #828]	; (8015858 <__ieee754_log+0x360>)
 801551c:	2200      	movs	r2, #0
 801551e:	2300      	movs	r3, #0
 8015520:	2000      	movs	r0, #0
 8015522:	f7eb f9c3 	bl	80008ac <__aeabi_ddiv>
 8015526:	ec41 0b10 	vmov	d0, r0, r1
 801552a:	b003      	add	sp, #12
 801552c:	ecbd 8b04 	vpop	{d8-d9}
 8015530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015534:	2900      	cmp	r1, #0
 8015536:	da05      	bge.n	8015544 <__ieee754_log+0x4c>
 8015538:	460b      	mov	r3, r1
 801553a:	f7ea fed5 	bl	80002e8 <__aeabi_dsub>
 801553e:	2200      	movs	r2, #0
 8015540:	2300      	movs	r3, #0
 8015542:	e7ee      	b.n	8015522 <__ieee754_log+0x2a>
 8015544:	4bc5      	ldr	r3, [pc, #788]	; (801585c <__ieee754_log+0x364>)
 8015546:	2200      	movs	r2, #0
 8015548:	f7eb f886 	bl	8000658 <__aeabi_dmul>
 801554c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8015550:	460d      	mov	r5, r1
 8015552:	4ac3      	ldr	r2, [pc, #780]	; (8015860 <__ieee754_log+0x368>)
 8015554:	4295      	cmp	r5, r2
 8015556:	dd06      	ble.n	8015566 <__ieee754_log+0x6e>
 8015558:	4602      	mov	r2, r0
 801555a:	460b      	mov	r3, r1
 801555c:	f7ea fec6 	bl	80002ec <__adddf3>
 8015560:	e7e1      	b.n	8015526 <__ieee754_log+0x2e>
 8015562:	2300      	movs	r3, #0
 8015564:	e7f5      	b.n	8015552 <__ieee754_log+0x5a>
 8015566:	152c      	asrs	r4, r5, #20
 8015568:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801556c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015570:	441c      	add	r4, r3
 8015572:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8015576:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801557a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801557e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8015582:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8015586:	ea42 0105 	orr.w	r1, r2, r5
 801558a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801558e:	2200      	movs	r2, #0
 8015590:	4bb4      	ldr	r3, [pc, #720]	; (8015864 <__ieee754_log+0x36c>)
 8015592:	f7ea fea9 	bl	80002e8 <__aeabi_dsub>
 8015596:	1cab      	adds	r3, r5, #2
 8015598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801559c:	2b02      	cmp	r3, #2
 801559e:	4682      	mov	sl, r0
 80155a0:	468b      	mov	fp, r1
 80155a2:	f04f 0200 	mov.w	r2, #0
 80155a6:	dc53      	bgt.n	8015650 <__ieee754_log+0x158>
 80155a8:	2300      	movs	r3, #0
 80155aa:	f7eb fabd 	bl	8000b28 <__aeabi_dcmpeq>
 80155ae:	b1d0      	cbz	r0, 80155e6 <__ieee754_log+0xee>
 80155b0:	2c00      	cmp	r4, #0
 80155b2:	f000 8122 	beq.w	80157fa <__ieee754_log+0x302>
 80155b6:	4620      	mov	r0, r4
 80155b8:	f7ea ffe4 	bl	8000584 <__aeabi_i2d>
 80155bc:	a390      	add	r3, pc, #576	; (adr r3, 8015800 <__ieee754_log+0x308>)
 80155be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c2:	4606      	mov	r6, r0
 80155c4:	460f      	mov	r7, r1
 80155c6:	f7eb f847 	bl	8000658 <__aeabi_dmul>
 80155ca:	a38f      	add	r3, pc, #572	; (adr r3, 8015808 <__ieee754_log+0x310>)
 80155cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d0:	4604      	mov	r4, r0
 80155d2:	460d      	mov	r5, r1
 80155d4:	4630      	mov	r0, r6
 80155d6:	4639      	mov	r1, r7
 80155d8:	f7eb f83e 	bl	8000658 <__aeabi_dmul>
 80155dc:	4602      	mov	r2, r0
 80155de:	460b      	mov	r3, r1
 80155e0:	4620      	mov	r0, r4
 80155e2:	4629      	mov	r1, r5
 80155e4:	e7ba      	b.n	801555c <__ieee754_log+0x64>
 80155e6:	a38a      	add	r3, pc, #552	; (adr r3, 8015810 <__ieee754_log+0x318>)
 80155e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ec:	4650      	mov	r0, sl
 80155ee:	4659      	mov	r1, fp
 80155f0:	f7eb f832 	bl	8000658 <__aeabi_dmul>
 80155f4:	4602      	mov	r2, r0
 80155f6:	460b      	mov	r3, r1
 80155f8:	2000      	movs	r0, #0
 80155fa:	499b      	ldr	r1, [pc, #620]	; (8015868 <__ieee754_log+0x370>)
 80155fc:	f7ea fe74 	bl	80002e8 <__aeabi_dsub>
 8015600:	4652      	mov	r2, sl
 8015602:	4606      	mov	r6, r0
 8015604:	460f      	mov	r7, r1
 8015606:	465b      	mov	r3, fp
 8015608:	4650      	mov	r0, sl
 801560a:	4659      	mov	r1, fp
 801560c:	f7eb f824 	bl	8000658 <__aeabi_dmul>
 8015610:	4602      	mov	r2, r0
 8015612:	460b      	mov	r3, r1
 8015614:	4630      	mov	r0, r6
 8015616:	4639      	mov	r1, r7
 8015618:	f7eb f81e 	bl	8000658 <__aeabi_dmul>
 801561c:	4606      	mov	r6, r0
 801561e:	460f      	mov	r7, r1
 8015620:	b914      	cbnz	r4, 8015628 <__ieee754_log+0x130>
 8015622:	4632      	mov	r2, r6
 8015624:	463b      	mov	r3, r7
 8015626:	e0a2      	b.n	801576e <__ieee754_log+0x276>
 8015628:	4620      	mov	r0, r4
 801562a:	f7ea ffab 	bl	8000584 <__aeabi_i2d>
 801562e:	a374      	add	r3, pc, #464	; (adr r3, 8015800 <__ieee754_log+0x308>)
 8015630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015634:	4680      	mov	r8, r0
 8015636:	4689      	mov	r9, r1
 8015638:	f7eb f80e 	bl	8000658 <__aeabi_dmul>
 801563c:	a372      	add	r3, pc, #456	; (adr r3, 8015808 <__ieee754_log+0x310>)
 801563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015642:	4604      	mov	r4, r0
 8015644:	460d      	mov	r5, r1
 8015646:	4640      	mov	r0, r8
 8015648:	4649      	mov	r1, r9
 801564a:	f7eb f805 	bl	8000658 <__aeabi_dmul>
 801564e:	e0a7      	b.n	80157a0 <__ieee754_log+0x2a8>
 8015650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015654:	f7ea fe4a 	bl	80002ec <__adddf3>
 8015658:	4602      	mov	r2, r0
 801565a:	460b      	mov	r3, r1
 801565c:	4650      	mov	r0, sl
 801565e:	4659      	mov	r1, fp
 8015660:	f7eb f924 	bl	80008ac <__aeabi_ddiv>
 8015664:	ec41 0b18 	vmov	d8, r0, r1
 8015668:	4620      	mov	r0, r4
 801566a:	f7ea ff8b 	bl	8000584 <__aeabi_i2d>
 801566e:	ec53 2b18 	vmov	r2, r3, d8
 8015672:	ec41 0b19 	vmov	d9, r0, r1
 8015676:	ec51 0b18 	vmov	r0, r1, d8
 801567a:	f7ea ffed 	bl	8000658 <__aeabi_dmul>
 801567e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8015682:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8015686:	9301      	str	r3, [sp, #4]
 8015688:	4602      	mov	r2, r0
 801568a:	460b      	mov	r3, r1
 801568c:	4680      	mov	r8, r0
 801568e:	4689      	mov	r9, r1
 8015690:	f7ea ffe2 	bl	8000658 <__aeabi_dmul>
 8015694:	a360      	add	r3, pc, #384	; (adr r3, 8015818 <__ieee754_log+0x320>)
 8015696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801569a:	4606      	mov	r6, r0
 801569c:	460f      	mov	r7, r1
 801569e:	f7ea ffdb 	bl	8000658 <__aeabi_dmul>
 80156a2:	a35f      	add	r3, pc, #380	; (adr r3, 8015820 <__ieee754_log+0x328>)
 80156a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a8:	f7ea fe20 	bl	80002ec <__adddf3>
 80156ac:	4632      	mov	r2, r6
 80156ae:	463b      	mov	r3, r7
 80156b0:	f7ea ffd2 	bl	8000658 <__aeabi_dmul>
 80156b4:	a35c      	add	r3, pc, #368	; (adr r3, 8015828 <__ieee754_log+0x330>)
 80156b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ba:	f7ea fe17 	bl	80002ec <__adddf3>
 80156be:	4632      	mov	r2, r6
 80156c0:	463b      	mov	r3, r7
 80156c2:	f7ea ffc9 	bl	8000658 <__aeabi_dmul>
 80156c6:	a35a      	add	r3, pc, #360	; (adr r3, 8015830 <__ieee754_log+0x338>)
 80156c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156cc:	f7ea fe0e 	bl	80002ec <__adddf3>
 80156d0:	4642      	mov	r2, r8
 80156d2:	464b      	mov	r3, r9
 80156d4:	f7ea ffc0 	bl	8000658 <__aeabi_dmul>
 80156d8:	a357      	add	r3, pc, #348	; (adr r3, 8015838 <__ieee754_log+0x340>)
 80156da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156de:	4680      	mov	r8, r0
 80156e0:	4689      	mov	r9, r1
 80156e2:	4630      	mov	r0, r6
 80156e4:	4639      	mov	r1, r7
 80156e6:	f7ea ffb7 	bl	8000658 <__aeabi_dmul>
 80156ea:	a355      	add	r3, pc, #340	; (adr r3, 8015840 <__ieee754_log+0x348>)
 80156ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f0:	f7ea fdfc 	bl	80002ec <__adddf3>
 80156f4:	4632      	mov	r2, r6
 80156f6:	463b      	mov	r3, r7
 80156f8:	f7ea ffae 	bl	8000658 <__aeabi_dmul>
 80156fc:	a352      	add	r3, pc, #328	; (adr r3, 8015848 <__ieee754_log+0x350>)
 80156fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015702:	f7ea fdf3 	bl	80002ec <__adddf3>
 8015706:	4632      	mov	r2, r6
 8015708:	463b      	mov	r3, r7
 801570a:	f7ea ffa5 	bl	8000658 <__aeabi_dmul>
 801570e:	460b      	mov	r3, r1
 8015710:	4602      	mov	r2, r0
 8015712:	4649      	mov	r1, r9
 8015714:	4640      	mov	r0, r8
 8015716:	f7ea fde9 	bl	80002ec <__adddf3>
 801571a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801571e:	9b01      	ldr	r3, [sp, #4]
 8015720:	3551      	adds	r5, #81	; 0x51
 8015722:	431d      	orrs	r5, r3
 8015724:	2d00      	cmp	r5, #0
 8015726:	4680      	mov	r8, r0
 8015728:	4689      	mov	r9, r1
 801572a:	dd48      	ble.n	80157be <__ieee754_log+0x2c6>
 801572c:	4b4e      	ldr	r3, [pc, #312]	; (8015868 <__ieee754_log+0x370>)
 801572e:	2200      	movs	r2, #0
 8015730:	4650      	mov	r0, sl
 8015732:	4659      	mov	r1, fp
 8015734:	f7ea ff90 	bl	8000658 <__aeabi_dmul>
 8015738:	4652      	mov	r2, sl
 801573a:	465b      	mov	r3, fp
 801573c:	f7ea ff8c 	bl	8000658 <__aeabi_dmul>
 8015740:	4602      	mov	r2, r0
 8015742:	460b      	mov	r3, r1
 8015744:	4606      	mov	r6, r0
 8015746:	460f      	mov	r7, r1
 8015748:	4640      	mov	r0, r8
 801574a:	4649      	mov	r1, r9
 801574c:	f7ea fdce 	bl	80002ec <__adddf3>
 8015750:	ec53 2b18 	vmov	r2, r3, d8
 8015754:	f7ea ff80 	bl	8000658 <__aeabi_dmul>
 8015758:	4680      	mov	r8, r0
 801575a:	4689      	mov	r9, r1
 801575c:	b964      	cbnz	r4, 8015778 <__ieee754_log+0x280>
 801575e:	4602      	mov	r2, r0
 8015760:	460b      	mov	r3, r1
 8015762:	4630      	mov	r0, r6
 8015764:	4639      	mov	r1, r7
 8015766:	f7ea fdbf 	bl	80002e8 <__aeabi_dsub>
 801576a:	4602      	mov	r2, r0
 801576c:	460b      	mov	r3, r1
 801576e:	4650      	mov	r0, sl
 8015770:	4659      	mov	r1, fp
 8015772:	f7ea fdb9 	bl	80002e8 <__aeabi_dsub>
 8015776:	e6d6      	b.n	8015526 <__ieee754_log+0x2e>
 8015778:	a321      	add	r3, pc, #132	; (adr r3, 8015800 <__ieee754_log+0x308>)
 801577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801577e:	ec51 0b19 	vmov	r0, r1, d9
 8015782:	f7ea ff69 	bl	8000658 <__aeabi_dmul>
 8015786:	a320      	add	r3, pc, #128	; (adr r3, 8015808 <__ieee754_log+0x310>)
 8015788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801578c:	4604      	mov	r4, r0
 801578e:	460d      	mov	r5, r1
 8015790:	ec51 0b19 	vmov	r0, r1, d9
 8015794:	f7ea ff60 	bl	8000658 <__aeabi_dmul>
 8015798:	4642      	mov	r2, r8
 801579a:	464b      	mov	r3, r9
 801579c:	f7ea fda6 	bl	80002ec <__adddf3>
 80157a0:	4602      	mov	r2, r0
 80157a2:	460b      	mov	r3, r1
 80157a4:	4630      	mov	r0, r6
 80157a6:	4639      	mov	r1, r7
 80157a8:	f7ea fd9e 	bl	80002e8 <__aeabi_dsub>
 80157ac:	4652      	mov	r2, sl
 80157ae:	465b      	mov	r3, fp
 80157b0:	f7ea fd9a 	bl	80002e8 <__aeabi_dsub>
 80157b4:	4602      	mov	r2, r0
 80157b6:	460b      	mov	r3, r1
 80157b8:	4620      	mov	r0, r4
 80157ba:	4629      	mov	r1, r5
 80157bc:	e7d9      	b.n	8015772 <__ieee754_log+0x27a>
 80157be:	4602      	mov	r2, r0
 80157c0:	460b      	mov	r3, r1
 80157c2:	4650      	mov	r0, sl
 80157c4:	4659      	mov	r1, fp
 80157c6:	f7ea fd8f 	bl	80002e8 <__aeabi_dsub>
 80157ca:	ec53 2b18 	vmov	r2, r3, d8
 80157ce:	f7ea ff43 	bl	8000658 <__aeabi_dmul>
 80157d2:	4606      	mov	r6, r0
 80157d4:	460f      	mov	r7, r1
 80157d6:	2c00      	cmp	r4, #0
 80157d8:	f43f af23 	beq.w	8015622 <__ieee754_log+0x12a>
 80157dc:	a308      	add	r3, pc, #32	; (adr r3, 8015800 <__ieee754_log+0x308>)
 80157de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e2:	ec51 0b19 	vmov	r0, r1, d9
 80157e6:	f7ea ff37 	bl	8000658 <__aeabi_dmul>
 80157ea:	a307      	add	r3, pc, #28	; (adr r3, 8015808 <__ieee754_log+0x310>)
 80157ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f0:	4604      	mov	r4, r0
 80157f2:	460d      	mov	r5, r1
 80157f4:	ec51 0b19 	vmov	r0, r1, d9
 80157f8:	e727      	b.n	801564a <__ieee754_log+0x152>
 80157fa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8015850 <__ieee754_log+0x358>
 80157fe:	e694      	b.n	801552a <__ieee754_log+0x32>
 8015800:	fee00000 	.word	0xfee00000
 8015804:	3fe62e42 	.word	0x3fe62e42
 8015808:	35793c76 	.word	0x35793c76
 801580c:	3dea39ef 	.word	0x3dea39ef
 8015810:	55555555 	.word	0x55555555
 8015814:	3fd55555 	.word	0x3fd55555
 8015818:	df3e5244 	.word	0xdf3e5244
 801581c:	3fc2f112 	.word	0x3fc2f112
 8015820:	96cb03de 	.word	0x96cb03de
 8015824:	3fc74664 	.word	0x3fc74664
 8015828:	94229359 	.word	0x94229359
 801582c:	3fd24924 	.word	0x3fd24924
 8015830:	55555593 	.word	0x55555593
 8015834:	3fe55555 	.word	0x3fe55555
 8015838:	d078c69f 	.word	0xd078c69f
 801583c:	3fc39a09 	.word	0x3fc39a09
 8015840:	1d8e78af 	.word	0x1d8e78af
 8015844:	3fcc71c5 	.word	0x3fcc71c5
 8015848:	9997fa04 	.word	0x9997fa04
 801584c:	3fd99999 	.word	0x3fd99999
	...
 8015858:	c3500000 	.word	0xc3500000
 801585c:	43500000 	.word	0x43500000
 8015860:	7fefffff 	.word	0x7fefffff
 8015864:	3ff00000 	.word	0x3ff00000
 8015868:	3fe00000 	.word	0x3fe00000

0801586c <_init>:
 801586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801586e:	bf00      	nop
 8015870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015872:	bc08      	pop	{r3}
 8015874:	469e      	mov	lr, r3
 8015876:	4770      	bx	lr

08015878 <_fini>:
 8015878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801587a:	bf00      	nop
 801587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801587e:	bc08      	pop	{r3}
 8015880:	469e      	mov	lr, r3
 8015882:	4770      	bx	lr
